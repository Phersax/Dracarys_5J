
robotic_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004740  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004908  08004908  00005908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004920  08004920  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004920  08004920  00005920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004928  08004928  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004928  08004928  00005928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800492c  0800492c  0000592c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004930  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000000c  0800493c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  0800493c  000062b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7e0  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219b  00000000  00000000  0001481c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  000169b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a18  00000000  00000000  000176a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217b7  00000000  00000000  000180c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103e2  00000000  00000000  00039877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd4ed  00000000  00000000  00049c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117146  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000365c  00000000  00000000  0011718c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0011a7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080048f0 	.word	0x080048f0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080048f0 	.word	0x080048f0

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2uiz>:
 80007d4:	004a      	lsls	r2, r1, #1
 80007d6:	d211      	bcs.n	80007fc <__aeabi_d2uiz+0x28>
 80007d8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007dc:	d211      	bcs.n	8000802 <__aeabi_d2uiz+0x2e>
 80007de:	d50d      	bpl.n	80007fc <__aeabi_d2uiz+0x28>
 80007e0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e8:	d40e      	bmi.n	8000808 <__aeabi_d2uiz+0x34>
 80007ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f6:	fa23 f002 	lsr.w	r0, r3, r2
 80007fa:	4770      	bx	lr
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	4770      	bx	lr
 8000802:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000806:	d102      	bne.n	800080e <__aeabi_d2uiz+0x3a>
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	4770      	bx	lr
 800080e:	f04f 0000 	mov.w	r0, #0
 8000812:	4770      	bx	lr

08000814 <__aeabi_uldivmod>:
 8000814:	b953      	cbnz	r3, 800082c <__aeabi_uldivmod+0x18>
 8000816:	b94a      	cbnz	r2, 800082c <__aeabi_uldivmod+0x18>
 8000818:	2900      	cmp	r1, #0
 800081a:	bf08      	it	eq
 800081c:	2800      	cmpeq	r0, #0
 800081e:	bf1c      	itt	ne
 8000820:	f04f 31ff 	movne.w	r1, #4294967295
 8000824:	f04f 30ff 	movne.w	r0, #4294967295
 8000828:	f000 b96a 	b.w	8000b00 <__aeabi_idiv0>
 800082c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000830:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000834:	f000 f806 	bl	8000844 <__udivmoddi4>
 8000838:	f8dd e004 	ldr.w	lr, [sp, #4]
 800083c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000840:	b004      	add	sp, #16
 8000842:	4770      	bx	lr

08000844 <__udivmoddi4>:
 8000844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000848:	9d08      	ldr	r5, [sp, #32]
 800084a:	460c      	mov	r4, r1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d14e      	bne.n	80008ee <__udivmoddi4+0xaa>
 8000850:	4694      	mov	ip, r2
 8000852:	458c      	cmp	ip, r1
 8000854:	4686      	mov	lr, r0
 8000856:	fab2 f282 	clz	r2, r2
 800085a:	d962      	bls.n	8000922 <__udivmoddi4+0xde>
 800085c:	b14a      	cbz	r2, 8000872 <__udivmoddi4+0x2e>
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	4091      	lsls	r1, r2
 8000864:	fa20 f303 	lsr.w	r3, r0, r3
 8000868:	fa0c fc02 	lsl.w	ip, ip, r2
 800086c:	4319      	orrs	r1, r3
 800086e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000872:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000876:	fa1f f68c 	uxth.w	r6, ip
 800087a:	fbb1 f4f7 	udiv	r4, r1, r7
 800087e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000882:	fb07 1114 	mls	r1, r7, r4, r1
 8000886:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800088a:	fb04 f106 	mul.w	r1, r4, r6
 800088e:	4299      	cmp	r1, r3
 8000890:	d90a      	bls.n	80008a8 <__udivmoddi4+0x64>
 8000892:	eb1c 0303 	adds.w	r3, ip, r3
 8000896:	f104 30ff 	add.w	r0, r4, #4294967295
 800089a:	f080 8112 	bcs.w	8000ac2 <__udivmoddi4+0x27e>
 800089e:	4299      	cmp	r1, r3
 80008a0:	f240 810f 	bls.w	8000ac2 <__udivmoddi4+0x27e>
 80008a4:	3c02      	subs	r4, #2
 80008a6:	4463      	add	r3, ip
 80008a8:	1a59      	subs	r1, r3, r1
 80008aa:	fa1f f38e 	uxth.w	r3, lr
 80008ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80008b2:	fb07 1110 	mls	r1, r7, r0, r1
 80008b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ba:	fb00 f606 	mul.w	r6, r0, r6
 80008be:	429e      	cmp	r6, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x94>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ca:	f080 80fc 	bcs.w	8000ac6 <__udivmoddi4+0x282>
 80008ce:	429e      	cmp	r6, r3
 80008d0:	f240 80f9 	bls.w	8000ac6 <__udivmoddi4+0x282>
 80008d4:	4463      	add	r3, ip
 80008d6:	3802      	subs	r0, #2
 80008d8:	1b9b      	subs	r3, r3, r6
 80008da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008de:	2100      	movs	r1, #0
 80008e0:	b11d      	cbz	r5, 80008ea <__udivmoddi4+0xa6>
 80008e2:	40d3      	lsrs	r3, r2
 80008e4:	2200      	movs	r2, #0
 80008e6:	e9c5 3200 	strd	r3, r2, [r5]
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d905      	bls.n	80008fe <__udivmoddi4+0xba>
 80008f2:	b10d      	cbz	r5, 80008f8 <__udivmoddi4+0xb4>
 80008f4:	e9c5 0100 	strd	r0, r1, [r5]
 80008f8:	2100      	movs	r1, #0
 80008fa:	4608      	mov	r0, r1
 80008fc:	e7f5      	b.n	80008ea <__udivmoddi4+0xa6>
 80008fe:	fab3 f183 	clz	r1, r3
 8000902:	2900      	cmp	r1, #0
 8000904:	d146      	bne.n	8000994 <__udivmoddi4+0x150>
 8000906:	42a3      	cmp	r3, r4
 8000908:	d302      	bcc.n	8000910 <__udivmoddi4+0xcc>
 800090a:	4290      	cmp	r0, r2
 800090c:	f0c0 80f0 	bcc.w	8000af0 <__udivmoddi4+0x2ac>
 8000910:	1a86      	subs	r6, r0, r2
 8000912:	eb64 0303 	sbc.w	r3, r4, r3
 8000916:	2001      	movs	r0, #1
 8000918:	2d00      	cmp	r5, #0
 800091a:	d0e6      	beq.n	80008ea <__udivmoddi4+0xa6>
 800091c:	e9c5 6300 	strd	r6, r3, [r5]
 8000920:	e7e3      	b.n	80008ea <__udivmoddi4+0xa6>
 8000922:	2a00      	cmp	r2, #0
 8000924:	f040 8090 	bne.w	8000a48 <__udivmoddi4+0x204>
 8000928:	eba1 040c 	sub.w	r4, r1, ip
 800092c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000930:	fa1f f78c 	uxth.w	r7, ip
 8000934:	2101      	movs	r1, #1
 8000936:	fbb4 f6f8 	udiv	r6, r4, r8
 800093a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093e:	fb08 4416 	mls	r4, r8, r6, r4
 8000942:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000946:	fb07 f006 	mul.w	r0, r7, r6
 800094a:	4298      	cmp	r0, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x11c>
 800094e:	eb1c 0303 	adds.w	r3, ip, r3
 8000952:	f106 34ff 	add.w	r4, r6, #4294967295
 8000956:	d202      	bcs.n	800095e <__udivmoddi4+0x11a>
 8000958:	4298      	cmp	r0, r3
 800095a:	f200 80cd 	bhi.w	8000af8 <__udivmoddi4+0x2b4>
 800095e:	4626      	mov	r6, r4
 8000960:	1a1c      	subs	r4, r3, r0
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb4 f0f8 	udiv	r0, r4, r8
 800096a:	fb08 4410 	mls	r4, r8, r0, r4
 800096e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000972:	fb00 f707 	mul.w	r7, r0, r7
 8000976:	429f      	cmp	r7, r3
 8000978:	d908      	bls.n	800098c <__udivmoddi4+0x148>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000982:	d202      	bcs.n	800098a <__udivmoddi4+0x146>
 8000984:	429f      	cmp	r7, r3
 8000986:	f200 80b0 	bhi.w	8000aea <__udivmoddi4+0x2a6>
 800098a:	4620      	mov	r0, r4
 800098c:	1bdb      	subs	r3, r3, r7
 800098e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000992:	e7a5      	b.n	80008e0 <__udivmoddi4+0x9c>
 8000994:	f1c1 0620 	rsb	r6, r1, #32
 8000998:	408b      	lsls	r3, r1
 800099a:	fa22 f706 	lsr.w	r7, r2, r6
 800099e:	431f      	orrs	r7, r3
 80009a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009a4:	fa04 f301 	lsl.w	r3, r4, r1
 80009a8:	ea43 030c 	orr.w	r3, r3, ip
 80009ac:	40f4      	lsrs	r4, r6
 80009ae:	fa00 f801 	lsl.w	r8, r0, r1
 80009b2:	0c38      	lsrs	r0, r7, #16
 80009b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009b8:	fbb4 fef0 	udiv	lr, r4, r0
 80009bc:	fa1f fc87 	uxth.w	ip, r7
 80009c0:	fb00 441e 	mls	r4, r0, lr, r4
 80009c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009c8:	fb0e f90c 	mul.w	r9, lr, ip
 80009cc:	45a1      	cmp	r9, r4
 80009ce:	fa02 f201 	lsl.w	r2, r2, r1
 80009d2:	d90a      	bls.n	80009ea <__udivmoddi4+0x1a6>
 80009d4:	193c      	adds	r4, r7, r4
 80009d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009da:	f080 8084 	bcs.w	8000ae6 <__udivmoddi4+0x2a2>
 80009de:	45a1      	cmp	r9, r4
 80009e0:	f240 8081 	bls.w	8000ae6 <__udivmoddi4+0x2a2>
 80009e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009e8:	443c      	add	r4, r7
 80009ea:	eba4 0409 	sub.w	r4, r4, r9
 80009ee:	fa1f f983 	uxth.w	r9, r3
 80009f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80009f6:	fb00 4413 	mls	r4, r0, r3, r4
 80009fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a02:	45a4      	cmp	ip, r4
 8000a04:	d907      	bls.n	8000a16 <__udivmoddi4+0x1d2>
 8000a06:	193c      	adds	r4, r7, r4
 8000a08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a0c:	d267      	bcs.n	8000ade <__udivmoddi4+0x29a>
 8000a0e:	45a4      	cmp	ip, r4
 8000a10:	d965      	bls.n	8000ade <__udivmoddi4+0x29a>
 8000a12:	3b02      	subs	r3, #2
 8000a14:	443c      	add	r4, r7
 8000a16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a1e:	eba4 040c 	sub.w	r4, r4, ip
 8000a22:	429c      	cmp	r4, r3
 8000a24:	46ce      	mov	lr, r9
 8000a26:	469c      	mov	ip, r3
 8000a28:	d351      	bcc.n	8000ace <__udivmoddi4+0x28a>
 8000a2a:	d04e      	beq.n	8000aca <__udivmoddi4+0x286>
 8000a2c:	b155      	cbz	r5, 8000a44 <__udivmoddi4+0x200>
 8000a2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a32:	eb64 040c 	sbc.w	r4, r4, ip
 8000a36:	fa04 f606 	lsl.w	r6, r4, r6
 8000a3a:	40cb      	lsrs	r3, r1
 8000a3c:	431e      	orrs	r6, r3
 8000a3e:	40cc      	lsrs	r4, r1
 8000a40:	e9c5 6400 	strd	r6, r4, [r5]
 8000a44:	2100      	movs	r1, #0
 8000a46:	e750      	b.n	80008ea <__udivmoddi4+0xa6>
 8000a48:	f1c2 0320 	rsb	r3, r2, #32
 8000a4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a54:	fa24 f303 	lsr.w	r3, r4, r3
 8000a58:	4094      	lsls	r4, r2
 8000a5a:	430c      	orrs	r4, r1
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a64:	fa1f f78c 	uxth.w	r7, ip
 8000a68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a70:	0c23      	lsrs	r3, r4, #16
 8000a72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a76:	fb00 f107 	mul.w	r1, r0, r7
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x24c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a86:	d22c      	bcs.n	8000ae2 <__udivmoddi4+0x29e>
 8000a88:	4299      	cmp	r1, r3
 8000a8a:	d92a      	bls.n	8000ae2 <__udivmoddi4+0x29e>
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	1a5b      	subs	r3, r3, r1
 8000a92:	b2a4      	uxth	r4, r4
 8000a94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a98:	fb08 3311 	mls	r3, r8, r1, r3
 8000a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa0:	fb01 f307 	mul.w	r3, r1, r7
 8000aa4:	42a3      	cmp	r3, r4
 8000aa6:	d908      	bls.n	8000aba <__udivmoddi4+0x276>
 8000aa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ab0:	d213      	bcs.n	8000ada <__udivmoddi4+0x296>
 8000ab2:	42a3      	cmp	r3, r4
 8000ab4:	d911      	bls.n	8000ada <__udivmoddi4+0x296>
 8000ab6:	3902      	subs	r1, #2
 8000ab8:	4464      	add	r4, ip
 8000aba:	1ae4      	subs	r4, r4, r3
 8000abc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ac0:	e739      	b.n	8000936 <__udivmoddi4+0xf2>
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	e6f0      	b.n	80008a8 <__udivmoddi4+0x64>
 8000ac6:	4608      	mov	r0, r1
 8000ac8:	e706      	b.n	80008d8 <__udivmoddi4+0x94>
 8000aca:	45c8      	cmp	r8, r9
 8000acc:	d2ae      	bcs.n	8000a2c <__udivmoddi4+0x1e8>
 8000ace:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ad2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ad6:	3801      	subs	r0, #1
 8000ad8:	e7a8      	b.n	8000a2c <__udivmoddi4+0x1e8>
 8000ada:	4631      	mov	r1, r6
 8000adc:	e7ed      	b.n	8000aba <__udivmoddi4+0x276>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	e799      	b.n	8000a16 <__udivmoddi4+0x1d2>
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	e7d4      	b.n	8000a90 <__udivmoddi4+0x24c>
 8000ae6:	46d6      	mov	lr, sl
 8000ae8:	e77f      	b.n	80009ea <__udivmoddi4+0x1a6>
 8000aea:	4463      	add	r3, ip
 8000aec:	3802      	subs	r0, #2
 8000aee:	e74d      	b.n	800098c <__udivmoddi4+0x148>
 8000af0:	4606      	mov	r6, r0
 8000af2:	4623      	mov	r3, r4
 8000af4:	4608      	mov	r0, r1
 8000af6:	e70f      	b.n	8000918 <__udivmoddi4+0xd4>
 8000af8:	3e02      	subs	r6, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	e730      	b.n	8000960 <__udivmoddi4+0x11c>
 8000afe:	bf00      	nop

08000b00 <__aeabi_idiv0>:
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b55      	ldr	r3, [pc, #340]	@ (8000c74 <MX_GPIO_Init+0x170>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a54      	ldr	r2, [pc, #336]	@ (8000c74 <MX_GPIO_Init+0x170>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b52      	ldr	r3, [pc, #328]	@ (8000c74 <MX_GPIO_Init+0x170>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b4e      	ldr	r3, [pc, #312]	@ (8000c74 <MX_GPIO_Init+0x170>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a4d      	ldr	r2, [pc, #308]	@ (8000c74 <MX_GPIO_Init+0x170>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b4b      	ldr	r3, [pc, #300]	@ (8000c74 <MX_GPIO_Init+0x170>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b47      	ldr	r3, [pc, #284]	@ (8000c74 <MX_GPIO_Init+0x170>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a46      	ldr	r2, [pc, #280]	@ (8000c74 <MX_GPIO_Init+0x170>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b44      	ldr	r3, [pc, #272]	@ (8000c74 <MX_GPIO_Init+0x170>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b40      	ldr	r3, [pc, #256]	@ (8000c74 <MX_GPIO_Init+0x170>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a3f      	ldr	r2, [pc, #252]	@ (8000c74 <MX_GPIO_Init+0x170>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c74 <MX_GPIO_Init+0x170>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIRECTION4_Pin|DIRECTION3_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	21e0      	movs	r1, #224	@ 0xe0
 8000b8e:	483a      	ldr	r0, [pc, #232]	@ (8000c78 <MX_GPIO_Init+0x174>)
 8000b90:	f001 fb44 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION2_GPIO_Port, DIRECTION2_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2110      	movs	r1, #16
 8000b98:	4838      	ldr	r0, [pc, #224]	@ (8000c7c <MX_GPIO_Init+0x178>)
 8000b9a:	f001 fb3f 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	4836      	ldr	r0, [pc, #216]	@ (8000c7c <MX_GPIO_Init+0x178>)
 8000ba4:	f001 fb3a 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION1_GPIO_Port, DIRECTION1_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2101      	movs	r1, #1
 8000bac:	4834      	ldr	r0, [pc, #208]	@ (8000c80 <MX_GPIO_Init+0x17c>)
 8000bae:	f001 fb35 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISABLE_button_Pin;
 8000bb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISABLE_button_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	482c      	ldr	r0, [pc, #176]	@ (8000c7c <MX_GPIO_Init+0x178>)
 8000bca:	f001 f993 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bce:	2320      	movs	r3, #32
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4824      	ldr	r0, [pc, #144]	@ (8000c78 <MX_GPIO_Init+0x174>)
 8000be6:	f001 f985 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIRECTION4_Pin|DIRECTION3_Pin;
 8000bea:	23c0      	movs	r3, #192	@ 0xc0
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	481d      	ldr	r0, [pc, #116]	@ (8000c78 <MX_GPIO_Init+0x174>)
 8000c02:	f001 f977 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRECTION2_Pin;
 8000c06:	2310      	movs	r3, #16
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION2_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4817      	ldr	r0, [pc, #92]	@ (8000c7c <MX_GPIO_Init+0x178>)
 8000c1e:	f001 f969 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000c22:	2320      	movs	r3, #32
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4810      	ldr	r0, [pc, #64]	@ (8000c7c <MX_GPIO_Init+0x178>)
 8000c3a:	f001 f95b 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRECTION1_Pin;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION1_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	480a      	ldr	r0, [pc, #40]	@ (8000c80 <MX_GPIO_Init+0x17c>)
 8000c56:	f001 f94d 	bl	8001ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2028      	movs	r0, #40	@ 0x28
 8000c60:	f001 f911 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c64:	2028      	movs	r0, #40	@ 0x28
 8000c66:	f001 f92a 	bl	8001ebe <HAL_NVIC_EnableIRQ>

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	@ 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020400 	.word	0x40020400
 8000c84:	00000000 	.word	0x00000000

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8e:	f000 ffad 	bl	8001bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c92:	f000 f8bb 	bl	8000e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c96:	f7ff ff35 	bl	8000b04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c9a:	f000 ff0b 	bl	8001ab4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000c9e:	f000 fb9d 	bl	80013dc <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ca2:	f000 fc63 	bl	800156c <MX_TIM5_Init>
  MX_TIM1_Init();
 8000ca6:	f000 fa75 	bl	8001194 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000caa:	f000 fb15 	bl	80012d8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000cae:	f000 fbf9 	bl	80014a4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000cb2:	f000 fcbf 	bl	8001634 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 8000cb6:	4846      	ldr	r0, [pc, #280]	@ (8000dd0 <main+0x148>)
 8000cb8:	f002 f91a 	bl	8002ef0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000cbc:	4845      	ldr	r0, [pc, #276]	@ (8000dd4 <main+0x14c>)
 8000cbe:	f002 f917 	bl	8002ef0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8000cc2:	4845      	ldr	r0, [pc, #276]	@ (8000dd8 <main+0x150>)
 8000cc4:	f002 f914 	bl	8002ef0 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET); //ENABLE
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2120      	movs	r1, #32
 8000ccc:	4843      	ldr	r0, [pc, #268]	@ (8000ddc <main+0x154>)
 8000cce:	f001 faa5 	bl	800221c <HAL_GPIO_WritePin>
	/*
	 stepper_init(obj, resol, microstep, enable_port, direction_port, timer slave, timerpwm*/
	stepper_init(&stp1, &htim1, &htim4, 1.8, 5* htim1.Init.Prescaler, DIRECTION1_GPIO_Port,
 8000cd2:	4b43      	ldr	r3, [pc, #268]	@ (8000de0 <main+0x158>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	461a      	mov	r2, r3
 8000cda:	0092      	lsls	r2, r2, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	9201      	str	r2, [sp, #4]
 8000ce4:	4a3f      	ldr	r2, [pc, #252]	@ (8000de4 <main+0x15c>)
 8000ce6:	9200      	str	r2, [sp, #0]
 8000ce8:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8000de8 <main+0x160>
 8000cec:	4a38      	ldr	r2, [pc, #224]	@ (8000dd0 <main+0x148>)
 8000cee:	493c      	ldr	r1, [pc, #240]	@ (8000de0 <main+0x158>)
 8000cf0:	483e      	ldr	r0, [pc, #248]	@ (8000dec <main+0x164>)
 8000cf2:	f000 f8ff 	bl	8000ef4 <stepper_init>
			DIRECTION1_Pin);

	stepper_init(&stp2, &htim2, &htim3, 1.8, 6.4* htim2.Init.Prescaler, DIRECTION2_GPIO_Port,
 8000cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8000df0 <main+0x168>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fcf0 	bl	80006e0 <__aeabi_ui2d>
 8000d00:	a331      	add	r3, pc, #196	@ (adr r3, 8000dc8 <main+0x140>)
 8000d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d06:	f7ff fa7f 	bl	8000208 <__aeabi_dmul>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	f7ff fd5f 	bl	80007d4 <__aeabi_d2uiz>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	2210      	movs	r2, #16
 8000d1c:	9201      	str	r2, [sp, #4]
 8000d1e:	4a2f      	ldr	r2, [pc, #188]	@ (8000ddc <main+0x154>)
 8000d20:	9200      	str	r2, [sp, #0]
 8000d22:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8000de8 <main+0x160>
 8000d26:	4a2b      	ldr	r2, [pc, #172]	@ (8000dd4 <main+0x14c>)
 8000d28:	4931      	ldr	r1, [pc, #196]	@ (8000df0 <main+0x168>)
 8000d2a:	4832      	ldr	r0, [pc, #200]	@ (8000df4 <main+0x16c>)
 8000d2c:	f000 f8e2 	bl	8000ef4 <stepper_init>
			DIRECTION2_Pin);
	stepper_init(&stp3, &htim2, &htim3, 1.8, 6.4* htim2.Init.Prescaler, DIRECTION3_GPIO_Port,
 8000d30:	4b2f      	ldr	r3, [pc, #188]	@ (8000df0 <main+0x168>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fcd3 	bl	80006e0 <__aeabi_ui2d>
 8000d3a:	a323      	add	r3, pc, #140	@ (adr r3, 8000dc8 <main+0x140>)
 8000d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d40:	f7ff fa62 	bl	8000208 <__aeabi_dmul>
 8000d44:	4602      	mov	r2, r0
 8000d46:	460b      	mov	r3, r1
 8000d48:	4610      	mov	r0, r2
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f7ff fd42 	bl	80007d4 <__aeabi_d2uiz>
 8000d50:	4603      	mov	r3, r0
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	2280      	movs	r2, #128	@ 0x80
 8000d56:	9201      	str	r2, [sp, #4]
 8000d58:	4a27      	ldr	r2, [pc, #156]	@ (8000df8 <main+0x170>)
 8000d5a:	9200      	str	r2, [sp, #0]
 8000d5c:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8000de8 <main+0x160>
 8000d60:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd4 <main+0x14c>)
 8000d62:	4923      	ldr	r1, [pc, #140]	@ (8000df0 <main+0x168>)
 8000d64:	4825      	ldr	r0, [pc, #148]	@ (8000dfc <main+0x174>)
 8000d66:	f000 f8c5 	bl	8000ef4 <stepper_init>
			DIRECTION3_Pin);
	stepper_init(&stp4, &htim8, &htim5, 1.8, 4* htim8.Init.Prescaler, DIRECTION4_GPIO_Port,
 8000d6a:	4b25      	ldr	r3, [pc, #148]	@ (8000e00 <main+0x178>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	2240      	movs	r2, #64	@ 0x40
 8000d76:	9201      	str	r2, [sp, #4]
 8000d78:	4a1f      	ldr	r2, [pc, #124]	@ (8000df8 <main+0x170>)
 8000d7a:	9200      	str	r2, [sp, #0]
 8000d7c:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8000de8 <main+0x160>
 8000d80:	4a15      	ldr	r2, [pc, #84]	@ (8000dd8 <main+0x150>)
 8000d82:	491f      	ldr	r1, [pc, #124]	@ (8000e00 <main+0x178>)
 8000d84:	481f      	ldr	r0, [pc, #124]	@ (8000e04 <main+0x17c>)
 8000d86:	f000 f8b5 	bl	8000ef4 <stepper_init>

	//stepper_move(&stp1, CLOCKWISE, 150, 2); //SET REGISTERS FOR THE MOVEMENT
	//HAL_TIM_PWM_Start_IT(stp1.pwm_timer, TIM_CHANNEL_1); //START PWM
	//HAL_Delay(2000);

	stepper_move(&stp2, CLOCKWISE, 45, 2); //SET REGISTERS FOR THE MOVEMENT
 8000d8a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8000d8e:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8000e08 <main+0x180>
 8000d92:	2101      	movs	r1, #1
 8000d94:	4817      	ldr	r0, [pc, #92]	@ (8000df4 <main+0x16c>)
 8000d96:	f000 f8e7 	bl	8000f68 <stepper_move>
	stepper_move(&stp3, COUNTERCLOCKWISE, 45, 2); //SET REGISTERS FOR THE MOVEMENT
 8000d9a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8000d9e:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8000e08 <main+0x180>
 8000da2:	2100      	movs	r1, #0
 8000da4:	4815      	ldr	r0, [pc, #84]	@ (8000dfc <main+0x174>)
 8000da6:	f000 f8df 	bl	8000f68 <stepper_move>
	HAL_TIM_PWM_Start_IT(stp2.pwm_timer, TIM_CHANNEL_1); //START PWM
 8000daa:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <main+0x16c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f002 f967 	bl	8003084 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(stp3.pwm_timer, TIM_CHANNEL_2); //START PWM
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <main+0x174>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2104      	movs	r1, #4
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 f961 	bl	8003084 <HAL_TIM_PWM_Start_IT>
	//HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, 0); //ENABLE
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000dc2:	bf00      	nop
 8000dc4:	e7fd      	b.n	8000dc2 <main+0x13a>
 8000dc6:	bf00      	nop
 8000dc8:	9999999a 	.word	0x9999999a
 8000dcc:	40199999 	.word	0x40199999
 8000dd0:	20000190 	.word	0x20000190
 8000dd4:	20000148 	.word	0x20000148
 8000dd8:	200001d8 	.word	0x200001d8
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	200000b8 	.word	0x200000b8
 8000de4:	40020400 	.word	0x40020400
 8000de8:	3fe66666 	.word	0x3fe66666
 8000dec:	20000028 	.word	0x20000028
 8000df0:	20000100 	.word	0x20000100
 8000df4:	2000004c 	.word	0x2000004c
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	20000070 	.word	0x20000070
 8000e00:	20000220 	.word	0x20000220
 8000e04:	20000094 	.word	0x20000094
 8000e08:	42340000 	.word	0x42340000

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b094      	sub	sp, #80	@ 0x50
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	2234      	movs	r2, #52	@ 0x34
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fd3c 	bl	8004898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <SystemClock_Config+0xd4>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	4a29      	ldr	r2, [pc, #164]	@ (8000ee0 <SystemClock_Config+0xd4>)
 8000e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e40:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <SystemClock_Config+0xd4>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <SystemClock_Config+0xd8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e58:	4a22      	ldr	r2, [pc, #136]	@ (8000ee4 <SystemClock_Config+0xd8>)
 8000e5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <SystemClock_Config+0xd8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e74:	2310      	movs	r3, #16
 8000e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e80:	2310      	movs	r3, #16
 8000e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e84:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fd3a 	bl	8002914 <HAL_RCC_OscConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ea6:	f000 f81f 	bl	8000ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eaa:	230f      	movs	r3, #15
 8000eac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 f9da 	bl	8002280 <HAL_RCC_ClockConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ed2:	f000 f809 	bl	8000ee8 <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3750      	adds	r7, #80	@ 0x50
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <Error_Handler+0x8>

08000ef4 <stepper_init>:
//definisco l'oggetto stepper con i seguenti parametri

void stepper_init(stepper_obj *stp, TIM_HandleTypeDef *pwm_timer,
		TIM_HandleTypeDef *position_timer, float stepper_resolution,
		uint16_t microstep, GPIO_TypeDef *direction_port,
		uint16_t direction_pin) {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6178      	str	r0, [r7, #20]
 8000efc:	6139      	str	r1, [r7, #16]
 8000efe:	60fa      	str	r2, [r7, #12]
 8000f00:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f04:	80fb      	strh	r3, [r7, #6]

	stp->position_timer = position_timer;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	605a      	str	r2, [r3, #4]
	stp->pwm_timer = pwm_timer;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	601a      	str	r2, [r3, #0]
	stp->direction_port = direction_port;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	6a3a      	ldr	r2, [r7, #32]
 8000f16:	60da      	str	r2, [r3, #12]
	stp->direction_pin = direction_pin;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f1c:	821a      	strh	r2, [r3, #16]

	stp->stepper_resolution = stepper_resolution;
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	68ba      	ldr	r2, [r7, #8]
 8000f22:	615a      	str	r2, [r3, #20]
	stp->microstep = microstep;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	88fa      	ldrh	r2, [r7, #6]
 8000f28:	839a      	strh	r2, [r3, #28]
	stp->step_per_rev = 360.0f / stepper_resolution; // 360°/resolution
 8000f2a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000f64 <stepper_init+0x70>
 8000f2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	edc3 7a06 	vstr	s15, [r3, #24]
	stp->step_scale = stp->step_per_rev * microstep;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	ee07 3a90 	vmov	s15, r3
 8000f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8000f56:	bf00      	nop
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	43b40000 	.word	0x43b40000

08000f68 <stepper_move>:

void stepper_move(stepper_obj *stp, direction_str direction, float position,
		float freq) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	460b      	mov	r3, r1
 8000f72:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f76:	edc7 0a00 	vstr	s1, [r7]
 8000f7a:	72fb      	strb	r3, [r7, #11]

	int n_steps = stp->step_scale * position / 360.0f; //[n_steps]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f82:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f8a:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fd0 <stepper_move+0x68>
 8000f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f96:	ee17 3a90 	vmov	r3, s15
 8000f9a:	617b      	str	r3, [r7, #20]

	//float freq_steps = stp->step_scale * freq / 360.0f; //[n_steps/s]

	//trapezoidal_profile(freq_steps, position);

	HAL_GPIO_WritePin(stp->direction_port, stp->direction_pin, direction); //DIRECTION
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	68d8      	ldr	r0, [r3, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	8a1b      	ldrh	r3, [r3, #16]
 8000fa4:	7afa      	ldrb	r2, [r7, #11]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f001 f938 	bl	800221c <HAL_GPIO_WritePin>

	//set arr of timer-slave for the position step count
	__HAL_TIM_SET_AUTORELOAD(stp->position_timer, n_steps - 1);
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	1e5a      	subs	r2, r3, #1
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	1e5a      	subs	r2, r3, #1
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	60da      	str	r2, [r3, #12]
	reset_timers(stp);
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f806 	bl	8000fd4 <reset_timers>

}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	43b40000 	.word	0x43b40000

08000fd4 <reset_timers>:

void reset_timers(stepper_obj *stp) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(stp->position_timer, 0);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(stp->pwm_timer, 0);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	@ 0x24
	stp->pwm_timer->Instance->EGR = TIM_EGR_UG; //reset the trigger
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	615a      	str	r2, [r3, #20]
	stp->position_timer->Instance->EGR = TIM_EGR_UG; //reset the trigger
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2201      	movs	r2, #1
 8001002:	615a      	str	r2, [r3, #20]

}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <HAL_MspInit+0x4c>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	4a0f      	ldr	r2, [pc, #60]	@ (800105c <HAL_MspInit+0x4c>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001024:	6453      	str	r3, [r2, #68]	@ 0x44
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <HAL_MspInit+0x4c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <HAL_MspInit+0x4c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	4a08      	ldr	r2, [pc, #32]	@ (800105c <HAL_MspInit+0x4c>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001040:	6413      	str	r3, [r2, #64]	@ 0x40
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_MspInit+0x4c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800104e:	2006      	movs	r0, #6
 8001050:	f000 ff0e 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <NMI_Handler+0x4>

08001068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <MemManage_Handler+0x4>

08001078 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <UsageFault_Handler+0x4>

08001088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b6:	f000 fdeb 	bl	8001c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80010c6:	f002 f9b1 	bl	800342c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000b8 	.word	0x200000b8

080010d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010da:	f002 f9a7 	bl	800342c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000b8 	.word	0x200000b8

080010e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80010ee:	f002 f99d 	bl	800342c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200000b8 	.word	0x200000b8

080010fc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <TIM1_CC_IRQHandler+0x10>)
 8001102:	f002 f993 	bl	800342c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200000b8 	.word	0x200000b8

08001110 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <TIM2_IRQHandler+0x10>)
 8001116:	f002 f989 	bl	800342c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000100 	.word	0x20000100

08001124 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <TIM3_IRQHandler+0x10>)
 800112a:	f002 f97f 	bl	800342c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000148 	.word	0x20000148

08001138 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <TIM4_IRQHandler+0x10>)
 800113e:	f002 f975 	bl	800342c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000190 	.word	0x20000190

0800114c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DISABLE_button_Pin);
 8001150:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001154:	f001 f87c 	bl	8002250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <TIM5_IRQHandler+0x10>)
 8001162:	f002 f963 	bl	800342c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200001d8 	.word	0x200001d8

08001170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <SystemInit+0x20>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <SystemInit+0x20>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b096      	sub	sp, #88	@ 0x58
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
 80011c2:	615a      	str	r2, [r3, #20]
 80011c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2220      	movs	r2, #32
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f003 fb63 	bl	8004898 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011d2:	4b3f      	ldr	r3, [pc, #252]	@ (80012d0 <MX_TIM1_Init+0x13c>)
 80011d4:	4a3f      	ldr	r2, [pc, #252]	@ (80012d4 <MX_TIM1_Init+0x140>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 80011d8:	4b3d      	ldr	r3, [pc, #244]	@ (80012d0 <MX_TIM1_Init+0x13c>)
 80011da:	2208      	movs	r2, #8
 80011dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b3c      	ldr	r3, [pc, #240]	@ (80012d0 <MX_TIM1_Init+0x13c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011e4:	4b3a      	ldr	r3, [pc, #232]	@ (80012d0 <MX_TIM1_Init+0x13c>)
 80011e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b38      	ldr	r3, [pc, #224]	@ (80012d0 <MX_TIM1_Init+0x13c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011f2:	4b37      	ldr	r3, [pc, #220]	@ (80012d0 <MX_TIM1_Init+0x13c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f8:	4b35      	ldr	r3, [pc, #212]	@ (80012d0 <MX_TIM1_Init+0x13c>)
 80011fa:	2280      	movs	r2, #128	@ 0x80
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011fe:	4834      	ldr	r0, [pc, #208]	@ (80012d0 <MX_TIM1_Init+0x13c>)
 8001200:	f001 fe26 	bl	8002e50 <HAL_TIM_Base_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800120a:	f7ff fe6d 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001212:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001214:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001218:	4619      	mov	r1, r3
 800121a:	482d      	ldr	r0, [pc, #180]	@ (80012d0 <MX_TIM1_Init+0x13c>)
 800121c:	f002 fab8 	bl	8003790 <HAL_TIM_ConfigClockSource>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001226:	f7ff fe5f 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800122a:	4829      	ldr	r0, [pc, #164]	@ (80012d0 <MX_TIM1_Init+0x13c>)
 800122c:	f001 fed0 	bl	8002fd0 <HAL_TIM_PWM_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001236:	f7ff fe57 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800123a:	2320      	movs	r3, #32
 800123c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800123e:	2380      	movs	r3, #128	@ 0x80
 8001240:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001242:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001246:	4619      	mov	r1, r3
 8001248:	4821      	ldr	r0, [pc, #132]	@ (80012d0 <MX_TIM1_Init+0x13c>)
 800124a:	f002 ff7f 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001254:	f7ff fe48 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001258:	2360      	movs	r3, #96	@ 0x60
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 800125c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001260:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001266:	2300      	movs	r3, #0
 8001268:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800126a:	2304      	movs	r3, #4
 800126c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127a:	2200      	movs	r2, #0
 800127c:	4619      	mov	r1, r3
 800127e:	4814      	ldr	r0, [pc, #80]	@ (80012d0 <MX_TIM1_Init+0x13c>)
 8001280:	f002 f9c4 	bl	800360c <HAL_TIM_PWM_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800128a:	f7ff fe2d 	bl	8000ee8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4807      	ldr	r0, [pc, #28]	@ (80012d0 <MX_TIM1_Init+0x13c>)
 80012b2:	f002 ffc7 	bl	8004244 <HAL_TIMEx_ConfigBreakDeadTime>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80012bc:	f7ff fe14 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012c0:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <MX_TIM1_Init+0x13c>)
 80012c2:	f000 fb25 	bl	8001910 <HAL_TIM_MspPostInit>

}
 80012c6:	bf00      	nop
 80012c8:	3758      	adds	r7, #88	@ 0x58
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000b8 	.word	0x200000b8
 80012d4:	40010000 	.word	0x40010000

080012d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	@ 0x38
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	f107 0320 	add.w	r3, r7, #32
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	615a      	str	r2, [r3, #20]
 8001306:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001308:	4b33      	ldr	r3, [pc, #204]	@ (80013d8 <MX_TIM2_Init+0x100>)
 800130a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800130e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8001310:	4b31      	ldr	r3, [pc, #196]	@ (80013d8 <MX_TIM2_Init+0x100>)
 8001312:	2208      	movs	r2, #8
 8001314:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b30      	ldr	r3, [pc, #192]	@ (80013d8 <MX_TIM2_Init+0x100>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800131c:	4b2e      	ldr	r3, [pc, #184]	@ (80013d8 <MX_TIM2_Init+0x100>)
 800131e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001322:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b2c      	ldr	r3, [pc, #176]	@ (80013d8 <MX_TIM2_Init+0x100>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132a:	4b2b      	ldr	r3, [pc, #172]	@ (80013d8 <MX_TIM2_Init+0x100>)
 800132c:	2280      	movs	r2, #128	@ 0x80
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001330:	4829      	ldr	r0, [pc, #164]	@ (80013d8 <MX_TIM2_Init+0x100>)
 8001332:	f001 fd8d 	bl	8002e50 <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800133c:	f7ff fdd4 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001344:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800134a:	4619      	mov	r1, r3
 800134c:	4822      	ldr	r0, [pc, #136]	@ (80013d8 <MX_TIM2_Init+0x100>)
 800134e:	f002 fa1f 	bl	8003790 <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001358:	f7ff fdc6 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800135c:	481e      	ldr	r0, [pc, #120]	@ (80013d8 <MX_TIM2_Init+0x100>)
 800135e:	f001 fe37 	bl	8002fd0 <HAL_TIM_PWM_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001368:	f7ff fdbe 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800136c:	2320      	movs	r3, #32
 800136e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4619      	mov	r1, r3
 800137a:	4817      	ldr	r0, [pc, #92]	@ (80013d8 <MX_TIM2_Init+0x100>)
 800137c:	f002 fee6 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001386:	f7ff fdaf 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	@ 0x60
 800138c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32768;
 800138e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001392:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001398:	2304      	movs	r3, #4
 800139a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2200      	movs	r2, #0
 80013a0:	4619      	mov	r1, r3
 80013a2:	480d      	ldr	r0, [pc, #52]	@ (80013d8 <MX_TIM2_Init+0x100>)
 80013a4:	f002 f932 	bl	800360c <HAL_TIM_PWM_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80013ae:	f7ff fd9b 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2204      	movs	r2, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4807      	ldr	r0, [pc, #28]	@ (80013d8 <MX_TIM2_Init+0x100>)
 80013ba:	f002 f927 	bl	800360c <HAL_TIM_PWM_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80013c4:	f7ff fd90 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013c8:	4803      	ldr	r0, [pc, #12]	@ (80013d8 <MX_TIM2_Init+0x100>)
 80013ca:	f000 faa1 	bl	8001910 <HAL_TIM_MspPostInit>

}
 80013ce:	bf00      	nop
 80013d0:	3738      	adds	r7, #56	@ 0x38
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000100 	.word	0x20000100

080013dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	@ 0x30
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001408:	4b24      	ldr	r3, [pc, #144]	@ (800149c <MX_TIM3_Init+0xc0>)
 800140a:	4a25      	ldr	r2, [pc, #148]	@ (80014a0 <MX_TIM3_Init+0xc4>)
 800140c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 800140e:	4b23      	ldr	r3, [pc, #140]	@ (800149c <MX_TIM3_Init+0xc0>)
 8001410:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001414:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b21      	ldr	r3, [pc, #132]	@ (800149c <MX_TIM3_Init+0xc0>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 800141c:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <MX_TIM3_Init+0xc0>)
 800141e:	22c7      	movs	r2, #199	@ 0xc7
 8001420:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b1e      	ldr	r3, [pc, #120]	@ (800149c <MX_TIM3_Init+0xc0>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <MX_TIM3_Init+0xc0>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800142e:	481b      	ldr	r0, [pc, #108]	@ (800149c <MX_TIM3_Init+0xc0>)
 8001430:	f001 fd0e 	bl	8002e50 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800143a:	f7ff fd55 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001442:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	4619      	mov	r1, r3
 800144a:	4814      	ldr	r0, [pc, #80]	@ (800149c <MX_TIM3_Init+0xc0>)
 800144c:	f002 f9a0 	bl	8003790 <HAL_TIM_ConfigClockSource>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001456:	f7ff fd47 	bl	8000ee8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800145a:	2306      	movs	r3, #6
 800145c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800145e:	2310      	movs	r3, #16
 8001460:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <MX_TIM3_Init+0xc0>)
 800146a:	f002 fa58 	bl	800391e <HAL_TIM_SlaveConfigSynchro>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001474:	f7ff fd38 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_TIM3_Init+0xc0>)
 8001486:	f002 fe61 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001490:	f7ff fd2a 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3730      	adds	r7, #48	@ 0x30
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000148 	.word	0x20000148
 80014a0:	40000400 	.word	0x40000400

080014a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	@ 0x30
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	f107 0320 	add.w	r3, r7, #32
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014d0:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <MX_TIM4_Init+0xc0>)
 80014d2:	4a25      	ldr	r2, [pc, #148]	@ (8001568 <MX_TIM4_Init+0xc4>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 65535;
 80014d6:	4b23      	ldr	r3, [pc, #140]	@ (8001564 <MX_TIM4_Init+0xc0>)
 80014d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <MX_TIM4_Init+0xc0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <MX_TIM4_Init+0xc0>)
 80014e6:	22c7      	movs	r2, #199	@ 0xc7
 80014e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <MX_TIM4_Init+0xc0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <MX_TIM4_Init+0xc0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014f6:	481b      	ldr	r0, [pc, #108]	@ (8001564 <MX_TIM4_Init+0xc0>)
 80014f8:	f001 fcaa 	bl	8002e50 <HAL_TIM_Base_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001502:	f7ff fcf1 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001506:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800150a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800150c:	f107 0320 	add.w	r3, r7, #32
 8001510:	4619      	mov	r1, r3
 8001512:	4814      	ldr	r0, [pc, #80]	@ (8001564 <MX_TIM4_Init+0xc0>)
 8001514:	f002 f93c 	bl	8003790 <HAL_TIM_ConfigClockSource>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800151e:	f7ff fce3 	bl	8000ee8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001522:	2306      	movs	r3, #6
 8001524:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	4619      	mov	r1, r3
 8001530:	480c      	ldr	r0, [pc, #48]	@ (8001564 <MX_TIM4_Init+0xc0>)
 8001532:	f002 f9f4 	bl	800391e <HAL_TIM_SlaveConfigSynchro>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800153c:	f7ff fcd4 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_TIM4_Init+0xc0>)
 800154e:	f002 fdfd 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8001558:	f7ff fcc6 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3730      	adds	r7, #48	@ 0x30
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000190 	.word	0x20000190
 8001568:	40000800 	.word	0x40000800

0800156c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	@ 0x30
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	f107 0320 	add.w	r3, r7, #32
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001598:	4b24      	ldr	r3, [pc, #144]	@ (800162c <MX_TIM5_Init+0xc0>)
 800159a:	4a25      	ldr	r2, [pc, #148]	@ (8001630 <MX_TIM5_Init+0xc4>)
 800159c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 800159e:	4b23      	ldr	r3, [pc, #140]	@ (800162c <MX_TIM5_Init+0xc0>)
 80015a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <MX_TIM5_Init+0xc0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 199;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <MX_TIM5_Init+0xc0>)
 80015ae:	22c7      	movs	r2, #199	@ 0xc7
 80015b0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <MX_TIM5_Init+0xc0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <MX_TIM5_Init+0xc0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015be:	481b      	ldr	r0, [pc, #108]	@ (800162c <MX_TIM5_Init+0xc0>)
 80015c0:	f001 fc46 	bl	8002e50 <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 80015ca:	f7ff fc8d 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015d4:	f107 0320 	add.w	r3, r7, #32
 80015d8:	4619      	mov	r1, r3
 80015da:	4814      	ldr	r0, [pc, #80]	@ (800162c <MX_TIM5_Init+0xc0>)
 80015dc:	f002 f8d8 	bl	8003790 <HAL_TIM_ConfigClockSource>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80015e6:	f7ff fc7f 	bl	8000ee8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80015ea:	2306      	movs	r3, #6
 80015ec:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80015ee:	2330      	movs	r3, #48	@ 0x30
 80015f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <MX_TIM5_Init+0xc0>)
 80015fa:	f002 f990 	bl	800391e <HAL_TIM_SlaveConfigSynchro>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001604:	f7ff fc70 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_TIM5_Init+0xc0>)
 8001616:	f002 fd99 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 8001620:	f7ff fc62 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3730      	adds	r7, #48	@ 0x30
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200001d8 	.word	0x200001d8
 8001630:	40000c00 	.word	0x40000c00

08001634 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b096      	sub	sp, #88	@ 0x58
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001652:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
 8001662:	615a      	str	r2, [r3, #20]
 8001664:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2220      	movs	r2, #32
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f003 f913 	bl	8004898 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001672:	4b3f      	ldr	r3, [pc, #252]	@ (8001770 <MX_TIM8_Init+0x13c>)
 8001674:	4a3f      	ldr	r2, [pc, #252]	@ (8001774 <MX_TIM8_Init+0x140>)
 8001676:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8;
 8001678:	4b3d      	ldr	r3, [pc, #244]	@ (8001770 <MX_TIM8_Init+0x13c>)
 800167a:	2208      	movs	r2, #8
 800167c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b3c      	ldr	r3, [pc, #240]	@ (8001770 <MX_TIM8_Init+0x13c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001684:	4b3a      	ldr	r3, [pc, #232]	@ (8001770 <MX_TIM8_Init+0x13c>)
 8001686:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800168a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168c:	4b38      	ldr	r3, [pc, #224]	@ (8001770 <MX_TIM8_Init+0x13c>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001692:	4b37      	ldr	r3, [pc, #220]	@ (8001770 <MX_TIM8_Init+0x13c>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001698:	4b35      	ldr	r3, [pc, #212]	@ (8001770 <MX_TIM8_Init+0x13c>)
 800169a:	2280      	movs	r2, #128	@ 0x80
 800169c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800169e:	4834      	ldr	r0, [pc, #208]	@ (8001770 <MX_TIM8_Init+0x13c>)
 80016a0:	f001 fbd6 	bl	8002e50 <HAL_TIM_Base_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80016aa:	f7ff fc1d 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016b4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016b8:	4619      	mov	r1, r3
 80016ba:	482d      	ldr	r0, [pc, #180]	@ (8001770 <MX_TIM8_Init+0x13c>)
 80016bc:	f002 f868 	bl	8003790 <HAL_TIM_ConfigClockSource>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016c6:	f7ff fc0f 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016ca:	4829      	ldr	r0, [pc, #164]	@ (8001770 <MX_TIM8_Init+0x13c>)
 80016cc:	f001 fc80 	bl	8002fd0 <HAL_TIM_PWM_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016d6:	f7ff fc07 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016da:	2320      	movs	r3, #32
 80016dc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80016de:	2380      	movs	r3, #128	@ 0x80
 80016e0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016e6:	4619      	mov	r1, r3
 80016e8:	4821      	ldr	r0, [pc, #132]	@ (8001770 <MX_TIM8_Init+0x13c>)
 80016ea:	f002 fd2f 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80016f4:	f7ff fbf8 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f8:	2360      	movs	r3, #96	@ 0x60
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 80016fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001700:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001702:	2300      	movs	r3, #0
 8001704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001706:	2300      	movs	r3, #0
 8001708:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800170a:	2304      	movs	r3, #4
 800170c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001716:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171a:	2200      	movs	r2, #0
 800171c:	4619      	mov	r1, r3
 800171e:	4814      	ldr	r0, [pc, #80]	@ (8001770 <MX_TIM8_Init+0x13c>)
 8001720:	f001 ff74 	bl	800360c <HAL_TIM_PWM_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800172a:	f7ff fbdd 	bl	8000ee8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001742:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001746:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	4619      	mov	r1, r3
 8001750:	4807      	ldr	r0, [pc, #28]	@ (8001770 <MX_TIM8_Init+0x13c>)
 8001752:	f002 fd77 	bl	8004244 <HAL_TIMEx_ConfigBreakDeadTime>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 800175c:	f7ff fbc4 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001760:	4803      	ldr	r0, [pc, #12]	@ (8001770 <MX_TIM8_Init+0x13c>)
 8001762:	f000 f8d5 	bl	8001910 <HAL_TIM_MspPostInit>

}
 8001766:	bf00      	nop
 8001768:	3758      	adds	r7, #88	@ 0x58
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000220 	.word	0x20000220
 8001774:	40010400 	.word	0x40010400

08001778 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a5c      	ldr	r2, [pc, #368]	@ (80018f8 <HAL_TIM_Base_MspInit+0x180>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d12e      	bne.n	80017e8 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	4b5b      	ldr	r3, [pc, #364]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	4a5a      	ldr	r2, [pc, #360]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6453      	str	r3, [r2, #68]	@ 0x44
 800179a:	4b58      	ldr	r3, [pc, #352]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2101      	movs	r1, #1
 80017aa:	2018      	movs	r0, #24
 80017ac:	f000 fb6b 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017b0:	2018      	movs	r0, #24
 80017b2:	f000 fb84 	bl	8001ebe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2101      	movs	r1, #1
 80017ba:	2019      	movs	r0, #25
 80017bc:	f000 fb63 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017c0:	2019      	movs	r0, #25
 80017c2:	f000 fb7c 	bl	8001ebe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2101      	movs	r1, #1
 80017ca:	201a      	movs	r0, #26
 80017cc:	f000 fb5b 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80017d0:	201a      	movs	r0, #26
 80017d2:	f000 fb74 	bl	8001ebe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2101      	movs	r1, #1
 80017da:	201b      	movs	r0, #27
 80017dc:	f000 fb53 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80017e0:	201b      	movs	r0, #27
 80017e2:	f000 fb6c 	bl	8001ebe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80017e6:	e082      	b.n	80018ee <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017f0:	d116      	bne.n	8001820 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
 80017f6:	4b41      	ldr	r3, [pc, #260]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	4a40      	ldr	r2, [pc, #256]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6413      	str	r3, [r2, #64]	@ 0x40
 8001802:	4b3e      	ldr	r3, [pc, #248]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2101      	movs	r1, #1
 8001812:	201c      	movs	r0, #28
 8001814:	f000 fb37 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001818:	201c      	movs	r0, #28
 800181a:	f000 fb50 	bl	8001ebe <HAL_NVIC_EnableIRQ>
}
 800181e:	e066      	b.n	80018ee <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM3)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a36      	ldr	r2, [pc, #216]	@ (8001900 <HAL_TIM_Base_MspInit+0x188>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d116      	bne.n	8001858 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	4b33      	ldr	r3, [pc, #204]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	4a32      	ldr	r2, [pc, #200]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6413      	str	r3, [r2, #64]	@ 0x40
 800183a:	4b30      	ldr	r3, [pc, #192]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2101      	movs	r1, #1
 800184a:	201d      	movs	r0, #29
 800184c:	f000 fb1b 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001850:	201d      	movs	r0, #29
 8001852:	f000 fb34 	bl	8001ebe <HAL_NVIC_EnableIRQ>
}
 8001856:	e04a      	b.n	80018ee <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM4)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a29      	ldr	r2, [pc, #164]	@ (8001904 <HAL_TIM_Base_MspInit+0x18c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d116      	bne.n	8001890 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b25      	ldr	r3, [pc, #148]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	4a24      	ldr	r2, [pc, #144]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6413      	str	r3, [r2, #64]	@ 0x40
 8001872:	4b22      	ldr	r3, [pc, #136]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2101      	movs	r1, #1
 8001882:	201e      	movs	r0, #30
 8001884:	f000 faff 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001888:	201e      	movs	r0, #30
 800188a:	f000 fb18 	bl	8001ebe <HAL_NVIC_EnableIRQ>
}
 800188e:	e02e      	b.n	80018ee <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM5)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1c      	ldr	r2, [pc, #112]	@ (8001908 <HAL_TIM_Base_MspInit+0x190>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d116      	bne.n	80018c8 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	4a16      	ldr	r2, [pc, #88]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 80018a4:	f043 0308 	orr.w	r3, r3, #8
 80018a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018aa:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2101      	movs	r1, #1
 80018ba:	2032      	movs	r0, #50	@ 0x32
 80018bc:	f000 fae3 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80018c0:	2032      	movs	r0, #50	@ 0x32
 80018c2:	f000 fafc 	bl	8001ebe <HAL_NVIC_EnableIRQ>
}
 80018c6:	e012      	b.n	80018ee <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0f      	ldr	r2, [pc, #60]	@ (800190c <HAL_TIM_Base_MspInit+0x194>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d10d      	bne.n	80018ee <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	4a08      	ldr	r2, [pc, #32]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_TIM_Base_MspInit+0x184>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
}
 80018ee:	bf00      	nop
 80018f0:	3720      	adds	r7, #32
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40010000 	.word	0x40010000
 80018fc:	40023800 	.word	0x40023800
 8001900:	40000400 	.word	0x40000400
 8001904:	40000800 	.word	0x40000800
 8001908:	40000c00 	.word	0x40000c00
 800190c:	40010400 	.word	0x40010400

08001910 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a36      	ldr	r2, [pc, #216]	@ (8001a08 <HAL_TIM_MspPostInit+0xf8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d11f      	bne.n	8001972 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b35      	ldr	r3, [pc, #212]	@ (8001a0c <HAL_TIM_MspPostInit+0xfc>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a34      	ldr	r2, [pc, #208]	@ (8001a0c <HAL_TIM_MspPostInit+0xfc>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b32      	ldr	r3, [pc, #200]	@ (8001a0c <HAL_TIM_MspPostInit+0xfc>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 800194e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001960:	2301      	movs	r3, #1
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	4829      	ldr	r0, [pc, #164]	@ (8001a10 <HAL_TIM_MspPostInit+0x100>)
 800196c:	f000 fac2 	bl	8001ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001970:	e046      	b.n	8001a00 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800197a:	d11e      	bne.n	80019ba <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <HAL_TIM_MspPostInit+0xfc>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001984:	4a21      	ldr	r2, [pc, #132]	@ (8001a0c <HAL_TIM_MspPostInit+0xfc>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6313      	str	r3, [r2, #48]	@ 0x30
 800198c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <HAL_TIM_MspPostInit+0xfc>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin;
 8001998:	2303      	movs	r3, #3
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019a8:	2301      	movs	r3, #1
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4817      	ldr	r0, [pc, #92]	@ (8001a10 <HAL_TIM_MspPostInit+0x100>)
 80019b4:	f000 fa9e 	bl	8001ef4 <HAL_GPIO_Init>
}
 80019b8:	e022      	b.n	8001a00 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM8)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a15      	ldr	r2, [pc, #84]	@ (8001a14 <HAL_TIM_MspPostInit+0x104>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d11d      	bne.n	8001a00 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <HAL_TIM_MspPostInit+0xfc>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019cc:	4a0f      	ldr	r2, [pc, #60]	@ (8001a0c <HAL_TIM_MspPostInit+0xfc>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a0c <HAL_TIM_MspPostInit+0xfc>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_Pin;
 80019e0:	2340      	movs	r3, #64	@ 0x40
 80019e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80019f0:	2303      	movs	r3, #3
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM4_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	4807      	ldr	r0, [pc, #28]	@ (8001a18 <HAL_TIM_MspPostInit+0x108>)
 80019fc:	f000 fa7a 	bl	8001ef4 <HAL_GPIO_Init>
}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	@ 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40010000 	.word	0x40010000
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40010400 	.word	0x40010400
 8001a18:	40020800 	.word	0x40020800

08001a1c <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

//slave timer disable the pwm of the master timer
void  HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM5) {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a10      	ldr	r2, [pc, #64]	@ (8001a6c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d103      	bne.n	8001a36 <HAL_TIM_PeriodElapsedCallback+0x1a>
    	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8001a2e:	2100      	movs	r1, #0
 8001a30:	480f      	ldr	r0, [pc, #60]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001a32:	f001 fc3d 	bl	80032b0 <HAL_TIM_PWM_Stop_IT>

    }
    if (htim->Instance == TIM3) {
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d107      	bne.n	8001a50 <HAL_TIM_PeriodElapsedCallback+0x34>
        	HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001a40:	2100      	movs	r1, #0
 8001a42:	480d      	ldr	r0, [pc, #52]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001a44:	f001 fc34 	bl	80032b0 <HAL_TIM_PWM_Stop_IT>
        	HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 8001a48:	2104      	movs	r1, #4
 8001a4a:	480b      	ldr	r0, [pc, #44]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001a4c:	f001 fc30 	bl	80032b0 <HAL_TIM_PWM_Stop_IT>
        }

    if (htim->Instance == TIM4) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a09      	ldr	r2, [pc, #36]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d103      	bne.n	8001a62 <HAL_TIM_PeriodElapsedCallback+0x46>
        	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4808      	ldr	r0, [pc, #32]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a5e:	f001 fc27 	bl	80032b0 <HAL_TIM_PWM_Stop_IT>

        }

}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40000c00 	.word	0x40000c00
 8001a70:	20000220 	.word	0x20000220
 8001a74:	40000400 	.word	0x40000400
 8001a78:	20000100 	.word	0x20000100
 8001a7c:	40000800 	.word	0x40000800
 8001a80:	200000b8 	.word	0x200000b8

08001a84 <HAL_GPIO_EXTI_Callback>:

//emergency stop button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==DISABLE_button_Pin){
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a94:	d108      	bne.n	8001aa8 <HAL_GPIO_EXTI_Callback+0x24>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET); //ENABLE
 8001a96:	2201      	movs	r2, #1
 8001a98:	2120      	movs	r1, #32
 8001a9a:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001a9c:	f000 fbbe 	bl	800221c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	bf00      	nop
		__disable_irq();

		while(1){
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <HAL_GPIO_EXTI_Callback+0x20>

		}
	}
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40020800 	.word	0x40020800

08001ab4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	@ (8001b04 <MX_USART2_UART_Init+0x50>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001abe:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001aec:	f002 fc10 	bl	8004310 <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001af6:	f7ff f9f7 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000268 	.word	0x20000268
 8001b04:	40004400 	.word	0x40004400

08001b08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	@ 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a19      	ldr	r2, [pc, #100]	@ (8001b8c <HAL_UART_MspInit+0x84>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d12b      	bne.n	8001b82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_UART_MspInit+0x88>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	4a17      	ldr	r2, [pc, #92]	@ (8001b90 <HAL_UART_MspInit+0x88>)
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <HAL_UART_MspInit+0x88>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_UART_MspInit+0x88>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a10      	ldr	r2, [pc, #64]	@ (8001b90 <HAL_UART_MspInit+0x88>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <HAL_UART_MspInit+0x88>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b62:	230c      	movs	r3, #12
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b72:	2307      	movs	r3, #7
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <HAL_UART_MspInit+0x8c>)
 8001b7e:	f000 f9b9 	bl	8001ef4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b82:	bf00      	nop
 8001b84:	3728      	adds	r7, #40	@ 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40004400 	.word	0x40004400
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000

08001b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b9c:	f7ff fae8 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ba0:	480c      	ldr	r0, [pc, #48]	@ (8001bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ba2:	490d      	ldr	r1, [pc, #52]	@ (8001bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba8:	e002      	b.n	8001bb0 <LoopCopyDataInit>

08001baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bae:	3304      	adds	r3, #4

08001bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb4:	d3f9      	bcc.n	8001baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bbc:	e001      	b.n	8001bc2 <LoopFillZerobss>

08001bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc0:	3204      	adds	r2, #4

08001bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc4:	d3fb      	bcc.n	8001bbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f002 fe6f 	bl	80048a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bca:	f7ff f85d 	bl	8000c88 <main>
  bx  lr    
 8001bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001bdc:	08004930 	.word	0x08004930
  ldr r2, =_sbss
 8001be0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001be4:	200002b4 	.word	0x200002b4

08001be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC_IRQHandler>
	...

08001bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <HAL_Init+0x40>)
 8001bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <HAL_Init+0x40>)
 8001c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c08:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	@ (8001c2c <HAL_Init+0x40>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 f92b 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f000 f808 	bl	8001c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c20:	f7ff f9f6 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023c00 	.word	0x40023c00

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_InitTick+0x54>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_InitTick+0x58>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f943 	bl	8001eda <HAL_SYSTICK_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00e      	b.n	8001c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b0f      	cmp	r3, #15
 8001c62:	d80a      	bhi.n	8001c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c64:	2200      	movs	r2, #0
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f000 f90b 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c70:	4a06      	ldr	r2, [pc, #24]	@ (8001c8c <HAL_InitTick+0x5c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_IncTick+0x20>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_IncTick+0x24>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a04      	ldr	r2, [pc, #16]	@ (8001cb4 <HAL_IncTick+0x24>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	200002b0 	.word	0x200002b0

08001cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <HAL_GetTick+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	200002b0 	.word	0x200002b0

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	@ (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	@ (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	@ (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	@ 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	@ 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff29 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff3e 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff8e 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5d 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff31 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffa2 	bl	8001e2c <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	@ 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	e165      	b.n	80021dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f10:	2201      	movs	r2, #1
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	f040 8154 	bne.w	80021d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d005      	beq.n	8001f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d130      	bne.n	8001fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 0201 	and.w	r2, r3, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d017      	beq.n	8001fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d123      	bne.n	8002038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	08da      	lsrs	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3208      	adds	r2, #8
 8001ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	220f      	movs	r2, #15
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	08da      	lsrs	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3208      	adds	r2, #8
 8002032:	69b9      	ldr	r1, [r7, #24]
 8002034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0203 	and.w	r2, r3, #3
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80ae 	beq.w	80021d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	4b5d      	ldr	r3, [pc, #372]	@ (80021f4 <HAL_GPIO_Init+0x300>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002082:	4a5c      	ldr	r2, [pc, #368]	@ (80021f4 <HAL_GPIO_Init+0x300>)
 8002084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002088:	6453      	str	r3, [r2, #68]	@ 0x44
 800208a:	4b5a      	ldr	r3, [pc, #360]	@ (80021f4 <HAL_GPIO_Init+0x300>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002096:	4a58      	ldr	r2, [pc, #352]	@ (80021f8 <HAL_GPIO_Init+0x304>)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4f      	ldr	r2, [pc, #316]	@ (80021fc <HAL_GPIO_Init+0x308>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d025      	beq.n	800210e <HAL_GPIO_Init+0x21a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002200 <HAL_GPIO_Init+0x30c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01f      	beq.n	800210a <HAL_GPIO_Init+0x216>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002204 <HAL_GPIO_Init+0x310>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d019      	beq.n	8002106 <HAL_GPIO_Init+0x212>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002208 <HAL_GPIO_Init+0x314>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0x20e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4b      	ldr	r2, [pc, #300]	@ (800220c <HAL_GPIO_Init+0x318>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00d      	beq.n	80020fe <HAL_GPIO_Init+0x20a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002210 <HAL_GPIO_Init+0x31c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0x206>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a49      	ldr	r2, [pc, #292]	@ (8002214 <HAL_GPIO_Init+0x320>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_GPIO_Init+0x202>
 80020f2:	2306      	movs	r3, #6
 80020f4:	e00c      	b.n	8002110 <HAL_GPIO_Init+0x21c>
 80020f6:	2307      	movs	r3, #7
 80020f8:	e00a      	b.n	8002110 <HAL_GPIO_Init+0x21c>
 80020fa:	2305      	movs	r3, #5
 80020fc:	e008      	b.n	8002110 <HAL_GPIO_Init+0x21c>
 80020fe:	2304      	movs	r3, #4
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x21c>
 8002102:	2303      	movs	r3, #3
 8002104:	e004      	b.n	8002110 <HAL_GPIO_Init+0x21c>
 8002106:	2302      	movs	r3, #2
 8002108:	e002      	b.n	8002110 <HAL_GPIO_Init+0x21c>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_GPIO_Init+0x21c>
 800210e:	2300      	movs	r3, #0
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	f002 0203 	and.w	r2, r2, #3
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	4093      	lsls	r3, r2
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002120:	4935      	ldr	r1, [pc, #212]	@ (80021f8 <HAL_GPIO_Init+0x304>)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212e:	4b3a      	ldr	r3, [pc, #232]	@ (8002218 <HAL_GPIO_Init+0x324>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002152:	4a31      	ldr	r2, [pc, #196]	@ (8002218 <HAL_GPIO_Init+0x324>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002158:	4b2f      	ldr	r3, [pc, #188]	@ (8002218 <HAL_GPIO_Init+0x324>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800217c:	4a26      	ldr	r2, [pc, #152]	@ (8002218 <HAL_GPIO_Init+0x324>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002182:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <HAL_GPIO_Init+0x324>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002218 <HAL_GPIO_Init+0x324>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <HAL_GPIO_Init+0x324>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d0:	4a11      	ldr	r2, [pc, #68]	@ (8002218 <HAL_GPIO_Init+0x324>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3301      	adds	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	f67f ae96 	bls.w	8001f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3724      	adds	r7, #36	@ 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40020000 	.word	0x40020000
 8002200:	40020400 	.word	0x40020400
 8002204:	40020800 	.word	0x40020800
 8002208:	40020c00 	.word	0x40020c00
 800220c:	40021000 	.word	0x40021000
 8002210:	40021400 	.word	0x40021400
 8002214:	40021800 	.word	0x40021800
 8002218:	40013c00 	.word	0x40013c00

0800221c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
 8002228:	4613      	mov	r3, r2
 800222a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002238:	e003      	b.n	8002242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	041a      	lsls	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	619a      	str	r2, [r3, #24]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800225a:	4b08      	ldr	r3, [pc, #32]	@ (800227c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	4013      	ands	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d006      	beq.n	8002274 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002266:	4a05      	ldr	r2, [pc, #20]	@ (800227c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fc08 	bl	8001a84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40013c00 	.word	0x40013c00

08002280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0cc      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b68      	ldr	r3, [pc, #416]	@ (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d90c      	bls.n	80022bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b65      	ldr	r3, [pc, #404]	@ (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b63      	ldr	r3, [pc, #396]	@ (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b8      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d4:	4b59      	ldr	r3, [pc, #356]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a58      	ldr	r2, [pc, #352]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ec:	4b53      	ldr	r3, [pc, #332]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a52      	ldr	r2, [pc, #328]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b50      	ldr	r3, [pc, #320]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	494d      	ldr	r1, [pc, #308]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d044      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b47      	ldr	r3, [pc, #284]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d119      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e07f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d003      	beq.n	800233e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233a:	2b03      	cmp	r3, #3
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233e:	4b3f      	ldr	r3, [pc, #252]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e06f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	4b3b      	ldr	r3, [pc, #236]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e067      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235e:	4b37      	ldr	r3, [pc, #220]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 0203 	bic.w	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4934      	ldr	r1, [pc, #208]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002370:	f7ff fca2 	bl	8001cb8 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	e00a      	b.n	800238e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002378:	f7ff fc9e 	bl	8001cb8 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e04f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	4b2b      	ldr	r3, [pc, #172]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 020c 	and.w	r2, r3, #12
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	429a      	cmp	r2, r3
 800239e:	d1eb      	bne.n	8002378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023a0:	4b25      	ldr	r3, [pc, #148]	@ (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d20c      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b20      	ldr	r3, [pc, #128]	@ (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e032      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b19      	ldr	r3, [pc, #100]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4916      	ldr	r1, [pc, #88]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f2:	4b12      	ldr	r3, [pc, #72]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	490e      	ldr	r1, [pc, #56]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002406:	f000 f855 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 800240a:	4602      	mov	r2, r0
 800240c:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	490a      	ldr	r1, [pc, #40]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	5ccb      	ldrb	r3, [r1, r3]
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	4a09      	ldr	r2, [pc, #36]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002422:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <HAL_RCC_ClockConfig+0x1c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fc02 	bl	8001c30 <HAL_InitTick>

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023c00 	.word	0x40023c00
 800243c:	40023800 	.word	0x40023800
 8002440:	08004908 	.word	0x08004908
 8002444:	20000000 	.word	0x20000000
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002450:	4b03      	ldr	r3, [pc, #12]	@ (8002460 <HAL_RCC_GetHCLKFreq+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000

08002464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002468:	f7ff fff0 	bl	800244c <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0a9b      	lsrs	r3, r3, #10
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	@ (8002488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	08004918 	.word	0x08004918

0800248c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002490:	f7ff ffdc 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	0b5b      	lsrs	r3, r3, #13
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4903      	ldr	r1, [pc, #12]	@ (80024b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08004918 	.word	0x08004918

080024b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b8:	b0ae      	sub	sp, #184	@ 0xb8
 80024ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024da:	4bcb      	ldr	r3, [pc, #812]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	f200 8206 	bhi.w	80028f4 <HAL_RCC_GetSysClockFreq+0x440>
 80024e8:	a201      	add	r2, pc, #4	@ (adr r2, 80024f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80024ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	08002525 	.word	0x08002525
 80024f4:	080028f5 	.word	0x080028f5
 80024f8:	080028f5 	.word	0x080028f5
 80024fc:	080028f5 	.word	0x080028f5
 8002500:	0800252d 	.word	0x0800252d
 8002504:	080028f5 	.word	0x080028f5
 8002508:	080028f5 	.word	0x080028f5
 800250c:	080028f5 	.word	0x080028f5
 8002510:	08002535 	.word	0x08002535
 8002514:	080028f5 	.word	0x080028f5
 8002518:	080028f5 	.word	0x080028f5
 800251c:	080028f5 	.word	0x080028f5
 8002520:	08002725 	.word	0x08002725
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002524:	4bb9      	ldr	r3, [pc, #740]	@ (800280c <HAL_RCC_GetSysClockFreq+0x358>)
 8002526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800252a:	e1e7      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800252c:	4bb8      	ldr	r3, [pc, #736]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x35c>)
 800252e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002532:	e1e3      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002534:	4bb4      	ldr	r3, [pc, #720]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800253c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002540:	4bb1      	ldr	r3, [pc, #708]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d071      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254c:	4bae      	ldr	r3, [pc, #696]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	2200      	movs	r2, #0
 8002554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002558:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800255c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002564:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800256e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002572:	4622      	mov	r2, r4
 8002574:	462b      	mov	r3, r5
 8002576:	f04f 0000 	mov.w	r0, #0
 800257a:	f04f 0100 	mov.w	r1, #0
 800257e:	0159      	lsls	r1, r3, #5
 8002580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002584:	0150      	lsls	r0, r2, #5
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4621      	mov	r1, r4
 800258c:	1a51      	subs	r1, r2, r1
 800258e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002590:	4629      	mov	r1, r5
 8002592:	eb63 0301 	sbc.w	r3, r3, r1
 8002596:	647b      	str	r3, [r7, #68]	@ 0x44
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80025a4:	4649      	mov	r1, r9
 80025a6:	018b      	lsls	r3, r1, #6
 80025a8:	4641      	mov	r1, r8
 80025aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ae:	4641      	mov	r1, r8
 80025b0:	018a      	lsls	r2, r1, #6
 80025b2:	4641      	mov	r1, r8
 80025b4:	1a51      	subs	r1, r2, r1
 80025b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025b8:	4649      	mov	r1, r9
 80025ba:	eb63 0301 	sbc.w	r3, r3, r1
 80025be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80025cc:	4649      	mov	r1, r9
 80025ce:	00cb      	lsls	r3, r1, #3
 80025d0:	4641      	mov	r1, r8
 80025d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025d6:	4641      	mov	r1, r8
 80025d8:	00ca      	lsls	r2, r1, #3
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	4622      	mov	r2, r4
 80025e2:	189b      	adds	r3, r3, r2
 80025e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025e6:	462b      	mov	r3, r5
 80025e8:	460a      	mov	r2, r1
 80025ea:	eb42 0303 	adc.w	r3, r2, r3
 80025ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025fc:	4629      	mov	r1, r5
 80025fe:	024b      	lsls	r3, r1, #9
 8002600:	4621      	mov	r1, r4
 8002602:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002606:	4621      	mov	r1, r4
 8002608:	024a      	lsls	r2, r1, #9
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002612:	2200      	movs	r2, #0
 8002614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002618:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800261c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002620:	f7fe f8f8 	bl	8000814 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4613      	mov	r3, r2
 800262a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800262e:	e067      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002630:	4b75      	ldr	r3, [pc, #468]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	099b      	lsrs	r3, r3, #6
 8002636:	2200      	movs	r2, #0
 8002638:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800263c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002640:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002648:	67bb      	str	r3, [r7, #120]	@ 0x78
 800264a:	2300      	movs	r3, #0
 800264c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800264e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002652:	4622      	mov	r2, r4
 8002654:	462b      	mov	r3, r5
 8002656:	f04f 0000 	mov.w	r0, #0
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	0159      	lsls	r1, r3, #5
 8002660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002664:	0150      	lsls	r0, r2, #5
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4621      	mov	r1, r4
 800266c:	1a51      	subs	r1, r2, r1
 800266e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002670:	4629      	mov	r1, r5
 8002672:	eb63 0301 	sbc.w	r3, r3, r1
 8002676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002684:	4649      	mov	r1, r9
 8002686:	018b      	lsls	r3, r1, #6
 8002688:	4641      	mov	r1, r8
 800268a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800268e:	4641      	mov	r1, r8
 8002690:	018a      	lsls	r2, r1, #6
 8002692:	4641      	mov	r1, r8
 8002694:	ebb2 0a01 	subs.w	sl, r2, r1
 8002698:	4649      	mov	r1, r9
 800269a:	eb63 0b01 	sbc.w	fp, r3, r1
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026b2:	4692      	mov	sl, r2
 80026b4:	469b      	mov	fp, r3
 80026b6:	4623      	mov	r3, r4
 80026b8:	eb1a 0303 	adds.w	r3, sl, r3
 80026bc:	623b      	str	r3, [r7, #32]
 80026be:	462b      	mov	r3, r5
 80026c0:	eb4b 0303 	adc.w	r3, fp, r3
 80026c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026d2:	4629      	mov	r1, r5
 80026d4:	028b      	lsls	r3, r1, #10
 80026d6:	4621      	mov	r1, r4
 80026d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026dc:	4621      	mov	r1, r4
 80026de:	028a      	lsls	r2, r1, #10
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026e8:	2200      	movs	r2, #0
 80026ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80026ec:	677a      	str	r2, [r7, #116]	@ 0x74
 80026ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80026f2:	f7fe f88f 	bl	8000814 <__aeabi_uldivmod>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4613      	mov	r3, r2
 80026fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002700:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	3301      	adds	r3, #1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002722:	e0eb      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002724:	4b38      	ldr	r3, [pc, #224]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800272c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002730:	4b35      	ldr	r3, [pc, #212]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d06b      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273c:	4b32      	ldr	r3, [pc, #200]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	099b      	lsrs	r3, r3, #6
 8002742:	2200      	movs	r2, #0
 8002744:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002746:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002748:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800274a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002750:	2300      	movs	r3, #0
 8002752:	667b      	str	r3, [r7, #100]	@ 0x64
 8002754:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002758:	4622      	mov	r2, r4
 800275a:	462b      	mov	r3, r5
 800275c:	f04f 0000 	mov.w	r0, #0
 8002760:	f04f 0100 	mov.w	r1, #0
 8002764:	0159      	lsls	r1, r3, #5
 8002766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276a:	0150      	lsls	r0, r2, #5
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4621      	mov	r1, r4
 8002772:	1a51      	subs	r1, r2, r1
 8002774:	61b9      	str	r1, [r7, #24]
 8002776:	4629      	mov	r1, r5
 8002778:	eb63 0301 	sbc.w	r3, r3, r1
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800278a:	4659      	mov	r1, fp
 800278c:	018b      	lsls	r3, r1, #6
 800278e:	4651      	mov	r1, sl
 8002790:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002794:	4651      	mov	r1, sl
 8002796:	018a      	lsls	r2, r1, #6
 8002798:	4651      	mov	r1, sl
 800279a:	ebb2 0801 	subs.w	r8, r2, r1
 800279e:	4659      	mov	r1, fp
 80027a0:	eb63 0901 	sbc.w	r9, r3, r1
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027b8:	4690      	mov	r8, r2
 80027ba:	4699      	mov	r9, r3
 80027bc:	4623      	mov	r3, r4
 80027be:	eb18 0303 	adds.w	r3, r8, r3
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	462b      	mov	r3, r5
 80027c6:	eb49 0303 	adc.w	r3, r9, r3
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027d8:	4629      	mov	r1, r5
 80027da:	024b      	lsls	r3, r1, #9
 80027dc:	4621      	mov	r1, r4
 80027de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027e2:	4621      	mov	r1, r4
 80027e4:	024a      	lsls	r2, r1, #9
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027ee:	2200      	movs	r2, #0
 80027f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027f2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80027f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027f8:	f7fe f80c 	bl	8000814 <__aeabi_uldivmod>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4613      	mov	r3, r2
 8002802:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002806:	e065      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x420>
 8002808:	40023800 	.word	0x40023800
 800280c:	00f42400 	.word	0x00f42400
 8002810:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002814:	4b3d      	ldr	r3, [pc, #244]	@ (800290c <HAL_RCC_GetSysClockFreq+0x458>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	2200      	movs	r2, #0
 800281c:	4618      	mov	r0, r3
 800281e:	4611      	mov	r1, r2
 8002820:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002824:	653b      	str	r3, [r7, #80]	@ 0x50
 8002826:	2300      	movs	r3, #0
 8002828:	657b      	str	r3, [r7, #84]	@ 0x54
 800282a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800282e:	4642      	mov	r2, r8
 8002830:	464b      	mov	r3, r9
 8002832:	f04f 0000 	mov.w	r0, #0
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	0159      	lsls	r1, r3, #5
 800283c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002840:	0150      	lsls	r0, r2, #5
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4641      	mov	r1, r8
 8002848:	1a51      	subs	r1, r2, r1
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	4649      	mov	r1, r9
 800284e:	eb63 0301 	sbc.w	r3, r3, r1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002860:	4659      	mov	r1, fp
 8002862:	018b      	lsls	r3, r1, #6
 8002864:	4651      	mov	r1, sl
 8002866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800286a:	4651      	mov	r1, sl
 800286c:	018a      	lsls	r2, r1, #6
 800286e:	4651      	mov	r1, sl
 8002870:	1a54      	subs	r4, r2, r1
 8002872:	4659      	mov	r1, fp
 8002874:	eb63 0501 	sbc.w	r5, r3, r1
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	00eb      	lsls	r3, r5, #3
 8002882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002886:	00e2      	lsls	r2, r4, #3
 8002888:	4614      	mov	r4, r2
 800288a:	461d      	mov	r5, r3
 800288c:	4643      	mov	r3, r8
 800288e:	18e3      	adds	r3, r4, r3
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	464b      	mov	r3, r9
 8002894:	eb45 0303 	adc.w	r3, r5, r3
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028a6:	4629      	mov	r1, r5
 80028a8:	028b      	lsls	r3, r1, #10
 80028aa:	4621      	mov	r1, r4
 80028ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028b0:	4621      	mov	r1, r4
 80028b2:	028a      	lsls	r2, r1, #10
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028bc:	2200      	movs	r2, #0
 80028be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028c0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80028c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028c6:	f7fd ffa5 	bl	8000814 <__aeabi_uldivmod>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4613      	mov	r3, r2
 80028d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028d4:	4b0d      	ldr	r3, [pc, #52]	@ (800290c <HAL_RCC_GetSysClockFreq+0x458>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	0f1b      	lsrs	r3, r3, #28
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80028e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028f2:	e003      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x45c>)
 80028f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002900:	4618      	mov	r0, r3
 8002902:	37b8      	adds	r7, #184	@ 0xb8
 8002904:	46bd      	mov	sp, r7
 8002906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	00f42400 	.word	0x00f42400

08002914 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e28d      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8083 	beq.w	8002a3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002934:	4b94      	ldr	r3, [pc, #592]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b04      	cmp	r3, #4
 800293e:	d019      	beq.n	8002974 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002940:	4b91      	ldr	r3, [pc, #580]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 030c 	and.w	r3, r3, #12
        || \
 8002948:	2b08      	cmp	r3, #8
 800294a:	d106      	bne.n	800295a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800294c:	4b8e      	ldr	r3, [pc, #568]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002954:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002958:	d00c      	beq.n	8002974 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295a:	4b8b      	ldr	r3, [pc, #556]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d112      	bne.n	800298c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002966:	4b88      	ldr	r3, [pc, #544]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002972:	d10b      	bne.n	800298c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002974:	4b84      	ldr	r3, [pc, #528]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d05b      	beq.n	8002a38 <HAL_RCC_OscConfig+0x124>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d157      	bne.n	8002a38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e25a      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002994:	d106      	bne.n	80029a4 <HAL_RCC_OscConfig+0x90>
 8002996:	4b7c      	ldr	r3, [pc, #496]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a7b      	ldr	r2, [pc, #492]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	e01d      	b.n	80029e0 <HAL_RCC_OscConfig+0xcc>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0xb4>
 80029ae:	4b76      	ldr	r3, [pc, #472]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a75      	ldr	r2, [pc, #468]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b73      	ldr	r3, [pc, #460]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a72      	ldr	r2, [pc, #456]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e00b      	b.n	80029e0 <HAL_RCC_OscConfig+0xcc>
 80029c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d013      	beq.n	8002a10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7ff f966 	bl	8001cb8 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7ff f962 	bl	8001cb8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	@ 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e21f      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	4b61      	ldr	r3, [pc, #388]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0xdc>
 8002a0e:	e014      	b.n	8002a3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7ff f952 	bl	8001cb8 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7ff f94e 	bl	8001cb8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	@ 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e20b      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2a:	4b57      	ldr	r3, [pc, #348]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x104>
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d06f      	beq.n	8002b26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a46:	4b50      	ldr	r3, [pc, #320]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d017      	beq.n	8002a82 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a52:	4b4d      	ldr	r3, [pc, #308]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d105      	bne.n	8002a6a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6a:	4b47      	ldr	r3, [pc, #284]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d11c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a76:	4b44      	ldr	r3, [pc, #272]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d116      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	4b41      	ldr	r3, [pc, #260]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_RCC_OscConfig+0x186>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e1d3      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4937      	ldr	r1, [pc, #220]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	e03a      	b.n	8002b26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab8:	4b34      	ldr	r3, [pc, #208]	@ (8002b8c <HAL_RCC_OscConfig+0x278>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7ff f8fb 	bl	8001cb8 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7ff f8f7 	bl	8001cb8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e1b4      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b28      	ldr	r3, [pc, #160]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4925      	ldr	r1, [pc, #148]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]
 8002af8:	e015      	b.n	8002b26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afa:	4b24      	ldr	r3, [pc, #144]	@ (8002b8c <HAL_RCC_OscConfig+0x278>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7ff f8da 	bl	8001cb8 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b08:	f7ff f8d6 	bl	8001cb8 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e193      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d036      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d016      	beq.n	8002b68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3a:	4b15      	ldr	r3, [pc, #84]	@ (8002b90 <HAL_RCC_OscConfig+0x27c>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7ff f8ba 	bl	8001cb8 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b48:	f7ff f8b6 	bl	8001cb8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e173      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x234>
 8002b66:	e01b      	b.n	8002ba0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b68:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <HAL_RCC_OscConfig+0x27c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7ff f8a3 	bl	8001cb8 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b74:	e00e      	b.n	8002b94 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b76:	f7ff f89f 	bl	8001cb8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d907      	bls.n	8002b94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e15c      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	42470000 	.word	0x42470000
 8002b90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b94:	4b8a      	ldr	r3, [pc, #552]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ea      	bne.n	8002b76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8097 	beq.w	8002cdc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb2:	4b83      	ldr	r3, [pc, #524]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10f      	bne.n	8002bde <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	4a7e      	ldr	r2, [pc, #504]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bce:	4b7c      	ldr	r3, [pc, #496]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bde:	4b79      	ldr	r3, [pc, #484]	@ (8002dc4 <HAL_RCC_OscConfig+0x4b0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d118      	bne.n	8002c1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bea:	4b76      	ldr	r3, [pc, #472]	@ (8002dc4 <HAL_RCC_OscConfig+0x4b0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a75      	ldr	r2, [pc, #468]	@ (8002dc4 <HAL_RCC_OscConfig+0x4b0>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf6:	f7ff f85f 	bl	8001cb8 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfe:	f7ff f85b 	bl	8001cb8 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e118      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c10:	4b6c      	ldr	r3, [pc, #432]	@ (8002dc4 <HAL_RCC_OscConfig+0x4b0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x31e>
 8002c24:	4b66      	ldr	r3, [pc, #408]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c28:	4a65      	ldr	r2, [pc, #404]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c30:	e01c      	b.n	8002c6c <HAL_RCC_OscConfig+0x358>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b05      	cmp	r3, #5
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x340>
 8002c3a:	4b61      	ldr	r3, [pc, #388]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3e:	4a60      	ldr	r2, [pc, #384]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c40:	f043 0304 	orr.w	r3, r3, #4
 8002c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c46:	4b5e      	ldr	r3, [pc, #376]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4a:	4a5d      	ldr	r2, [pc, #372]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0x358>
 8002c54:	4b5a      	ldr	r3, [pc, #360]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c58:	4a59      	ldr	r2, [pc, #356]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c60:	4b57      	ldr	r3, [pc, #348]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c64:	4a56      	ldr	r2, [pc, #344]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c66:	f023 0304 	bic.w	r3, r3, #4
 8002c6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d015      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7ff f820 	bl	8001cb8 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7c:	f7ff f81c 	bl	8001cb8 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e0d7      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c92:	4b4b      	ldr	r3, [pc, #300]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0ee      	beq.n	8002c7c <HAL_RCC_OscConfig+0x368>
 8002c9e:	e014      	b.n	8002cca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7ff f80a 	bl	8001cb8 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7ff f806 	bl	8001cb8 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e0c1      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbe:	4b40      	ldr	r3, [pc, #256]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1ee      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d105      	bne.n	8002cdc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	4a3a      	ldr	r2, [pc, #232]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002cd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80ad 	beq.w	8002e40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ce6:	4b36      	ldr	r3, [pc, #216]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d060      	beq.n	8002db4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d145      	bne.n	8002d86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfa:	4b33      	ldr	r3, [pc, #204]	@ (8002dc8 <HAL_RCC_OscConfig+0x4b4>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe ffda 	bl	8001cb8 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe ffd6 	bl	8001cb8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e093      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	4b29      	ldr	r3, [pc, #164]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69da      	ldr	r2, [r3, #28]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	019b      	lsls	r3, r3, #6
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	041b      	lsls	r3, r3, #16
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d48:	061b      	lsls	r3, r3, #24
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	071b      	lsls	r3, r3, #28
 8002d52:	491b      	ldr	r1, [pc, #108]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d58:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <HAL_RCC_OscConfig+0x4b4>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fe ffab 	bl	8001cb8 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe ffa7 	bl	8001cb8 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e064      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d78:	4b11      	ldr	r3, [pc, #68]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x452>
 8002d84:	e05c      	b.n	8002e40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d86:	4b10      	ldr	r3, [pc, #64]	@ (8002dc8 <HAL_RCC_OscConfig+0x4b4>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe ff94 	bl	8001cb8 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fe ff90 	bl	8001cb8 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e04d      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da6:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x480>
 8002db2:	e045      	b.n	8002e40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d107      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e040      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e4c <HAL_RCC_OscConfig+0x538>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d030      	beq.n	8002e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d129      	bne.n	8002e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d122      	bne.n	8002e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d119      	bne.n	8002e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e12:	085b      	lsrs	r3, r3, #1
 8002e14:	3b01      	subs	r3, #1
 8002e16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d10f      	bne.n	8002e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800

08002e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e041      	b.n	8002ee6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fe fc7e 	bl	8001778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f000 fdb0 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d001      	beq.n	8002f08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e04e      	b.n	8002fa6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a23      	ldr	r2, [pc, #140]	@ (8002fb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d022      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x80>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f32:	d01d      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x80>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d018      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x80>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1e      	ldr	r2, [pc, #120]	@ (8002fbc <HAL_TIM_Base_Start_IT+0xcc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d013      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x80>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00e      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x80>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d009      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x80>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a19      	ldr	r2, [pc, #100]	@ (8002fc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d004      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x80>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a18      	ldr	r2, [pc, #96]	@ (8002fcc <HAL_TIM_Base_Start_IT+0xdc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d111      	bne.n	8002f94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d010      	beq.n	8002fa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0201 	orr.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f92:	e007      	b.n	8002fa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40010000 	.word	0x40010000
 8002fb8:	40000400 	.word	0x40000400
 8002fbc:	40000800 	.word	0x40000800
 8002fc0:	40000c00 	.word	0x40000c00
 8002fc4:	40010400 	.word	0x40010400
 8002fc8:	40014000 	.word	0x40014000
 8002fcc:	40001800 	.word	0x40001800

08002fd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e041      	b.n	8003066 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f839 	bl	800306e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3304      	adds	r3, #4
 800300c:	4619      	mov	r1, r3
 800300e:	4610      	mov	r0, r2
 8003010:	f000 fcf0 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <HAL_TIM_PWM_Start_IT+0x28>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e022      	b.n	80030f2 <HAL_TIM_PWM_Start_IT+0x6e>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d109      	bne.n	80030c6 <HAL_TIM_PWM_Start_IT+0x42>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	bf14      	ite	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	2300      	moveq	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	e015      	b.n	80030f2 <HAL_TIM_PWM_Start_IT+0x6e>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d109      	bne.n	80030e0 <HAL_TIM_PWM_Start_IT+0x5c>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e008      	b.n	80030f2 <HAL_TIM_PWM_Start_IT+0x6e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0c7      	b.n	800328a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d104      	bne.n	800310a <HAL_TIM_PWM_Start_IT+0x86>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003108:	e013      	b.n	8003132 <HAL_TIM_PWM_Start_IT+0xae>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b04      	cmp	r3, #4
 800310e:	d104      	bne.n	800311a <HAL_TIM_PWM_Start_IT+0x96>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003118:	e00b      	b.n	8003132 <HAL_TIM_PWM_Start_IT+0xae>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d104      	bne.n	800312a <HAL_TIM_PWM_Start_IT+0xa6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003128:	e003      	b.n	8003132 <HAL_TIM_PWM_Start_IT+0xae>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2202      	movs	r2, #2
 800312e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d841      	bhi.n	80031bc <HAL_TIM_PWM_Start_IT+0x138>
 8003138:	a201      	add	r2, pc, #4	@ (adr r2, 8003140 <HAL_TIM_PWM_Start_IT+0xbc>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003175 	.word	0x08003175
 8003144:	080031bd 	.word	0x080031bd
 8003148:	080031bd 	.word	0x080031bd
 800314c:	080031bd 	.word	0x080031bd
 8003150:	08003187 	.word	0x08003187
 8003154:	080031bd 	.word	0x080031bd
 8003158:	080031bd 	.word	0x080031bd
 800315c:	080031bd 	.word	0x080031bd
 8003160:	08003199 	.word	0x08003199
 8003164:	080031bd 	.word	0x080031bd
 8003168:	080031bd 	.word	0x080031bd
 800316c:	080031bd 	.word	0x080031bd
 8003170:	080031ab 	.word	0x080031ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0202 	orr.w	r2, r2, #2
 8003182:	60da      	str	r2, [r3, #12]
      break;
 8003184:	e01d      	b.n	80031c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0204 	orr.w	r2, r2, #4
 8003194:	60da      	str	r2, [r3, #12]
      break;
 8003196:	e014      	b.n	80031c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0208 	orr.w	r2, r2, #8
 80031a6:	60da      	str	r2, [r3, #12]
      break;
 80031a8:	e00b      	b.n	80031c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0210 	orr.w	r2, r2, #16
 80031b8:	60da      	str	r2, [r3, #12]
      break;
 80031ba:	e002      	b.n	80031c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
      break;
 80031c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d15f      	bne.n	8003288 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2201      	movs	r2, #1
 80031ce:	6839      	ldr	r1, [r7, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 ff96 	bl	8004102 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a2e      	ldr	r2, [pc, #184]	@ (8003294 <HAL_TIM_PWM_Start_IT+0x210>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_TIM_PWM_Start_IT+0x166>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003298 <HAL_TIM_PWM_Start_IT+0x214>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_PWM_Start_IT+0x16a>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_TIM_PWM_Start_IT+0x16c>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003202:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a22      	ldr	r2, [pc, #136]	@ (8003294 <HAL_TIM_PWM_Start_IT+0x210>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d022      	beq.n	8003254 <HAL_TIM_PWM_Start_IT+0x1d0>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003216:	d01d      	beq.n	8003254 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1f      	ldr	r2, [pc, #124]	@ (800329c <HAL_TIM_PWM_Start_IT+0x218>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d018      	beq.n	8003254 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1e      	ldr	r2, [pc, #120]	@ (80032a0 <HAL_TIM_PWM_Start_IT+0x21c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d013      	beq.n	8003254 <HAL_TIM_PWM_Start_IT+0x1d0>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1c      	ldr	r2, [pc, #112]	@ (80032a4 <HAL_TIM_PWM_Start_IT+0x220>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00e      	beq.n	8003254 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <HAL_TIM_PWM_Start_IT+0x214>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d009      	beq.n	8003254 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a18      	ldr	r2, [pc, #96]	@ (80032a8 <HAL_TIM_PWM_Start_IT+0x224>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d004      	beq.n	8003254 <HAL_TIM_PWM_Start_IT+0x1d0>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a17      	ldr	r2, [pc, #92]	@ (80032ac <HAL_TIM_PWM_Start_IT+0x228>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d111      	bne.n	8003278 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b06      	cmp	r3, #6
 8003264:	d010      	beq.n	8003288 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003276:	e007      	b.n	8003288 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003288:	7bfb      	ldrb	r3, [r7, #15]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40010000 	.word	0x40010000
 8003298:	40010400 	.word	0x40010400
 800329c:	40000400 	.word	0x40000400
 80032a0:	40000800 	.word	0x40000800
 80032a4:	40000c00 	.word	0x40000c00
 80032a8:	40014000 	.word	0x40014000
 80032ac:	40001800 	.word	0x40001800

080032b0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b0c      	cmp	r3, #12
 80032c2:	d841      	bhi.n	8003348 <HAL_TIM_PWM_Stop_IT+0x98>
 80032c4:	a201      	add	r2, pc, #4	@ (adr r2, 80032cc <HAL_TIM_PWM_Stop_IT+0x1c>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	08003301 	.word	0x08003301
 80032d0:	08003349 	.word	0x08003349
 80032d4:	08003349 	.word	0x08003349
 80032d8:	08003349 	.word	0x08003349
 80032dc:	08003313 	.word	0x08003313
 80032e0:	08003349 	.word	0x08003349
 80032e4:	08003349 	.word	0x08003349
 80032e8:	08003349 	.word	0x08003349
 80032ec:	08003325 	.word	0x08003325
 80032f0:	08003349 	.word	0x08003349
 80032f4:	08003349 	.word	0x08003349
 80032f8:	08003349 	.word	0x08003349
 80032fc:	08003337 	.word	0x08003337
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0202 	bic.w	r2, r2, #2
 800330e:	60da      	str	r2, [r3, #12]
      break;
 8003310:	e01d      	b.n	800334e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0204 	bic.w	r2, r2, #4
 8003320:	60da      	str	r2, [r3, #12]
      break;
 8003322:	e014      	b.n	800334e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0208 	bic.w	r2, r2, #8
 8003332:	60da      	str	r2, [r3, #12]
      break;
 8003334:	e00b      	b.n	800334e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0210 	bic.w	r2, r2, #16
 8003344:	60da      	str	r2, [r3, #12]
      break;
 8003346:	e002      	b.n	800334e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
      break;
 800334c:	bf00      	nop
  }

  if (status == HAL_OK)
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d161      	bne.n	8003418 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2200      	movs	r2, #0
 800335a:	6839      	ldr	r1, [r7, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fed0 	bl	8004102 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2f      	ldr	r2, [pc, #188]	@ (8003424 <HAL_TIM_PWM_Stop_IT+0x174>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d004      	beq.n	8003376 <HAL_TIM_PWM_Stop_IT+0xc6>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a2d      	ldr	r2, [pc, #180]	@ (8003428 <HAL_TIM_PWM_Stop_IT+0x178>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d101      	bne.n	800337a <HAL_TIM_PWM_Stop_IT+0xca>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_TIM_PWM_Stop_IT+0xcc>
 800337a:	2300      	movs	r3, #0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d017      	beq.n	80033b0 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6a1a      	ldr	r2, [r3, #32]
 8003386:	f241 1311 	movw	r3, #4369	@ 0x1111
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10f      	bne.n	80033b0 <HAL_TIM_PWM_Stop_IT+0x100>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6a1a      	ldr	r2, [r3, #32]
 8003396:	f240 4344 	movw	r3, #1092	@ 0x444
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d107      	bne.n	80033b0 <HAL_TIM_PWM_Stop_IT+0x100>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a1a      	ldr	r2, [r3, #32]
 80033b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10f      	bne.n	80033e0 <HAL_TIM_PWM_Stop_IT+0x130>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6a1a      	ldr	r2, [r3, #32]
 80033c6:	f240 4344 	movw	r3, #1092	@ 0x444
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d107      	bne.n	80033e0 <HAL_TIM_PWM_Stop_IT+0x130>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d104      	bne.n	80033f0 <HAL_TIM_PWM_Stop_IT+0x140>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033ee:	e013      	b.n	8003418 <HAL_TIM_PWM_Stop_IT+0x168>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d104      	bne.n	8003400 <HAL_TIM_PWM_Stop_IT+0x150>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033fe:	e00b      	b.n	8003418 <HAL_TIM_PWM_Stop_IT+0x168>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b08      	cmp	r3, #8
 8003404:	d104      	bne.n	8003410 <HAL_TIM_PWM_Stop_IT+0x160>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800340e:	e003      	b.n	8003418 <HAL_TIM_PWM_Stop_IT+0x168>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003418:	7bfb      	ldrb	r3, [r7, #15]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40010000 	.word	0x40010000
 8003428:	40010400 	.word	0x40010400

0800342c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d020      	beq.n	8003490 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01b      	beq.n	8003490 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0202 	mvn.w	r2, #2
 8003460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fa9d 	bl	80039b6 <HAL_TIM_IC_CaptureCallback>
 800347c:	e005      	b.n	800348a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fa8f 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 faa0 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d020      	beq.n	80034dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01b      	beq.n	80034dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0204 	mvn.w	r2, #4
 80034ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fa77 	bl	80039b6 <HAL_TIM_IC_CaptureCallback>
 80034c8:	e005      	b.n	80034d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fa69 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fa7a 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d020      	beq.n	8003528 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01b      	beq.n	8003528 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0208 	mvn.w	r2, #8
 80034f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2204      	movs	r2, #4
 80034fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fa51 	bl	80039b6 <HAL_TIM_IC_CaptureCallback>
 8003514:	e005      	b.n	8003522 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fa43 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fa54 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b00      	cmp	r3, #0
 8003530:	d020      	beq.n	8003574 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01b      	beq.n	8003574 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0210 	mvn.w	r2, #16
 8003544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2208      	movs	r2, #8
 800354a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fa2b 	bl	80039b6 <HAL_TIM_IC_CaptureCallback>
 8003560:	e005      	b.n	800356e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fa1d 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 fa2e 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00c      	beq.n	8003598 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0201 	mvn.w	r2, #1
 8003590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fe fa42 	bl	8001a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00c      	beq.n	80035bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fea0 	bl	80042fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00c      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d007      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9ff 	bl	80039de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00c      	beq.n	8003604 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0220 	mvn.w	r2, #32
 80035fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fe72 	bl	80042e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003604:	bf00      	nop
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003626:	2302      	movs	r3, #2
 8003628:	e0ae      	b.n	8003788 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b0c      	cmp	r3, #12
 8003636:	f200 809f 	bhi.w	8003778 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800363a:	a201      	add	r2, pc, #4	@ (adr r2, 8003640 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	08003675 	.word	0x08003675
 8003644:	08003779 	.word	0x08003779
 8003648:	08003779 	.word	0x08003779
 800364c:	08003779 	.word	0x08003779
 8003650:	080036b5 	.word	0x080036b5
 8003654:	08003779 	.word	0x08003779
 8003658:	08003779 	.word	0x08003779
 800365c:	08003779 	.word	0x08003779
 8003660:	080036f7 	.word	0x080036f7
 8003664:	08003779 	.word	0x08003779
 8003668:	08003779 	.word	0x08003779
 800366c:	08003779 	.word	0x08003779
 8003670:	08003737 	.word	0x08003737
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fa66 	bl	8003b4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0208 	orr.w	r2, r2, #8
 800368e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0204 	bic.w	r2, r2, #4
 800369e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6999      	ldr	r1, [r3, #24]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	619a      	str	r2, [r3, #24]
      break;
 80036b2:	e064      	b.n	800377e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fab6 	bl	8003c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6999      	ldr	r1, [r3, #24]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	021a      	lsls	r2, r3, #8
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	619a      	str	r2, [r3, #24]
      break;
 80036f4:	e043      	b.n	800377e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fb0b 	bl	8003d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0208 	orr.w	r2, r2, #8
 8003710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0204 	bic.w	r2, r2, #4
 8003720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69d9      	ldr	r1, [r3, #28]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	61da      	str	r2, [r3, #28]
      break;
 8003734:	e023      	b.n	800377e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fb5f 	bl	8003e00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69d9      	ldr	r1, [r3, #28]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	021a      	lsls	r2, r3, #8
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	61da      	str	r2, [r3, #28]
      break;
 8003776:	e002      	b.n	800377e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	75fb      	strb	r3, [r7, #23]
      break;
 800377c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003786:	7dfb      	ldrb	r3, [r7, #23]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_TIM_ConfigClockSource+0x1c>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e0b4      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x186>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037e4:	d03e      	beq.n	8003864 <HAL_TIM_ConfigClockSource+0xd4>
 80037e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ea:	f200 8087 	bhi.w	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f2:	f000 8086 	beq.w	8003902 <HAL_TIM_ConfigClockSource+0x172>
 80037f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037fa:	d87f      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b70      	cmp	r3, #112	@ 0x70
 80037fe:	d01a      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0xa6>
 8003800:	2b70      	cmp	r3, #112	@ 0x70
 8003802:	d87b      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	2b60      	cmp	r3, #96	@ 0x60
 8003806:	d050      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x11a>
 8003808:	2b60      	cmp	r3, #96	@ 0x60
 800380a:	d877      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 800380c:	2b50      	cmp	r3, #80	@ 0x50
 800380e:	d03c      	beq.n	800388a <HAL_TIM_ConfigClockSource+0xfa>
 8003810:	2b50      	cmp	r3, #80	@ 0x50
 8003812:	d873      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 8003814:	2b40      	cmp	r3, #64	@ 0x40
 8003816:	d058      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x13a>
 8003818:	2b40      	cmp	r3, #64	@ 0x40
 800381a:	d86f      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 800381c:	2b30      	cmp	r3, #48	@ 0x30
 800381e:	d064      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x15a>
 8003820:	2b30      	cmp	r3, #48	@ 0x30
 8003822:	d86b      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 8003824:	2b20      	cmp	r3, #32
 8003826:	d060      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x15a>
 8003828:	2b20      	cmp	r3, #32
 800382a:	d867      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d05c      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x15a>
 8003830:	2b10      	cmp	r3, #16
 8003832:	d05a      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x15a>
 8003834:	e062      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003846:	f000 fc3c 	bl	80040c2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003858:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	609a      	str	r2, [r3, #8]
      break;
 8003862:	e04f      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003874:	f000 fc25 	bl	80040c2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003886:	609a      	str	r2, [r3, #8]
      break;
 8003888:	e03c      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003896:	461a      	mov	r2, r3
 8003898:	f000 fb99 	bl	8003fce <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2150      	movs	r1, #80	@ 0x50
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fbf2 	bl	800408c <TIM_ITRx_SetConfig>
      break;
 80038a8:	e02c      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038b6:	461a      	mov	r2, r3
 80038b8:	f000 fbb8 	bl	800402c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2160      	movs	r1, #96	@ 0x60
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fbe2 	bl	800408c <TIM_ITRx_SetConfig>
      break;
 80038c8:	e01c      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d6:	461a      	mov	r2, r3
 80038d8:	f000 fb79 	bl	8003fce <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2140      	movs	r1, #64	@ 0x40
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fbd2 	bl	800408c <TIM_ITRx_SetConfig>
      break;
 80038e8:	e00c      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f000 fbc9 	bl	800408c <TIM_ITRx_SetConfig>
      break;
 80038fa:	e003      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003900:	e000      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003902:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003914:	7bfb      	ldrb	r3, [r7, #15]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003932:	2302      	movs	r3, #2
 8003934:	e031      	b.n	800399a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003946:	6839      	ldr	r1, [r7, #0]
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 faaf 	bl	8003eac <TIM_SlaveTimer_SetConfig>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d009      	beq.n	8003968 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e018      	b.n	800399a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003976:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003986:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a46      	ldr	r2, [pc, #280]	@ (8003b20 <TIM_Base_SetConfig+0x12c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a12:	d00f      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a43      	ldr	r2, [pc, #268]	@ (8003b24 <TIM_Base_SetConfig+0x130>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a42      	ldr	r2, [pc, #264]	@ (8003b28 <TIM_Base_SetConfig+0x134>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a41      	ldr	r2, [pc, #260]	@ (8003b2c <TIM_Base_SetConfig+0x138>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a40      	ldr	r2, [pc, #256]	@ (8003b30 <TIM_Base_SetConfig+0x13c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d108      	bne.n	8003a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a35      	ldr	r2, [pc, #212]	@ (8003b20 <TIM_Base_SetConfig+0x12c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02b      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a54:	d027      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a32      	ldr	r2, [pc, #200]	@ (8003b24 <TIM_Base_SetConfig+0x130>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d023      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a31      	ldr	r2, [pc, #196]	@ (8003b28 <TIM_Base_SetConfig+0x134>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01f      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a30      	ldr	r2, [pc, #192]	@ (8003b2c <TIM_Base_SetConfig+0x138>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01b      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a2f      	ldr	r2, [pc, #188]	@ (8003b30 <TIM_Base_SetConfig+0x13c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d017      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a2e      	ldr	r2, [pc, #184]	@ (8003b34 <TIM_Base_SetConfig+0x140>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2d      	ldr	r2, [pc, #180]	@ (8003b38 <TIM_Base_SetConfig+0x144>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00f      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a2c      	ldr	r2, [pc, #176]	@ (8003b3c <TIM_Base_SetConfig+0x148>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00b      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2b      	ldr	r2, [pc, #172]	@ (8003b40 <TIM_Base_SetConfig+0x14c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2a      	ldr	r2, [pc, #168]	@ (8003b44 <TIM_Base_SetConfig+0x150>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a29      	ldr	r2, [pc, #164]	@ (8003b48 <TIM_Base_SetConfig+0x154>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d108      	bne.n	8003ab8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a10      	ldr	r2, [pc, #64]	@ (8003b20 <TIM_Base_SetConfig+0x12c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_Base_SetConfig+0xf8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a12      	ldr	r2, [pc, #72]	@ (8003b30 <TIM_Base_SetConfig+0x13c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d103      	bne.n	8003af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d105      	bne.n	8003b12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f023 0201 	bic.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	611a      	str	r2, [r3, #16]
  }
}
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40010000 	.word	0x40010000
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800
 8003b2c:	40000c00 	.word	0x40000c00
 8003b30:	40010400 	.word	0x40010400
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40014400 	.word	0x40014400
 8003b3c:	40014800 	.word	0x40014800
 8003b40:	40001800 	.word	0x40001800
 8003b44:	40001c00 	.word	0x40001c00
 8003b48:	40002000 	.word	0x40002000

08003b4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f023 0201 	bic.w	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f023 0302 	bic.w	r3, r3, #2
 8003b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a20      	ldr	r2, [pc, #128]	@ (8003c24 <TIM_OC1_SetConfig+0xd8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_OC1_SetConfig+0x64>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a1f      	ldr	r2, [pc, #124]	@ (8003c28 <TIM_OC1_SetConfig+0xdc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d10c      	bne.n	8003bca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f023 0308 	bic.w	r3, r3, #8
 8003bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f023 0304 	bic.w	r3, r3, #4
 8003bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a15      	ldr	r2, [pc, #84]	@ (8003c24 <TIM_OC1_SetConfig+0xd8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_OC1_SetConfig+0x8e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a14      	ldr	r2, [pc, #80]	@ (8003c28 <TIM_OC1_SetConfig+0xdc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d111      	bne.n	8003bfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	621a      	str	r2, [r3, #32]
}
 8003c18:	bf00      	nop
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	40010000 	.word	0x40010000
 8003c28:	40010400 	.word	0x40010400

08003c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f023 0210 	bic.w	r2, r3, #16
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f023 0320 	bic.w	r3, r3, #32
 8003c76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a22      	ldr	r2, [pc, #136]	@ (8003d10 <TIM_OC2_SetConfig+0xe4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d003      	beq.n	8003c94 <TIM_OC2_SetConfig+0x68>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a21      	ldr	r2, [pc, #132]	@ (8003d14 <TIM_OC2_SetConfig+0xe8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d10d      	bne.n	8003cb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a17      	ldr	r2, [pc, #92]	@ (8003d10 <TIM_OC2_SetConfig+0xe4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_OC2_SetConfig+0x94>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a16      	ldr	r2, [pc, #88]	@ (8003d14 <TIM_OC2_SetConfig+0xe8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d113      	bne.n	8003ce8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40010000 	.word	0x40010000
 8003d14:	40010400 	.word	0x40010400

08003d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a21      	ldr	r2, [pc, #132]	@ (8003df8 <TIM_OC3_SetConfig+0xe0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d003      	beq.n	8003d7e <TIM_OC3_SetConfig+0x66>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a20      	ldr	r2, [pc, #128]	@ (8003dfc <TIM_OC3_SetConfig+0xe4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10d      	bne.n	8003d9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a16      	ldr	r2, [pc, #88]	@ (8003df8 <TIM_OC3_SetConfig+0xe0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_OC3_SetConfig+0x92>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a15      	ldr	r2, [pc, #84]	@ (8003dfc <TIM_OC3_SetConfig+0xe4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d113      	bne.n	8003dd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	621a      	str	r2, [r3, #32]
}
 8003dec:	bf00      	nop
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40010400 	.word	0x40010400

08003e00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	031b      	lsls	r3, r3, #12
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ea4 <TIM_OC4_SetConfig+0xa4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_OC4_SetConfig+0x68>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a11      	ldr	r2, [pc, #68]	@ (8003ea8 <TIM_OC4_SetConfig+0xa8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d109      	bne.n	8003e7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	019b      	lsls	r3, r3, #6
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40010400 	.word	0x40010400

08003eac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f023 0307 	bic.w	r3, r3, #7
 8003eda:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b70      	cmp	r3, #112	@ 0x70
 8003ef4:	d01a      	beq.n	8003f2c <TIM_SlaveTimer_SetConfig+0x80>
 8003ef6:	2b70      	cmp	r3, #112	@ 0x70
 8003ef8:	d860      	bhi.n	8003fbc <TIM_SlaveTimer_SetConfig+0x110>
 8003efa:	2b60      	cmp	r3, #96	@ 0x60
 8003efc:	d054      	beq.n	8003fa8 <TIM_SlaveTimer_SetConfig+0xfc>
 8003efe:	2b60      	cmp	r3, #96	@ 0x60
 8003f00:	d85c      	bhi.n	8003fbc <TIM_SlaveTimer_SetConfig+0x110>
 8003f02:	2b50      	cmp	r3, #80	@ 0x50
 8003f04:	d046      	beq.n	8003f94 <TIM_SlaveTimer_SetConfig+0xe8>
 8003f06:	2b50      	cmp	r3, #80	@ 0x50
 8003f08:	d858      	bhi.n	8003fbc <TIM_SlaveTimer_SetConfig+0x110>
 8003f0a:	2b40      	cmp	r3, #64	@ 0x40
 8003f0c:	d019      	beq.n	8003f42 <TIM_SlaveTimer_SetConfig+0x96>
 8003f0e:	2b40      	cmp	r3, #64	@ 0x40
 8003f10:	d854      	bhi.n	8003fbc <TIM_SlaveTimer_SetConfig+0x110>
 8003f12:	2b30      	cmp	r3, #48	@ 0x30
 8003f14:	d055      	beq.n	8003fc2 <TIM_SlaveTimer_SetConfig+0x116>
 8003f16:	2b30      	cmp	r3, #48	@ 0x30
 8003f18:	d850      	bhi.n	8003fbc <TIM_SlaveTimer_SetConfig+0x110>
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d051      	beq.n	8003fc2 <TIM_SlaveTimer_SetConfig+0x116>
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d84c      	bhi.n	8003fbc <TIM_SlaveTimer_SetConfig+0x110>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d04d      	beq.n	8003fc2 <TIM_SlaveTimer_SetConfig+0x116>
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d04b      	beq.n	8003fc2 <TIM_SlaveTimer_SetConfig+0x116>
 8003f2a:	e047      	b.n	8003fbc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003f3c:	f000 f8c1 	bl	80040c2 <TIM_ETR_SetConfig>
      break;
 8003f40:	e040      	b.n	8003fc4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d101      	bne.n	8003f4e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e03b      	b.n	8003fc6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6a1a      	ldr	r2, [r3, #32]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f74:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	621a      	str	r2, [r3, #32]
      break;
 8003f92:	e017      	b.n	8003fc4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f000 f814 	bl	8003fce <TIM_TI1_ConfigInputStage>
      break;
 8003fa6:	e00d      	b.n	8003fc4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f000 f839 	bl	800402c <TIM_TI2_ConfigInputStage>
      break;
 8003fba:	e003      	b.n	8003fc4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003fc0:	e000      	b.n	8003fc4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003fc2:	bf00      	nop
  }

  return status;
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b087      	sub	sp, #28
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f023 0201 	bic.w	r2, r3, #1
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f023 030a 	bic.w	r3, r3, #10
 800400a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	621a      	str	r2, [r3, #32]
}
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f023 0210 	bic.w	r2, r3, #16
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	031b      	lsls	r3, r3, #12
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004068:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	621a      	str	r2, [r3, #32]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f043 0307 	orr.w	r3, r3, #7
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	609a      	str	r2, [r3, #8]
}
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b087      	sub	sp, #28
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	021a      	lsls	r2, r3, #8
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	609a      	str	r2, [r3, #8]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004102:	b480      	push	{r7}
 8004104:	b087      	sub	sp, #28
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2201      	movs	r2, #1
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1a      	ldr	r2, [r3, #32]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	43db      	mvns	r3, r3
 8004124:	401a      	ands	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1a      	ldr	r2, [r3, #32]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	fa01 f303 	lsl.w	r3, r1, r3
 800413a:	431a      	orrs	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	621a      	str	r2, [r3, #32]
}
 8004140:	bf00      	nop
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004160:	2302      	movs	r3, #2
 8004162:	e05a      	b.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a21      	ldr	r2, [pc, #132]	@ (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d022      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b0:	d01d      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1d      	ldr	r2, [pc, #116]	@ (800422c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d018      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004230 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004234 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a18      	ldr	r2, [pc, #96]	@ (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d009      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a17      	ldr	r2, [pc, #92]	@ (800423c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a15      	ldr	r2, [pc, #84]	@ (8004240 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10c      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40010000 	.word	0x40010000
 800422c:	40000400 	.word	0x40000400
 8004230:	40000800 	.word	0x40000800
 8004234:	40000c00 	.word	0x40000c00
 8004238:	40010400 	.word	0x40010400
 800423c:	40014000 	.word	0x40014000
 8004240:	40001800 	.word	0x40001800

08004244 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800425c:	2302      	movs	r3, #2
 800425e:	e03d      	b.n	80042dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e042      	b.n	80043a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fd fbe6 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2224      	movs	r2, #36	@ 0x24
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f82b 	bl	80043b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b4:	b0c0      	sub	sp, #256	@ 0x100
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043cc:	68d9      	ldr	r1, [r3, #12]
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	ea40 0301 	orr.w	r3, r0, r1
 80043d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004408:	f021 010c 	bic.w	r1, r1, #12
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004416:	430b      	orrs	r3, r1
 8004418:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442a:	6999      	ldr	r1, [r3, #24]
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	ea40 0301 	orr.w	r3, r0, r1
 8004436:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4b8f      	ldr	r3, [pc, #572]	@ (800467c <UART_SetConfig+0x2cc>)
 8004440:	429a      	cmp	r2, r3
 8004442:	d005      	beq.n	8004450 <UART_SetConfig+0xa0>
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b8d      	ldr	r3, [pc, #564]	@ (8004680 <UART_SetConfig+0x2d0>)
 800444c:	429a      	cmp	r2, r3
 800444e:	d104      	bne.n	800445a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004450:	f7fe f81c 	bl	800248c <HAL_RCC_GetPCLK2Freq>
 8004454:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004458:	e003      	b.n	8004462 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800445a:	f7fe f803 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 800445e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800446c:	f040 810c 	bne.w	8004688 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004474:	2200      	movs	r2, #0
 8004476:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800447a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800447e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004482:	4622      	mov	r2, r4
 8004484:	462b      	mov	r3, r5
 8004486:	1891      	adds	r1, r2, r2
 8004488:	65b9      	str	r1, [r7, #88]	@ 0x58
 800448a:	415b      	adcs	r3, r3
 800448c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800448e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004492:	4621      	mov	r1, r4
 8004494:	eb12 0801 	adds.w	r8, r2, r1
 8004498:	4629      	mov	r1, r5
 800449a:	eb43 0901 	adc.w	r9, r3, r1
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044b2:	4690      	mov	r8, r2
 80044b4:	4699      	mov	r9, r3
 80044b6:	4623      	mov	r3, r4
 80044b8:	eb18 0303 	adds.w	r3, r8, r3
 80044bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044c0:	462b      	mov	r3, r5
 80044c2:	eb49 0303 	adc.w	r3, r9, r3
 80044c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044de:	460b      	mov	r3, r1
 80044e0:	18db      	adds	r3, r3, r3
 80044e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80044e4:	4613      	mov	r3, r2
 80044e6:	eb42 0303 	adc.w	r3, r2, r3
 80044ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80044ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044f4:	f7fc f98e 	bl	8000814 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4b61      	ldr	r3, [pc, #388]	@ (8004684 <UART_SetConfig+0x2d4>)
 80044fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	011c      	lsls	r4, r3, #4
 8004506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800450a:	2200      	movs	r2, #0
 800450c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004510:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004514:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004518:	4642      	mov	r2, r8
 800451a:	464b      	mov	r3, r9
 800451c:	1891      	adds	r1, r2, r2
 800451e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004520:	415b      	adcs	r3, r3
 8004522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004524:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004528:	4641      	mov	r1, r8
 800452a:	eb12 0a01 	adds.w	sl, r2, r1
 800452e:	4649      	mov	r1, r9
 8004530:	eb43 0b01 	adc.w	fp, r3, r1
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004540:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004544:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004548:	4692      	mov	sl, r2
 800454a:	469b      	mov	fp, r3
 800454c:	4643      	mov	r3, r8
 800454e:	eb1a 0303 	adds.w	r3, sl, r3
 8004552:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004556:	464b      	mov	r3, r9
 8004558:	eb4b 0303 	adc.w	r3, fp, r3
 800455c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800456c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004570:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004574:	460b      	mov	r3, r1
 8004576:	18db      	adds	r3, r3, r3
 8004578:	643b      	str	r3, [r7, #64]	@ 0x40
 800457a:	4613      	mov	r3, r2
 800457c:	eb42 0303 	adc.w	r3, r2, r3
 8004580:	647b      	str	r3, [r7, #68]	@ 0x44
 8004582:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004586:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800458a:	f7fc f943 	bl	8000814 <__aeabi_uldivmod>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4611      	mov	r1, r2
 8004594:	4b3b      	ldr	r3, [pc, #236]	@ (8004684 <UART_SetConfig+0x2d4>)
 8004596:	fba3 2301 	umull	r2, r3, r3, r1
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	2264      	movs	r2, #100	@ 0x64
 800459e:	fb02 f303 	mul.w	r3, r2, r3
 80045a2:	1acb      	subs	r3, r1, r3
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045aa:	4b36      	ldr	r3, [pc, #216]	@ (8004684 <UART_SetConfig+0x2d4>)
 80045ac:	fba3 2302 	umull	r2, r3, r3, r2
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045b8:	441c      	add	r4, r3
 80045ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045cc:	4642      	mov	r2, r8
 80045ce:	464b      	mov	r3, r9
 80045d0:	1891      	adds	r1, r2, r2
 80045d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045d4:	415b      	adcs	r3, r3
 80045d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045dc:	4641      	mov	r1, r8
 80045de:	1851      	adds	r1, r2, r1
 80045e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80045e2:	4649      	mov	r1, r9
 80045e4:	414b      	adcs	r3, r1
 80045e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045f4:	4659      	mov	r1, fp
 80045f6:	00cb      	lsls	r3, r1, #3
 80045f8:	4651      	mov	r1, sl
 80045fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045fe:	4651      	mov	r1, sl
 8004600:	00ca      	lsls	r2, r1, #3
 8004602:	4610      	mov	r0, r2
 8004604:	4619      	mov	r1, r3
 8004606:	4603      	mov	r3, r0
 8004608:	4642      	mov	r2, r8
 800460a:	189b      	adds	r3, r3, r2
 800460c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004610:	464b      	mov	r3, r9
 8004612:	460a      	mov	r2, r1
 8004614:	eb42 0303 	adc.w	r3, r2, r3
 8004618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004628:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800462c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004630:	460b      	mov	r3, r1
 8004632:	18db      	adds	r3, r3, r3
 8004634:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004636:	4613      	mov	r3, r2
 8004638:	eb42 0303 	adc.w	r3, r2, r3
 800463c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800463e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004642:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004646:	f7fc f8e5 	bl	8000814 <__aeabi_uldivmod>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4b0d      	ldr	r3, [pc, #52]	@ (8004684 <UART_SetConfig+0x2d4>)
 8004650:	fba3 1302 	umull	r1, r3, r3, r2
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	2164      	movs	r1, #100	@ 0x64
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	3332      	adds	r3, #50	@ 0x32
 8004662:	4a08      	ldr	r2, [pc, #32]	@ (8004684 <UART_SetConfig+0x2d4>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	f003 0207 	and.w	r2, r3, #7
 800466e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4422      	add	r2, r4
 8004676:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004678:	e106      	b.n	8004888 <UART_SetConfig+0x4d8>
 800467a:	bf00      	nop
 800467c:	40011000 	.word	0x40011000
 8004680:	40011400 	.word	0x40011400
 8004684:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800468c:	2200      	movs	r2, #0
 800468e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004692:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004696:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800469a:	4642      	mov	r2, r8
 800469c:	464b      	mov	r3, r9
 800469e:	1891      	adds	r1, r2, r2
 80046a0:	6239      	str	r1, [r7, #32]
 80046a2:	415b      	adcs	r3, r3
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046aa:	4641      	mov	r1, r8
 80046ac:	1854      	adds	r4, r2, r1
 80046ae:	4649      	mov	r1, r9
 80046b0:	eb43 0501 	adc.w	r5, r3, r1
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	00eb      	lsls	r3, r5, #3
 80046be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046c2:	00e2      	lsls	r2, r4, #3
 80046c4:	4614      	mov	r4, r2
 80046c6:	461d      	mov	r5, r3
 80046c8:	4643      	mov	r3, r8
 80046ca:	18e3      	adds	r3, r4, r3
 80046cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046d0:	464b      	mov	r3, r9
 80046d2:	eb45 0303 	adc.w	r3, r5, r3
 80046d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046f6:	4629      	mov	r1, r5
 80046f8:	008b      	lsls	r3, r1, #2
 80046fa:	4621      	mov	r1, r4
 80046fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004700:	4621      	mov	r1, r4
 8004702:	008a      	lsls	r2, r1, #2
 8004704:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004708:	f7fc f884 	bl	8000814 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4b60      	ldr	r3, [pc, #384]	@ (8004894 <UART_SetConfig+0x4e4>)
 8004712:	fba3 2302 	umull	r2, r3, r3, r2
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	011c      	lsls	r4, r3, #4
 800471a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800471e:	2200      	movs	r2, #0
 8004720:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004724:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004728:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800472c:	4642      	mov	r2, r8
 800472e:	464b      	mov	r3, r9
 8004730:	1891      	adds	r1, r2, r2
 8004732:	61b9      	str	r1, [r7, #24]
 8004734:	415b      	adcs	r3, r3
 8004736:	61fb      	str	r3, [r7, #28]
 8004738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800473c:	4641      	mov	r1, r8
 800473e:	1851      	adds	r1, r2, r1
 8004740:	6139      	str	r1, [r7, #16]
 8004742:	4649      	mov	r1, r9
 8004744:	414b      	adcs	r3, r1
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004754:	4659      	mov	r1, fp
 8004756:	00cb      	lsls	r3, r1, #3
 8004758:	4651      	mov	r1, sl
 800475a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800475e:	4651      	mov	r1, sl
 8004760:	00ca      	lsls	r2, r1, #3
 8004762:	4610      	mov	r0, r2
 8004764:	4619      	mov	r1, r3
 8004766:	4603      	mov	r3, r0
 8004768:	4642      	mov	r2, r8
 800476a:	189b      	adds	r3, r3, r2
 800476c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004770:	464b      	mov	r3, r9
 8004772:	460a      	mov	r2, r1
 8004774:	eb42 0303 	adc.w	r3, r2, r3
 8004778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004786:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004794:	4649      	mov	r1, r9
 8004796:	008b      	lsls	r3, r1, #2
 8004798:	4641      	mov	r1, r8
 800479a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800479e:	4641      	mov	r1, r8
 80047a0:	008a      	lsls	r2, r1, #2
 80047a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047a6:	f7fc f835 	bl	8000814 <__aeabi_uldivmod>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4611      	mov	r1, r2
 80047b0:	4b38      	ldr	r3, [pc, #224]	@ (8004894 <UART_SetConfig+0x4e4>)
 80047b2:	fba3 2301 	umull	r2, r3, r3, r1
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	2264      	movs	r2, #100	@ 0x64
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	1acb      	subs	r3, r1, r3
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	3332      	adds	r3, #50	@ 0x32
 80047c4:	4a33      	ldr	r2, [pc, #204]	@ (8004894 <UART_SetConfig+0x4e4>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047d0:	441c      	add	r4, r3
 80047d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d6:	2200      	movs	r2, #0
 80047d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80047da:	677a      	str	r2, [r7, #116]	@ 0x74
 80047dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047e0:	4642      	mov	r2, r8
 80047e2:	464b      	mov	r3, r9
 80047e4:	1891      	adds	r1, r2, r2
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	415b      	adcs	r3, r3
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f0:	4641      	mov	r1, r8
 80047f2:	1851      	adds	r1, r2, r1
 80047f4:	6039      	str	r1, [r7, #0]
 80047f6:	4649      	mov	r1, r9
 80047f8:	414b      	adcs	r3, r1
 80047fa:	607b      	str	r3, [r7, #4]
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004808:	4659      	mov	r1, fp
 800480a:	00cb      	lsls	r3, r1, #3
 800480c:	4651      	mov	r1, sl
 800480e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004812:	4651      	mov	r1, sl
 8004814:	00ca      	lsls	r2, r1, #3
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	4603      	mov	r3, r0
 800481c:	4642      	mov	r2, r8
 800481e:	189b      	adds	r3, r3, r2
 8004820:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004822:	464b      	mov	r3, r9
 8004824:	460a      	mov	r2, r1
 8004826:	eb42 0303 	adc.w	r3, r2, r3
 800482a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	663b      	str	r3, [r7, #96]	@ 0x60
 8004836:	667a      	str	r2, [r7, #100]	@ 0x64
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004844:	4649      	mov	r1, r9
 8004846:	008b      	lsls	r3, r1, #2
 8004848:	4641      	mov	r1, r8
 800484a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800484e:	4641      	mov	r1, r8
 8004850:	008a      	lsls	r2, r1, #2
 8004852:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004856:	f7fb ffdd 	bl	8000814 <__aeabi_uldivmod>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <UART_SetConfig+0x4e4>)
 8004860:	fba3 1302 	umull	r1, r3, r3, r2
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	2164      	movs	r1, #100	@ 0x64
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	3332      	adds	r3, #50	@ 0x32
 8004872:	4a08      	ldr	r2, [pc, #32]	@ (8004894 <UART_SetConfig+0x4e4>)
 8004874:	fba2 2303 	umull	r2, r3, r2, r3
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	f003 020f 	and.w	r2, r3, #15
 800487e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4422      	add	r2, r4
 8004886:	609a      	str	r2, [r3, #8]
}
 8004888:	bf00      	nop
 800488a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800488e:	46bd      	mov	sp, r7
 8004890:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004894:	51eb851f 	.word	0x51eb851f

08004898 <memset>:
 8004898:	4402      	add	r2, r0
 800489a:	4603      	mov	r3, r0
 800489c:	4293      	cmp	r3, r2
 800489e:	d100      	bne.n	80048a2 <memset+0xa>
 80048a0:	4770      	bx	lr
 80048a2:	f803 1b01 	strb.w	r1, [r3], #1
 80048a6:	e7f9      	b.n	800489c <memset+0x4>

080048a8 <__libc_init_array>:
 80048a8:	b570      	push	{r4, r5, r6, lr}
 80048aa:	4d0d      	ldr	r5, [pc, #52]	@ (80048e0 <__libc_init_array+0x38>)
 80048ac:	4c0d      	ldr	r4, [pc, #52]	@ (80048e4 <__libc_init_array+0x3c>)
 80048ae:	1b64      	subs	r4, r4, r5
 80048b0:	10a4      	asrs	r4, r4, #2
 80048b2:	2600      	movs	r6, #0
 80048b4:	42a6      	cmp	r6, r4
 80048b6:	d109      	bne.n	80048cc <__libc_init_array+0x24>
 80048b8:	4d0b      	ldr	r5, [pc, #44]	@ (80048e8 <__libc_init_array+0x40>)
 80048ba:	4c0c      	ldr	r4, [pc, #48]	@ (80048ec <__libc_init_array+0x44>)
 80048bc:	f000 f818 	bl	80048f0 <_init>
 80048c0:	1b64      	subs	r4, r4, r5
 80048c2:	10a4      	asrs	r4, r4, #2
 80048c4:	2600      	movs	r6, #0
 80048c6:	42a6      	cmp	r6, r4
 80048c8:	d105      	bne.n	80048d6 <__libc_init_array+0x2e>
 80048ca:	bd70      	pop	{r4, r5, r6, pc}
 80048cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d0:	4798      	blx	r3
 80048d2:	3601      	adds	r6, #1
 80048d4:	e7ee      	b.n	80048b4 <__libc_init_array+0xc>
 80048d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048da:	4798      	blx	r3
 80048dc:	3601      	adds	r6, #1
 80048de:	e7f2      	b.n	80048c6 <__libc_init_array+0x1e>
 80048e0:	08004928 	.word	0x08004928
 80048e4:	08004928 	.word	0x08004928
 80048e8:	08004928 	.word	0x08004928
 80048ec:	0800492c 	.word	0x0800492c

080048f0 <_init>:
 80048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f2:	bf00      	nop
 80048f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f6:	bc08      	pop	{r3}
 80048f8:	469e      	mov	lr, r3
 80048fa:	4770      	bx	lr

080048fc <_fini>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr
