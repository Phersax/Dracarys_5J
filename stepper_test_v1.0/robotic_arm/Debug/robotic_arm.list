
robotic_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004574  08004574  00005574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800458c  0800458c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  0800458c  0800458c  0000558c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004594  08004594  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004594  08004594  00005594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004598  08004598  00005598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800459c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000000c  080045a8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  080045a8  00006358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0a9  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002357  00000000  00000000  000150e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00017440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a47  00000000  00000000  00018170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000219da  00000000  00000000  00018bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cd1  00000000  00000000  0003a591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd614  00000000  00000000  0004b262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118876  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000362c  00000000  00000000  001188bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0011bee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800455c 	.word	0x0800455c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800455c 	.word	0x0800455c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	4b55      	ldr	r3, [pc, #340]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a54      	ldr	r2, [pc, #336]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b52      	ldr	r3, [pc, #328]	@ (8000664 <MX_GPIO_Init+0x170>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	4b4e      	ldr	r3, [pc, #312]	@ (8000664 <MX_GPIO_Init+0x170>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a4d      	ldr	r2, [pc, #308]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b4b      	ldr	r3, [pc, #300]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4b47      	ldr	r3, [pc, #284]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a46      	ldr	r2, [pc, #280]	@ (8000664 <MX_GPIO_Init+0x170>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b44      	ldr	r3, [pc, #272]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b40      	ldr	r3, [pc, #256]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a3f      	ldr	r2, [pc, #252]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b3d      	ldr	r3, [pc, #244]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIRECTION4_Pin|DIRECTION3_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	21e0      	movs	r1, #224	@ 0xe0
 800057e:	483a      	ldr	r0, [pc, #232]	@ (8000668 <MX_GPIO_Init+0x174>)
 8000580:	f001 fc82 	bl	8001e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION2_GPIO_Port, DIRECTION2_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2110      	movs	r1, #16
 8000588:	4838      	ldr	r0, [pc, #224]	@ (800066c <MX_GPIO_Init+0x178>)
 800058a:	f001 fc7d 	bl	8001e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2120      	movs	r1, #32
 8000592:	4836      	ldr	r0, [pc, #216]	@ (800066c <MX_GPIO_Init+0x178>)
 8000594:	f001 fc78 	bl	8001e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION1_GPIO_Port, DIRECTION1_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2101      	movs	r1, #1
 800059c:	4834      	ldr	r0, [pc, #208]	@ (8000670 <MX_GPIO_Init+0x17c>)
 800059e:	f001 fc73 	bl	8001e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISABLE_button_Pin;
 80005a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISABLE_button_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	482c      	ldr	r0, [pc, #176]	@ (800066c <MX_GPIO_Init+0x178>)
 80005ba:	f001 fad1 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005be:	2320      	movs	r3, #32
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4824      	ldr	r0, [pc, #144]	@ (8000668 <MX_GPIO_Init+0x174>)
 80005d6:	f001 fac3 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIRECTION4_Pin|DIRECTION3_Pin;
 80005da:	23c0      	movs	r3, #192	@ 0xc0
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	481d      	ldr	r0, [pc, #116]	@ (8000668 <MX_GPIO_Init+0x174>)
 80005f2:	f001 fab5 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRECTION2_Pin;
 80005f6:	2310      	movs	r3, #16
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION2_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4817      	ldr	r0, [pc, #92]	@ (800066c <MX_GPIO_Init+0x178>)
 800060e:	f001 faa7 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000612:	2320      	movs	r3, #32
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061a:	2301      	movs	r3, #1
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061e:	2302      	movs	r3, #2
 8000620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4810      	ldr	r0, [pc, #64]	@ (800066c <MX_GPIO_Init+0x178>)
 800062a:	f001 fa99 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRECTION1_Pin;
 800062e:	2301      	movs	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000636:	2302      	movs	r3, #2
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION1_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	480a      	ldr	r0, [pc, #40]	@ (8000670 <MX_GPIO_Init+0x17c>)
 8000646:	f001 fa8b 	bl	8001b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	2028      	movs	r0, #40	@ 0x28
 8000650:	f001 fa4f 	bl	8001af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000654:	2028      	movs	r0, #40	@ 0x28
 8000656:	f001 fa68 	bl	8001b2a <HAL_NVIC_EnableIRQ>

}
 800065a:	bf00      	nop
 800065c:	3728      	adds	r7, #40	@ 0x28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40020000 	.word	0x40020000
 800066c:	40020800 	.word	0x40020800
 8000670:	40020400 	.word	0x40020400

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f001 f8ed 	bl	8001858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f899 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f7ff ff37 	bl	80004f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000686:	f001 f84b 	bl	8001720 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800068a:	f000 fbb5 	bl	8000df8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800068e:	f000 fc7b 	bl	8000f88 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000692:	f000 fa8d 	bl	8000bb0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000696:	f000 fb2d 	bl	8000cf4 <MX_TIM2_Init>
  MX_TIM4_Init();
 800069a:	f000 fc11 	bl	8000ec0 <MX_TIM4_Init>
  MX_TIM8_Init();
 800069e:	f000 fcd7 	bl	8001050 <MX_TIM8_Init>
  MX_TIM10_Init();
 80006a2:	f000 fd77 	bl	8001194 <MX_TIM10_Init>
  MX_TIM11_Init();
 80006a6:	f000 fdc3 	bl	8001230 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 80006aa:	482f      	ldr	r0, [pc, #188]	@ (8000768 <main+0xf4>)
 80006ac:	f002 fa56 	bl	8002b5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80006b0:	482e      	ldr	r0, [pc, #184]	@ (800076c <main+0xf8>)
 80006b2:	f002 fa53 	bl	8002b5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 80006b6:	482e      	ldr	r0, [pc, #184]	@ (8000770 <main+0xfc>)
 80006b8:	f002 fa50 	bl	8002b5c <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET); //ENABLE
 80006bc:	2200      	movs	r2, #0
 80006be:	2120      	movs	r1, #32
 80006c0:	482c      	ldr	r0, [pc, #176]	@ (8000774 <main+0x100>)
 80006c2:	f001 fbe1 	bl	8001e88 <HAL_GPIO_WritePin>
	/*
	 stepper_init(obj, resol, microstep, enable_port, direction_port, timer slave, timerpwm*/
	stepper_init(&stp1, &htim1, &htim4, 1.8, 4*4.27, DIRECTION1_GPIO_Port,
 80006c6:	2301      	movs	r3, #1
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000778 <main+0x104>)
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2311      	movs	r3, #17
 80006d0:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 800077c <main+0x108>
 80006d4:	4a24      	ldr	r2, [pc, #144]	@ (8000768 <main+0xf4>)
 80006d6:	492a      	ldr	r1, [pc, #168]	@ (8000780 <main+0x10c>)
 80006d8:	482a      	ldr	r0, [pc, #168]	@ (8000784 <main+0x110>)
 80006da:	f000 f8fd 	bl	80008d8 <stepper_init>
			DIRECTION1_Pin);

	stepper_init(&stp2, &htim2, &htim3, 1.8, 4*6, DIRECTION2_GPIO_Port,
 80006de:	2310      	movs	r3, #16
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <main+0x100>)
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2318      	movs	r3, #24
 80006e8:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 800077c <main+0x108>
 80006ec:	4a1f      	ldr	r2, [pc, #124]	@ (800076c <main+0xf8>)
 80006ee:	4926      	ldr	r1, [pc, #152]	@ (8000788 <main+0x114>)
 80006f0:	4826      	ldr	r0, [pc, #152]	@ (800078c <main+0x118>)
 80006f2:	f000 f8f1 	bl	80008d8 <stepper_init>
			DIRECTION2_Pin);
	stepper_init(&stp3, &htim2, &htim3, 1.8, 4*6, DIRECTION3_GPIO_Port,
 80006f6:	2380      	movs	r3, #128	@ 0x80
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	4b25      	ldr	r3, [pc, #148]	@ (8000790 <main+0x11c>)
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2318      	movs	r3, #24
 8000700:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 800077c <main+0x108>
 8000704:	4a19      	ldr	r2, [pc, #100]	@ (800076c <main+0xf8>)
 8000706:	4920      	ldr	r1, [pc, #128]	@ (8000788 <main+0x114>)
 8000708:	4822      	ldr	r0, [pc, #136]	@ (8000794 <main+0x120>)
 800070a:	f000 f8e5 	bl	80008d8 <stepper_init>
			DIRECTION3_Pin);
	stepper_init(&stp4, &htim8, &htim5, 1.8, 8*4.9, DIRECTION4_GPIO_Port,
 800070e:	2340      	movs	r3, #64	@ 0x40
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <main+0x11c>)
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2327      	movs	r3, #39	@ 0x27
 8000718:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800077c <main+0x108>
 800071c:	4a14      	ldr	r2, [pc, #80]	@ (8000770 <main+0xfc>)
 800071e:	491e      	ldr	r1, [pc, #120]	@ (8000798 <main+0x124>)
 8000720:	481e      	ldr	r0, [pc, #120]	@ (800079c <main+0x128>)
 8000722:	f000 f8d9 	bl	80008d8 <stepper_init>
			DIRECTION4_Pin);

	servo_init(&srv1, &htim10);
 8000726:	491e      	ldr	r1, [pc, #120]	@ (80007a0 <main+0x12c>)
 8000728:	481e      	ldr	r0, [pc, #120]	@ (80007a4 <main+0x130>)
 800072a:	f000 f8b7 	bl	800089c <servo_init>
	servo_init(&srv2, &htim11);
 800072e:	491e      	ldr	r1, [pc, #120]	@ (80007a8 <main+0x134>)
 8000730:	481e      	ldr	r0, [pc, #120]	@ (80007ac <main+0x138>)
 8000732:	f000 f8b3 	bl	800089c <servo_init>





	stepper_move(&stp4, COUNTERCLOCKWISE, 90, 2); //SET REGISTERS FOR THE MOVEMENT
 8000736:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800073a:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80007b0 <main+0x13c>
 800073e:	2100      	movs	r1, #0
 8000740:	4816      	ldr	r0, [pc, #88]	@ (800079c <main+0x128>)
 8000742:	f000 f903 	bl	800094c <stepper_move>
	__HAL_TIM_SET_COMPARE(stp4.pwm_timer,TIM_CHANNEL_1,__HAL_TIM_GET_AUTORELOAD(stp4.pwm_timer)/2);
 8000746:	4b15      	ldr	r3, [pc, #84]	@ (800079c <main+0x128>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <main+0x128>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	0852      	lsrs	r2, r2, #1
 8000756:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start_IT(stp4.pwm_timer, TIM_CHANNEL_1); //START PWM
 8000758:	4b10      	ldr	r3, [pc, #64]	@ (800079c <main+0x128>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fac6 	bl	8002cf0 <HAL_TIM_PWM_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <main+0xf0>
 8000768:	200001a4 	.word	0x200001a4
 800076c:	2000015c 	.word	0x2000015c
 8000770:	200001ec 	.word	0x200001ec
 8000774:	40020800 	.word	0x40020800
 8000778:	40020400 	.word	0x40020400
 800077c:	3fe66666 	.word	0x3fe66666
 8000780:	200000cc 	.word	0x200000cc
 8000784:	20000028 	.word	0x20000028
 8000788:	20000114 	.word	0x20000114
 800078c:	2000004c 	.word	0x2000004c
 8000790:	40020000 	.word	0x40020000
 8000794:	20000070 	.word	0x20000070
 8000798:	20000234 	.word	0x20000234
 800079c:	20000094 	.word	0x20000094
 80007a0:	2000027c 	.word	0x2000027c
 80007a4:	200000b8 	.word	0x200000b8
 80007a8:	200002c4 	.word	0x200002c4
 80007ac:	200000c0 	.word	0x200000c0
 80007b0:	42b40000 	.word	0x42b40000

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	@ 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2234      	movs	r2, #52	@ 0x34
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 fe9e 	bl	8004504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <SystemClock_Config+0xd4>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e0:	4a29      	ldr	r2, [pc, #164]	@ (8000888 <SystemClock_Config+0xd4>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e8:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <SystemClock_Config+0xd4>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007f4:	2300      	movs	r3, #0
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	4b24      	ldr	r3, [pc, #144]	@ (800088c <SystemClock_Config+0xd8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000800:	4a22      	ldr	r2, [pc, #136]	@ (800088c <SystemClock_Config+0xd8>)
 8000802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	4b20      	ldr	r3, [pc, #128]	@ (800088c <SystemClock_Config+0xd8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000814:	2301      	movs	r3, #1
 8000816:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000818:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800081c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000822:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000826:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000828:	2304      	movs	r3, #4
 800082a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 800082c:	2354      	movs	r3, #84	@ 0x54
 800082e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000830:	2302      	movs	r3, #2
 8000832:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000834:	2302      	movs	r3, #2
 8000836:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000838:	2302      	movs	r3, #2
 800083a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fe9d 	bl	8002580 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800084c:	f000 f820 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2302      	movs	r3, #2
 8000856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000860:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000866:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2102      	movs	r1, #2
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fb3c 	bl	8001eec <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800087a:	f000 f809 	bl	8000890 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3750      	adds	r7, #80	@ 0x50
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <Error_Handler+0x8>

0800089c <servo_init>:
 *  Created on: Mar 2, 2025
 *      Author: david
 */
#include <servo.h>

void servo_init(servo_obj *srv, TIM_HandleTypeDef *pwm_timer) {
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	srv->pwm_timer = pwm_timer;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	601a      	str	r2, [r3, #0]
	srv->unit = (CCR_MAX - CCR_MIN) / (2*ANGLE_MAX);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a09      	ldr	r2, [pc, #36]	@ (80008d4 <servo_init+0x38>)
 80008b0:	605a      	str	r2, [r3, #4]
	//pwm=50hz
	srv->pwm_timer->Instance->PSC=27;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	221b      	movs	r2, #27
 80008ba:	629a      	str	r2, [r3, #40]	@ 0x28
	srv->pwm_timer->Instance->ARR=60000-1;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80008c6:	62da      	str	r2, [r3, #44]	@ 0x2c

}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	42055555 	.word	0x42055555

080008d8 <stepper_init>:
//definisco l'oggetto stepper con i seguenti parametri

void stepper_init(stepper_obj *stp, TIM_HandleTypeDef *pwm_timer,
		TIM_HandleTypeDef *position_timer, float stepper_resolution,
		uint16_t microstep, GPIO_TypeDef *direction_port,
		uint16_t direction_pin) {
 80008d8:	b480      	push	{r7}
 80008da:	b087      	sub	sp, #28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6178      	str	r0, [r7, #20]
 80008e0:	6139      	str	r1, [r7, #16]
 80008e2:	60fa      	str	r2, [r7, #12]
 80008e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80008e8:	80fb      	strh	r3, [r7, #6]

	stp->position_timer = position_timer;
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	605a      	str	r2, [r3, #4]
	stp->pwm_timer = pwm_timer;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	601a      	str	r2, [r3, #0]
	stp->direction_port = direction_port;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	6a3a      	ldr	r2, [r7, #32]
 80008fa:	60da      	str	r2, [r3, #12]
	stp->direction_pin = direction_pin;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000900:	821a      	strh	r2, [r3, #16]

	stp->stepper_resolution = stepper_resolution;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	615a      	str	r2, [r3, #20]
	stp->microstep = microstep;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	88fa      	ldrh	r2, [r7, #6]
 800090c:	839a      	strh	r2, [r3, #28]
	stp->step_per_rev = 360.0f / stepper_resolution; // 360°/resolution
 800090e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000948 <stepper_init+0x70>
 8000912:	ed97 7a02 	vldr	s14, [r7, #8]
 8000916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	edc3 7a06 	vstr	s15, [r3, #24]
	stp->step_scale = stp->step_per_rev * microstep;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	ed93 7a06 	vldr	s14, [r3, #24]
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	ee07 3a90 	vmov	s15, r3
 800092c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800093a:	bf00      	nop
 800093c:	371c      	adds	r7, #28
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	43b40000 	.word	0x43b40000

0800094c <stepper_move>:
int n_steps; //debug


void stepper_move(stepper_obj *stp, direction_str direction, float position,
		float freq) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	460b      	mov	r3, r1
 8000956:	ed87 0a01 	vstr	s0, [r7, #4]
 800095a:	edc7 0a00 	vstr	s1, [r7]
 800095e:	72fb      	strb	r3, [r7, #11]

	n_steps = stp->step_scale * position / 360.0f; //[n_steps]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	ed93 7a08 	vldr	s14, [r3, #32]
 8000966:	edd7 7a01 	vldr	s15, [r7, #4]
 800096a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800096e:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80009d8 <stepper_move+0x8c>
 8000972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000976:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800097a:	ee17 2a90 	vmov	r2, s15
 800097e:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <stepper_move+0x90>)
 8000980:	601a      	str	r2, [r3, #0]

	//float freq_steps = stp->step_scale * freq / 360.0f; //[n_steps/s]

	//trapezoidal_profile(freq_steps, position);

	HAL_GPIO_WritePin(stp->direction_port, stp->direction_pin, direction); //DIRECTION
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	68d8      	ldr	r0, [r3, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	8a1b      	ldrh	r3, [r3, #16]
 800098a:	7afa      	ldrb	r2, [r7, #11]
 800098c:	4619      	mov	r1, r3
 800098e:	f001 fa7b 	bl	8001e88 <HAL_GPIO_WritePin>


	//set arr of timer-slave for the position step count

	__HAL_TIM_SET_AUTORELOAD(stp->position_timer, (n_steps * (stp->pwm_timer->Instance->PSC+1)) - 1);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800099a:	3301      	adds	r3, #1
 800099c:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <stepper_move+0x90>)
 800099e:	6812      	ldr	r2, [r2, #0]
 80009a0:	fb03 f202 	mul.w	r2, r3, r2
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	3a01      	subs	r2, #1
 80009ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009b6:	3301      	adds	r3, #1
 80009b8:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <stepper_move+0x90>)
 80009ba:	6812      	ldr	r2, [r2, #0]
 80009bc:	fb03 f202 	mul.w	r2, r3, r2
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	3a01      	subs	r2, #1
 80009c6:	60da      	str	r2, [r3, #12]

	reset_timers(stp);
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f000 f809 	bl	80009e0 <reset_timers>

}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	43b40000 	.word	0x43b40000
 80009dc:	200000c8 	.word	0x200000c8

080009e0 <reset_timers>:

void reset_timers(stepper_obj *stp) {
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(stp->position_timer, 0);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(stp->pwm_timer, 0);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	@ 0x24
	stp->pwm_timer->Instance->EGR = TIM_EGR_UG; //reset the trigger
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2201      	movs	r2, #1
 8000a04:	615a      	str	r2, [r3, #20]
	stp->position_timer->Instance->EGR = TIM_EGR_UG; //reset the trigger
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	615a      	str	r2, [r3, #20]

}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000a5a:	2006      	movs	r0, #6
 8000a5c:	f001 f83e 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <NMI_Handler+0x4>

08000a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <MemManage_Handler+0x4>

08000a84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac2:	f000 ff1b 	bl	80018fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000ad2:	f002 fae1 	bl	8003098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000cc 	.word	0x200000cc

08000ae0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ae4:	4803      	ldr	r0, [pc, #12]	@ (8000af4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000ae6:	f002 fad7 	bl	8003098 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000aea:	4803      	ldr	r0, [pc, #12]	@ (8000af8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000aec:	f002 fad4 	bl	8003098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200000cc 	.word	0x200000cc
 8000af8:	2000027c 	.word	0x2000027c

08000afc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b00:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000b02:	f002 fac9 	bl	8003098 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000b06:	4803      	ldr	r0, [pc, #12]	@ (8000b14 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000b08:	f002 fac6 	bl	8003098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200000cc 	.word	0x200000cc
 8000b14:	200002c4 	.word	0x200002c4

08000b18 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b1c:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <TIM1_CC_IRQHandler+0x10>)
 8000b1e:	f002 fabb 	bl	8003098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000cc 	.word	0x200000cc

08000b2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b30:	4802      	ldr	r0, [pc, #8]	@ (8000b3c <TIM2_IRQHandler+0x10>)
 8000b32:	f002 fab1 	bl	8003098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000114 	.word	0x20000114

08000b40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <TIM3_IRQHandler+0x10>)
 8000b46:	f002 faa7 	bl	8003098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2000015c 	.word	0x2000015c

08000b54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <TIM4_IRQHandler+0x10>)
 8000b5a:	f002 fa9d 	bl	8003098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200001a4 	.word	0x200001a4

08000b68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DISABLE_button_Pin);
 8000b6c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b70:	f001 f9a4 	bl	8001ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <TIM5_IRQHandler+0x10>)
 8000b7e:	f002 fa8b 	bl	8003098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001ec 	.word	0x200001ec

08000b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	@ (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b096      	sub	sp, #88	@ 0x58
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
 8000bde:	615a      	str	r2, [r3, #20]
 8000be0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2220      	movs	r2, #32
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f003 fc8b 	bl	8004504 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bee:	4b3f      	ldr	r3, [pc, #252]	@ (8000cec <MX_TIM1_Init+0x13c>)
 8000bf0:	4a3f      	ldr	r2, [pc, #252]	@ (8000cf0 <MX_TIM1_Init+0x140>)
 8000bf2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8000bf4:	4b3d      	ldr	r3, [pc, #244]	@ (8000cec <MX_TIM1_Init+0x13c>)
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8000cec <MX_TIM1_Init+0x13c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000c00:	4b3a      	ldr	r3, [pc, #232]	@ (8000cec <MX_TIM1_Init+0x13c>)
 8000c02:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000c06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c08:	4b38      	ldr	r3, [pc, #224]	@ (8000cec <MX_TIM1_Init+0x13c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c0e:	4b37      	ldr	r3, [pc, #220]	@ (8000cec <MX_TIM1_Init+0x13c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c14:	4b35      	ldr	r3, [pc, #212]	@ (8000cec <MX_TIM1_Init+0x13c>)
 8000c16:	2280      	movs	r2, #128	@ 0x80
 8000c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c1a:	4834      	ldr	r0, [pc, #208]	@ (8000cec <MX_TIM1_Init+0x13c>)
 8000c1c:	f001 ff4e 	bl	8002abc <HAL_TIM_Base_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c26:	f7ff fe33 	bl	8000890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c30:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c34:	4619      	mov	r1, r3
 8000c36:	482d      	ldr	r0, [pc, #180]	@ (8000cec <MX_TIM1_Init+0x13c>)
 8000c38:	f002 fbe0 	bl	80033fc <HAL_TIM_ConfigClockSource>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c42:	f7ff fe25 	bl	8000890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c46:	4829      	ldr	r0, [pc, #164]	@ (8000cec <MX_TIM1_Init+0x13c>)
 8000c48:	f001 fff8 	bl	8002c3c <HAL_TIM_PWM_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c52:	f7ff fe1d 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c56:	2320      	movs	r3, #32
 8000c58:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000c5a:	2380      	movs	r3, #128	@ 0x80
 8000c5c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c5e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c62:	4619      	mov	r1, r3
 8000c64:	4821      	ldr	r0, [pc, #132]	@ (8000cec <MX_TIM1_Init+0x13c>)
 8000c66:	f003 f8a7 	bl	8003db8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c70:	f7ff fe0e 	bl	8000890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c74:	2360      	movs	r3, #96	@ 0x60
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 8000c78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c82:	2300      	movs	r3, #0
 8000c84:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000c86:	2304      	movs	r3, #4
 8000c88:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c96:	2200      	movs	r2, #0
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4814      	ldr	r0, [pc, #80]	@ (8000cec <MX_TIM1_Init+0x13c>)
 8000c9c:	f002 faec 	bl	8003278 <HAL_TIM_PWM_ConfigChannel>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000ca6:	f7ff fdf3 	bl	8000890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4807      	ldr	r0, [pc, #28]	@ (8000cec <MX_TIM1_Init+0x13c>)
 8000cce:	f003 f8ef 	bl	8003eb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000cd8:	f7ff fdda 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cdc:	4803      	ldr	r0, [pc, #12]	@ (8000cec <MX_TIM1_Init+0x13c>)
 8000cde:	f000 fbfd 	bl	80014dc <HAL_TIM_MspPostInit>

}
 8000ce2:	bf00      	nop
 8000ce4:	3758      	adds	r7, #88	@ 0x58
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000cc 	.word	0x200000cc
 8000cf0:	40010000 	.word	0x40010000

08000cf4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08e      	sub	sp, #56	@ 0x38
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
 8000d20:	615a      	str	r2, [r3, #20]
 8000d22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d24:	4b33      	ldr	r3, [pc, #204]	@ (8000df4 <MX_TIM2_Init+0x100>)
 8000d26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8000d2c:	4b31      	ldr	r3, [pc, #196]	@ (8000df4 <MX_TIM2_Init+0x100>)
 8000d2e:	2204      	movs	r2, #4
 8000d30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b30      	ldr	r3, [pc, #192]	@ (8000df4 <MX_TIM2_Init+0x100>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32999;
 8000d38:	4b2e      	ldr	r3, [pc, #184]	@ (8000df4 <MX_TIM2_Init+0x100>)
 8000d3a:	f248 02e7 	movw	r2, #32999	@ 0x80e7
 8000d3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d40:	4b2c      	ldr	r3, [pc, #176]	@ (8000df4 <MX_TIM2_Init+0x100>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d46:	4b2b      	ldr	r3, [pc, #172]	@ (8000df4 <MX_TIM2_Init+0x100>)
 8000d48:	2280      	movs	r2, #128	@ 0x80
 8000d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d4c:	4829      	ldr	r0, [pc, #164]	@ (8000df4 <MX_TIM2_Init+0x100>)
 8000d4e:	f001 feb5 	bl	8002abc <HAL_TIM_Base_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d58:	f7ff fd9a 	bl	8000890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4822      	ldr	r0, [pc, #136]	@ (8000df4 <MX_TIM2_Init+0x100>)
 8000d6a:	f002 fb47 	bl	80033fc <HAL_TIM_ConfigClockSource>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d74:	f7ff fd8c 	bl	8000890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d78:	481e      	ldr	r0, [pc, #120]	@ (8000df4 <MX_TIM2_Init+0x100>)
 8000d7a:	f001 ff5f 	bl	8002c3c <HAL_TIM_PWM_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d84:	f7ff fd84 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d88:	2320      	movs	r3, #32
 8000d8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	4619      	mov	r1, r3
 8000d96:	4817      	ldr	r0, [pc, #92]	@ (8000df4 <MX_TIM2_Init+0x100>)
 8000d98:	f003 f80e 	bl	8003db8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000da2:	f7ff fd75 	bl	8000890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da6:	2360      	movs	r3, #96	@ 0x60
 8000da8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32768;
 8000daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000db4:	2304      	movs	r3, #4
 8000db6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <MX_TIM2_Init+0x100>)
 8000dc0:	f002 fa5a 	bl	8003278 <HAL_TIM_PWM_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000dca:	f7ff fd61 	bl	8000890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4807      	ldr	r0, [pc, #28]	@ (8000df4 <MX_TIM2_Init+0x100>)
 8000dd6:	f002 fa4f 	bl	8003278 <HAL_TIM_PWM_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000de0:	f7ff fd56 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000de4:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <MX_TIM2_Init+0x100>)
 8000de6:	f000 fb79 	bl	80014dc <HAL_TIM_MspPostInit>

}
 8000dea:	bf00      	nop
 8000dec:	3738      	adds	r7, #56	@ 0x38
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000114 	.word	0x20000114

08000df8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08c      	sub	sp, #48	@ 0x30
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e24:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <MX_TIM3_Init+0xc0>)
 8000e26:	4a25      	ldr	r2, [pc, #148]	@ (8000ebc <MX_TIM3_Init+0xc4>)
 8000e28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32999;
 8000e2a:	4b23      	ldr	r3, [pc, #140]	@ (8000eb8 <MX_TIM3_Init+0xc0>)
 8000e2c:	f248 02e7 	movw	r2, #32999	@ 0x80e7
 8000e30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MX_TIM3_Init+0xc0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_TIM3_Init+0xc0>)
 8000e3a:	22c7      	movs	r2, #199	@ 0xc7
 8000e3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb8 <MX_TIM3_Init+0xc0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e44:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_TIM3_Init+0xc0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e4a:	481b      	ldr	r0, [pc, #108]	@ (8000eb8 <MX_TIM3_Init+0xc0>)
 8000e4c:	f001 fe36 	bl	8002abc <HAL_TIM_Base_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000e56:	f7ff fd1b 	bl	8000890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e60:	f107 0320 	add.w	r3, r7, #32
 8000e64:	4619      	mov	r1, r3
 8000e66:	4814      	ldr	r0, [pc, #80]	@ (8000eb8 <MX_TIM3_Init+0xc0>)
 8000e68:	f002 fac8 	bl	80033fc <HAL_TIM_ConfigClockSource>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000e72:	f7ff fd0d 	bl	8000890 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000e76:	2306      	movs	r3, #6
 8000e78:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	4619      	mov	r1, r3
 8000e84:	480c      	ldr	r0, [pc, #48]	@ (8000eb8 <MX_TIM3_Init+0xc0>)
 8000e86:	f002 fb80 	bl	800358a <HAL_TIM_SlaveConfigSynchro>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000e90:	f7ff fcfe 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_TIM3_Init+0xc0>)
 8000ea2:	f002 ff89 	bl	8003db8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000eac:	f7ff fcf0 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3730      	adds	r7, #48	@ 0x30
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2000015c 	.word	0x2000015c
 8000ebc:	40000400 	.word	0x40000400

08000ec0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	@ 0x30
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eec:	4b24      	ldr	r3, [pc, #144]	@ (8000f80 <MX_TIM4_Init+0xc0>)
 8000eee:	4a25      	ldr	r2, [pc, #148]	@ (8000f84 <MX_TIM4_Init+0xc4>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 19999;
 8000ef2:	4b23      	ldr	r3, [pc, #140]	@ (8000f80 <MX_TIM4_Init+0xc0>)
 8000ef4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000ef8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <MX_TIM4_Init+0xc0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8000f00:	4b1f      	ldr	r3, [pc, #124]	@ (8000f80 <MX_TIM4_Init+0xc0>)
 8000f02:	22c7      	movs	r2, #199	@ 0xc7
 8000f04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <MX_TIM4_Init+0xc0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <MX_TIM4_Init+0xc0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f12:	481b      	ldr	r0, [pc, #108]	@ (8000f80 <MX_TIM4_Init+0xc0>)
 8000f14:	f001 fdd2 	bl	8002abc <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000f1e:	f7ff fcb7 	bl	8000890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f26:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f28:	f107 0320 	add.w	r3, r7, #32
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4814      	ldr	r0, [pc, #80]	@ (8000f80 <MX_TIM4_Init+0xc0>)
 8000f30:	f002 fa64 	bl	80033fc <HAL_TIM_ConfigClockSource>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000f3a:	f7ff fca9 	bl	8000890 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f3e:	2306      	movs	r3, #6
 8000f40:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <MX_TIM4_Init+0xc0>)
 8000f4e:	f002 fb1c 	bl	800358a <HAL_TIM_SlaveConfigSynchro>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000f58:	f7ff fc9a 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <MX_TIM4_Init+0xc0>)
 8000f6a:	f002 ff25 	bl	8003db8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8000f74:	f7ff fc8c 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	3730      	adds	r7, #48	@ 0x30
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200001a4 	.word	0x200001a4
 8000f84:	40000800 	.word	0x40000800

08000f88 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	@ 0x30
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fb4:	4b24      	ldr	r3, [pc, #144]	@ (8001048 <MX_TIM5_Init+0xc0>)
 8000fb6:	4a25      	ldr	r2, [pc, #148]	@ (800104c <MX_TIM5_Init+0xc4>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1999;
 8000fba:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <MX_TIM5_Init+0xc0>)
 8000fbc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000fc0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <MX_TIM5_Init+0xc0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 199;
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <MX_TIM5_Init+0xc0>)
 8000fca:	22c7      	movs	r2, #199	@ 0xc7
 8000fcc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fce:	4b1e      	ldr	r3, [pc, #120]	@ (8001048 <MX_TIM5_Init+0xc0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <MX_TIM5_Init+0xc0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fda:	481b      	ldr	r0, [pc, #108]	@ (8001048 <MX_TIM5_Init+0xc0>)
 8000fdc:	f001 fd6e 	bl	8002abc <HAL_TIM_Base_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8000fe6:	f7ff fc53 	bl	8000890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fee:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4814      	ldr	r0, [pc, #80]	@ (8001048 <MX_TIM5_Init+0xc0>)
 8000ff8:	f002 fa00 	bl	80033fc <HAL_TIM_ConfigClockSource>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001002:	f7ff fc45 	bl	8000890 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001006:	2306      	movs	r3, #6
 8001008:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800100a:	2330      	movs	r3, #48	@ 0x30
 800100c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	@ (8001048 <MX_TIM5_Init+0xc0>)
 8001016:	f002 fab8 	bl	800358a <HAL_TIM_SlaveConfigSynchro>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001020:	f7ff fc36 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_TIM5_Init+0xc0>)
 8001032:	f002 fec1 	bl	8003db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 800103c:	f7ff fc28 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	@ 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200001ec 	.word	0x200001ec
 800104c:	40000c00 	.word	0x40000c00

08001050 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b096      	sub	sp, #88	@ 0x58
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f003 fa3b 	bl	8004504 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800108e:	4b3f      	ldr	r3, [pc, #252]	@ (800118c <MX_TIM8_Init+0x13c>)
 8001090:	4a3f      	ldr	r2, [pc, #252]	@ (8001190 <MX_TIM8_Init+0x140>)
 8001092:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4;
 8001094:	4b3d      	ldr	r3, [pc, #244]	@ (800118c <MX_TIM8_Init+0x13c>)
 8001096:	2204      	movs	r2, #4
 8001098:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b3c      	ldr	r3, [pc, #240]	@ (800118c <MX_TIM8_Init+0x13c>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 80010a0:	4b3a      	ldr	r3, [pc, #232]	@ (800118c <MX_TIM8_Init+0x13c>)
 80010a2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80010a6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a8:	4b38      	ldr	r3, [pc, #224]	@ (800118c <MX_TIM8_Init+0x13c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010ae:	4b37      	ldr	r3, [pc, #220]	@ (800118c <MX_TIM8_Init+0x13c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b4:	4b35      	ldr	r3, [pc, #212]	@ (800118c <MX_TIM8_Init+0x13c>)
 80010b6:	2280      	movs	r2, #128	@ 0x80
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010ba:	4834      	ldr	r0, [pc, #208]	@ (800118c <MX_TIM8_Init+0x13c>)
 80010bc:	f001 fcfe 	bl	8002abc <HAL_TIM_Base_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80010c6:	f7ff fbe3 	bl	8000890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80010d0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010d4:	4619      	mov	r1, r3
 80010d6:	482d      	ldr	r0, [pc, #180]	@ (800118c <MX_TIM8_Init+0x13c>)
 80010d8:	f002 f990 	bl	80033fc <HAL_TIM_ConfigClockSource>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80010e2:	f7ff fbd5 	bl	8000890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80010e6:	4829      	ldr	r0, [pc, #164]	@ (800118c <MX_TIM8_Init+0x13c>)
 80010e8:	f001 fda8 	bl	8002c3c <HAL_TIM_PWM_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80010f2:	f7ff fbcd 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010f6:	2320      	movs	r3, #32
 80010f8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80010fa:	2380      	movs	r3, #128	@ 0x80
 80010fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001102:	4619      	mov	r1, r3
 8001104:	4821      	ldr	r0, [pc, #132]	@ (800118c <MX_TIM8_Init+0x13c>)
 8001106:	f002 fe57 	bl	8003db8 <HAL_TIMEx_MasterConfigSynchronization>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001110:	f7ff fbbe 	bl	8000890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001114:	2360      	movs	r3, #96	@ 0x60
 8001116:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 8001118:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800111c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001126:	2304      	movs	r3, #4
 8001128:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001136:	2200      	movs	r2, #0
 8001138:	4619      	mov	r1, r3
 800113a:	4814      	ldr	r0, [pc, #80]	@ (800118c <MX_TIM8_Init+0x13c>)
 800113c:	f002 f89c 	bl	8003278 <HAL_TIM_PWM_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001146:	f7ff fba3 	bl	8000890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800115e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001162:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4807      	ldr	r0, [pc, #28]	@ (800118c <MX_TIM8_Init+0x13c>)
 800116e:	f002 fe9f 	bl	8003eb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001178:	f7ff fb8a 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800117c:	4803      	ldr	r0, [pc, #12]	@ (800118c <MX_TIM8_Init+0x13c>)
 800117e:	f000 f9ad 	bl	80014dc <HAL_TIM_MspPostInit>

}
 8001182:	bf00      	nop
 8001184:	3758      	adds	r7, #88	@ 0x58
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000234 	.word	0x20000234
 8001190:	40010400 	.word	0x40010400

08001194 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	615a      	str	r2, [r3, #20]
 80011aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80011ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001228 <MX_TIM10_Init+0x94>)
 80011ae:	4a1f      	ldr	r2, [pc, #124]	@ (800122c <MX_TIM10_Init+0x98>)
 80011b0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <MX_TIM10_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <MX_TIM10_Init+0x94>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80011be:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <MX_TIM10_Init+0x94>)
 80011c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011c4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c6:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <MX_TIM10_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011cc:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <MX_TIM10_Init+0x94>)
 80011ce:	2280      	movs	r2, #128	@ 0x80
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80011d2:	4815      	ldr	r0, [pc, #84]	@ (8001228 <MX_TIM10_Init+0x94>)
 80011d4:	f001 fc72 	bl	8002abc <HAL_TIM_Base_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80011de:	f7ff fb57 	bl	8000890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80011e2:	4811      	ldr	r0, [pc, #68]	@ (8001228 <MX_TIM10_Init+0x94>)
 80011e4:	f001 fd2a 	bl	8002c3c <HAL_TIM_PWM_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80011ee:	f7ff fb4f 	bl	8000890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f2:	2360      	movs	r3, #96	@ 0x60
 80011f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80011fe:	2304      	movs	r3, #4
 8001200:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	4619      	mov	r1, r3
 8001208:	4807      	ldr	r0, [pc, #28]	@ (8001228 <MX_TIM10_Init+0x94>)
 800120a:	f002 f835 	bl	8003278 <HAL_TIM_PWM_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001214:	f7ff fb3c 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001218:	4803      	ldr	r0, [pc, #12]	@ (8001228 <MX_TIM10_Init+0x94>)
 800121a:	f000 f95f 	bl	80014dc <HAL_TIM_MspPostInit>

}
 800121e:	bf00      	nop
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000027c 	.word	0x2000027c
 800122c:	40014400 	.word	0x40014400

08001230 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	615a      	str	r2, [r3, #20]
 8001246:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001248:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <MX_TIM11_Init+0x94>)
 800124a:	4a1f      	ldr	r2, [pc, #124]	@ (80012c8 <MX_TIM11_Init+0x98>)
 800124c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <MX_TIM11_Init+0x94>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <MX_TIM11_Init+0x94>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <MX_TIM11_Init+0x94>)
 800125c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001260:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <MX_TIM11_Init+0x94>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <MX_TIM11_Init+0x94>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800126e:	4815      	ldr	r0, [pc, #84]	@ (80012c4 <MX_TIM11_Init+0x94>)
 8001270:	f001 fc24 	bl	8002abc <HAL_TIM_Base_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800127a:	f7ff fb09 	bl	8000890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800127e:	4811      	ldr	r0, [pc, #68]	@ (80012c4 <MX_TIM11_Init+0x94>)
 8001280:	f001 fcdc 	bl	8002c3c <HAL_TIM_PWM_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800128a:	f7ff fb01 	bl	8000890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128e:	2360      	movs	r3, #96	@ 0x60
 8001290:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001292:	2301      	movs	r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800129a:	2304      	movs	r3, #4
 800129c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	4619      	mov	r1, r3
 80012a4:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <MX_TIM11_Init+0x94>)
 80012a6:	f001 ffe7 	bl	8003278 <HAL_TIM_PWM_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80012b0:	f7ff faee 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80012b4:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <MX_TIM11_Init+0x94>)
 80012b6:	f000 f911 	bl	80014dc <HAL_TIM_MspPostInit>

}
 80012ba:	bf00      	nop
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200002c4 	.word	0x200002c4
 80012c8:	40014800 	.word	0x40014800

080012cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	@ 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a78      	ldr	r2, [pc, #480]	@ (80014bc <HAL_TIM_Base_MspInit+0x1f0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d12e      	bne.n	800133c <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012e2:	4b77      	ldr	r3, [pc, #476]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	4a76      	ldr	r2, [pc, #472]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ee:	4b74      	ldr	r3, [pc, #464]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2101      	movs	r1, #1
 80012fe:	2018      	movs	r0, #24
 8001300:	f000 fbf7 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001304:	2018      	movs	r0, #24
 8001306:	f000 fc10 	bl	8001b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2101      	movs	r1, #1
 800130e:	2019      	movs	r0, #25
 8001310:	f000 fbef 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001314:	2019      	movs	r0, #25
 8001316:	f000 fc08 	bl	8001b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2101      	movs	r1, #1
 800131e:	201a      	movs	r0, #26
 8001320:	f000 fbe7 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001324:	201a      	movs	r0, #26
 8001326:	f000 fc00 	bl	8001b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2101      	movs	r1, #1
 800132e:	201b      	movs	r0, #27
 8001330:	f000 fbdf 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001334:	201b      	movs	r0, #27
 8001336:	f000 fbf8 	bl	8001b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800133a:	e0ba      	b.n	80014b2 <HAL_TIM_Base_MspInit+0x1e6>
  else if(tim_baseHandle->Instance==TIM2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001344:	d116      	bne.n	8001374 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
 800134a:	4b5d      	ldr	r3, [pc, #372]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	4a5c      	ldr	r2, [pc, #368]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6413      	str	r3, [r2, #64]	@ 0x40
 8001356:	4b5a      	ldr	r3, [pc, #360]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	623b      	str	r3, [r7, #32]
 8001360:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2101      	movs	r1, #1
 8001366:	201c      	movs	r0, #28
 8001368:	f000 fbc3 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800136c:	201c      	movs	r0, #28
 800136e:	f000 fbdc 	bl	8001b2a <HAL_NVIC_EnableIRQ>
}
 8001372:	e09e      	b.n	80014b2 <HAL_TIM_Base_MspInit+0x1e6>
  else if(tim_baseHandle->Instance==TIM3)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a52      	ldr	r2, [pc, #328]	@ (80014c4 <HAL_TIM_Base_MspInit+0x1f8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d116      	bne.n	80013ac <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	4b4f      	ldr	r3, [pc, #316]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	4a4e      	ldr	r2, [pc, #312]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6413      	str	r3, [r2, #64]	@ 0x40
 800138e:	4b4c      	ldr	r3, [pc, #304]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2101      	movs	r1, #1
 800139e:	201d      	movs	r0, #29
 80013a0:	f000 fba7 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013a4:	201d      	movs	r0, #29
 80013a6:	f000 fbc0 	bl	8001b2a <HAL_NVIC_EnableIRQ>
}
 80013aa:	e082      	b.n	80014b2 <HAL_TIM_Base_MspInit+0x1e6>
  else if(tim_baseHandle->Instance==TIM4)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a45      	ldr	r2, [pc, #276]	@ (80014c8 <HAL_TIM_Base_MspInit+0x1fc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d116      	bne.n	80013e4 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	4b41      	ldr	r3, [pc, #260]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	4a40      	ldr	r2, [pc, #256]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c6:	4b3e      	ldr	r3, [pc, #248]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2101      	movs	r1, #1
 80013d6:	201e      	movs	r0, #30
 80013d8:	f000 fb8b 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013dc:	201e      	movs	r0, #30
 80013de:	f000 fba4 	bl	8001b2a <HAL_NVIC_EnableIRQ>
}
 80013e2:	e066      	b.n	80014b2 <HAL_TIM_Base_MspInit+0x1e6>
  else if(tim_baseHandle->Instance==TIM5)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a38      	ldr	r2, [pc, #224]	@ (80014cc <HAL_TIM_Base_MspInit+0x200>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d116      	bne.n	800141c <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	4b33      	ldr	r3, [pc, #204]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	4a32      	ldr	r2, [pc, #200]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fe:	4b30      	ldr	r3, [pc, #192]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2101      	movs	r1, #1
 800140e:	2032      	movs	r0, #50	@ 0x32
 8001410:	f000 fb6f 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001414:	2032      	movs	r0, #50	@ 0x32
 8001416:	f000 fb88 	bl	8001b2a <HAL_NVIC_EnableIRQ>
}
 800141a:	e04a      	b.n	80014b2 <HAL_TIM_Base_MspInit+0x1e6>
  else if(tim_baseHandle->Instance==TIM8)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a2b      	ldr	r2, [pc, #172]	@ (80014d0 <HAL_TIM_Base_MspInit+0x204>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d10e      	bne.n	8001444 <HAL_TIM_Base_MspInit+0x178>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b25      	ldr	r3, [pc, #148]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	4a24      	ldr	r2, [pc, #144]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6453      	str	r3, [r2, #68]	@ 0x44
 8001436:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
}
 8001442:	e036      	b.n	80014b2 <HAL_TIM_Base_MspInit+0x1e6>
  else if(tim_baseHandle->Instance==TIM10)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a22      	ldr	r2, [pc, #136]	@ (80014d4 <HAL_TIM_Base_MspInit+0x208>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d116      	bne.n	800147c <HAL_TIM_Base_MspInit+0x1b0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	4a1a      	ldr	r2, [pc, #104]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 8001458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145c:	6453      	str	r3, [r2, #68]	@ 0x44
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2101      	movs	r1, #1
 800146e:	2019      	movs	r0, #25
 8001470:	f000 fb3f 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001474:	2019      	movs	r0, #25
 8001476:	f000 fb58 	bl	8001b2a <HAL_NVIC_EnableIRQ>
}
 800147a:	e01a      	b.n	80014b2 <HAL_TIM_Base_MspInit+0x1e6>
  else if(tim_baseHandle->Instance==TIM11)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a15      	ldr	r2, [pc, #84]	@ (80014d8 <HAL_TIM_Base_MspInit+0x20c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d115      	bne.n	80014b2 <HAL_TIM_Base_MspInit+0x1e6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	4a0c      	ldr	r2, [pc, #48]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001494:	6453      	str	r3, [r2, #68]	@ 0x44
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1f4>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2101      	movs	r1, #1
 80014a6:	201a      	movs	r0, #26
 80014a8:	f000 fb23 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80014ac:	201a      	movs	r0, #26
 80014ae:	f000 fb3c 	bl	8001b2a <HAL_NVIC_EnableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	3728      	adds	r7, #40	@ 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40010000 	.word	0x40010000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40000400 	.word	0x40000400
 80014c8:	40000800 	.word	0x40000800
 80014cc:	40000c00 	.word	0x40000c00
 80014d0:	40010400 	.word	0x40010400
 80014d4:	40014400 	.word	0x40014400
 80014d8:	40014800 	.word	0x40014800

080014dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	@ 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a5b      	ldr	r2, [pc, #364]	@ (8001668 <HAL_TIM_MspPostInit+0x18c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d11f      	bne.n	800153e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	4b5a      	ldr	r3, [pc, #360]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a59      	ldr	r2, [pc, #356]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b57      	ldr	r3, [pc, #348]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 800151a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800151e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800152c:	2301      	movs	r3, #1
 800152e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	484e      	ldr	r0, [pc, #312]	@ (8001670 <HAL_TIM_MspPostInit+0x194>)
 8001538:	f000 fb12 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800153c:	e090      	b.n	8001660 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001546:	d11e      	bne.n	8001586 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	4b47      	ldr	r3, [pc, #284]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	4a46      	ldr	r2, [pc, #280]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6313      	str	r3, [r2, #48]	@ 0x30
 8001558:	4b44      	ldr	r3, [pc, #272]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin;
 8001564:	2303      	movs	r3, #3
 8001566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001574:	2301      	movs	r3, #1
 8001576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	4619      	mov	r1, r3
 800157e:	483c      	ldr	r0, [pc, #240]	@ (8001670 <HAL_TIM_MspPostInit+0x194>)
 8001580:	f000 faee 	bl	8001b60 <HAL_GPIO_Init>
}
 8001584:	e06c      	b.n	8001660 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM8)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a3a      	ldr	r2, [pc, #232]	@ (8001674 <HAL_TIM_MspPostInit+0x198>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d11e      	bne.n	80015ce <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	4b35      	ldr	r3, [pc, #212]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001598:	4a34      	ldr	r2, [pc, #208]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a0:	4b32      	ldr	r3, [pc, #200]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM4_Pin;
 80015ac:	2340      	movs	r3, #64	@ 0x40
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80015bc:	2303      	movs	r3, #3
 80015be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM4_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	482c      	ldr	r0, [pc, #176]	@ (8001678 <HAL_TIM_MspPostInit+0x19c>)
 80015c8:	f000 faca 	bl	8001b60 <HAL_GPIO_Init>
}
 80015cc:	e048      	b.n	8001660 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM10)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a2a      	ldr	r2, [pc, #168]	@ (800167c <HAL_TIM_MspPostInit+0x1a0>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d11f      	bne.n	8001618 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	4b23      	ldr	r3, [pc, #140]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e0:	4a22      	ldr	r2, [pc, #136]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 80015e2:	f043 0302 	orr.w	r3, r3, #2
 80015e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e8:	4b20      	ldr	r3, [pc, #128]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_1_Pin;
 80015f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001606:	2303      	movs	r3, #3
 8001608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SERVO_1_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	481b      	ldr	r0, [pc, #108]	@ (8001680 <HAL_TIM_MspPostInit+0x1a4>)
 8001612:	f000 faa5 	bl	8001b60 <HAL_GPIO_Init>
}
 8001616:	e023      	b.n	8001660 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM11)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	@ (8001684 <HAL_TIM_MspPostInit+0x1a8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d11e      	bne.n	8001660 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a10      	ldr	r2, [pc, #64]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <HAL_TIM_MspPostInit+0x190>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 800163e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001650:	2303      	movs	r3, #3
 8001652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	4809      	ldr	r0, [pc, #36]	@ (8001680 <HAL_TIM_MspPostInit+0x1a4>)
 800165c:	f000 fa80 	bl	8001b60 <HAL_GPIO_Init>
}
 8001660:	bf00      	nop
 8001662:	3730      	adds	r7, #48	@ 0x30
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40010000 	.word	0x40010000
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000
 8001674:	40010400 	.word	0x40010400
 8001678:	40020800 	.word	0x40020800
 800167c:	40014400 	.word	0x40014400
 8001680:	40020400 	.word	0x40020400
 8001684:	40014800 	.word	0x40014800

08001688 <HAL_TIM_PeriodElapsedCallback>:




//slave timer disable the pwm of the master timer
void  HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM5) {
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a10      	ldr	r2, [pc, #64]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d103      	bne.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x1a>
    	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 800169a:	2100      	movs	r1, #0
 800169c:	480f      	ldr	r0, [pc, #60]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 800169e:	f001 fc3d 	bl	8002f1c <HAL_TIM_PWM_Stop_IT>

    	//TIM_Cmd(htim->Instance, DISABLE);

    }
    if (htim->Instance == TIM3) {
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a0e      	ldr	r2, [pc, #56]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d107      	bne.n	80016bc <HAL_TIM_PeriodElapsedCallback+0x34>
        	HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80016ac:	2100      	movs	r1, #0
 80016ae:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80016b0:	f001 fc34 	bl	8002f1c <HAL_TIM_PWM_Stop_IT>
        	HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 80016b4:	2104      	movs	r1, #4
 80016b6:	480b      	ldr	r0, [pc, #44]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80016b8:	f001 fc30 	bl	8002f1c <HAL_TIM_PWM_Stop_IT>
        	//TIM_Cmd(htim->Instance, DISABLE);
        }

    if (htim->Instance == TIM4) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a09      	ldr	r2, [pc, #36]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d103      	bne.n	80016ce <HAL_TIM_PeriodElapsedCallback+0x46>
        	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80016c6:	2100      	movs	r1, #0
 80016c8:	4808      	ldr	r0, [pc, #32]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80016ca:	f001 fc27 	bl	8002f1c <HAL_TIM_PWM_Stop_IT>
        	//TIM_Cmd(htim->Instance, DISABLE);

        }

}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40000c00 	.word	0x40000c00
 80016dc:	20000234 	.word	0x20000234
 80016e0:	40000400 	.word	0x40000400
 80016e4:	20000114 	.word	0x20000114
 80016e8:	40000800 	.word	0x40000800
 80016ec:	200000cc 	.word	0x200000cc

080016f0 <HAL_GPIO_EXTI_Callback>:

//emergency stop button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==DISABLE_button_Pin){
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001700:	d108      	bne.n	8001714 <HAL_GPIO_EXTI_Callback+0x24>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET); //ENABLE
 8001702:	2201      	movs	r2, #1
 8001704:	2120      	movs	r1, #32
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001708:	f000 fbbe 	bl	8001e88 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 800170c:	b672      	cpsid	i
}
 800170e:	bf00      	nop
		__disable_irq();

		while(1){
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <HAL_GPIO_EXTI_Callback+0x20>

		}
	}
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40020800 	.word	0x40020800

08001720 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001726:	4a12      	ldr	r2, [pc, #72]	@ (8001770 <MX_USART2_UART_Init+0x50>)
 8001728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800172a:	4b10      	ldr	r3, [pc, #64]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 800172c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001758:	f002 fc10 	bl	8003f7c <HAL_UART_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001762:	f7ff f895 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000030c 	.word	0x2000030c
 8001770:	40004400 	.word	0x40004400

08001774 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	@ 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a19      	ldr	r2, [pc, #100]	@ (80017f8 <HAL_UART_MspInit+0x84>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d12b      	bne.n	80017ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <HAL_UART_MspInit+0x88>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <HAL_UART_MspInit+0x88>)
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_UART_MspInit+0x88>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_UART_MspInit+0x88>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a10      	ldr	r2, [pc, #64]	@ (80017fc <HAL_UART_MspInit+0x88>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <HAL_UART_MspInit+0x88>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017ce:	230c      	movs	r3, #12
 80017d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017de:	2307      	movs	r3, #7
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	@ (8001800 <HAL_UART_MspInit+0x8c>)
 80017ea:	f000 f9b9 	bl	8001b60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017ee:	bf00      	nop
 80017f0:	3728      	adds	r7, #40	@ 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40004400 	.word	0x40004400
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020000 	.word	0x40020000

08001804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001804:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800183c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001808:	f7ff f9c0 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800180c:	480c      	ldr	r0, [pc, #48]	@ (8001840 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800180e:	490d      	ldr	r1, [pc, #52]	@ (8001844 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001824:	4c0a      	ldr	r4, [pc, #40]	@ (8001850 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001832:	f002 fe6f 	bl	8004514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001836:	f7fe ff1d 	bl	8000674 <main>
  bx  lr    
 800183a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800183c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001844:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001848:	0800459c 	.word	0x0800459c
  ldr r2, =_sbss
 800184c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001850:	20000358 	.word	0x20000358

08001854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001854:	e7fe      	b.n	8001854 <ADC_IRQHandler>
	...

08001858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800185c:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <HAL_Init+0x40>)
 8001862:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <HAL_Init+0x40>)
 800186e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a07      	ldr	r2, [pc, #28]	@ (8001898 <HAL_Init+0x40>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001880:	2003      	movs	r0, #3
 8001882:	f000 f92b 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001886:	2000      	movs	r0, #0
 8001888:	f000 f808 	bl	800189c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800188c:	f7ff f8c6 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00

0800189c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_InitTick+0x54>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_InitTick+0x58>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f943 	bl	8001b46 <HAL_SYSTICK_Config>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00e      	b.n	80018e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b0f      	cmp	r3, #15
 80018ce:	d80a      	bhi.n	80018e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d0:	2200      	movs	r2, #0
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f000 f90b 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018dc:	4a06      	ldr	r2, [pc, #24]	@ (80018f8 <HAL_InitTick+0x5c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000008 	.word	0x20000008
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_IncTick+0x20>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_IncTick+0x24>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4413      	add	r3, r2
 800190c:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <HAL_IncTick+0x24>)
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000008 	.word	0x20000008
 8001920:	20000354 	.word	0x20000354

08001924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return uwTick;
 8001928:	4b03      	ldr	r3, [pc, #12]	@ (8001938 <HAL_GetTick+0x14>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000354 	.word	0x20000354

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	@ (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	@ (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	db0b      	blt.n	80019ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4907      	ldr	r1, [pc, #28]	@ (80019d8 <__NVIC_EnableIRQ+0x38>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2001      	movs	r0, #1
 80019c2:	fa00 f202 	lsl.w	r2, r0, r2
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e100 	.word	0xe000e100

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	@ (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	@ (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	@ 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	@ 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff29 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff3e 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff8e 	bl	8001a30 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5d 	bl	80019dc <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff31 	bl	80019a0 <__NVIC_EnableIRQ>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffa2 	bl	8001a98 <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e165      	b.n	8001e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	f040 8154 	bne.w	8001e42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d005      	beq.n	8001bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d130      	bne.n	8001c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be8:	2201      	movs	r2, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 0201 	and.w	r2, r3, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d017      	beq.n	8001c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d123      	bne.n	8001ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	08da      	lsrs	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3208      	adds	r2, #8
 8001c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	220f      	movs	r2, #15
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	69b9      	ldr	r1, [r7, #24]
 8001ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0203 	and.w	r2, r3, #3
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80ae 	beq.w	8001e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b5d      	ldr	r3, [pc, #372]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	4a5c      	ldr	r2, [pc, #368]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf6:	4b5a      	ldr	r3, [pc, #360]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d02:	4a58      	ldr	r2, [pc, #352]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4f      	ldr	r2, [pc, #316]	@ (8001e68 <HAL_GPIO_Init+0x308>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d025      	beq.n	8001d7a <HAL_GPIO_Init+0x21a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4e      	ldr	r2, [pc, #312]	@ (8001e6c <HAL_GPIO_Init+0x30c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01f      	beq.n	8001d76 <HAL_GPIO_Init+0x216>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4d      	ldr	r2, [pc, #308]	@ (8001e70 <HAL_GPIO_Init+0x310>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d019      	beq.n	8001d72 <HAL_GPIO_Init+0x212>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4c      	ldr	r2, [pc, #304]	@ (8001e74 <HAL_GPIO_Init+0x314>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <HAL_GPIO_Init+0x20e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4b      	ldr	r2, [pc, #300]	@ (8001e78 <HAL_GPIO_Init+0x318>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00d      	beq.n	8001d6a <HAL_GPIO_Init+0x20a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4a      	ldr	r2, [pc, #296]	@ (8001e7c <HAL_GPIO_Init+0x31c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d007      	beq.n	8001d66 <HAL_GPIO_Init+0x206>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a49      	ldr	r2, [pc, #292]	@ (8001e80 <HAL_GPIO_Init+0x320>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d101      	bne.n	8001d62 <HAL_GPIO_Init+0x202>
 8001d5e:	2306      	movs	r3, #6
 8001d60:	e00c      	b.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d62:	2307      	movs	r3, #7
 8001d64:	e00a      	b.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d66:	2305      	movs	r3, #5
 8001d68:	e008      	b.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	e006      	b.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e004      	b.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e002      	b.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	f002 0203 	and.w	r2, r2, #3
 8001d82:	0092      	lsls	r2, r2, #2
 8001d84:	4093      	lsls	r3, r2
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d8c:	4935      	ldr	r1, [pc, #212]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	3302      	adds	r3, #2
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dbe:	4a31      	ldr	r2, [pc, #196]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de8:	4a26      	ldr	r2, [pc, #152]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dee:	4b25      	ldr	r3, [pc, #148]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e12:	4a1c      	ldr	r2, [pc, #112]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e18:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e3c:	4a11      	ldr	r2, [pc, #68]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3301      	adds	r3, #1
 8001e46:	61fb      	str	r3, [r7, #28]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	2b0f      	cmp	r3, #15
 8001e4c:	f67f ae96 	bls.w	8001b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3724      	adds	r7, #36	@ 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40013800 	.word	0x40013800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40020800 	.word	0x40020800
 8001e74:	40020c00 	.word	0x40020c00
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40021400 	.word	0x40021400
 8001e80:	40021800 	.word	0x40021800
 8001e84:	40013c00 	.word	0x40013c00

08001e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
 8001e94:	4613      	mov	r3, r2
 8001e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e98:	787b      	ldrb	r3, [r7, #1]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea4:	e003      	b.n	8001eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ea6:	887b      	ldrh	r3, [r7, #2]
 8001ea8:	041a      	lsls	r2, r3, #16
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	619a      	str	r2, [r3, #24]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ec6:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ed2:	4a05      	ldr	r2, [pc, #20]	@ (8001ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fc08 	bl	80016f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40013c00 	.word	0x40013c00

08001eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0cc      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f00:	4b68      	ldr	r3, [pc, #416]	@ (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d90c      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b65      	ldr	r3, [pc, #404]	@ (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b63      	ldr	r3, [pc, #396]	@ (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0b8      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f40:	4b59      	ldr	r3, [pc, #356]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a58      	ldr	r2, [pc, #352]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f58:	4b53      	ldr	r3, [pc, #332]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4a52      	ldr	r2, [pc, #328]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b50      	ldr	r3, [pc, #320]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	494d      	ldr	r1, [pc, #308]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d044      	beq.n	800200c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b47      	ldr	r3, [pc, #284]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d119      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e07f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d003      	beq.n	8001faa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	4b3f      	ldr	r3, [pc, #252]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e06f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fba:	4b3b      	ldr	r3, [pc, #236]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e067      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fca:	4b37      	ldr	r3, [pc, #220]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4934      	ldr	r1, [pc, #208]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7ff fca2 	bl	8001924 <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7ff fc9e 	bl	8001924 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e04f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b2b      	ldr	r3, [pc, #172]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 020c 	and.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1eb      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b25      	ldr	r3, [pc, #148]	@ (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d20c      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b22      	ldr	r3, [pc, #136]	@ (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e032      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002040:	4b19      	ldr	r3, [pc, #100]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4916      	ldr	r1, [pc, #88]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800205e:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	490e      	ldr	r1, [pc, #56]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002072:	f000 f855 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8002076:	4602      	mov	r2, r0
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	490a      	ldr	r1, [pc, #40]	@ (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	5ccb      	ldrb	r3, [r1, r3]
 8002086:	fa22 f303 	lsr.w	r3, r2, r3
 800208a:	4a09      	ldr	r2, [pc, #36]	@ (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800208e:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fc02 	bl	800189c <HAL_InitTick>

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023c00 	.word	0x40023c00
 80020a8:	40023800 	.word	0x40023800
 80020ac:	08004574 	.word	0x08004574
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000004 	.word	0x20000004

080020b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020bc:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <HAL_RCC_GetHCLKFreq+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000000 	.word	0x20000000

080020d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d4:	f7ff fff0 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0a9b      	lsrs	r3, r3, #10
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4903      	ldr	r1, [pc, #12]	@ (80020f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	08004584 	.word	0x08004584

080020f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020fc:	f7ff ffdc 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0b5b      	lsrs	r3, r3, #13
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	4903      	ldr	r1, [pc, #12]	@ (800211c <HAL_RCC_GetPCLK2Freq+0x24>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40023800 	.word	0x40023800
 800211c:	08004584 	.word	0x08004584

08002120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002124:	b0ae      	sub	sp, #184	@ 0xb8
 8002126:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002146:	4bcb      	ldr	r3, [pc, #812]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x354>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b0c      	cmp	r3, #12
 8002150:	f200 8206 	bhi.w	8002560 <HAL_RCC_GetSysClockFreq+0x440>
 8002154:	a201      	add	r2, pc, #4	@ (adr r2, 800215c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215a:	bf00      	nop
 800215c:	08002191 	.word	0x08002191
 8002160:	08002561 	.word	0x08002561
 8002164:	08002561 	.word	0x08002561
 8002168:	08002561 	.word	0x08002561
 800216c:	08002199 	.word	0x08002199
 8002170:	08002561 	.word	0x08002561
 8002174:	08002561 	.word	0x08002561
 8002178:	08002561 	.word	0x08002561
 800217c:	080021a1 	.word	0x080021a1
 8002180:	08002561 	.word	0x08002561
 8002184:	08002561 	.word	0x08002561
 8002188:	08002561 	.word	0x08002561
 800218c:	08002391 	.word	0x08002391
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4bb9      	ldr	r3, [pc, #740]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x358>)
 8002192:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002196:	e1e7      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002198:	4bb8      	ldr	r3, [pc, #736]	@ (800247c <HAL_RCC_GetSysClockFreq+0x35c>)
 800219a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800219e:	e1e3      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a0:	4bb4      	ldr	r3, [pc, #720]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x354>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ac:	4bb1      	ldr	r3, [pc, #708]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d071      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b8:	4bae      	ldr	r3, [pc, #696]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	099b      	lsrs	r3, r3, #6
 80021be:	2200      	movs	r2, #0
 80021c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80021c4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80021c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80021da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80021de:	4622      	mov	r2, r4
 80021e0:	462b      	mov	r3, r5
 80021e2:	f04f 0000 	mov.w	r0, #0
 80021e6:	f04f 0100 	mov.w	r1, #0
 80021ea:	0159      	lsls	r1, r3, #5
 80021ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021f0:	0150      	lsls	r0, r2, #5
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4621      	mov	r1, r4
 80021f8:	1a51      	subs	r1, r2, r1
 80021fa:	6439      	str	r1, [r7, #64]	@ 0x40
 80021fc:	4629      	mov	r1, r5
 80021fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002202:	647b      	str	r3, [r7, #68]	@ 0x44
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002210:	4649      	mov	r1, r9
 8002212:	018b      	lsls	r3, r1, #6
 8002214:	4641      	mov	r1, r8
 8002216:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800221a:	4641      	mov	r1, r8
 800221c:	018a      	lsls	r2, r1, #6
 800221e:	4641      	mov	r1, r8
 8002220:	1a51      	subs	r1, r2, r1
 8002222:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002224:	4649      	mov	r1, r9
 8002226:	eb63 0301 	sbc.w	r3, r3, r1
 800222a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002238:	4649      	mov	r1, r9
 800223a:	00cb      	lsls	r3, r1, #3
 800223c:	4641      	mov	r1, r8
 800223e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002242:	4641      	mov	r1, r8
 8002244:	00ca      	lsls	r2, r1, #3
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	4603      	mov	r3, r0
 800224c:	4622      	mov	r2, r4
 800224e:	189b      	adds	r3, r3, r2
 8002250:	633b      	str	r3, [r7, #48]	@ 0x30
 8002252:	462b      	mov	r3, r5
 8002254:	460a      	mov	r2, r1
 8002256:	eb42 0303 	adc.w	r3, r2, r3
 800225a:	637b      	str	r3, [r7, #52]	@ 0x34
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002268:	4629      	mov	r1, r5
 800226a:	024b      	lsls	r3, r1, #9
 800226c:	4621      	mov	r1, r4
 800226e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002272:	4621      	mov	r1, r4
 8002274:	024a      	lsls	r2, r1, #9
 8002276:	4610      	mov	r0, r2
 8002278:	4619      	mov	r1, r3
 800227a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800227e:	2200      	movs	r2, #0
 8002280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002284:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002288:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800228c:	f7fd ffba 	bl	8000204 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800229a:	e067      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229c:	4b75      	ldr	r3, [pc, #468]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x354>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	2200      	movs	r2, #0
 80022a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80022a8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80022ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022b6:	2300      	movs	r3, #0
 80022b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80022be:	4622      	mov	r2, r4
 80022c0:	462b      	mov	r3, r5
 80022c2:	f04f 0000 	mov.w	r0, #0
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	0159      	lsls	r1, r3, #5
 80022cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d0:	0150      	lsls	r0, r2, #5
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4621      	mov	r1, r4
 80022d8:	1a51      	subs	r1, r2, r1
 80022da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80022dc:	4629      	mov	r1, r5
 80022de:	eb63 0301 	sbc.w	r3, r3, r1
 80022e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80022f0:	4649      	mov	r1, r9
 80022f2:	018b      	lsls	r3, r1, #6
 80022f4:	4641      	mov	r1, r8
 80022f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022fa:	4641      	mov	r1, r8
 80022fc:	018a      	lsls	r2, r1, #6
 80022fe:	4641      	mov	r1, r8
 8002300:	ebb2 0a01 	subs.w	sl, r2, r1
 8002304:	4649      	mov	r1, r9
 8002306:	eb63 0b01 	sbc.w	fp, r3, r1
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002316:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800231a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800231e:	4692      	mov	sl, r2
 8002320:	469b      	mov	fp, r3
 8002322:	4623      	mov	r3, r4
 8002324:	eb1a 0303 	adds.w	r3, sl, r3
 8002328:	623b      	str	r3, [r7, #32]
 800232a:	462b      	mov	r3, r5
 800232c:	eb4b 0303 	adc.w	r3, fp, r3
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800233e:	4629      	mov	r1, r5
 8002340:	028b      	lsls	r3, r1, #10
 8002342:	4621      	mov	r1, r4
 8002344:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002348:	4621      	mov	r1, r4
 800234a:	028a      	lsls	r2, r1, #10
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002354:	2200      	movs	r2, #0
 8002356:	673b      	str	r3, [r7, #112]	@ 0x70
 8002358:	677a      	str	r2, [r7, #116]	@ 0x74
 800235a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800235e:	f7fd ff51 	bl	8000204 <__aeabi_uldivmod>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4613      	mov	r3, r2
 8002368:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800236c:	4b41      	ldr	r3, [pc, #260]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x354>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	3301      	adds	r3, #1
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800237e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002382:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800238e:	e0eb      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002390:	4b38      	ldr	r3, [pc, #224]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x354>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002398:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800239c:	4b35      	ldr	r3, [pc, #212]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x354>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d06b      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a8:	4b32      	ldr	r3, [pc, #200]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x354>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	099b      	lsrs	r3, r3, #6
 80023ae:	2200      	movs	r2, #0
 80023b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80023bc:	2300      	movs	r3, #0
 80023be:	667b      	str	r3, [r7, #100]	@ 0x64
 80023c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80023c4:	4622      	mov	r2, r4
 80023c6:	462b      	mov	r3, r5
 80023c8:	f04f 0000 	mov.w	r0, #0
 80023cc:	f04f 0100 	mov.w	r1, #0
 80023d0:	0159      	lsls	r1, r3, #5
 80023d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023d6:	0150      	lsls	r0, r2, #5
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4621      	mov	r1, r4
 80023de:	1a51      	subs	r1, r2, r1
 80023e0:	61b9      	str	r1, [r7, #24]
 80023e2:	4629      	mov	r1, r5
 80023e4:	eb63 0301 	sbc.w	r3, r3, r1
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80023f6:	4659      	mov	r1, fp
 80023f8:	018b      	lsls	r3, r1, #6
 80023fa:	4651      	mov	r1, sl
 80023fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002400:	4651      	mov	r1, sl
 8002402:	018a      	lsls	r2, r1, #6
 8002404:	4651      	mov	r1, sl
 8002406:	ebb2 0801 	subs.w	r8, r2, r1
 800240a:	4659      	mov	r1, fp
 800240c:	eb63 0901 	sbc.w	r9, r3, r1
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800241c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002420:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002424:	4690      	mov	r8, r2
 8002426:	4699      	mov	r9, r3
 8002428:	4623      	mov	r3, r4
 800242a:	eb18 0303 	adds.w	r3, r8, r3
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	462b      	mov	r3, r5
 8002432:	eb49 0303 	adc.w	r3, r9, r3
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002444:	4629      	mov	r1, r5
 8002446:	024b      	lsls	r3, r1, #9
 8002448:	4621      	mov	r1, r4
 800244a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800244e:	4621      	mov	r1, r4
 8002450:	024a      	lsls	r2, r1, #9
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800245a:	2200      	movs	r2, #0
 800245c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800245e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002460:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002464:	f7fd fece 	bl	8000204 <__aeabi_uldivmod>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4613      	mov	r3, r2
 800246e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002472:	e065      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x420>
 8002474:	40023800 	.word	0x40023800
 8002478:	00f42400 	.word	0x00f42400
 800247c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002480:	4b3d      	ldr	r3, [pc, #244]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x458>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	099b      	lsrs	r3, r3, #6
 8002486:	2200      	movs	r2, #0
 8002488:	4618      	mov	r0, r3
 800248a:	4611      	mov	r1, r2
 800248c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002490:	653b      	str	r3, [r7, #80]	@ 0x50
 8002492:	2300      	movs	r3, #0
 8002494:	657b      	str	r3, [r7, #84]	@ 0x54
 8002496:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800249a:	4642      	mov	r2, r8
 800249c:	464b      	mov	r3, r9
 800249e:	f04f 0000 	mov.w	r0, #0
 80024a2:	f04f 0100 	mov.w	r1, #0
 80024a6:	0159      	lsls	r1, r3, #5
 80024a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ac:	0150      	lsls	r0, r2, #5
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4641      	mov	r1, r8
 80024b4:	1a51      	subs	r1, r2, r1
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	4649      	mov	r1, r9
 80024ba:	eb63 0301 	sbc.w	r3, r3, r1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80024cc:	4659      	mov	r1, fp
 80024ce:	018b      	lsls	r3, r1, #6
 80024d0:	4651      	mov	r1, sl
 80024d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024d6:	4651      	mov	r1, sl
 80024d8:	018a      	lsls	r2, r1, #6
 80024da:	4651      	mov	r1, sl
 80024dc:	1a54      	subs	r4, r2, r1
 80024de:	4659      	mov	r1, fp
 80024e0:	eb63 0501 	sbc.w	r5, r3, r1
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	00eb      	lsls	r3, r5, #3
 80024ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024f2:	00e2      	lsls	r2, r4, #3
 80024f4:	4614      	mov	r4, r2
 80024f6:	461d      	mov	r5, r3
 80024f8:	4643      	mov	r3, r8
 80024fa:	18e3      	adds	r3, r4, r3
 80024fc:	603b      	str	r3, [r7, #0]
 80024fe:	464b      	mov	r3, r9
 8002500:	eb45 0303 	adc.w	r3, r5, r3
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002512:	4629      	mov	r1, r5
 8002514:	028b      	lsls	r3, r1, #10
 8002516:	4621      	mov	r1, r4
 8002518:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800251c:	4621      	mov	r1, r4
 800251e:	028a      	lsls	r2, r1, #10
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002528:	2200      	movs	r2, #0
 800252a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800252c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800252e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002532:	f7fd fe67 	bl	8000204 <__aeabi_uldivmod>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4613      	mov	r3, r2
 800253c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002540:	4b0d      	ldr	r3, [pc, #52]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x458>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	0f1b      	lsrs	r3, r3, #28
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800254e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002556:	fbb2 f3f3 	udiv	r3, r2, r3
 800255a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800255e:	e003      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002562:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002566:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002568:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800256c:	4618      	mov	r0, r3
 800256e:	37b8      	adds	r7, #184	@ 0xb8
 8002570:	46bd      	mov	sp, r7
 8002572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	00f42400 	.word	0x00f42400

08002580 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e28d      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8083 	beq.w	80026a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025a0:	4b94      	ldr	r3, [pc, #592]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d019      	beq.n	80025e0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025ac:	4b91      	ldr	r3, [pc, #580]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 030c 	and.w	r3, r3, #12
        || \
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025b8:	4b8e      	ldr	r3, [pc, #568]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025c4:	d00c      	beq.n	80025e0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c6:	4b8b      	ldr	r3, [pc, #556]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025ce:	2b0c      	cmp	r3, #12
 80025d0:	d112      	bne.n	80025f8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d2:	4b88      	ldr	r3, [pc, #544]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025de:	d10b      	bne.n	80025f8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	4b84      	ldr	r3, [pc, #528]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d05b      	beq.n	80026a4 <HAL_RCC_OscConfig+0x124>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d157      	bne.n	80026a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e25a      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002600:	d106      	bne.n	8002610 <HAL_RCC_OscConfig+0x90>
 8002602:	4b7c      	ldr	r3, [pc, #496]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a7b      	ldr	r2, [pc, #492]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e01d      	b.n	800264c <HAL_RCC_OscConfig+0xcc>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0xb4>
 800261a:	4b76      	ldr	r3, [pc, #472]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a75      	ldr	r2, [pc, #468]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b73      	ldr	r3, [pc, #460]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a72      	ldr	r2, [pc, #456]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0xcc>
 8002634:	4b6f      	ldr	r3, [pc, #444]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a6e      	ldr	r2, [pc, #440]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 800263a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b6c      	ldr	r3, [pc, #432]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a6b      	ldr	r2, [pc, #428]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002646:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800264a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7ff f966 	bl	8001924 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800265c:	f7ff f962 	bl	8001924 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	@ 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e21f      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b61      	ldr	r3, [pc, #388]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0xdc>
 800267a:	e014      	b.n	80026a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7ff f952 	bl	8001924 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002684:	f7ff f94e 	bl	8001924 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	@ 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e20b      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002696:	4b57      	ldr	r3, [pc, #348]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x104>
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d06f      	beq.n	8002792 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026b2:	4b50      	ldr	r3, [pc, #320]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d017      	beq.n	80026ee <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026be:	4b4d      	ldr	r3, [pc, #308]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
        || \
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d105      	bne.n	80026d6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026ca:	4b4a      	ldr	r3, [pc, #296]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d6:	4b47      	ldr	r3, [pc, #284]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	d11c      	bne.n	800271c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e2:	4b44      	ldr	r3, [pc, #272]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d116      	bne.n	800271c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ee:	4b41      	ldr	r3, [pc, #260]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_RCC_OscConfig+0x186>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d001      	beq.n	8002706 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e1d3      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002706:	4b3b      	ldr	r3, [pc, #236]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4937      	ldr	r1, [pc, #220]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271a:	e03a      	b.n	8002792 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002724:	4b34      	ldr	r3, [pc, #208]	@ (80027f8 <HAL_RCC_OscConfig+0x278>)
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7ff f8fb 	bl	8001924 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002732:	f7ff f8f7 	bl	8001924 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e1b4      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002744:	4b2b      	ldr	r3, [pc, #172]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002750:	4b28      	ldr	r3, [pc, #160]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4925      	ldr	r1, [pc, #148]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]
 8002764:	e015      	b.n	8002792 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002766:	4b24      	ldr	r3, [pc, #144]	@ (80027f8 <HAL_RCC_OscConfig+0x278>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7ff f8da 	bl	8001924 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002774:	f7ff f8d6 	bl	8001924 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e193      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002786:	4b1b      	ldr	r3, [pc, #108]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d036      	beq.n	800280c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d016      	beq.n	80027d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a6:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7ff f8ba 	bl	8001924 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b4:	f7ff f8b6 	bl	8001924 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e173      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c6:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <HAL_RCC_OscConfig+0x274>)
 80027c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x234>
 80027d2:	e01b      	b.n	800280c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d4:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7ff f8a3 	bl	8001924 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e0:	e00e      	b.n	8002800 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e2:	f7ff f89f 	bl	8001924 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d907      	bls.n	8002800 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e15c      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
 80027f4:	40023800 	.word	0x40023800
 80027f8:	42470000 	.word	0x42470000
 80027fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002800:	4b8a      	ldr	r3, [pc, #552]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 8002802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ea      	bne.n	80027e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8097 	beq.w	8002948 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281a:	2300      	movs	r3, #0
 800281c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281e:	4b83      	ldr	r3, [pc, #524]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10f      	bne.n	800284a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	4a7e      	ldr	r2, [pc, #504]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 8002834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002838:	6413      	str	r3, [r2, #64]	@ 0x40
 800283a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002846:	2301      	movs	r3, #1
 8002848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284a:	4b79      	ldr	r3, [pc, #484]	@ (8002a30 <HAL_RCC_OscConfig+0x4b0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d118      	bne.n	8002888 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002856:	4b76      	ldr	r3, [pc, #472]	@ (8002a30 <HAL_RCC_OscConfig+0x4b0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a75      	ldr	r2, [pc, #468]	@ (8002a30 <HAL_RCC_OscConfig+0x4b0>)
 800285c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002862:	f7ff f85f 	bl	8001924 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286a:	f7ff f85b 	bl	8001924 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e118      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a30 <HAL_RCC_OscConfig+0x4b0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x31e>
 8002890:	4b66      	ldr	r3, [pc, #408]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002894:	4a65      	ldr	r2, [pc, #404]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6713      	str	r3, [r2, #112]	@ 0x70
 800289c:	e01c      	b.n	80028d8 <HAL_RCC_OscConfig+0x358>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b05      	cmp	r3, #5
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x340>
 80028a6:	4b61      	ldr	r3, [pc, #388]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028aa:	4a60      	ldr	r2, [pc, #384]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 80028ac:	f043 0304 	orr.w	r3, r3, #4
 80028b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b2:	4b5e      	ldr	r3, [pc, #376]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b6:	4a5d      	ldr	r2, [pc, #372]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_OscConfig+0x358>
 80028c0:	4b5a      	ldr	r3, [pc, #360]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 80028c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c4:	4a59      	ldr	r2, [pc, #356]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80028cc:	4b57      	ldr	r3, [pc, #348]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 80028ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d0:	4a56      	ldr	r2, [pc, #344]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 80028d2:	f023 0304 	bic.w	r3, r3, #4
 80028d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d015      	beq.n	800290c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e0:	f7ff f820 	bl	8001924 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f7ff f81c 	bl	8001924 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e0d7      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fe:	4b4b      	ldr	r3, [pc, #300]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0ee      	beq.n	80028e8 <HAL_RCC_OscConfig+0x368>
 800290a:	e014      	b.n	8002936 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7ff f80a 	bl	8001924 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002912:	e00a      	b.n	800292a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002914:	f7ff f806 	bl	8001924 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e0c1      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292a:	4b40      	ldr	r3, [pc, #256]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1ee      	bne.n	8002914 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002936:	7dfb      	ldrb	r3, [r7, #23]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d105      	bne.n	8002948 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	4a3a      	ldr	r2, [pc, #232]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 8002942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002946:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80ad 	beq.w	8002aac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002952:	4b36      	ldr	r3, [pc, #216]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b08      	cmp	r3, #8
 800295c:	d060      	beq.n	8002a20 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d145      	bne.n	80029f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b33      	ldr	r3, [pc, #204]	@ (8002a34 <HAL_RCC_OscConfig+0x4b4>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe ffda 	bl	8001924 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7fe ffd6 	bl	8001924 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e093      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	4b29      	ldr	r3, [pc, #164]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69da      	ldr	r2, [r3, #28]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	019b      	lsls	r3, r3, #6
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a8:	085b      	lsrs	r3, r3, #1
 80029aa:	3b01      	subs	r3, #1
 80029ac:	041b      	lsls	r3, r3, #16
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029bc:	071b      	lsls	r3, r3, #28
 80029be:	491b      	ldr	r1, [pc, #108]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <HAL_RCC_OscConfig+0x4b4>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7fe ffab 	bl	8001924 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d2:	f7fe ffa7 	bl	8001924 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e064      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x452>
 80029f0:	e05c      	b.n	8002aac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f2:	4b10      	ldr	r3, [pc, #64]	@ (8002a34 <HAL_RCC_OscConfig+0x4b4>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe ff94 	bl	8001924 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a00:	f7fe ff90 	bl	8001924 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e04d      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <HAL_RCC_OscConfig+0x4ac>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x480>
 8002a1e:	e045      	b.n	8002aac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e040      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40007000 	.word	0x40007000
 8002a34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a38:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab8 <HAL_RCC_OscConfig+0x538>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d030      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d129      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d122      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a68:	4013      	ands	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d119      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7e:	085b      	lsrs	r3, r3, #1
 8002a80:	3b01      	subs	r3, #1
 8002a82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d10f      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800

08002abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e041      	b.n	8002b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe fbf2 	bl	80012cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f000 fdb0 	bl	8003660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d001      	beq.n	8002b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e04e      	b.n	8002c12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a23      	ldr	r2, [pc, #140]	@ (8002c20 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d022      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b9e:	d01d      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c24 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d018      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1e      	ldr	r2, [pc, #120]	@ (8002c28 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d013      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a19      	ldr	r2, [pc, #100]	@ (8002c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a18      	ldr	r2, [pc, #96]	@ (8002c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d111      	bne.n	8002c00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d010      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	e007      	b.n	8002c10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40000c00 	.word	0x40000c00
 8002c30:	40010400 	.word	0x40010400
 8002c34:	40014000 	.word	0x40014000
 8002c38:	40001800 	.word	0x40001800

08002c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e041      	b.n	8002cd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f839 	bl	8002cda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3304      	adds	r3, #4
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	f000 fcf0 	bl	8003660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d109      	bne.n	8002d18 <HAL_TIM_PWM_Start_IT+0x28>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	bf14      	ite	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	2300      	moveq	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e022      	b.n	8002d5e <HAL_TIM_PWM_Start_IT+0x6e>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d109      	bne.n	8002d32 <HAL_TIM_PWM_Start_IT+0x42>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	e015      	b.n	8002d5e <HAL_TIM_PWM_Start_IT+0x6e>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d109      	bne.n	8002d4c <HAL_TIM_PWM_Start_IT+0x5c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	bf14      	ite	ne
 8002d44:	2301      	movne	r3, #1
 8002d46:	2300      	moveq	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e008      	b.n	8002d5e <HAL_TIM_PWM_Start_IT+0x6e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0c7      	b.n	8002ef6 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d104      	bne.n	8002d76 <HAL_TIM_PWM_Start_IT+0x86>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d74:	e013      	b.n	8002d9e <HAL_TIM_PWM_Start_IT+0xae>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d104      	bne.n	8002d86 <HAL_TIM_PWM_Start_IT+0x96>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d84:	e00b      	b.n	8002d9e <HAL_TIM_PWM_Start_IT+0xae>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d104      	bne.n	8002d96 <HAL_TIM_PWM_Start_IT+0xa6>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d94:	e003      	b.n	8002d9e <HAL_TIM_PWM_Start_IT+0xae>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d841      	bhi.n	8002e28 <HAL_TIM_PWM_Start_IT+0x138>
 8002da4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dac <HAL_TIM_PWM_Start_IT+0xbc>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002de1 	.word	0x08002de1
 8002db0:	08002e29 	.word	0x08002e29
 8002db4:	08002e29 	.word	0x08002e29
 8002db8:	08002e29 	.word	0x08002e29
 8002dbc:	08002df3 	.word	0x08002df3
 8002dc0:	08002e29 	.word	0x08002e29
 8002dc4:	08002e29 	.word	0x08002e29
 8002dc8:	08002e29 	.word	0x08002e29
 8002dcc:	08002e05 	.word	0x08002e05
 8002dd0:	08002e29 	.word	0x08002e29
 8002dd4:	08002e29 	.word	0x08002e29
 8002dd8:	08002e29 	.word	0x08002e29
 8002ddc:	08002e17 	.word	0x08002e17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0202 	orr.w	r2, r2, #2
 8002dee:	60da      	str	r2, [r3, #12]
      break;
 8002df0:	e01d      	b.n	8002e2e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0204 	orr.w	r2, r2, #4
 8002e00:	60da      	str	r2, [r3, #12]
      break;
 8002e02:	e014      	b.n	8002e2e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0208 	orr.w	r2, r2, #8
 8002e12:	60da      	str	r2, [r3, #12]
      break;
 8002e14:	e00b      	b.n	8002e2e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0210 	orr.w	r2, r2, #16
 8002e24:	60da      	str	r2, [r3, #12]
      break;
 8002e26:	e002      	b.n	8002e2e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d15f      	bne.n	8002ef4 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	6839      	ldr	r1, [r7, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 ff96 	bl	8003d6e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2e      	ldr	r2, [pc, #184]	@ (8002f00 <HAL_TIM_PWM_Start_IT+0x210>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d004      	beq.n	8002e56 <HAL_TIM_PWM_Start_IT+0x166>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a2c      	ldr	r2, [pc, #176]	@ (8002f04 <HAL_TIM_PWM_Start_IT+0x214>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <HAL_TIM_PWM_Start_IT+0x16a>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_TIM_PWM_Start_IT+0x16c>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d007      	beq.n	8002e70 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e6e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a22      	ldr	r2, [pc, #136]	@ (8002f00 <HAL_TIM_PWM_Start_IT+0x210>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d022      	beq.n	8002ec0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e82:	d01d      	beq.n	8002ec0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a1f      	ldr	r2, [pc, #124]	@ (8002f08 <HAL_TIM_PWM_Start_IT+0x218>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d018      	beq.n	8002ec0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1e      	ldr	r2, [pc, #120]	@ (8002f0c <HAL_TIM_PWM_Start_IT+0x21c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d013      	beq.n	8002ec0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8002f10 <HAL_TIM_PWM_Start_IT+0x220>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00e      	beq.n	8002ec0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a17      	ldr	r2, [pc, #92]	@ (8002f04 <HAL_TIM_PWM_Start_IT+0x214>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a18      	ldr	r2, [pc, #96]	@ (8002f14 <HAL_TIM_PWM_Start_IT+0x224>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d004      	beq.n	8002ec0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a17      	ldr	r2, [pc, #92]	@ (8002f18 <HAL_TIM_PWM_Start_IT+0x228>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d111      	bne.n	8002ee4 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d010      	beq.n	8002ef4 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee2:	e007      	b.n	8002ef4 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40010000 	.word	0x40010000
 8002f04:	40010400 	.word	0x40010400
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40000800 	.word	0x40000800
 8002f10:	40000c00 	.word	0x40000c00
 8002f14:	40014000 	.word	0x40014000
 8002f18:	40001800 	.word	0x40001800

08002f1c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	d841      	bhi.n	8002fb4 <HAL_TIM_PWM_Stop_IT+0x98>
 8002f30:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f6d 	.word	0x08002f6d
 8002f3c:	08002fb5 	.word	0x08002fb5
 8002f40:	08002fb5 	.word	0x08002fb5
 8002f44:	08002fb5 	.word	0x08002fb5
 8002f48:	08002f7f 	.word	0x08002f7f
 8002f4c:	08002fb5 	.word	0x08002fb5
 8002f50:	08002fb5 	.word	0x08002fb5
 8002f54:	08002fb5 	.word	0x08002fb5
 8002f58:	08002f91 	.word	0x08002f91
 8002f5c:	08002fb5 	.word	0x08002fb5
 8002f60:	08002fb5 	.word	0x08002fb5
 8002f64:	08002fb5 	.word	0x08002fb5
 8002f68:	08002fa3 	.word	0x08002fa3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0202 	bic.w	r2, r2, #2
 8002f7a:	60da      	str	r2, [r3, #12]
      break;
 8002f7c:	e01d      	b.n	8002fba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0204 	bic.w	r2, r2, #4
 8002f8c:	60da      	str	r2, [r3, #12]
      break;
 8002f8e:	e014      	b.n	8002fba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0208 	bic.w	r2, r2, #8
 8002f9e:	60da      	str	r2, [r3, #12]
      break;
 8002fa0:	e00b      	b.n	8002fba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0210 	bic.w	r2, r2, #16
 8002fb0:	60da      	str	r2, [r3, #12]
      break;
 8002fb2:	e002      	b.n	8002fba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d161      	bne.n	8003084 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	6839      	ldr	r1, [r7, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fed0 	bl	8003d6e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8003090 <HAL_TIM_PWM_Stop_IT+0x174>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_TIM_PWM_Stop_IT+0xc6>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8003094 <HAL_TIM_PWM_Stop_IT+0x178>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <HAL_TIM_PWM_Stop_IT+0xca>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_TIM_PWM_Stop_IT+0xcc>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d017      	beq.n	800301c <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a1a      	ldr	r2, [r3, #32]
 8002ff2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10f      	bne.n	800301c <HAL_TIM_PWM_Stop_IT+0x100>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6a1a      	ldr	r2, [r3, #32]
 8003002:	f240 4344 	movw	r3, #1092	@ 0x444
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d107      	bne.n	800301c <HAL_TIM_PWM_Stop_IT+0x100>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800301a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6a1a      	ldr	r2, [r3, #32]
 8003022:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10f      	bne.n	800304c <HAL_TIM_PWM_Stop_IT+0x130>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6a1a      	ldr	r2, [r3, #32]
 8003032:	f240 4344 	movw	r3, #1092	@ 0x444
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <HAL_TIM_PWM_Stop_IT+0x130>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d104      	bne.n	800305c <HAL_TIM_PWM_Stop_IT+0x140>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800305a:	e013      	b.n	8003084 <HAL_TIM_PWM_Stop_IT+0x168>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b04      	cmp	r3, #4
 8003060:	d104      	bne.n	800306c <HAL_TIM_PWM_Stop_IT+0x150>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800306a:	e00b      	b.n	8003084 <HAL_TIM_PWM_Stop_IT+0x168>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b08      	cmp	r3, #8
 8003070:	d104      	bne.n	800307c <HAL_TIM_PWM_Stop_IT+0x160>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800307a:	e003      	b.n	8003084 <HAL_TIM_PWM_Stop_IT+0x168>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40010000 	.word	0x40010000
 8003094:	40010400 	.word	0x40010400

08003098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d020      	beq.n	80030fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01b      	beq.n	80030fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0202 	mvn.w	r2, #2
 80030cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fa9d 	bl	8003622 <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fa8f 	bl	800360e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 faa0 	bl	8003636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d020      	beq.n	8003148 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01b      	beq.n	8003148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0204 	mvn.w	r2, #4
 8003118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa77 	bl	8003622 <HAL_TIM_IC_CaptureCallback>
 8003134:	e005      	b.n	8003142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fa69 	bl	800360e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fa7a 	bl	8003636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d020      	beq.n	8003194 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01b      	beq.n	8003194 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0208 	mvn.w	r2, #8
 8003164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2204      	movs	r2, #4
 800316a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fa51 	bl	8003622 <HAL_TIM_IC_CaptureCallback>
 8003180:	e005      	b.n	800318e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fa43 	bl	800360e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fa54 	bl	8003636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	d020      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01b      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0210 	mvn.w	r2, #16
 80031b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2208      	movs	r2, #8
 80031b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fa2b 	bl	8003622 <HAL_TIM_IC_CaptureCallback>
 80031cc:	e005      	b.n	80031da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fa1d 	bl	800360e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fa2e 	bl	8003636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0201 	mvn.w	r2, #1
 80031fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fe fa42 	bl	8001688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00c      	beq.n	8003228 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003214:	2b00      	cmp	r3, #0
 8003216:	d007      	beq.n	8003228 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fea0 	bl	8003f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00c      	beq.n	800324c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f9ff 	bl	800364a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00c      	beq.n	8003270 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0220 	mvn.w	r2, #32
 8003268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fe72 	bl	8003f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003270:	bf00      	nop
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003292:	2302      	movs	r3, #2
 8003294:	e0ae      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b0c      	cmp	r3, #12
 80032a2:	f200 809f 	bhi.w	80033e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032a6:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	080032e1 	.word	0x080032e1
 80032b0:	080033e5 	.word	0x080033e5
 80032b4:	080033e5 	.word	0x080033e5
 80032b8:	080033e5 	.word	0x080033e5
 80032bc:	08003321 	.word	0x08003321
 80032c0:	080033e5 	.word	0x080033e5
 80032c4:	080033e5 	.word	0x080033e5
 80032c8:	080033e5 	.word	0x080033e5
 80032cc:	08003363 	.word	0x08003363
 80032d0:	080033e5 	.word	0x080033e5
 80032d4:	080033e5 	.word	0x080033e5
 80032d8:	080033e5 	.word	0x080033e5
 80032dc:	080033a3 	.word	0x080033a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fa66 	bl	80037b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0208 	orr.w	r2, r2, #8
 80032fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0204 	bic.w	r2, r2, #4
 800330a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6999      	ldr	r1, [r3, #24]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	619a      	str	r2, [r3, #24]
      break;
 800331e:	e064      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fab6 	bl	8003898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800333a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800334a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6999      	ldr	r1, [r3, #24]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	021a      	lsls	r2, r3, #8
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	619a      	str	r2, [r3, #24]
      break;
 8003360:	e043      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fb0b 	bl	8003984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0208 	orr.w	r2, r2, #8
 800337c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0204 	bic.w	r2, r2, #4
 800338c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69d9      	ldr	r1, [r3, #28]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	61da      	str	r2, [r3, #28]
      break;
 80033a0:	e023      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fb5f 	bl	8003a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69d9      	ldr	r1, [r3, #28]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	021a      	lsls	r2, r3, #8
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	61da      	str	r2, [r3, #28]
      break;
 80033e2:	e002      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	75fb      	strb	r3, [r7, #23]
      break;
 80033e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_TIM_ConfigClockSource+0x1c>
 8003414:	2302      	movs	r3, #2
 8003416:	e0b4      	b.n	8003582 <HAL_TIM_ConfigClockSource+0x186>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800343e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003450:	d03e      	beq.n	80034d0 <HAL_TIM_ConfigClockSource+0xd4>
 8003452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003456:	f200 8087 	bhi.w	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 800345a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800345e:	f000 8086 	beq.w	800356e <HAL_TIM_ConfigClockSource+0x172>
 8003462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003466:	d87f      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 8003468:	2b70      	cmp	r3, #112	@ 0x70
 800346a:	d01a      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0xa6>
 800346c:	2b70      	cmp	r3, #112	@ 0x70
 800346e:	d87b      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b60      	cmp	r3, #96	@ 0x60
 8003472:	d050      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x11a>
 8003474:	2b60      	cmp	r3, #96	@ 0x60
 8003476:	d877      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b50      	cmp	r3, #80	@ 0x50
 800347a:	d03c      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0xfa>
 800347c:	2b50      	cmp	r3, #80	@ 0x50
 800347e:	d873      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 8003480:	2b40      	cmp	r3, #64	@ 0x40
 8003482:	d058      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x13a>
 8003484:	2b40      	cmp	r3, #64	@ 0x40
 8003486:	d86f      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 8003488:	2b30      	cmp	r3, #48	@ 0x30
 800348a:	d064      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x15a>
 800348c:	2b30      	cmp	r3, #48	@ 0x30
 800348e:	d86b      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 8003490:	2b20      	cmp	r3, #32
 8003492:	d060      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x15a>
 8003494:	2b20      	cmp	r3, #32
 8003496:	d867      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d05c      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x15a>
 800349c:	2b10      	cmp	r3, #16
 800349e:	d05a      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x15a>
 80034a0:	e062      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034b2:	f000 fc3c 	bl	8003d2e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	609a      	str	r2, [r3, #8]
      break;
 80034ce:	e04f      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034e0:	f000 fc25 	bl	8003d2e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034f2:	609a      	str	r2, [r3, #8]
      break;
 80034f4:	e03c      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003502:	461a      	mov	r2, r3
 8003504:	f000 fb99 	bl	8003c3a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2150      	movs	r1, #80	@ 0x50
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fbf2 	bl	8003cf8 <TIM_ITRx_SetConfig>
      break;
 8003514:	e02c      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003522:	461a      	mov	r2, r3
 8003524:	f000 fbb8 	bl	8003c98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2160      	movs	r1, #96	@ 0x60
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fbe2 	bl	8003cf8 <TIM_ITRx_SetConfig>
      break;
 8003534:	e01c      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003542:	461a      	mov	r2, r3
 8003544:	f000 fb79 	bl	8003c3a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2140      	movs	r1, #64	@ 0x40
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fbd2 	bl	8003cf8 <TIM_ITRx_SetConfig>
      break;
 8003554:	e00c      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f000 fbc9 	bl	8003cf8 <TIM_ITRx_SetConfig>
      break;
 8003566:	e003      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
      break;
 800356c:	e000      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800356e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_TIM_SlaveConfigSynchro+0x18>
 800359e:	2302      	movs	r3, #2
 80035a0:	e031      	b.n	8003606 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80035b2:	6839      	ldr	r1, [r7, #0]
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 faaf 	bl	8003b18 <TIM_SlaveTimer_SetConfig>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e018      	b.n	8003606 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035e2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035f2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a46      	ldr	r2, [pc, #280]	@ (800378c <TIM_Base_SetConfig+0x12c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d013      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367e:	d00f      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a43      	ldr	r2, [pc, #268]	@ (8003790 <TIM_Base_SetConfig+0x130>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00b      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a42      	ldr	r2, [pc, #264]	@ (8003794 <TIM_Base_SetConfig+0x134>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a41      	ldr	r2, [pc, #260]	@ (8003798 <TIM_Base_SetConfig+0x138>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a40      	ldr	r2, [pc, #256]	@ (800379c <TIM_Base_SetConfig+0x13c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d108      	bne.n	80036b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a35      	ldr	r2, [pc, #212]	@ (800378c <TIM_Base_SetConfig+0x12c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d02b      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c0:	d027      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a32      	ldr	r2, [pc, #200]	@ (8003790 <TIM_Base_SetConfig+0x130>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d023      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a31      	ldr	r2, [pc, #196]	@ (8003794 <TIM_Base_SetConfig+0x134>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01f      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a30      	ldr	r2, [pc, #192]	@ (8003798 <TIM_Base_SetConfig+0x138>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01b      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2f      	ldr	r2, [pc, #188]	@ (800379c <TIM_Base_SetConfig+0x13c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d017      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a2e      	ldr	r2, [pc, #184]	@ (80037a0 <TIM_Base_SetConfig+0x140>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a2d      	ldr	r2, [pc, #180]	@ (80037a4 <TIM_Base_SetConfig+0x144>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00f      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a2c      	ldr	r2, [pc, #176]	@ (80037a8 <TIM_Base_SetConfig+0x148>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00b      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a2b      	ldr	r2, [pc, #172]	@ (80037ac <TIM_Base_SetConfig+0x14c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d007      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a2a      	ldr	r2, [pc, #168]	@ (80037b0 <TIM_Base_SetConfig+0x150>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d003      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a29      	ldr	r2, [pc, #164]	@ (80037b4 <TIM_Base_SetConfig+0x154>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d108      	bne.n	8003724 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a10      	ldr	r2, [pc, #64]	@ (800378c <TIM_Base_SetConfig+0x12c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_Base_SetConfig+0xf8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a12      	ldr	r2, [pc, #72]	@ (800379c <TIM_Base_SetConfig+0x13c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d103      	bne.n	8003760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b01      	cmp	r3, #1
 8003770:	d105      	bne.n	800377e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f023 0201 	bic.w	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	611a      	str	r2, [r3, #16]
  }
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40010000 	.word	0x40010000
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800
 8003798:	40000c00 	.word	0x40000c00
 800379c:	40010400 	.word	0x40010400
 80037a0:	40014000 	.word	0x40014000
 80037a4:	40014400 	.word	0x40014400
 80037a8:	40014800 	.word	0x40014800
 80037ac:	40001800 	.word	0x40001800
 80037b0:	40001c00 	.word	0x40001c00
 80037b4:	40002000 	.word	0x40002000

080037b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f023 0201 	bic.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f023 0302 	bic.w	r3, r3, #2
 8003800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a20      	ldr	r2, [pc, #128]	@ (8003890 <TIM_OC1_SetConfig+0xd8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d003      	beq.n	800381c <TIM_OC1_SetConfig+0x64>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a1f      	ldr	r2, [pc, #124]	@ (8003894 <TIM_OC1_SetConfig+0xdc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d10c      	bne.n	8003836 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0308 	bic.w	r3, r3, #8
 8003822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f023 0304 	bic.w	r3, r3, #4
 8003834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a15      	ldr	r2, [pc, #84]	@ (8003890 <TIM_OC1_SetConfig+0xd8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d003      	beq.n	8003846 <TIM_OC1_SetConfig+0x8e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a14      	ldr	r2, [pc, #80]	@ (8003894 <TIM_OC1_SetConfig+0xdc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d111      	bne.n	800386a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800384c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	621a      	str	r2, [r3, #32]
}
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40010000 	.word	0x40010000
 8003894:	40010400 	.word	0x40010400

08003898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f023 0210 	bic.w	r2, r3, #16
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f023 0320 	bic.w	r3, r3, #32
 80038e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a22      	ldr	r2, [pc, #136]	@ (800397c <TIM_OC2_SetConfig+0xe4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d003      	beq.n	8003900 <TIM_OC2_SetConfig+0x68>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a21      	ldr	r2, [pc, #132]	@ (8003980 <TIM_OC2_SetConfig+0xe8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d10d      	bne.n	800391c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800391a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a17      	ldr	r2, [pc, #92]	@ (800397c <TIM_OC2_SetConfig+0xe4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d003      	beq.n	800392c <TIM_OC2_SetConfig+0x94>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a16      	ldr	r2, [pc, #88]	@ (8003980 <TIM_OC2_SetConfig+0xe8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d113      	bne.n	8003954 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800393a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	621a      	str	r2, [r3, #32]
}
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40010000 	.word	0x40010000
 8003980:	40010400 	.word	0x40010400

08003984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0303 	bic.w	r3, r3, #3
 80039ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a21      	ldr	r2, [pc, #132]	@ (8003a64 <TIM_OC3_SetConfig+0xe0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d003      	beq.n	80039ea <TIM_OC3_SetConfig+0x66>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a20      	ldr	r2, [pc, #128]	@ (8003a68 <TIM_OC3_SetConfig+0xe4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d10d      	bne.n	8003a06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a16      	ldr	r2, [pc, #88]	@ (8003a64 <TIM_OC3_SetConfig+0xe0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <TIM_OC3_SetConfig+0x92>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a15      	ldr	r2, [pc, #84]	@ (8003a68 <TIM_OC3_SetConfig+0xe4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d113      	bne.n	8003a3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	621a      	str	r2, [r3, #32]
}
 8003a58:	bf00      	nop
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	40010000 	.word	0x40010000
 8003a68:	40010400 	.word	0x40010400

08003a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	021b      	lsls	r3, r3, #8
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	031b      	lsls	r3, r3, #12
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a12      	ldr	r2, [pc, #72]	@ (8003b10 <TIM_OC4_SetConfig+0xa4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d003      	beq.n	8003ad4 <TIM_OC4_SetConfig+0x68>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a11      	ldr	r2, [pc, #68]	@ (8003b14 <TIM_OC4_SetConfig+0xa8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d109      	bne.n	8003ae8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	019b      	lsls	r3, r3, #6
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40010400 	.word	0x40010400

08003b18 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b34:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f023 0307 	bic.w	r3, r3, #7
 8003b46:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b70      	cmp	r3, #112	@ 0x70
 8003b60:	d01a      	beq.n	8003b98 <TIM_SlaveTimer_SetConfig+0x80>
 8003b62:	2b70      	cmp	r3, #112	@ 0x70
 8003b64:	d860      	bhi.n	8003c28 <TIM_SlaveTimer_SetConfig+0x110>
 8003b66:	2b60      	cmp	r3, #96	@ 0x60
 8003b68:	d054      	beq.n	8003c14 <TIM_SlaveTimer_SetConfig+0xfc>
 8003b6a:	2b60      	cmp	r3, #96	@ 0x60
 8003b6c:	d85c      	bhi.n	8003c28 <TIM_SlaveTimer_SetConfig+0x110>
 8003b6e:	2b50      	cmp	r3, #80	@ 0x50
 8003b70:	d046      	beq.n	8003c00 <TIM_SlaveTimer_SetConfig+0xe8>
 8003b72:	2b50      	cmp	r3, #80	@ 0x50
 8003b74:	d858      	bhi.n	8003c28 <TIM_SlaveTimer_SetConfig+0x110>
 8003b76:	2b40      	cmp	r3, #64	@ 0x40
 8003b78:	d019      	beq.n	8003bae <TIM_SlaveTimer_SetConfig+0x96>
 8003b7a:	2b40      	cmp	r3, #64	@ 0x40
 8003b7c:	d854      	bhi.n	8003c28 <TIM_SlaveTimer_SetConfig+0x110>
 8003b7e:	2b30      	cmp	r3, #48	@ 0x30
 8003b80:	d055      	beq.n	8003c2e <TIM_SlaveTimer_SetConfig+0x116>
 8003b82:	2b30      	cmp	r3, #48	@ 0x30
 8003b84:	d850      	bhi.n	8003c28 <TIM_SlaveTimer_SetConfig+0x110>
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d051      	beq.n	8003c2e <TIM_SlaveTimer_SetConfig+0x116>
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d84c      	bhi.n	8003c28 <TIM_SlaveTimer_SetConfig+0x110>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d04d      	beq.n	8003c2e <TIM_SlaveTimer_SetConfig+0x116>
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d04b      	beq.n	8003c2e <TIM_SlaveTimer_SetConfig+0x116>
 8003b96:	e047      	b.n	8003c28 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003ba8:	f000 f8c1 	bl	8003d2e <TIM_ETR_SetConfig>
      break;
 8003bac:	e040      	b.n	8003c30 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b05      	cmp	r3, #5
 8003bb4:	d101      	bne.n	8003bba <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e03b      	b.n	8003c32 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003be0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]
      break;
 8003bfe:	e017      	b.n	8003c30 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f000 f814 	bl	8003c3a <TIM_TI1_ConfigInputStage>
      break;
 8003c12:	e00d      	b.n	8003c30 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c20:	461a      	mov	r2, r3
 8003c22:	f000 f839 	bl	8003c98 <TIM_TI2_ConfigInputStage>
      break;
 8003c26:	e003      	b.n	8003c30 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c2c:	e000      	b.n	8003c30 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003c2e:	bf00      	nop
  }

  return status;
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b087      	sub	sp, #28
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f023 0201 	bic.w	r2, r3, #1
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f023 030a 	bic.w	r3, r3, #10
 8003c76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	621a      	str	r2, [r3, #32]
}
 8003c8c:	bf00      	nop
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f023 0210 	bic.w	r2, r3, #16
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	031b      	lsls	r3, r3, #12
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	621a      	str	r2, [r3, #32]
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f043 0307 	orr.w	r3, r3, #7
 8003d1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	609a      	str	r2, [r3, #8]
}
 8003d22:	bf00      	nop
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b087      	sub	sp, #28
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
 8003d3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	021a      	lsls	r2, r3, #8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	609a      	str	r2, [r3, #8]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2201      	movs	r2, #1
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1a      	ldr	r2, [r3, #32]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	401a      	ands	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a1a      	ldr	r2, [r3, #32]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	fa01 f303 	lsl.w	r3, r1, r3
 8003da6:	431a      	orrs	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	621a      	str	r2, [r3, #32]
}
 8003dac:	bf00      	nop
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e05a      	b.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a21      	ldr	r2, [pc, #132]	@ (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d022      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e1c:	d01d      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1d      	ldr	r2, [pc, #116]	@ (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d018      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d013      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00e      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a18      	ldr	r2, [pc, #96]	@ (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d009      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d004      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a15      	ldr	r2, [pc, #84]	@ (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d10c      	bne.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40010000 	.word	0x40010000
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40000800 	.word	0x40000800
 8003ea0:	40000c00 	.word	0x40000c00
 8003ea4:	40010400 	.word	0x40010400
 8003ea8:	40014000 	.word	0x40014000
 8003eac:	40001800 	.word	0x40001800

08003eb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e03d      	b.n	8003f48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e042      	b.n	8004014 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd fbe6 	bl	8001774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2224      	movs	r2, #36	@ 0x24
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f82b 	bl	800401c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800401c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004020:	b0c0      	sub	sp, #256	@ 0x100
 8004022:	af00      	add	r7, sp, #0
 8004024:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004038:	68d9      	ldr	r1, [r3, #12]
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	ea40 0301 	orr.w	r3, r0, r1
 8004044:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	431a      	orrs	r2, r3
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	431a      	orrs	r2, r3
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004074:	f021 010c 	bic.w	r1, r1, #12
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004082:	430b      	orrs	r3, r1
 8004084:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004096:	6999      	ldr	r1, [r3, #24]
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	ea40 0301 	orr.w	r3, r0, r1
 80040a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b8f      	ldr	r3, [pc, #572]	@ (80042e8 <UART_SetConfig+0x2cc>)
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d005      	beq.n	80040bc <UART_SetConfig+0xa0>
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	4b8d      	ldr	r3, [pc, #564]	@ (80042ec <UART_SetConfig+0x2d0>)
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d104      	bne.n	80040c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040bc:	f7fe f81c 	bl	80020f8 <HAL_RCC_GetPCLK2Freq>
 80040c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040c4:	e003      	b.n	80040ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040c6:	f7fe f803 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 80040ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040d8:	f040 810c 	bne.w	80042f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040e0:	2200      	movs	r2, #0
 80040e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040ee:	4622      	mov	r2, r4
 80040f0:	462b      	mov	r3, r5
 80040f2:	1891      	adds	r1, r2, r2
 80040f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040f6:	415b      	adcs	r3, r3
 80040f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040fe:	4621      	mov	r1, r4
 8004100:	eb12 0801 	adds.w	r8, r2, r1
 8004104:	4629      	mov	r1, r5
 8004106:	eb43 0901 	adc.w	r9, r3, r1
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800411a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800411e:	4690      	mov	r8, r2
 8004120:	4699      	mov	r9, r3
 8004122:	4623      	mov	r3, r4
 8004124:	eb18 0303 	adds.w	r3, r8, r3
 8004128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800412c:	462b      	mov	r3, r5
 800412e:	eb49 0303 	adc.w	r3, r9, r3
 8004132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004142:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004146:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800414a:	460b      	mov	r3, r1
 800414c:	18db      	adds	r3, r3, r3
 800414e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004150:	4613      	mov	r3, r2
 8004152:	eb42 0303 	adc.w	r3, r2, r3
 8004156:	657b      	str	r3, [r7, #84]	@ 0x54
 8004158:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800415c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004160:	f7fc f850 	bl	8000204 <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4b61      	ldr	r3, [pc, #388]	@ (80042f0 <UART_SetConfig+0x2d4>)
 800416a:	fba3 2302 	umull	r2, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	011c      	lsls	r4, r3, #4
 8004172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004176:	2200      	movs	r2, #0
 8004178:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800417c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004180:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004184:	4642      	mov	r2, r8
 8004186:	464b      	mov	r3, r9
 8004188:	1891      	adds	r1, r2, r2
 800418a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800418c:	415b      	adcs	r3, r3
 800418e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004190:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004194:	4641      	mov	r1, r8
 8004196:	eb12 0a01 	adds.w	sl, r2, r1
 800419a:	4649      	mov	r1, r9
 800419c:	eb43 0b01 	adc.w	fp, r3, r1
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b4:	4692      	mov	sl, r2
 80041b6:	469b      	mov	fp, r3
 80041b8:	4643      	mov	r3, r8
 80041ba:	eb1a 0303 	adds.w	r3, sl, r3
 80041be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041c2:	464b      	mov	r3, r9
 80041c4:	eb4b 0303 	adc.w	r3, fp, r3
 80041c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041e0:	460b      	mov	r3, r1
 80041e2:	18db      	adds	r3, r3, r3
 80041e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041e6:	4613      	mov	r3, r2
 80041e8:	eb42 0303 	adc.w	r3, r2, r3
 80041ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041f6:	f7fc f805 	bl	8000204 <__aeabi_uldivmod>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4611      	mov	r1, r2
 8004200:	4b3b      	ldr	r3, [pc, #236]	@ (80042f0 <UART_SetConfig+0x2d4>)
 8004202:	fba3 2301 	umull	r2, r3, r3, r1
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	2264      	movs	r2, #100	@ 0x64
 800420a:	fb02 f303 	mul.w	r3, r2, r3
 800420e:	1acb      	subs	r3, r1, r3
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004216:	4b36      	ldr	r3, [pc, #216]	@ (80042f0 <UART_SetConfig+0x2d4>)
 8004218:	fba3 2302 	umull	r2, r3, r3, r2
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004224:	441c      	add	r4, r3
 8004226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800422a:	2200      	movs	r2, #0
 800422c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004230:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004234:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004238:	4642      	mov	r2, r8
 800423a:	464b      	mov	r3, r9
 800423c:	1891      	adds	r1, r2, r2
 800423e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004240:	415b      	adcs	r3, r3
 8004242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004248:	4641      	mov	r1, r8
 800424a:	1851      	adds	r1, r2, r1
 800424c:	6339      	str	r1, [r7, #48]	@ 0x30
 800424e:	4649      	mov	r1, r9
 8004250:	414b      	adcs	r3, r1
 8004252:	637b      	str	r3, [r7, #52]	@ 0x34
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004260:	4659      	mov	r1, fp
 8004262:	00cb      	lsls	r3, r1, #3
 8004264:	4651      	mov	r1, sl
 8004266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426a:	4651      	mov	r1, sl
 800426c:	00ca      	lsls	r2, r1, #3
 800426e:	4610      	mov	r0, r2
 8004270:	4619      	mov	r1, r3
 8004272:	4603      	mov	r3, r0
 8004274:	4642      	mov	r2, r8
 8004276:	189b      	adds	r3, r3, r2
 8004278:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800427c:	464b      	mov	r3, r9
 800427e:	460a      	mov	r2, r1
 8004280:	eb42 0303 	adc.w	r3, r2, r3
 8004284:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004294:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004298:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800429c:	460b      	mov	r3, r1
 800429e:	18db      	adds	r3, r3, r3
 80042a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042a2:	4613      	mov	r3, r2
 80042a4:	eb42 0303 	adc.w	r3, r2, r3
 80042a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042b2:	f7fb ffa7 	bl	8000204 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4b0d      	ldr	r3, [pc, #52]	@ (80042f0 <UART_SetConfig+0x2d4>)
 80042bc:	fba3 1302 	umull	r1, r3, r3, r2
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	2164      	movs	r1, #100	@ 0x64
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	3332      	adds	r3, #50	@ 0x32
 80042ce:	4a08      	ldr	r2, [pc, #32]	@ (80042f0 <UART_SetConfig+0x2d4>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	f003 0207 	and.w	r2, r3, #7
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4422      	add	r2, r4
 80042e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042e4:	e106      	b.n	80044f4 <UART_SetConfig+0x4d8>
 80042e6:	bf00      	nop
 80042e8:	40011000 	.word	0x40011000
 80042ec:	40011400 	.word	0x40011400
 80042f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004302:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004306:	4642      	mov	r2, r8
 8004308:	464b      	mov	r3, r9
 800430a:	1891      	adds	r1, r2, r2
 800430c:	6239      	str	r1, [r7, #32]
 800430e:	415b      	adcs	r3, r3
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
 8004312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004316:	4641      	mov	r1, r8
 8004318:	1854      	adds	r4, r2, r1
 800431a:	4649      	mov	r1, r9
 800431c:	eb43 0501 	adc.w	r5, r3, r1
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	00eb      	lsls	r3, r5, #3
 800432a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800432e:	00e2      	lsls	r2, r4, #3
 8004330:	4614      	mov	r4, r2
 8004332:	461d      	mov	r5, r3
 8004334:	4643      	mov	r3, r8
 8004336:	18e3      	adds	r3, r4, r3
 8004338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800433c:	464b      	mov	r3, r9
 800433e:	eb45 0303 	adc.w	r3, r5, r3
 8004342:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004352:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004362:	4629      	mov	r1, r5
 8004364:	008b      	lsls	r3, r1, #2
 8004366:	4621      	mov	r1, r4
 8004368:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800436c:	4621      	mov	r1, r4
 800436e:	008a      	lsls	r2, r1, #2
 8004370:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004374:	f7fb ff46 	bl	8000204 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4b60      	ldr	r3, [pc, #384]	@ (8004500 <UART_SetConfig+0x4e4>)
 800437e:	fba3 2302 	umull	r2, r3, r3, r2
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	011c      	lsls	r4, r3, #4
 8004386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800438a:	2200      	movs	r2, #0
 800438c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004390:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004394:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004398:	4642      	mov	r2, r8
 800439a:	464b      	mov	r3, r9
 800439c:	1891      	adds	r1, r2, r2
 800439e:	61b9      	str	r1, [r7, #24]
 80043a0:	415b      	adcs	r3, r3
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a8:	4641      	mov	r1, r8
 80043aa:	1851      	adds	r1, r2, r1
 80043ac:	6139      	str	r1, [r7, #16]
 80043ae:	4649      	mov	r1, r9
 80043b0:	414b      	adcs	r3, r1
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043c0:	4659      	mov	r1, fp
 80043c2:	00cb      	lsls	r3, r1, #3
 80043c4:	4651      	mov	r1, sl
 80043c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ca:	4651      	mov	r1, sl
 80043cc:	00ca      	lsls	r2, r1, #3
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	4603      	mov	r3, r0
 80043d4:	4642      	mov	r2, r8
 80043d6:	189b      	adds	r3, r3, r2
 80043d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043dc:	464b      	mov	r3, r9
 80043de:	460a      	mov	r2, r1
 80043e0:	eb42 0303 	adc.w	r3, r2, r3
 80043e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004400:	4649      	mov	r1, r9
 8004402:	008b      	lsls	r3, r1, #2
 8004404:	4641      	mov	r1, r8
 8004406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800440a:	4641      	mov	r1, r8
 800440c:	008a      	lsls	r2, r1, #2
 800440e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004412:	f7fb fef7 	bl	8000204 <__aeabi_uldivmod>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4611      	mov	r1, r2
 800441c:	4b38      	ldr	r3, [pc, #224]	@ (8004500 <UART_SetConfig+0x4e4>)
 800441e:	fba3 2301 	umull	r2, r3, r3, r1
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	2264      	movs	r2, #100	@ 0x64
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	1acb      	subs	r3, r1, r3
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	3332      	adds	r3, #50	@ 0x32
 8004430:	4a33      	ldr	r2, [pc, #204]	@ (8004500 <UART_SetConfig+0x4e4>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800443c:	441c      	add	r4, r3
 800443e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004442:	2200      	movs	r2, #0
 8004444:	673b      	str	r3, [r7, #112]	@ 0x70
 8004446:	677a      	str	r2, [r7, #116]	@ 0x74
 8004448:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800444c:	4642      	mov	r2, r8
 800444e:	464b      	mov	r3, r9
 8004450:	1891      	adds	r1, r2, r2
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	415b      	adcs	r3, r3
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800445c:	4641      	mov	r1, r8
 800445e:	1851      	adds	r1, r2, r1
 8004460:	6039      	str	r1, [r7, #0]
 8004462:	4649      	mov	r1, r9
 8004464:	414b      	adcs	r3, r1
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004474:	4659      	mov	r1, fp
 8004476:	00cb      	lsls	r3, r1, #3
 8004478:	4651      	mov	r1, sl
 800447a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800447e:	4651      	mov	r1, sl
 8004480:	00ca      	lsls	r2, r1, #3
 8004482:	4610      	mov	r0, r2
 8004484:	4619      	mov	r1, r3
 8004486:	4603      	mov	r3, r0
 8004488:	4642      	mov	r2, r8
 800448a:	189b      	adds	r3, r3, r2
 800448c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800448e:	464b      	mov	r3, r9
 8004490:	460a      	mov	r2, r1
 8004492:	eb42 0303 	adc.w	r3, r2, r3
 8004496:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80044a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044b0:	4649      	mov	r1, r9
 80044b2:	008b      	lsls	r3, r1, #2
 80044b4:	4641      	mov	r1, r8
 80044b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ba:	4641      	mov	r1, r8
 80044bc:	008a      	lsls	r2, r1, #2
 80044be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044c2:	f7fb fe9f 	bl	8000204 <__aeabi_uldivmod>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004500 <UART_SetConfig+0x4e4>)
 80044cc:	fba3 1302 	umull	r1, r3, r3, r2
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	2164      	movs	r1, #100	@ 0x64
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	3332      	adds	r3, #50	@ 0x32
 80044de:	4a08      	ldr	r2, [pc, #32]	@ (8004500 <UART_SetConfig+0x4e4>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	f003 020f 	and.w	r2, r3, #15
 80044ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4422      	add	r2, r4
 80044f2:	609a      	str	r2, [r3, #8]
}
 80044f4:	bf00      	nop
 80044f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044fa:	46bd      	mov	sp, r7
 80044fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004500:	51eb851f 	.word	0x51eb851f

08004504 <memset>:
 8004504:	4402      	add	r2, r0
 8004506:	4603      	mov	r3, r0
 8004508:	4293      	cmp	r3, r2
 800450a:	d100      	bne.n	800450e <memset+0xa>
 800450c:	4770      	bx	lr
 800450e:	f803 1b01 	strb.w	r1, [r3], #1
 8004512:	e7f9      	b.n	8004508 <memset+0x4>

08004514 <__libc_init_array>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	4d0d      	ldr	r5, [pc, #52]	@ (800454c <__libc_init_array+0x38>)
 8004518:	4c0d      	ldr	r4, [pc, #52]	@ (8004550 <__libc_init_array+0x3c>)
 800451a:	1b64      	subs	r4, r4, r5
 800451c:	10a4      	asrs	r4, r4, #2
 800451e:	2600      	movs	r6, #0
 8004520:	42a6      	cmp	r6, r4
 8004522:	d109      	bne.n	8004538 <__libc_init_array+0x24>
 8004524:	4d0b      	ldr	r5, [pc, #44]	@ (8004554 <__libc_init_array+0x40>)
 8004526:	4c0c      	ldr	r4, [pc, #48]	@ (8004558 <__libc_init_array+0x44>)
 8004528:	f000 f818 	bl	800455c <_init>
 800452c:	1b64      	subs	r4, r4, r5
 800452e:	10a4      	asrs	r4, r4, #2
 8004530:	2600      	movs	r6, #0
 8004532:	42a6      	cmp	r6, r4
 8004534:	d105      	bne.n	8004542 <__libc_init_array+0x2e>
 8004536:	bd70      	pop	{r4, r5, r6, pc}
 8004538:	f855 3b04 	ldr.w	r3, [r5], #4
 800453c:	4798      	blx	r3
 800453e:	3601      	adds	r6, #1
 8004540:	e7ee      	b.n	8004520 <__libc_init_array+0xc>
 8004542:	f855 3b04 	ldr.w	r3, [r5], #4
 8004546:	4798      	blx	r3
 8004548:	3601      	adds	r6, #1
 800454a:	e7f2      	b.n	8004532 <__libc_init_array+0x1e>
 800454c:	08004594 	.word	0x08004594
 8004550:	08004594 	.word	0x08004594
 8004554:	08004594 	.word	0x08004594
 8004558:	08004598 	.word	0x08004598

0800455c <_init>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	bf00      	nop
 8004560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004562:	bc08      	pop	{r3}
 8004564:	469e      	mov	lr, r3
 8004566:	4770      	bx	lr

08004568 <_fini>:
 8004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456a:	bf00      	nop
 800456c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456e:	bc08      	pop	{r3}
 8004570:	469e      	mov	lr, r3
 8004572:	4770      	bx	lr
