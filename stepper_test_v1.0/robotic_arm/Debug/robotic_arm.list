
robotic_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041d8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800439c  0800439c  0000539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043b4  080043b4  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  080043b4  080043b4  000053b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043bc  080043bc  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043bc  080043bc  000053bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043c0  080043c0  000053c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080043c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000014  080043d8  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080043d8  00006258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e839  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021cb  00000000  00000000  0001487d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00016a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a20  00000000  00000000  00017740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217e1  00000000  00000000  00018160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001044e  00000000  00000000  00039941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd53b  00000000  00000000  00049d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001172ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003584  00000000  00000000  00117310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0011a894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004384 	.word	0x08004384

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08004384 	.word	0x08004384

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	4b55      	ldr	r3, [pc, #340]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a54      	ldr	r2, [pc, #336]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b52      	ldr	r3, [pc, #328]	@ (8000664 <MX_GPIO_Init+0x170>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	4b4e      	ldr	r3, [pc, #312]	@ (8000664 <MX_GPIO_Init+0x170>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a4d      	ldr	r2, [pc, #308]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b4b      	ldr	r3, [pc, #300]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4b47      	ldr	r3, [pc, #284]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a46      	ldr	r2, [pc, #280]	@ (8000664 <MX_GPIO_Init+0x170>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b44      	ldr	r3, [pc, #272]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b40      	ldr	r3, [pc, #256]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a3f      	ldr	r2, [pc, #252]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b3d      	ldr	r3, [pc, #244]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIRECTION4_Pin|DIRECTION3_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	21e0      	movs	r1, #224	@ 0xe0
 800057e:	483a      	ldr	r0, [pc, #232]	@ (8000668 <MX_GPIO_Init+0x174>)
 8000580:	f001 fba0 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION2_GPIO_Port, DIRECTION2_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2110      	movs	r1, #16
 8000588:	4838      	ldr	r0, [pc, #224]	@ (800066c <MX_GPIO_Init+0x178>)
 800058a:	f001 fb9b 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2120      	movs	r1, #32
 8000592:	4836      	ldr	r0, [pc, #216]	@ (800066c <MX_GPIO_Init+0x178>)
 8000594:	f001 fb96 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION1_GPIO_Port, DIRECTION1_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2101      	movs	r1, #1
 800059c:	4834      	ldr	r0, [pc, #208]	@ (8000670 <MX_GPIO_Init+0x17c>)
 800059e:	f001 fb91 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISABLE_button_Pin;
 80005a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISABLE_button_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	482c      	ldr	r0, [pc, #176]	@ (800066c <MX_GPIO_Init+0x178>)
 80005ba:	f001 f9ef 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005be:	2320      	movs	r3, #32
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4824      	ldr	r0, [pc, #144]	@ (8000668 <MX_GPIO_Init+0x174>)
 80005d6:	f001 f9e1 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIRECTION4_Pin|DIRECTION3_Pin;
 80005da:	23c0      	movs	r3, #192	@ 0xc0
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	481d      	ldr	r0, [pc, #116]	@ (8000668 <MX_GPIO_Init+0x174>)
 80005f2:	f001 f9d3 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRECTION2_Pin;
 80005f6:	2310      	movs	r3, #16
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION2_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4817      	ldr	r0, [pc, #92]	@ (800066c <MX_GPIO_Init+0x178>)
 800060e:	f001 f9c5 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000612:	2320      	movs	r3, #32
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061a:	2301      	movs	r3, #1
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061e:	2302      	movs	r3, #2
 8000620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4810      	ldr	r0, [pc, #64]	@ (800066c <MX_GPIO_Init+0x178>)
 800062a:	f001 f9b7 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRECTION1_Pin;
 800062e:	2301      	movs	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000636:	2302      	movs	r3, #2
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION1_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	480a      	ldr	r0, [pc, #40]	@ (8000670 <MX_GPIO_Init+0x17c>)
 8000646:	f001 f9a9 	bl	800199c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	2028      	movs	r0, #40	@ 0x28
 8000650:	f001 f96d 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000654:	2028      	movs	r0, #40	@ 0x28
 8000656:	f001 f986 	bl	8001966 <HAL_NVIC_EnableIRQ>

}
 800065a:	bf00      	nop
 800065c:	3728      	adds	r7, #40	@ 0x28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40020000 	.word	0x40020000
 800066c:	40020800 	.word	0x40020800
 8000670:	40020400 	.word	0x40020400

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800067a:	f001 f80b 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f843 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f7ff ff37 	bl	80004f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000686:	f000 ff69 	bl	800155c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800068a:	f000 fb79 	bl	8000d80 <MX_TIM3_Init>
  MX_TIM5_Init();
 800068e:	f000 fc3f 	bl	8000f10 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000692:	f000 fa51 	bl	8000b38 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000696:	f000 faf1 	bl	8000c7c <MX_TIM2_Init>
  MX_TIM4_Init();
 800069a:	f000 fbd5 	bl	8000e48 <MX_TIM4_Init>
  MX_TIM8_Init();
 800069e:	f000 fc9b 	bl	8000fd8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 80006a2:	4812      	ldr	r0, [pc, #72]	@ (80006ec <main+0x78>)
 80006a4:	f002 f978 	bl	8002998 <HAL_TIM_Base_Start_IT>
	//HAL_TIM_Base_Start_IT(&htim3);
	//HAL_TIM_Base_Start_IT(&htim5);

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET); //ENABLE
 80006a8:	2200      	movs	r2, #0
 80006aa:	2120      	movs	r1, #32
 80006ac:	4810      	ldr	r0, [pc, #64]	@ (80006f0 <main+0x7c>)
 80006ae:	f001 fb09 	bl	8001cc4 <HAL_GPIO_WritePin>
	/*
	 stepper_init(obj, resol, microstep, enable_port, direction_port, timer slave, timerpwm*/
	stepper_init(&stp1, &htim1, &htim4, 1.8, 1, DIRECTION1_GPIO_Port,
 80006b2:	2301      	movs	r3, #1
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <main+0x80>)
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2301      	movs	r3, #1
 80006bc:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 80006f8 <main+0x84>
 80006c0:	4a0a      	ldr	r2, [pc, #40]	@ (80006ec <main+0x78>)
 80006c2:	490e      	ldr	r1, [pc, #56]	@ (80006fc <main+0x88>)
 80006c4:	480e      	ldr	r0, [pc, #56]	@ (8000700 <main+0x8c>)
 80006c6:	f000 f893 	bl	80007f0 <stepper_init>
	//stepper_init(&stp3, &htim2, &htim3, 1.8, 6.4, DIRECTION3_GPIO_Port,
	//DIRECTION3_Pin);
	//stepper_init(&stp4, &htim8, &htim5, 1.8, 4, DIRECTION4_GPIO_Port,
	//DIRECTION4_Pin);

	stepper_move(&stp1, CLOCKWISE, 45, 45); //SET REGISTERS FOR THE MOVEMENT
 80006ca:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8000704 <main+0x90>
 80006ce:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8000704 <main+0x90>
 80006d2:	2101      	movs	r1, #1
 80006d4:	480a      	ldr	r0, [pc, #40]	@ (8000700 <main+0x8c>)
 80006d6:	f000 f8c5 	bl	8000864 <stepper_move>

	HAL_TIM_PWM_Start_IT(stp1.pwm_timer, TIM_CHANNEL_1); //START PWM
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <main+0x8c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fa23 	bl	8002b2c <HAL_TIM_PWM_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006e6:	bf00      	nop
 80006e8:	e7fd      	b.n	80006e6 <main+0x72>
 80006ea:	bf00      	nop
 80006ec:	20000134 	.word	0x20000134
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020400 	.word	0x40020400
 80006f8:	3fe66666 	.word	0x3fe66666
 80006fc:	2000005c 	.word	0x2000005c
 8000700:	20000030 	.word	0x20000030
 8000704:	42340000 	.word	0x42340000

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2234      	movs	r2, #52	@ 0x34
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fe08 	bl	800432c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b2a      	ldr	r3, [pc, #168]	@ (80007dc <SystemClock_Config+0xd4>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	4a29      	ldr	r2, [pc, #164]	@ (80007dc <SystemClock_Config+0xd4>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	@ 0x40
 800073c:	4b27      	ldr	r3, [pc, #156]	@ (80007dc <SystemClock_Config+0xd4>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemClock_Config+0xd8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000754:	4a22      	ldr	r2, [pc, #136]	@ (80007e0 <SystemClock_Config+0xd8>)
 8000756:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemClock_Config+0xd8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2310      	movs	r3, #16
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800077c:	2310      	movs	r3, #16
 800077e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000780:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000784:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000786:	2304      	movs	r3, #4
 8000788:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fe10 	bl	80023bc <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007a2:	f000 f81f 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2302      	movs	r3, #2
 80007ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2102      	movs	r1, #2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fab0 	bl	8001d28 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007ce:	f000 f809 	bl	80007e4 <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	@ 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <Error_Handler+0x8>

080007f0 <stepper_init>:
//definisco l'oggetto stepper con i seguenti parametri

void stepper_init(stepper_obj *stp, TIM_HandleTypeDef *pwm_timer,
		TIM_HandleTypeDef *position_timer, float stepper_resolution,
		uint16_t microstep, GPIO_TypeDef *direction_port,
		uint16_t direction_pin) {
 80007f0:	b480      	push	{r7}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6178      	str	r0, [r7, #20]
 80007f8:	6139      	str	r1, [r7, #16]
 80007fa:	60fa      	str	r2, [r7, #12]
 80007fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000800:	80fb      	strh	r3, [r7, #6]

	stp->position_timer = position_timer;
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	605a      	str	r2, [r3, #4]
	stp->pwm_timer = pwm_timer;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	601a      	str	r2, [r3, #0]
	stp->direction_port = direction_port;
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	6a3a      	ldr	r2, [r7, #32]
 8000812:	60da      	str	r2, [r3, #12]
	stp->direction_pin = direction_pin;
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000818:	821a      	strh	r2, [r3, #16]

	stp->stepper_resolution = stepper_resolution;
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	615a      	str	r2, [r3, #20]
	stp->microstep = microstep;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	88fa      	ldrh	r2, [r7, #6]
 8000824:	839a      	strh	r2, [r3, #28]
	stp->step_per_rev = 360.0f / stepper_resolution; // 360°/resolution
 8000826:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000860 <stepper_init+0x70>
 800082a:	ed97 7a02 	vldr	s14, [r7, #8]
 800082e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	edc3 7a06 	vstr	s15, [r3, #24]
	stp->step_scale = stp->step_per_rev * microstep;
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	ed93 7a06 	vldr	s14, [r3, #24]
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	ee07 3a90 	vmov	s15, r3
 8000844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8000852:	bf00      	nop
 8000854:	371c      	adds	r7, #28
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	43b40000 	.word	0x43b40000

08000864 <stepper_move>:
int n_steps; //debug
float freq_des_steps;
int arr_des=20000;

void stepper_move(stepper_obj *stp, direction_str direction, float position,
		float freq_desired) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	460b      	mov	r3, r1
 800086e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000872:	edc7 0a00 	vstr	s1, [r7]
 8000876:	72fb      	strb	r3, [r7, #11]

	n_steps = stp->step_scale * position / 360.0f; //[n_steps]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	ed93 7a08 	vldr	s14, [r3, #32]
 800087e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000882:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000886:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8000964 <stepper_move+0x100>
 800088a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800088e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000892:	ee17 2a90 	vmov	r2, s15
 8000896:	4b34      	ldr	r3, [pc, #208]	@ (8000968 <stepper_move+0x104>)
 8000898:	601a      	str	r2, [r3, #0]

	freq_des_steps = stp->step_scale * freq_desired / 360.0f; //[n_steps/s]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	ed93 7a08 	vldr	s14, [r3, #32]
 80008a0:	edd7 7a00 	vldr	s15, [r7]
 80008a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008a8:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8000964 <stepper_move+0x100>
 80008ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008b0:	4b2e      	ldr	r3, [pc, #184]	@ (800096c <stepper_move+0x108>)
 80008b2:	edc3 7a00 	vstr	s15, [r3]

	arr_des= (84*1000000/freq_des_steps)/stp->pwm_timer->Instance->PSC -1;
 80008b6:	4b2d      	ldr	r3, [pc, #180]	@ (800096c <stepper_move+0x108>)
 80008b8:	edd3 7a00 	vldr	s15, [r3]
 80008bc:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000970 <stepper_move+0x10c>
 80008c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008cc:	ee07 3a90 	vmov	s15, r3
 80008d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80008dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e4:	ee17 2a90 	vmov	r2, s15
 80008e8:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <stepper_move+0x110>)
 80008ea:	601a      	str	r2, [r3, #0]



	//trapezoidal_profile(freq_steps, position);

	HAL_GPIO_WritePin(stp->direction_port, stp->direction_pin, direction); //DIRECTION
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	68d8      	ldr	r0, [r3, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	8a1b      	ldrh	r3, [r3, #16]
 80008f4:	7afa      	ldrb	r2, [r7, #11]
 80008f6:	4619      	mov	r1, r3
 80008f8:	f001 f9e4 	bl	8001cc4 <HAL_GPIO_WritePin>

	//set arr of timer-slave for the position step count

	__HAL_TIM_SET_AUTORELOAD(stp->pwm_timer, ARR_START);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000906:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000910:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(stp->position_timer, __HAL_TIM_GET_AUTORELOAD(stp->pwm_timer));
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000920:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_AUTORELOAD(stp->position_timer, (n_steps*stp->pwm_timer->Instance->PSC - 1));
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800092a:	4a0f      	ldr	r2, [pc, #60]	@ (8000968 <stepper_move+0x104>)
 800092c:	6812      	ldr	r2, [r2, #0]
 800092e:	fb03 f202 	mul.w	r2, r3, r2
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3a01      	subs	r2, #1
 800093a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000944:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <stepper_move+0x104>)
 8000946:	6812      	ldr	r2, [r2, #0]
 8000948:	fb03 f202 	mul.w	r2, r3, r2
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	3a01      	subs	r2, #1
 8000952:	60da      	str	r2, [r3, #12]
	reset_timers(stp);
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f000 f80f 	bl	8000978 <reset_timers>

}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	43b40000 	.word	0x43b40000
 8000968:	20000054 	.word	0x20000054
 800096c:	20000058 	.word	0x20000058
 8000970:	4ca037a0 	.word	0x4ca037a0
 8000974:	20000000 	.word	0x20000000

08000978 <reset_timers>:

void reset_timers(stepper_obj *stp) {
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(stp->position_timer, 0);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(stp->pwm_timer, 0);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	@ 0x24
	stp->pwm_timer->Instance->EGR = TIM_EGR_UG; //reset the trigger
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2201      	movs	r2, #1
 800099c:	615a      	str	r2, [r3, #20]
	stp->position_timer->Instance->EGR = TIM_EGR_UG; //reset the trigger
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2201      	movs	r2, #1
 80009a6:	615a      	str	r2, [r3, #20]

}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	@ (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80009f2:	2006      	movs	r0, #6
 80009f4:	f000 ff90 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <NMI_Handler+0x4>

08000a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5a:	f000 fe6d 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a68:	4802      	ldr	r0, [pc, #8]	@ (8000a74 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000a6a:	f002 fa33 	bl	8002ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000005c 	.word	0x2000005c

08000a78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a7c:	4802      	ldr	r0, [pc, #8]	@ (8000a88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a7e:	f002 fa29 	bl	8002ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000005c 	.word	0x2000005c

08000a8c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a90:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000a92:	f002 fa1f 	bl	8002ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000005c 	.word	0x2000005c

08000aa0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <TIM1_CC_IRQHandler+0x10>)
 8000aa6:	f002 fa15 	bl	8002ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000005c 	.word	0x2000005c

08000ab4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ab8:	4802      	ldr	r0, [pc, #8]	@ (8000ac4 <TIM2_IRQHandler+0x10>)
 8000aba:	f002 fa0b 	bl	8002ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000a4 	.word	0x200000a4

08000ac8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000acc:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <TIM3_IRQHandler+0x10>)
 8000ace:	f002 fa01 	bl	8002ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000ec 	.word	0x200000ec

08000adc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ae0:	4802      	ldr	r0, [pc, #8]	@ (8000aec <TIM4_IRQHandler+0x10>)
 8000ae2:	f002 f9f7 	bl	8002ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000134 	.word	0x20000134

08000af0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DISABLE_button_Pin);
 8000af4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000af8:	f001 f8fe 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <TIM5_IRQHandler+0x10>)
 8000b06:	f002 f9e5 	bl	8002ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000017c 	.word	0x2000017c

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b096      	sub	sp, #88	@ 0x58
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
 8000b66:	615a      	str	r2, [r3, #20]
 8000b68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 fbdb 	bl	800432c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b76:	4b3f      	ldr	r3, [pc, #252]	@ (8000c74 <MX_TIM1_Init+0x13c>)
 8000b78:	4a3f      	ldr	r2, [pc, #252]	@ (8000c78 <MX_TIM1_Init+0x140>)
 8000b7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 150;
 8000b7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c74 <MX_TIM1_Init+0x13c>)
 8000b7e:	2296      	movs	r2, #150	@ 0x96
 8000b80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b82:	4b3c      	ldr	r3, [pc, #240]	@ (8000c74 <MX_TIM1_Init+0x13c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000b88:	4b3a      	ldr	r3, [pc, #232]	@ (8000c74 <MX_TIM1_Init+0x13c>)
 8000b8a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000b8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b90:	4b38      	ldr	r3, [pc, #224]	@ (8000c74 <MX_TIM1_Init+0x13c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b96:	4b37      	ldr	r3, [pc, #220]	@ (8000c74 <MX_TIM1_Init+0x13c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b9c:	4b35      	ldr	r3, [pc, #212]	@ (8000c74 <MX_TIM1_Init+0x13c>)
 8000b9e:	2280      	movs	r2, #128	@ 0x80
 8000ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ba2:	4834      	ldr	r0, [pc, #208]	@ (8000c74 <MX_TIM1_Init+0x13c>)
 8000ba4:	f001 fea8 	bl	80028f8 <HAL_TIM_Base_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000bae:	f7ff fe19 	bl	80007e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bb8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	482d      	ldr	r0, [pc, #180]	@ (8000c74 <MX_TIM1_Init+0x13c>)
 8000bc0:	f002 fb3a 	bl	8003238 <HAL_TIM_ConfigClockSource>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bca:	f7ff fe0b 	bl	80007e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bce:	4829      	ldr	r0, [pc, #164]	@ (8000c74 <MX_TIM1_Init+0x13c>)
 8000bd0:	f001 ff52 	bl	8002a78 <HAL_TIM_PWM_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000bda:	f7ff fe03 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bde:	2320      	movs	r3, #32
 8000be0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000be2:	2380      	movs	r3, #128	@ 0x80
 8000be4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000be6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bea:	4619      	mov	r1, r3
 8000bec:	4821      	ldr	r0, [pc, #132]	@ (8000c74 <MX_TIM1_Init+0x13c>)
 8000bee:	f002 fff7 	bl	8003be0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000bf8:	f7ff fdf4 	bl	80007e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfc:	2360      	movs	r3, #96	@ 0x60
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 8000c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4619      	mov	r1, r3
 8000c22:	4814      	ldr	r0, [pc, #80]	@ (8000c74 <MX_TIM1_Init+0x13c>)
 8000c24:	f002 fa46 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000c2e:	f7ff fdd9 	bl	80007e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	4619      	mov	r1, r3
 8000c54:	4807      	ldr	r0, [pc, #28]	@ (8000c74 <MX_TIM1_Init+0x13c>)
 8000c56:	f003 f83f 	bl	8003cd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000c60:	f7ff fdc0 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c64:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <MX_TIM1_Init+0x13c>)
 8000c66:	f000 fb25 	bl	80012b4 <HAL_TIM_MspPostInit>

}
 8000c6a:	bf00      	nop
 8000c6c:	3758      	adds	r7, #88	@ 0x58
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000005c 	.word	0x2000005c
 8000c78:	40010000 	.word	0x40010000

08000c7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08e      	sub	sp, #56	@ 0x38
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	f107 0320 	add.w	r3, r7, #32
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
 8000ca8:	615a      	str	r2, [r3, #20]
 8000caa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cac:	4b33      	ldr	r3, [pc, #204]	@ (8000d7c <MX_TIM2_Init+0x100>)
 8000cae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8000cb4:	4b31      	ldr	r3, [pc, #196]	@ (8000d7c <MX_TIM2_Init+0x100>)
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b30      	ldr	r3, [pc, #192]	@ (8000d7c <MX_TIM2_Init+0x100>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8000d7c <MX_TIM2_Init+0x100>)
 8000cc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d7c <MX_TIM2_Init+0x100>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cce:	4b2b      	ldr	r3, [pc, #172]	@ (8000d7c <MX_TIM2_Init+0x100>)
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cd4:	4829      	ldr	r0, [pc, #164]	@ (8000d7c <MX_TIM2_Init+0x100>)
 8000cd6:	f001 fe0f 	bl	80028f8 <HAL_TIM_Base_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ce0:	f7ff fd80 	bl	80007e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4822      	ldr	r0, [pc, #136]	@ (8000d7c <MX_TIM2_Init+0x100>)
 8000cf2:	f002 faa1 	bl	8003238 <HAL_TIM_ConfigClockSource>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000cfc:	f7ff fd72 	bl	80007e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d00:	481e      	ldr	r0, [pc, #120]	@ (8000d7c <MX_TIM2_Init+0x100>)
 8000d02:	f001 feb9 	bl	8002a78 <HAL_TIM_PWM_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d0c:	f7ff fd6a 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d10:	2320      	movs	r3, #32
 8000d12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000d14:	2380      	movs	r3, #128	@ 0x80
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4817      	ldr	r0, [pc, #92]	@ (8000d7c <MX_TIM2_Init+0x100>)
 8000d20:	f002 ff5e 	bl	8003be0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d2a:	f7ff fd5b 	bl	80007e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d2e:	2360      	movs	r3, #96	@ 0x60
 8000d30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32768;
 8000d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	4619      	mov	r1, r3
 8000d46:	480d      	ldr	r0, [pc, #52]	@ (8000d7c <MX_TIM2_Init+0x100>)
 8000d48:	f002 f9b4 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d52:	f7ff fd47 	bl	80007e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2204      	movs	r2, #4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4807      	ldr	r0, [pc, #28]	@ (8000d7c <MX_TIM2_Init+0x100>)
 8000d5e:	f002 f9a9 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000d68:	f7ff fd3c 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d6c:	4803      	ldr	r0, [pc, #12]	@ (8000d7c <MX_TIM2_Init+0x100>)
 8000d6e:	f000 faa1 	bl	80012b4 <HAL_TIM_MspPostInit>

}
 8000d72:	bf00      	nop
 8000d74:	3738      	adds	r7, #56	@ 0x38
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000a4 	.word	0x200000a4

08000d80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08c      	sub	sp, #48	@ 0x30
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dac:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <MX_TIM3_Init+0xc0>)
 8000dae:	4a25      	ldr	r2, [pc, #148]	@ (8000e44 <MX_TIM3_Init+0xc4>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 8000db2:	4b23      	ldr	r3, [pc, #140]	@ (8000e40 <MX_TIM3_Init+0xc0>)
 8000db4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000db8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b21      	ldr	r3, [pc, #132]	@ (8000e40 <MX_TIM3_Init+0xc0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e40 <MX_TIM3_Init+0xc0>)
 8000dc2:	22c7      	movs	r2, #199	@ 0xc7
 8000dc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e40 <MX_TIM3_Init+0xc0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <MX_TIM3_Init+0xc0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dd2:	481b      	ldr	r0, [pc, #108]	@ (8000e40 <MX_TIM3_Init+0xc0>)
 8000dd4:	f001 fd90 	bl	80028f8 <HAL_TIM_Base_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000dde:	f7ff fd01 	bl	80007e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000de8:	f107 0320 	add.w	r3, r7, #32
 8000dec:	4619      	mov	r1, r3
 8000dee:	4814      	ldr	r0, [pc, #80]	@ (8000e40 <MX_TIM3_Init+0xc0>)
 8000df0:	f002 fa22 	bl	8003238 <HAL_TIM_ConfigClockSource>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000dfa:	f7ff fcf3 	bl	80007e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000dfe:	2306      	movs	r3, #6
 8000e00:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e02:	2310      	movs	r3, #16
 8000e04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <MX_TIM3_Init+0xc0>)
 8000e0e:	f002 fada 	bl	80033c6 <HAL_TIM_SlaveConfigSynchro>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000e18:	f7ff fce4 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <MX_TIM3_Init+0xc0>)
 8000e2a:	f002 fed9 	bl	8003be0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000e34:	f7ff fcd6 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	3730      	adds	r7, #48	@ 0x30
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200000ec 	.word	0x200000ec
 8000e44:	40000400 	.word	0x40000400

08000e48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	@ 0x30
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e74:	4b24      	ldr	r3, [pc, #144]	@ (8000f08 <MX_TIM4_Init+0xc0>)
 8000e76:	4a25      	ldr	r2, [pc, #148]	@ (8000f0c <MX_TIM4_Init+0xc4>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 65535;
 8000e7a:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <MX_TIM4_Init+0xc0>)
 8000e7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e82:	4b21      	ldr	r3, [pc, #132]	@ (8000f08 <MX_TIM4_Init+0xc0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8000e88:	4b1f      	ldr	r3, [pc, #124]	@ (8000f08 <MX_TIM4_Init+0xc0>)
 8000e8a:	22c7      	movs	r2, #199	@ 0xc7
 8000e8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f08 <MX_TIM4_Init+0xc0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e94:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <MX_TIM4_Init+0xc0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e9a:	481b      	ldr	r0, [pc, #108]	@ (8000f08 <MX_TIM4_Init+0xc0>)
 8000e9c:	f001 fd2c 	bl	80028f8 <HAL_TIM_Base_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000ea6:	f7ff fc9d 	bl	80007e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eae:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eb0:	f107 0320 	add.w	r3, r7, #32
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4814      	ldr	r0, [pc, #80]	@ (8000f08 <MX_TIM4_Init+0xc0>)
 8000eb8:	f002 f9be 	bl	8003238 <HAL_TIM_ConfigClockSource>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000ec2:	f7ff fc8f 	bl	80007e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480c      	ldr	r0, [pc, #48]	@ (8000f08 <MX_TIM4_Init+0xc0>)
 8000ed6:	f002 fa76 	bl	80033c6 <HAL_TIM_SlaveConfigSynchro>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000ee0:	f7ff fc80 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_TIM4_Init+0xc0>)
 8000ef2:	f002 fe75 	bl	8003be0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8000efc:	f7ff fc72 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	3730      	adds	r7, #48	@ 0x30
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000134 	.word	0x20000134
 8000f0c:	40000800 	.word	0x40000800

08000f10 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	@ 0x30
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f3c:	4b24      	ldr	r3, [pc, #144]	@ (8000fd0 <MX_TIM5_Init+0xc0>)
 8000f3e:	4a25      	ldr	r2, [pc, #148]	@ (8000fd4 <MX_TIM5_Init+0xc4>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8000f42:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <MX_TIM5_Init+0xc0>)
 8000f44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f48:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <MX_TIM5_Init+0xc0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 199;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <MX_TIM5_Init+0xc0>)
 8000f52:	22c7      	movs	r2, #199	@ 0xc7
 8000f54:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <MX_TIM5_Init+0xc0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <MX_TIM5_Init+0xc0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f62:	481b      	ldr	r0, [pc, #108]	@ (8000fd0 <MX_TIM5_Init+0xc0>)
 8000f64:	f001 fcc8 	bl	80028f8 <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8000f6e:	f7ff fc39 	bl	80007e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f76:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4814      	ldr	r0, [pc, #80]	@ (8000fd0 <MX_TIM5_Init+0xc0>)
 8000f80:	f002 f95a 	bl	8003238 <HAL_TIM_ConfigClockSource>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000f8a:	f7ff fc2b 	bl	80007e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f8e:	2306      	movs	r3, #6
 8000f90:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8000f92:	2330      	movs	r3, #48	@ 0x30
 8000f94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <MX_TIM5_Init+0xc0>)
 8000f9e:	f002 fa12 	bl	80033c6 <HAL_TIM_SlaveConfigSynchro>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000fa8:	f7ff fc1c 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_TIM5_Init+0xc0>)
 8000fba:	f002 fe11 	bl	8003be0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 8000fc4:	f7ff fc0e 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3730      	adds	r7, #48	@ 0x30
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2000017c 	.word	0x2000017c
 8000fd4:	40000c00 	.word	0x40000c00

08000fd8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b096      	sub	sp, #88	@ 0x58
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fde:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	615a      	str	r2, [r3, #20]
 8001008:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f003 f98b 	bl	800432c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001016:	4b3f      	ldr	r3, [pc, #252]	@ (8001114 <MX_TIM8_Init+0x13c>)
 8001018:	4a3f      	ldr	r2, [pc, #252]	@ (8001118 <MX_TIM8_Init+0x140>)
 800101a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8;
 800101c:	4b3d      	ldr	r3, [pc, #244]	@ (8001114 <MX_TIM8_Init+0x13c>)
 800101e:	2208      	movs	r2, #8
 8001020:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001022:	4b3c      	ldr	r3, [pc, #240]	@ (8001114 <MX_TIM8_Init+0x13c>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001028:	4b3a      	ldr	r3, [pc, #232]	@ (8001114 <MX_TIM8_Init+0x13c>)
 800102a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800102e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001030:	4b38      	ldr	r3, [pc, #224]	@ (8001114 <MX_TIM8_Init+0x13c>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001036:	4b37      	ldr	r3, [pc, #220]	@ (8001114 <MX_TIM8_Init+0x13c>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800103c:	4b35      	ldr	r3, [pc, #212]	@ (8001114 <MX_TIM8_Init+0x13c>)
 800103e:	2280      	movs	r2, #128	@ 0x80
 8001040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001042:	4834      	ldr	r0, [pc, #208]	@ (8001114 <MX_TIM8_Init+0x13c>)
 8001044:	f001 fc58 	bl	80028f8 <HAL_TIM_Base_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800104e:	f7ff fbc9 	bl	80007e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001052:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001056:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001058:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800105c:	4619      	mov	r1, r3
 800105e:	482d      	ldr	r0, [pc, #180]	@ (8001114 <MX_TIM8_Init+0x13c>)
 8001060:	f002 f8ea 	bl	8003238 <HAL_TIM_ConfigClockSource>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800106a:	f7ff fbbb 	bl	80007e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800106e:	4829      	ldr	r0, [pc, #164]	@ (8001114 <MX_TIM8_Init+0x13c>)
 8001070:	f001 fd02 	bl	8002a78 <HAL_TIM_PWM_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800107a:	f7ff fbb3 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800107e:	2320      	movs	r3, #32
 8001080:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001082:	2380      	movs	r3, #128	@ 0x80
 8001084:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001086:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800108a:	4619      	mov	r1, r3
 800108c:	4821      	ldr	r0, [pc, #132]	@ (8001114 <MX_TIM8_Init+0x13c>)
 800108e:	f002 fda7 	bl	8003be0 <HAL_TIMEx_MasterConfigSynchronization>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001098:	f7ff fba4 	bl	80007e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109c:	2360      	movs	r3, #96	@ 0x60
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 80010a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010aa:	2300      	movs	r3, #0
 80010ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010ae:	2304      	movs	r3, #4
 80010b0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010be:	2200      	movs	r2, #0
 80010c0:	4619      	mov	r1, r3
 80010c2:	4814      	ldr	r0, [pc, #80]	@ (8001114 <MX_TIM8_Init+0x13c>)
 80010c4:	f001 fff6 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80010ce:	f7ff fb89 	bl	80007e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4807      	ldr	r0, [pc, #28]	@ (8001114 <MX_TIM8_Init+0x13c>)
 80010f6:	f002 fdef 	bl	8003cd8 <HAL_TIMEx_ConfigBreakDeadTime>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001100:	f7ff fb70 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001104:	4803      	ldr	r0, [pc, #12]	@ (8001114 <MX_TIM8_Init+0x13c>)
 8001106:	f000 f8d5 	bl	80012b4 <HAL_TIM_MspPostInit>

}
 800110a:	bf00      	nop
 800110c:	3758      	adds	r7, #88	@ 0x58
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001c4 	.word	0x200001c4
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a5c      	ldr	r2, [pc, #368]	@ (800129c <HAL_TIM_Base_MspInit+0x180>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d12e      	bne.n	800118c <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	4b5b      	ldr	r3, [pc, #364]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	4a5a      	ldr	r2, [pc, #360]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6453      	str	r3, [r2, #68]	@ 0x44
 800113e:	4b58      	ldr	r3, [pc, #352]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2101      	movs	r1, #1
 800114e:	2018      	movs	r0, #24
 8001150:	f000 fbed 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001154:	2018      	movs	r0, #24
 8001156:	f000 fc06 	bl	8001966 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2101      	movs	r1, #1
 800115e:	2019      	movs	r0, #25
 8001160:	f000 fbe5 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001164:	2019      	movs	r0, #25
 8001166:	f000 fbfe 	bl	8001966 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2101      	movs	r1, #1
 800116e:	201a      	movs	r0, #26
 8001170:	f000 fbdd 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001174:	201a      	movs	r0, #26
 8001176:	f000 fbf6 	bl	8001966 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2101      	movs	r1, #1
 800117e:	201b      	movs	r0, #27
 8001180:	f000 fbd5 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001184:	201b      	movs	r0, #27
 8001186:	f000 fbee 	bl	8001966 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800118a:	e082      	b.n	8001292 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001194:	d116      	bne.n	80011c4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	4b41      	ldr	r3, [pc, #260]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	4a40      	ldr	r2, [pc, #256]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a6:	4b3e      	ldr	r3, [pc, #248]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
 80011b0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2101      	movs	r1, #1
 80011b6:	201c      	movs	r0, #28
 80011b8:	f000 fbb9 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011bc:	201c      	movs	r0, #28
 80011be:	f000 fbd2 	bl	8001966 <HAL_NVIC_EnableIRQ>
}
 80011c2:	e066      	b.n	8001292 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM3)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a36      	ldr	r2, [pc, #216]	@ (80012a4 <HAL_TIM_Base_MspInit+0x188>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d116      	bne.n	80011fc <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	4b33      	ldr	r3, [pc, #204]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a32      	ldr	r2, [pc, #200]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b30      	ldr	r3, [pc, #192]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2101      	movs	r1, #1
 80011ee:	201d      	movs	r0, #29
 80011f0:	f000 fb9d 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011f4:	201d      	movs	r0, #29
 80011f6:	f000 fbb6 	bl	8001966 <HAL_NVIC_EnableIRQ>
}
 80011fa:	e04a      	b.n	8001292 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM4)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a29      	ldr	r2, [pc, #164]	@ (80012a8 <HAL_TIM_Base_MspInit+0x18c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d116      	bne.n	8001234 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	4a24      	ldr	r2, [pc, #144]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6413      	str	r3, [r2, #64]	@ 0x40
 8001216:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2101      	movs	r1, #1
 8001226:	201e      	movs	r0, #30
 8001228:	f000 fb81 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800122c:	201e      	movs	r0, #30
 800122e:	f000 fb9a 	bl	8001966 <HAL_NVIC_EnableIRQ>
}
 8001232:	e02e      	b.n	8001292 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM5)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1c      	ldr	r2, [pc, #112]	@ (80012ac <HAL_TIM_Base_MspInit+0x190>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d116      	bne.n	800126c <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	4a16      	ldr	r2, [pc, #88]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	6413      	str	r3, [r2, #64]	@ 0x40
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2101      	movs	r1, #1
 800125e:	2032      	movs	r0, #50	@ 0x32
 8001260:	f000 fb65 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001264:	2032      	movs	r0, #50	@ 0x32
 8001266:	f000 fb7e 	bl	8001966 <HAL_NVIC_EnableIRQ>
}
 800126a:	e012      	b.n	8001292 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0f      	ldr	r2, [pc, #60]	@ (80012b0 <HAL_TIM_Base_MspInit+0x194>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10d      	bne.n	8001292 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6453      	str	r3, [r2, #68]	@ 0x44
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_TIM_Base_MspInit+0x184>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
}
 8001292:	bf00      	nop
 8001294:	3720      	adds	r7, #32
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40010000 	.word	0x40010000
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40000400 	.word	0x40000400
 80012a8:	40000800 	.word	0x40000800
 80012ac:	40000c00 	.word	0x40000c00
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a36      	ldr	r2, [pc, #216]	@ (80013ac <HAL_TIM_MspPostInit+0xf8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d11f      	bne.n	8001316 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b35      	ldr	r3, [pc, #212]	@ (80013b0 <HAL_TIM_MspPostInit+0xfc>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a34      	ldr	r2, [pc, #208]	@ (80013b0 <HAL_TIM_MspPostInit+0xfc>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b32      	ldr	r3, [pc, #200]	@ (80013b0 <HAL_TIM_MspPostInit+0xfc>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 80012f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001304:	2301      	movs	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4829      	ldr	r0, [pc, #164]	@ (80013b4 <HAL_TIM_MspPostInit+0x100>)
 8001310:	f000 fb44 	bl	800199c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001314:	e046      	b.n	80013a4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800131e:	d11e      	bne.n	800135e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <HAL_TIM_MspPostInit+0xfc>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001328:	4a21      	ldr	r2, [pc, #132]	@ (80013b0 <HAL_TIM_MspPostInit+0xfc>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <HAL_TIM_MspPostInit+0xfc>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin;
 800133c:	2303      	movs	r3, #3
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800134c:	2301      	movs	r3, #1
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4817      	ldr	r0, [pc, #92]	@ (80013b4 <HAL_TIM_MspPostInit+0x100>)
 8001358:	f000 fb20 	bl	800199c <HAL_GPIO_Init>
}
 800135c:	e022      	b.n	80013a4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM8)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a15      	ldr	r2, [pc, #84]	@ (80013b8 <HAL_TIM_MspPostInit+0x104>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d11d      	bne.n	80013a4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <HAL_TIM_MspPostInit+0xfc>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001370:	4a0f      	ldr	r2, [pc, #60]	@ (80013b0 <HAL_TIM_MspPostInit+0xfc>)
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	6313      	str	r3, [r2, #48]	@ 0x30
 8001378:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <HAL_TIM_MspPostInit+0xfc>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_Pin;
 8001384:	2340      	movs	r3, #64	@ 0x40
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001394:	2303      	movs	r3, #3
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM4_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4807      	ldr	r0, [pc, #28]	@ (80013bc <HAL_TIM_MspPostInit+0x108>)
 80013a0:	f000 fafc 	bl	800199c <HAL_GPIO_Init>
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	@ 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40010000 	.word	0x40010000
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40010400 	.word	0x40010400
 80013bc:	40020800 	.word	0x40020800

080013c0 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

//slave timer disable the pwm of the master timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a10      	ldr	r2, [pc, #64]	@ (8001410 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d103      	bne.n	80013da <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 80013d2:	2100      	movs	r1, #0
 80013d4:	480f      	ldr	r0, [pc, #60]	@ (8001414 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80013d6:	f001 fcbf 	bl	8002d58 <HAL_TIM_PWM_Stop_IT>

	}
	if (htim->Instance == TIM3) {
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a0e      	ldr	r2, [pc, #56]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d107      	bne.n	80013f4 <HAL_TIM_PeriodElapsedCallback+0x34>
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80013e4:	2100      	movs	r1, #0
 80013e6:	480d      	ldr	r0, [pc, #52]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80013e8:	f001 fcb6 	bl	8002d58 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 80013ec:	2104      	movs	r1, #4
 80013ee:	480b      	ldr	r0, [pc, #44]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80013f0:	f001 fcb2 	bl	8002d58 <HAL_TIM_PWM_Stop_IT>
	}

	if (htim->Instance == TIM4) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a09      	ldr	r2, [pc, #36]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d103      	bne.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x46>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80013fe:	2100      	movs	r1, #0
 8001400:	4808      	ldr	r0, [pc, #32]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001402:	f001 fca9 	bl	8002d58 <HAL_TIM_PWM_Stop_IT>
	 __HAL_TIM_SET_PRESCALER(htim, htim->Instance->PSC + 1);
	 htim->Instance->EGR = TIM_EGR_UG;
	 }
	 }*/

}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40000c00 	.word	0x40000c00
 8001414:	200001c4 	.word	0x200001c4
 8001418:	40000400 	.word	0x40000400
 800141c:	200000a4 	.word	0x200000a4
 8001420:	40000800 	.word	0x40000800
 8001424:	2000005c 	.word	0x2000005c

08001428 <HAL_TIM_PWM_PulseFinishedCallback>:

//arr_current=ARR_START
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a38      	ldr	r2, [pc, #224]	@ (8001518 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d167      	bne.n	800150a <HAL_TIM_PWM_PulseFinishedCallback+0xe2>

		if (arr_des < arr_current) { //arr has to be greater than the arr that starts the motor
 800143a:	4b38      	ldr	r3, [pc, #224]	@ (800151c <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4b38      	ldr	r3, [pc, #224]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	da0d      	bge.n	8001462 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
			__HAL_TIM_SET_AUTORELOAD(htim, ARR_START);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800144e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001456:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_PRESCALER(&htim4, ARR_START);
 8001458:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001460:	629a      	str	r2, [r3, #40]	@ 0x28
		}

		if (arr_des > arr_current
 8001462:	4b2e      	ldr	r3, [pc, #184]	@ (800151c <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4b2e      	ldr	r3, [pc, #184]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	dd2b      	ble.n	80014c6 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
				&& __HAL_TIM_GET_COUNTER(&htim4) <= (int) (n_steps * 3 / 4)) { //acceleration
 800146e:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001474:	4b2c      	ldr	r3, [pc, #176]	@ (8001528 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	2b00      	cmp	r3, #0
 8001480:	da00      	bge.n	8001484 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
 8001482:	3303      	adds	r3, #3
 8001484:	109b      	asrs	r3, r3, #2
 8001486:	4299      	cmp	r1, r3
 8001488:	d81d      	bhi.n	80014c6 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>

			arr_current += ACCEL_RATE;
 800148a:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	4a23      	ldr	r2, [pc, #140]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 8001492:	6013      	str	r3, [r2, #0]
			if (arr_current == ARR_MAX)
 8001494:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800149c:	4293      	cmp	r3, r2
 800149e:	d103      	bne.n	80014a8 <HAL_TIM_PWM_PulseFinishedCallback+0x80>
				arr_current = ARR_MAX;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 80014a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014a6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_AUTORELOAD(htim, arr_current);
 80014a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_PRESCALER(&htim4, arr_current);
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	629a      	str	r2, [r3, #40]	@ 0x28

		}

		if (__HAL_TIM_GET_COUNTER(&htim4) > (int) (n_steps * 3 / 4)) { //deceleration phase
 80014c6:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80014cc:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	da00      	bge.n	80014dc <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
 80014da:	3303      	adds	r3, #3
 80014dc:	109b      	asrs	r3, r3, #2
 80014de:	4299      	cmp	r1, r3
 80014e0:	d913      	bls.n	800150a <HAL_TIM_PWM_PulseFinishedCallback+0xe2>
			arr_current -= 1;
 80014e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 80014ea:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_AUTORELOAD(htim, arr_current);
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_PRESCALER(&htim4, arr_current);
 8001500:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	629a      	str	r2, [r3, #40]	@ 0x28
		}

	}
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40010000 	.word	0x40010000
 800151c:	20000000 	.word	0x20000000
 8001520:	20000008 	.word	0x20000008
 8001524:	20000134 	.word	0x20000134
 8001528:	20000054 	.word	0x20000054

0800152c <HAL_GPIO_EXTI_Callback>:

 }
 }*/

//emergency stop button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DISABLE_button_Pin) {
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800153c:	d108      	bne.n	8001550 <HAL_GPIO_EXTI_Callback+0x24>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET); //ENABLE
 800153e:	2201      	movs	r2, #1
 8001540:	2120      	movs	r1, #32
 8001542:	4805      	ldr	r0, [pc, #20]	@ (8001558 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001544:	f000 fbbe 	bl	8001cc4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
}
 800154a:	bf00      	nop
		__disable_irq();

		while (1) {
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <HAL_GPIO_EXTI_Callback+0x20>

		}
	}
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40020800 	.word	0x40020800

0800155c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001562:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <MX_USART2_UART_Init+0x50>)
 8001564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001594:	f002 fc06 	bl	8003da4 <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800159e:	f7ff f921 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000020c 	.word	0x2000020c
 80015ac:	40004400 	.word	0x40004400

080015b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	@ 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a19      	ldr	r2, [pc, #100]	@ (8001634 <HAL_UART_MspInit+0x84>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d12b      	bne.n	800162a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	4a17      	ldr	r2, [pc, #92]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a10      	ldr	r2, [pc, #64]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <HAL_UART_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800160a:	230c      	movs	r3, #12
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161a:	2307      	movs	r3, #7
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	@ (800163c <HAL_UART_MspInit+0x8c>)
 8001626:	f000 f9b9 	bl	800199c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	@ 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40004400 	.word	0x40004400
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000

08001640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001678 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001644:	f7ff fa66 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001648:	480c      	ldr	r0, [pc, #48]	@ (800167c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800164a:	490d      	ldr	r1, [pc, #52]	@ (8001680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001660:	4c0a      	ldr	r4, [pc, #40]	@ (800168c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800166e:	f002 fe65 	bl	800433c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001672:	f7fe ffff 	bl	8000674 <main>
  bx  lr    
 8001676:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001680:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001684:	080043c4 	.word	0x080043c4
  ldr r2, =_sbss
 8001688:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800168c:	20000258 	.word	0x20000258

08001690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC_IRQHandler>
	...

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001698:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <HAL_Init+0x40>)
 800169e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a4:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <HAL_Init+0x40>)
 80016aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	@ (80016d4 <HAL_Init+0x40>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 f92b 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f000 f808 	bl	80016d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c8:	f7ff f974 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023c00 	.word	0x40023c00

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_InitTick+0x54>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_InitTick+0x58>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f943 	bl	8001982 <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e00e      	b.n	8001724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d80a      	bhi.n	8001722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f000 f90b 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	4a06      	ldr	r2, [pc, #24]	@ (8001734 <HAL_InitTick+0x5c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000004 	.word	0x20000004
 8001730:	20000010 	.word	0x20000010
 8001734:	2000000c 	.word	0x2000000c

08001738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_IncTick+0x20>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_IncTick+0x24>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a04      	ldr	r2, [pc, #16]	@ (800175c <HAL_IncTick+0x24>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000010 	.word	0x20000010
 800175c:	20000254 	.word	0x20000254

08001760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return uwTick;
 8001764:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <HAL_GetTick+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000254 	.word	0x20000254

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	@ (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	@ (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	@ (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	@ (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	@ (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	@ 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	@ 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff29 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff3e 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff8e 	bl	800186c <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff31 	bl	80017dc <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	@ 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e165      	b.n	8001c84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 8154 	bne.w	8001c7e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d005      	beq.n	80019ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d130      	bne.n	8001a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a24:	2201      	movs	r2, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 0201 	and.w	r2, r3, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d017      	beq.n	8001a8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d123      	bne.n	8001ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	08da      	lsrs	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3208      	adds	r2, #8
 8001aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	220f      	movs	r2, #15
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0203 	and.w	r2, r3, #3
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80ae 	beq.w	8001c7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b5d      	ldr	r3, [pc, #372]	@ (8001c9c <HAL_GPIO_Init+0x300>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	4a5c      	ldr	r2, [pc, #368]	@ (8001c9c <HAL_GPIO_Init+0x300>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b32:	4b5a      	ldr	r3, [pc, #360]	@ (8001c9c <HAL_GPIO_Init+0x300>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3e:	4a58      	ldr	r2, [pc, #352]	@ (8001ca0 <HAL_GPIO_Init+0x304>)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4f      	ldr	r2, [pc, #316]	@ (8001ca4 <HAL_GPIO_Init+0x308>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d025      	beq.n	8001bb6 <HAL_GPIO_Init+0x21a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ca8 <HAL_GPIO_Init+0x30c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01f      	beq.n	8001bb2 <HAL_GPIO_Init+0x216>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4d      	ldr	r2, [pc, #308]	@ (8001cac <HAL_GPIO_Init+0x310>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x212>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4c      	ldr	r2, [pc, #304]	@ (8001cb0 <HAL_GPIO_Init+0x314>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x20e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb4 <HAL_GPIO_Init+0x318>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x20a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4a      	ldr	r2, [pc, #296]	@ (8001cb8 <HAL_GPIO_Init+0x31c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x206>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a49      	ldr	r2, [pc, #292]	@ (8001cbc <HAL_GPIO_Init+0x320>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x202>
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	e00c      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	e00a      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc8:	4935      	ldr	r1, [pc, #212]	@ (8001ca0 <HAL_GPIO_Init+0x304>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc0 <HAL_GPIO_Init+0x324>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfa:	4a31      	ldr	r2, [pc, #196]	@ (8001cc0 <HAL_GPIO_Init+0x324>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c00:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <HAL_GPIO_Init+0x324>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c24:	4a26      	ldr	r2, [pc, #152]	@ (8001cc0 <HAL_GPIO_Init+0x324>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2a:	4b25      	ldr	r3, [pc, #148]	@ (8001cc0 <HAL_GPIO_Init+0x324>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc0 <HAL_GPIO_Init+0x324>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c54:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <HAL_GPIO_Init+0x324>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c78:	4a11      	ldr	r2, [pc, #68]	@ (8001cc0 <HAL_GPIO_Init+0x324>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3301      	adds	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	f67f ae96 	bls.w	80019b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3724      	adds	r7, #36	@ 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40013800 	.word	0x40013800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40021400 	.word	0x40021400
 8001cbc:	40021800 	.word	0x40021800
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce0:	e003      	b.n	8001cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	041a      	lsls	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	619a      	str	r2, [r3, #24]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d0e:	4a05      	ldr	r2, [pc, #20]	@ (8001d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fc08 	bl	800152c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40013c00 	.word	0x40013c00

08001d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0cc      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b68      	ldr	r3, [pc, #416]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d90c      	bls.n	8001d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b65      	ldr	r3, [pc, #404]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b63      	ldr	r3, [pc, #396]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0b8      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d7c:	4b59      	ldr	r3, [pc, #356]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a58      	ldr	r2, [pc, #352]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d94:	4b53      	ldr	r3, [pc, #332]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a52      	ldr	r2, [pc, #328]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b50      	ldr	r3, [pc, #320]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	494d      	ldr	r1, [pc, #308]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d044      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b47      	ldr	r3, [pc, #284]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d119      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e07f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d003      	beq.n	8001de6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e06f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e067      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e06:	4b37      	ldr	r3, [pc, #220]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f023 0203 	bic.w	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4934      	ldr	r1, [pc, #208]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff fca2 	bl	8001760 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7ff fc9e 	bl	8001760 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e04f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 020c 	and.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1eb      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e48:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d20c      	bcs.n	8001e70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e032      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4916      	ldr	r1, [pc, #88]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	490e      	ldr	r1, [pc, #56]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eae:	f000 f855 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	490a      	ldr	r1, [pc, #40]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	5ccb      	ldrb	r3, [r1, r3]
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	4a09      	ldr	r2, [pc, #36]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001eca:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fc02 	bl	80016d8 <HAL_InitTick>

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	0800439c 	.word	0x0800439c
 8001eec:	20000004 	.word	0x20000004
 8001ef0:	2000000c 	.word	0x2000000c

08001ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f10:	f7ff fff0 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	0a9b      	lsrs	r3, r3, #10
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	4903      	ldr	r1, [pc, #12]	@ (8001f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	080043ac 	.word	0x080043ac

08001f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f38:	f7ff ffdc 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	0b5b      	lsrs	r3, r3, #13
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4903      	ldr	r1, [pc, #12]	@ (8001f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40023800 	.word	0x40023800
 8001f58:	080043ac 	.word	0x080043ac

08001f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f60:	b0ae      	sub	sp, #184	@ 0xb8
 8001f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f82:	4bcb      	ldr	r3, [pc, #812]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	f200 8206 	bhi.w	800239c <HAL_RCC_GetSysClockFreq+0x440>
 8001f90:	a201      	add	r2, pc, #4	@ (adr r2, 8001f98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f96:	bf00      	nop
 8001f98:	08001fcd 	.word	0x08001fcd
 8001f9c:	0800239d 	.word	0x0800239d
 8001fa0:	0800239d 	.word	0x0800239d
 8001fa4:	0800239d 	.word	0x0800239d
 8001fa8:	08001fd5 	.word	0x08001fd5
 8001fac:	0800239d 	.word	0x0800239d
 8001fb0:	0800239d 	.word	0x0800239d
 8001fb4:	0800239d 	.word	0x0800239d
 8001fb8:	08001fdd 	.word	0x08001fdd
 8001fbc:	0800239d 	.word	0x0800239d
 8001fc0:	0800239d 	.word	0x0800239d
 8001fc4:	0800239d 	.word	0x0800239d
 8001fc8:	080021cd 	.word	0x080021cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fcc:	4bb9      	ldr	r3, [pc, #740]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fd2:	e1e7      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fd4:	4bb8      	ldr	r3, [pc, #736]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fda:	e1e3      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fdc:	4bb4      	ldr	r3, [pc, #720]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fe8:	4bb1      	ldr	r3, [pc, #708]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d071      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff4:	4bae      	ldr	r3, [pc, #696]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	099b      	lsrs	r3, r3, #6
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002000:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002004:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800200c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002016:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800201a:	4622      	mov	r2, r4
 800201c:	462b      	mov	r3, r5
 800201e:	f04f 0000 	mov.w	r0, #0
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	0159      	lsls	r1, r3, #5
 8002028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800202c:	0150      	lsls	r0, r2, #5
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4621      	mov	r1, r4
 8002034:	1a51      	subs	r1, r2, r1
 8002036:	6439      	str	r1, [r7, #64]	@ 0x40
 8002038:	4629      	mov	r1, r5
 800203a:	eb63 0301 	sbc.w	r3, r3, r1
 800203e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800204c:	4649      	mov	r1, r9
 800204e:	018b      	lsls	r3, r1, #6
 8002050:	4641      	mov	r1, r8
 8002052:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002056:	4641      	mov	r1, r8
 8002058:	018a      	lsls	r2, r1, #6
 800205a:	4641      	mov	r1, r8
 800205c:	1a51      	subs	r1, r2, r1
 800205e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002060:	4649      	mov	r1, r9
 8002062:	eb63 0301 	sbc.w	r3, r3, r1
 8002066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002074:	4649      	mov	r1, r9
 8002076:	00cb      	lsls	r3, r1, #3
 8002078:	4641      	mov	r1, r8
 800207a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800207e:	4641      	mov	r1, r8
 8002080:	00ca      	lsls	r2, r1, #3
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	4603      	mov	r3, r0
 8002088:	4622      	mov	r2, r4
 800208a:	189b      	adds	r3, r3, r2
 800208c:	633b      	str	r3, [r7, #48]	@ 0x30
 800208e:	462b      	mov	r3, r5
 8002090:	460a      	mov	r2, r1
 8002092:	eb42 0303 	adc.w	r3, r2, r3
 8002096:	637b      	str	r3, [r7, #52]	@ 0x34
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80020a4:	4629      	mov	r1, r5
 80020a6:	024b      	lsls	r3, r1, #9
 80020a8:	4621      	mov	r1, r4
 80020aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020ae:	4621      	mov	r1, r4
 80020b0:	024a      	lsls	r2, r1, #9
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020ba:	2200      	movs	r2, #0
 80020bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80020c8:	f7fe f89c 	bl	8000204 <__aeabi_uldivmod>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4613      	mov	r3, r2
 80020d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020d6:	e067      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d8:	4b75      	ldr	r3, [pc, #468]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	2200      	movs	r2, #0
 80020e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020e4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80020e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020f2:	2300      	movs	r3, #0
 80020f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80020fa:	4622      	mov	r2, r4
 80020fc:	462b      	mov	r3, r5
 80020fe:	f04f 0000 	mov.w	r0, #0
 8002102:	f04f 0100 	mov.w	r1, #0
 8002106:	0159      	lsls	r1, r3, #5
 8002108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800210c:	0150      	lsls	r0, r2, #5
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4621      	mov	r1, r4
 8002114:	1a51      	subs	r1, r2, r1
 8002116:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002118:	4629      	mov	r1, r5
 800211a:	eb63 0301 	sbc.w	r3, r3, r1
 800211e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800212c:	4649      	mov	r1, r9
 800212e:	018b      	lsls	r3, r1, #6
 8002130:	4641      	mov	r1, r8
 8002132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002136:	4641      	mov	r1, r8
 8002138:	018a      	lsls	r2, r1, #6
 800213a:	4641      	mov	r1, r8
 800213c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002140:	4649      	mov	r1, r9
 8002142:	eb63 0b01 	sbc.w	fp, r3, r1
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002152:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800215a:	4692      	mov	sl, r2
 800215c:	469b      	mov	fp, r3
 800215e:	4623      	mov	r3, r4
 8002160:	eb1a 0303 	adds.w	r3, sl, r3
 8002164:	623b      	str	r3, [r7, #32]
 8002166:	462b      	mov	r3, r5
 8002168:	eb4b 0303 	adc.w	r3, fp, r3
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800217a:	4629      	mov	r1, r5
 800217c:	028b      	lsls	r3, r1, #10
 800217e:	4621      	mov	r1, r4
 8002180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002184:	4621      	mov	r1, r4
 8002186:	028a      	lsls	r2, r1, #10
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002190:	2200      	movs	r2, #0
 8002192:	673b      	str	r3, [r7, #112]	@ 0x70
 8002194:	677a      	str	r2, [r7, #116]	@ 0x74
 8002196:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800219a:	f7fe f833 	bl	8000204 <__aeabi_uldivmod>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4613      	mov	r3, r2
 80021a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021a8:	4b41      	ldr	r3, [pc, #260]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	3301      	adds	r3, #1
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80021ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021ca:	e0eb      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021cc:	4b38      	ldr	r3, [pc, #224]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021d8:	4b35      	ldr	r3, [pc, #212]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d06b      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e4:	4b32      	ldr	r3, [pc, #200]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	2200      	movs	r2, #0
 80021ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80021f8:	2300      	movs	r3, #0
 80021fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80021fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002200:	4622      	mov	r2, r4
 8002202:	462b      	mov	r3, r5
 8002204:	f04f 0000 	mov.w	r0, #0
 8002208:	f04f 0100 	mov.w	r1, #0
 800220c:	0159      	lsls	r1, r3, #5
 800220e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002212:	0150      	lsls	r0, r2, #5
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4621      	mov	r1, r4
 800221a:	1a51      	subs	r1, r2, r1
 800221c:	61b9      	str	r1, [r7, #24]
 800221e:	4629      	mov	r1, r5
 8002220:	eb63 0301 	sbc.w	r3, r3, r1
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002232:	4659      	mov	r1, fp
 8002234:	018b      	lsls	r3, r1, #6
 8002236:	4651      	mov	r1, sl
 8002238:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800223c:	4651      	mov	r1, sl
 800223e:	018a      	lsls	r2, r1, #6
 8002240:	4651      	mov	r1, sl
 8002242:	ebb2 0801 	subs.w	r8, r2, r1
 8002246:	4659      	mov	r1, fp
 8002248:	eb63 0901 	sbc.w	r9, r3, r1
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002258:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800225c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002260:	4690      	mov	r8, r2
 8002262:	4699      	mov	r9, r3
 8002264:	4623      	mov	r3, r4
 8002266:	eb18 0303 	adds.w	r3, r8, r3
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	462b      	mov	r3, r5
 800226e:	eb49 0303 	adc.w	r3, r9, r3
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002280:	4629      	mov	r1, r5
 8002282:	024b      	lsls	r3, r1, #9
 8002284:	4621      	mov	r1, r4
 8002286:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800228a:	4621      	mov	r1, r4
 800228c:	024a      	lsls	r2, r1, #9
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002296:	2200      	movs	r2, #0
 8002298:	65bb      	str	r3, [r7, #88]	@ 0x58
 800229a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800229c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022a0:	f7fd ffb0 	bl	8000204 <__aeabi_uldivmod>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4613      	mov	r3, r2
 80022aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022ae:	e065      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x420>
 80022b0:	40023800 	.word	0x40023800
 80022b4:	00f42400 	.word	0x00f42400
 80022b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022bc:	4b3d      	ldr	r3, [pc, #244]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	099b      	lsrs	r3, r3, #6
 80022c2:	2200      	movs	r2, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	4611      	mov	r1, r2
 80022c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80022ce:	2300      	movs	r3, #0
 80022d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80022d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80022d6:	4642      	mov	r2, r8
 80022d8:	464b      	mov	r3, r9
 80022da:	f04f 0000 	mov.w	r0, #0
 80022de:	f04f 0100 	mov.w	r1, #0
 80022e2:	0159      	lsls	r1, r3, #5
 80022e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022e8:	0150      	lsls	r0, r2, #5
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4641      	mov	r1, r8
 80022f0:	1a51      	subs	r1, r2, r1
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	4649      	mov	r1, r9
 80022f6:	eb63 0301 	sbc.w	r3, r3, r1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002308:	4659      	mov	r1, fp
 800230a:	018b      	lsls	r3, r1, #6
 800230c:	4651      	mov	r1, sl
 800230e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002312:	4651      	mov	r1, sl
 8002314:	018a      	lsls	r2, r1, #6
 8002316:	4651      	mov	r1, sl
 8002318:	1a54      	subs	r4, r2, r1
 800231a:	4659      	mov	r1, fp
 800231c:	eb63 0501 	sbc.w	r5, r3, r1
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	00eb      	lsls	r3, r5, #3
 800232a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800232e:	00e2      	lsls	r2, r4, #3
 8002330:	4614      	mov	r4, r2
 8002332:	461d      	mov	r5, r3
 8002334:	4643      	mov	r3, r8
 8002336:	18e3      	adds	r3, r4, r3
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	464b      	mov	r3, r9
 800233c:	eb45 0303 	adc.w	r3, r5, r3
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800234e:	4629      	mov	r1, r5
 8002350:	028b      	lsls	r3, r1, #10
 8002352:	4621      	mov	r1, r4
 8002354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002358:	4621      	mov	r1, r4
 800235a:	028a      	lsls	r2, r1, #10
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002364:	2200      	movs	r2, #0
 8002366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002368:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800236a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800236e:	f7fd ff49 	bl	8000204 <__aeabi_uldivmod>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4613      	mov	r3, r2
 8002378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800237c:	4b0d      	ldr	r3, [pc, #52]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	0f1b      	lsrs	r3, r3, #28
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800238a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800238e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800239a:	e003      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800239e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	37b8      	adds	r7, #184	@ 0xb8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	00f42400 	.word	0x00f42400

080023bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e28d      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8083 	beq.w	80024e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023dc:	4b94      	ldr	r3, [pc, #592]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d019      	beq.n	800241c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023e8:	4b91      	ldr	r3, [pc, #580]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
        || \
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023f4:	4b8e      	ldr	r3, [pc, #568]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002400:	d00c      	beq.n	800241c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002402:	4b8b      	ldr	r3, [pc, #556]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800240a:	2b0c      	cmp	r3, #12
 800240c:	d112      	bne.n	8002434 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240e:	4b88      	ldr	r3, [pc, #544]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800241a:	d10b      	bne.n	8002434 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	4b84      	ldr	r3, [pc, #528]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d05b      	beq.n	80024e0 <HAL_RCC_OscConfig+0x124>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d157      	bne.n	80024e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e25a      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800243c:	d106      	bne.n	800244c <HAL_RCC_OscConfig+0x90>
 800243e:	4b7c      	ldr	r3, [pc, #496]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7b      	ldr	r2, [pc, #492]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e01d      	b.n	8002488 <HAL_RCC_OscConfig+0xcc>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0xb4>
 8002456:	4b76      	ldr	r3, [pc, #472]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a75      	ldr	r2, [pc, #468]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 800245c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b73      	ldr	r3, [pc, #460]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a72      	ldr	r2, [pc, #456]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_OscConfig+0xcc>
 8002470:	4b6f      	ldr	r3, [pc, #444]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a6e      	ldr	r2, [pc, #440]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b6c      	ldr	r3, [pc, #432]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a6b      	ldr	r2, [pc, #428]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7ff f966 	bl	8001760 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7ff f962 	bl	8001760 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	@ 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e21f      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b61      	ldr	r3, [pc, #388]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0xdc>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7ff f952 	bl	8001760 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7ff f94e 	bl	8001760 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	@ 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e20b      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	4b57      	ldr	r3, [pc, #348]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x104>
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d06f      	beq.n	80025ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024ee:	4b50      	ldr	r3, [pc, #320]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d017      	beq.n	800252a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
        || \
 8002502:	2b08      	cmp	r3, #8
 8002504:	d105      	bne.n	8002512 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002506:	4b4a      	ldr	r3, [pc, #296]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b47      	ldr	r3, [pc, #284]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d11c      	bne.n	8002558 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251e:	4b44      	ldr	r3, [pc, #272]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	4b41      	ldr	r3, [pc, #260]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_RCC_OscConfig+0x186>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1d3      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b3b      	ldr	r3, [pc, #236]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4937      	ldr	r1, [pc, #220]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	e03a      	b.n	80025ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002560:	4b34      	ldr	r3, [pc, #208]	@ (8002634 <HAL_RCC_OscConfig+0x278>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7ff f8fb 	bl	8001760 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256e:	f7ff f8f7 	bl	8001760 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e1b4      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002580:	4b2b      	ldr	r3, [pc, #172]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b28      	ldr	r3, [pc, #160]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4925      	ldr	r1, [pc, #148]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]
 80025a0:	e015      	b.n	80025ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a2:	4b24      	ldr	r3, [pc, #144]	@ (8002634 <HAL_RCC_OscConfig+0x278>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7ff f8da 	bl	8001760 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b0:	f7ff f8d6 	bl	8001760 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e193      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d036      	beq.n	8002648 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e2:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <HAL_RCC_OscConfig+0x27c>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7ff f8ba 	bl	8001760 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f0:	f7ff f8b6 	bl	8001760 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e173      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002602:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x234>
 800260e:	e01b      	b.n	8002648 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002610:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_RCC_OscConfig+0x27c>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7ff f8a3 	bl	8001760 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	e00e      	b.n	800263c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261e:	f7ff f89f 	bl	8001760 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d907      	bls.n	800263c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e15c      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
 8002630:	40023800 	.word	0x40023800
 8002634:	42470000 	.word	0x42470000
 8002638:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	4b8a      	ldr	r3, [pc, #552]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800263e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ea      	bne.n	800261e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 8097 	beq.w	8002784 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265a:	4b83      	ldr	r3, [pc, #524]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	4b7f      	ldr	r3, [pc, #508]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	4a7e      	ldr	r2, [pc, #504]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002674:	6413      	str	r3, [r2, #64]	@ 0x40
 8002676:	4b7c      	ldr	r3, [pc, #496]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	4b79      	ldr	r3, [pc, #484]	@ (800286c <HAL_RCC_OscConfig+0x4b0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002692:	4b76      	ldr	r3, [pc, #472]	@ (800286c <HAL_RCC_OscConfig+0x4b0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a75      	ldr	r2, [pc, #468]	@ (800286c <HAL_RCC_OscConfig+0x4b0>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269e:	f7ff f85f 	bl	8001760 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a6:	f7ff f85b 	bl	8001760 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e118      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	4b6c      	ldr	r3, [pc, #432]	@ (800286c <HAL_RCC_OscConfig+0x4b0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x31e>
 80026cc:	4b66      	ldr	r3, [pc, #408]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d0:	4a65      	ldr	r2, [pc, #404]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d8:	e01c      	b.n	8002714 <HAL_RCC_OscConfig+0x358>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b05      	cmp	r3, #5
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x340>
 80026e2:	4b61      	ldr	r3, [pc, #388]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e6:	4a60      	ldr	r2, [pc, #384]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f2:	4a5d      	ldr	r2, [pc, #372]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0x358>
 80026fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002700:	4a59      	ldr	r2, [pc, #356]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	@ 0x70
 8002708:	4b57      	ldr	r3, [pc, #348]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270c:	4a56      	ldr	r2, [pc, #344]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800270e:	f023 0304 	bic.w	r3, r3, #4
 8002712:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d015      	beq.n	8002748 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271c:	f7ff f820 	bl	8001760 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	e00a      	b.n	800273a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002724:	f7ff f81c 	bl	8001760 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e0d7      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273a:	4b4b      	ldr	r3, [pc, #300]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ee      	beq.n	8002724 <HAL_RCC_OscConfig+0x368>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7ff f80a 	bl	8001760 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7ff f806 	bl	8001760 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0c1      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002766:	4b40      	ldr	r3, [pc, #256]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1ee      	bne.n	8002750 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002778:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	4a3a      	ldr	r2, [pc, #232]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800277e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002782:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80ad 	beq.w	80028e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800278e:	4b36      	ldr	r3, [pc, #216]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b08      	cmp	r3, #8
 8002798:	d060      	beq.n	800285c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d145      	bne.n	800282e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b33      	ldr	r3, [pc, #204]	@ (8002870 <HAL_RCC_OscConfig+0x4b4>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe ffda 	bl	8001760 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7fe ffd6 	bl	8001760 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e093      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c2:	4b29      	ldr	r3, [pc, #164]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	019b      	lsls	r3, r3, #6
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	3b01      	subs	r3, #1
 80027e8:	041b      	lsls	r3, r3, #16
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f8:	071b      	lsls	r3, r3, #28
 80027fa:	491b      	ldr	r1, [pc, #108]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002800:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_RCC_OscConfig+0x4b4>)
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe ffab 	bl	8001760 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe ffa7 	bl	8001760 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e064      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002820:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x452>
 800282c:	e05c      	b.n	80028e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <HAL_RCC_OscConfig+0x4b4>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe ff94 	bl	8001760 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe ff90 	bl	8001760 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e04d      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x480>
 800285a:	e045      	b.n	80028e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d107      	bne.n	8002874 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e040      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000
 8002870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002874:	4b1f      	ldr	r3, [pc, #124]	@ (80028f4 <HAL_RCC_OscConfig+0x538>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d030      	beq.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d129      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d122      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d119      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d10f      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800

080028f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e041      	b.n	800298e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe fbfc 	bl	800111c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f000 fda6 	bl	8003488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d001      	beq.n	80029b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e04e      	b.n	8002a4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a23      	ldr	r2, [pc, #140]	@ (8002a5c <HAL_TIM_Base_Start_IT+0xc4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d022      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029da:	d01d      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a60 <HAL_TIM_Base_Start_IT+0xc8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d018      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002a64 <HAL_TIM_Base_Start_IT+0xcc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d013      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a68 <HAL_TIM_Base_Start_IT+0xd0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00e      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1b      	ldr	r2, [pc, #108]	@ (8002a6c <HAL_TIM_Base_Start_IT+0xd4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d009      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a19      	ldr	r2, [pc, #100]	@ (8002a70 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a18      	ldr	r2, [pc, #96]	@ (8002a74 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d111      	bne.n	8002a3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d010      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3a:	e007      	b.n	8002a4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	40000400 	.word	0x40000400
 8002a64:	40000800 	.word	0x40000800
 8002a68:	40000c00 	.word	0x40000c00
 8002a6c:	40010400 	.word	0x40010400
 8002a70:	40014000 	.word	0x40014000
 8002a74:	40001800 	.word	0x40001800

08002a78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e041      	b.n	8002b0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f839 	bl	8002b16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f000 fce6 	bl	8003488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_TIM_PWM_Start_IT+0x28>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	bf14      	ite	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	2300      	moveq	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	e022      	b.n	8002b9a <HAL_TIM_PWM_Start_IT+0x6e>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d109      	bne.n	8002b6e <HAL_TIM_PWM_Start_IT+0x42>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	bf14      	ite	ne
 8002b66:	2301      	movne	r3, #1
 8002b68:	2300      	moveq	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	e015      	b.n	8002b9a <HAL_TIM_PWM_Start_IT+0x6e>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d109      	bne.n	8002b88 <HAL_TIM_PWM_Start_IT+0x5c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	e008      	b.n	8002b9a <HAL_TIM_PWM_Start_IT+0x6e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0c7      	b.n	8002d32 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d104      	bne.n	8002bb2 <HAL_TIM_PWM_Start_IT+0x86>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bb0:	e013      	b.n	8002bda <HAL_TIM_PWM_Start_IT+0xae>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d104      	bne.n	8002bc2 <HAL_TIM_PWM_Start_IT+0x96>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bc0:	e00b      	b.n	8002bda <HAL_TIM_PWM_Start_IT+0xae>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d104      	bne.n	8002bd2 <HAL_TIM_PWM_Start_IT+0xa6>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bd0:	e003      	b.n	8002bda <HAL_TIM_PWM_Start_IT+0xae>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b0c      	cmp	r3, #12
 8002bde:	d841      	bhi.n	8002c64 <HAL_TIM_PWM_Start_IT+0x138>
 8002be0:	a201      	add	r2, pc, #4	@ (adr r2, 8002be8 <HAL_TIM_PWM_Start_IT+0xbc>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002c1d 	.word	0x08002c1d
 8002bec:	08002c65 	.word	0x08002c65
 8002bf0:	08002c65 	.word	0x08002c65
 8002bf4:	08002c65 	.word	0x08002c65
 8002bf8:	08002c2f 	.word	0x08002c2f
 8002bfc:	08002c65 	.word	0x08002c65
 8002c00:	08002c65 	.word	0x08002c65
 8002c04:	08002c65 	.word	0x08002c65
 8002c08:	08002c41 	.word	0x08002c41
 8002c0c:	08002c65 	.word	0x08002c65
 8002c10:	08002c65 	.word	0x08002c65
 8002c14:	08002c65 	.word	0x08002c65
 8002c18:	08002c53 	.word	0x08002c53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0202 	orr.w	r2, r2, #2
 8002c2a:	60da      	str	r2, [r3, #12]
      break;
 8002c2c:	e01d      	b.n	8002c6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0204 	orr.w	r2, r2, #4
 8002c3c:	60da      	str	r2, [r3, #12]
      break;
 8002c3e:	e014      	b.n	8002c6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0208 	orr.w	r2, r2, #8
 8002c4e:	60da      	str	r2, [r3, #12]
      break;
 8002c50:	e00b      	b.n	8002c6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0210 	orr.w	r2, r2, #16
 8002c60:	60da      	str	r2, [r3, #12]
      break;
 8002c62:	e002      	b.n	8002c6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      break;
 8002c68:	bf00      	nop
  }

  if (status == HAL_OK)
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d15f      	bne.n	8002d30 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2201      	movs	r2, #1
 8002c76:	6839      	ldr	r1, [r7, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 ff8c 	bl	8003b96 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2e      	ldr	r2, [pc, #184]	@ (8002d3c <HAL_TIM_PWM_Start_IT+0x210>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_TIM_PWM_Start_IT+0x166>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a2c      	ldr	r2, [pc, #176]	@ (8002d40 <HAL_TIM_PWM_Start_IT+0x214>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_PWM_Start_IT+0x16a>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_TIM_PWM_Start_IT+0x16c>
 8002c96:	2300      	movs	r3, #0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002caa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a22      	ldr	r2, [pc, #136]	@ (8002d3c <HAL_TIM_PWM_Start_IT+0x210>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d022      	beq.n	8002cfc <HAL_TIM_PWM_Start_IT+0x1d0>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cbe:	d01d      	beq.n	8002cfc <HAL_TIM_PWM_Start_IT+0x1d0>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d44 <HAL_TIM_PWM_Start_IT+0x218>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d018      	beq.n	8002cfc <HAL_TIM_PWM_Start_IT+0x1d0>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1e      	ldr	r2, [pc, #120]	@ (8002d48 <HAL_TIM_PWM_Start_IT+0x21c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d013      	beq.n	8002cfc <HAL_TIM_PWM_Start_IT+0x1d0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d4c <HAL_TIM_PWM_Start_IT+0x220>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00e      	beq.n	8002cfc <HAL_TIM_PWM_Start_IT+0x1d0>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a17      	ldr	r2, [pc, #92]	@ (8002d40 <HAL_TIM_PWM_Start_IT+0x214>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d009      	beq.n	8002cfc <HAL_TIM_PWM_Start_IT+0x1d0>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a18      	ldr	r2, [pc, #96]	@ (8002d50 <HAL_TIM_PWM_Start_IT+0x224>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d004      	beq.n	8002cfc <HAL_TIM_PWM_Start_IT+0x1d0>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a17      	ldr	r2, [pc, #92]	@ (8002d54 <HAL_TIM_PWM_Start_IT+0x228>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d111      	bne.n	8002d20 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d010      	beq.n	8002d30 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0201 	orr.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1e:	e007      	b.n	8002d30 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	40010400 	.word	0x40010400
 8002d44:	40000400 	.word	0x40000400
 8002d48:	40000800 	.word	0x40000800
 8002d4c:	40000c00 	.word	0x40000c00
 8002d50:	40014000 	.word	0x40014000
 8002d54:	40001800 	.word	0x40001800

08002d58 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b0c      	cmp	r3, #12
 8002d6a:	d841      	bhi.n	8002df0 <HAL_TIM_PWM_Stop_IT+0x98>
 8002d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d74 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002da9 	.word	0x08002da9
 8002d78:	08002df1 	.word	0x08002df1
 8002d7c:	08002df1 	.word	0x08002df1
 8002d80:	08002df1 	.word	0x08002df1
 8002d84:	08002dbb 	.word	0x08002dbb
 8002d88:	08002df1 	.word	0x08002df1
 8002d8c:	08002df1 	.word	0x08002df1
 8002d90:	08002df1 	.word	0x08002df1
 8002d94:	08002dcd 	.word	0x08002dcd
 8002d98:	08002df1 	.word	0x08002df1
 8002d9c:	08002df1 	.word	0x08002df1
 8002da0:	08002df1 	.word	0x08002df1
 8002da4:	08002ddf 	.word	0x08002ddf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0202 	bic.w	r2, r2, #2
 8002db6:	60da      	str	r2, [r3, #12]
      break;
 8002db8:	e01d      	b.n	8002df6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0204 	bic.w	r2, r2, #4
 8002dc8:	60da      	str	r2, [r3, #12]
      break;
 8002dca:	e014      	b.n	8002df6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0208 	bic.w	r2, r2, #8
 8002dda:	60da      	str	r2, [r3, #12]
      break;
 8002ddc:	e00b      	b.n	8002df6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0210 	bic.w	r2, r2, #16
 8002dec:	60da      	str	r2, [r3, #12]
      break;
 8002dee:	e002      	b.n	8002df6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
      break;
 8002df4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d161      	bne.n	8002ec0 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2200      	movs	r2, #0
 8002e02:	6839      	ldr	r1, [r7, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fec6 	bl	8003b96 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2f      	ldr	r2, [pc, #188]	@ (8002ecc <HAL_TIM_PWM_Stop_IT+0x174>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d004      	beq.n	8002e1e <HAL_TIM_PWM_Stop_IT+0xc6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a2d      	ldr	r2, [pc, #180]	@ (8002ed0 <HAL_TIM_PWM_Stop_IT+0x178>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_TIM_PWM_Stop_IT+0xca>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_TIM_PWM_Stop_IT+0xcc>
 8002e22:	2300      	movs	r3, #0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d017      	beq.n	8002e58 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6a1a      	ldr	r2, [r3, #32]
 8002e2e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10f      	bne.n	8002e58 <HAL_TIM_PWM_Stop_IT+0x100>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a1a      	ldr	r2, [r3, #32]
 8002e3e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_TIM_PWM_Stop_IT+0x100>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e56:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6a1a      	ldr	r2, [r3, #32]
 8002e5e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10f      	bne.n	8002e88 <HAL_TIM_PWM_Stop_IT+0x130>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6a1a      	ldr	r2, [r3, #32]
 8002e6e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <HAL_TIM_PWM_Stop_IT+0x130>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d104      	bne.n	8002e98 <HAL_TIM_PWM_Stop_IT+0x140>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e96:	e013      	b.n	8002ec0 <HAL_TIM_PWM_Stop_IT+0x168>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d104      	bne.n	8002ea8 <HAL_TIM_PWM_Stop_IT+0x150>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ea6:	e00b      	b.n	8002ec0 <HAL_TIM_PWM_Stop_IT+0x168>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d104      	bne.n	8002eb8 <HAL_TIM_PWM_Stop_IT+0x160>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eb6:	e003      	b.n	8002ec0 <HAL_TIM_PWM_Stop_IT+0x168>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40010000 	.word	0x40010000
 8002ed0:	40010400 	.word	0x40010400

08002ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d020      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01b      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0202 	mvn.w	r2, #2
 8002f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fa9d 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 8002f24:	e005      	b.n	8002f32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fa8f 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7fe fa7b 	bl	8001428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d020      	beq.n	8002f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01b      	beq.n	8002f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0204 	mvn.w	r2, #4
 8002f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fa77 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 8002f70:	e005      	b.n	8002f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa69 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7fe fa55 	bl	8001428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d020      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01b      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0208 	mvn.w	r2, #8
 8002fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa51 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fa43 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7fe fa2f 	bl	8001428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d020      	beq.n	800301c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01b      	beq.n	800301c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0210 	mvn.w	r2, #16
 8002fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa2b 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fa1d 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7fe fa09 	bl	8001428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00c      	beq.n	8003040 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0201 	mvn.w	r2, #1
 8003038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fe f9c0 	bl	80013c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00c      	beq.n	8003064 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fe96 	bl	8003d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f9f5 	bl	8003472 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00c      	beq.n	80030ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0220 	mvn.w	r2, #32
 80030a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fe68 	bl	8003d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e0ae      	b.n	8003230 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b0c      	cmp	r3, #12
 80030de:	f200 809f 	bhi.w	8003220 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030e2:	a201      	add	r2, pc, #4	@ (adr r2, 80030e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e8:	0800311d 	.word	0x0800311d
 80030ec:	08003221 	.word	0x08003221
 80030f0:	08003221 	.word	0x08003221
 80030f4:	08003221 	.word	0x08003221
 80030f8:	0800315d 	.word	0x0800315d
 80030fc:	08003221 	.word	0x08003221
 8003100:	08003221 	.word	0x08003221
 8003104:	08003221 	.word	0x08003221
 8003108:	0800319f 	.word	0x0800319f
 800310c:	08003221 	.word	0x08003221
 8003110:	08003221 	.word	0x08003221
 8003114:	08003221 	.word	0x08003221
 8003118:	080031df 	.word	0x080031df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fa5c 	bl	80035e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0208 	orr.w	r2, r2, #8
 8003136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0204 	bic.w	r2, r2, #4
 8003146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6999      	ldr	r1, [r3, #24]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	619a      	str	r2, [r3, #24]
      break;
 800315a:	e064      	b.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 faac 	bl	80036c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6999      	ldr	r1, [r3, #24]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	021a      	lsls	r2, r3, #8
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	619a      	str	r2, [r3, #24]
      break;
 800319c:	e043      	b.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fb01 	bl	80037ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0208 	orr.w	r2, r2, #8
 80031b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0204 	bic.w	r2, r2, #4
 80031c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69d9      	ldr	r1, [r3, #28]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	61da      	str	r2, [r3, #28]
      break;
 80031dc:	e023      	b.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fb55 	bl	8003894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69d9      	ldr	r1, [r3, #28]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	021a      	lsls	r2, r3, #8
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	61da      	str	r2, [r3, #28]
      break;
 800321e:	e002      	b.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	75fb      	strb	r3, [r7, #23]
      break;
 8003224:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800322e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_TIM_ConfigClockSource+0x1c>
 8003250:	2302      	movs	r3, #2
 8003252:	e0b4      	b.n	80033be <HAL_TIM_ConfigClockSource+0x186>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800327a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800328c:	d03e      	beq.n	800330c <HAL_TIM_ConfigClockSource+0xd4>
 800328e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003292:	f200 8087 	bhi.w	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800329a:	f000 8086 	beq.w	80033aa <HAL_TIM_ConfigClockSource+0x172>
 800329e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032a2:	d87f      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b70      	cmp	r3, #112	@ 0x70
 80032a6:	d01a      	beq.n	80032de <HAL_TIM_ConfigClockSource+0xa6>
 80032a8:	2b70      	cmp	r3, #112	@ 0x70
 80032aa:	d87b      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032ac:	2b60      	cmp	r3, #96	@ 0x60
 80032ae:	d050      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x11a>
 80032b0:	2b60      	cmp	r3, #96	@ 0x60
 80032b2:	d877      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032b4:	2b50      	cmp	r3, #80	@ 0x50
 80032b6:	d03c      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0xfa>
 80032b8:	2b50      	cmp	r3, #80	@ 0x50
 80032ba:	d873      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032bc:	2b40      	cmp	r3, #64	@ 0x40
 80032be:	d058      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0x13a>
 80032c0:	2b40      	cmp	r3, #64	@ 0x40
 80032c2:	d86f      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032c4:	2b30      	cmp	r3, #48	@ 0x30
 80032c6:	d064      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15a>
 80032c8:	2b30      	cmp	r3, #48	@ 0x30
 80032ca:	d86b      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d060      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15a>
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d867      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d05c      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15a>
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d05a      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15a>
 80032dc:	e062      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ee:	f000 fc32 	bl	8003b56 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003300:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	609a      	str	r2, [r3, #8]
      break;
 800330a:	e04f      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800331c:	f000 fc1b 	bl	8003b56 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800332e:	609a      	str	r2, [r3, #8]
      break;
 8003330:	e03c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800333e:	461a      	mov	r2, r3
 8003340:	f000 fb8f 	bl	8003a62 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2150      	movs	r1, #80	@ 0x50
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fbe8 	bl	8003b20 <TIM_ITRx_SetConfig>
      break;
 8003350:	e02c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800335e:	461a      	mov	r2, r3
 8003360:	f000 fbae 	bl	8003ac0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2160      	movs	r1, #96	@ 0x60
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fbd8 	bl	8003b20 <TIM_ITRx_SetConfig>
      break;
 8003370:	e01c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	461a      	mov	r2, r3
 8003380:	f000 fb6f 	bl	8003a62 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2140      	movs	r1, #64	@ 0x40
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fbc8 	bl	8003b20 <TIM_ITRx_SetConfig>
      break;
 8003390:	e00c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4619      	mov	r1, r3
 800339c:	4610      	mov	r0, r2
 800339e:	f000 fbbf 	bl	8003b20 <TIM_ITRx_SetConfig>
      break;
 80033a2:	e003      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
      break;
 80033a8:	e000      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_TIM_SlaveConfigSynchro+0x18>
 80033da:	2302      	movs	r3, #2
 80033dc:	e031      	b.n	8003442 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80033ee:	6839      	ldr	r1, [r7, #0]
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 faa5 	bl	8003940 <TIM_SlaveTimer_SetConfig>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d009      	beq.n	8003410 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e018      	b.n	8003442 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800341e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800342e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a46      	ldr	r2, [pc, #280]	@ (80035b4 <TIM_Base_SetConfig+0x12c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d013      	beq.n	80034c8 <TIM_Base_SetConfig+0x40>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a6:	d00f      	beq.n	80034c8 <TIM_Base_SetConfig+0x40>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a43      	ldr	r2, [pc, #268]	@ (80035b8 <TIM_Base_SetConfig+0x130>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00b      	beq.n	80034c8 <TIM_Base_SetConfig+0x40>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a42      	ldr	r2, [pc, #264]	@ (80035bc <TIM_Base_SetConfig+0x134>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d007      	beq.n	80034c8 <TIM_Base_SetConfig+0x40>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a41      	ldr	r2, [pc, #260]	@ (80035c0 <TIM_Base_SetConfig+0x138>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d003      	beq.n	80034c8 <TIM_Base_SetConfig+0x40>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a40      	ldr	r2, [pc, #256]	@ (80035c4 <TIM_Base_SetConfig+0x13c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d108      	bne.n	80034da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a35      	ldr	r2, [pc, #212]	@ (80035b4 <TIM_Base_SetConfig+0x12c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d02b      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034e8:	d027      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a32      	ldr	r2, [pc, #200]	@ (80035b8 <TIM_Base_SetConfig+0x130>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d023      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a31      	ldr	r2, [pc, #196]	@ (80035bc <TIM_Base_SetConfig+0x134>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01f      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a30      	ldr	r2, [pc, #192]	@ (80035c0 <TIM_Base_SetConfig+0x138>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01b      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a2f      	ldr	r2, [pc, #188]	@ (80035c4 <TIM_Base_SetConfig+0x13c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d017      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a2e      	ldr	r2, [pc, #184]	@ (80035c8 <TIM_Base_SetConfig+0x140>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a2d      	ldr	r2, [pc, #180]	@ (80035cc <TIM_Base_SetConfig+0x144>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00f      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2c      	ldr	r2, [pc, #176]	@ (80035d0 <TIM_Base_SetConfig+0x148>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00b      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2b      	ldr	r2, [pc, #172]	@ (80035d4 <TIM_Base_SetConfig+0x14c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2a      	ldr	r2, [pc, #168]	@ (80035d8 <TIM_Base_SetConfig+0x150>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a29      	ldr	r2, [pc, #164]	@ (80035dc <TIM_Base_SetConfig+0x154>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d108      	bne.n	800354c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a10      	ldr	r2, [pc, #64]	@ (80035b4 <TIM_Base_SetConfig+0x12c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_Base_SetConfig+0xf8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a12      	ldr	r2, [pc, #72]	@ (80035c4 <TIM_Base_SetConfig+0x13c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d103      	bne.n	8003588 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b01      	cmp	r3, #1
 8003598:	d105      	bne.n	80035a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f023 0201 	bic.w	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	611a      	str	r2, [r3, #16]
  }
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40010000 	.word	0x40010000
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40000800 	.word	0x40000800
 80035c0:	40000c00 	.word	0x40000c00
 80035c4:	40010400 	.word	0x40010400
 80035c8:	40014000 	.word	0x40014000
 80035cc:	40014400 	.word	0x40014400
 80035d0:	40014800 	.word	0x40014800
 80035d4:	40001800 	.word	0x40001800
 80035d8:	40001c00 	.word	0x40001c00
 80035dc:	40002000 	.word	0x40002000

080035e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f023 0201 	bic.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800360e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f023 0302 	bic.w	r3, r3, #2
 8003628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a20      	ldr	r2, [pc, #128]	@ (80036b8 <TIM_OC1_SetConfig+0xd8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_OC1_SetConfig+0x64>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a1f      	ldr	r2, [pc, #124]	@ (80036bc <TIM_OC1_SetConfig+0xdc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10c      	bne.n	800365e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f023 0308 	bic.w	r3, r3, #8
 800364a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f023 0304 	bic.w	r3, r3, #4
 800365c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a15      	ldr	r2, [pc, #84]	@ (80036b8 <TIM_OC1_SetConfig+0xd8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d003      	beq.n	800366e <TIM_OC1_SetConfig+0x8e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a14      	ldr	r2, [pc, #80]	@ (80036bc <TIM_OC1_SetConfig+0xdc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d111      	bne.n	8003692 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800367c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	621a      	str	r2, [r3, #32]
}
 80036ac:	bf00      	nop
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40010400 	.word	0x40010400

080036c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f023 0210 	bic.w	r2, r3, #16
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	021b      	lsls	r3, r3, #8
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f023 0320 	bic.w	r3, r3, #32
 800370a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a22      	ldr	r2, [pc, #136]	@ (80037a4 <TIM_OC2_SetConfig+0xe4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_OC2_SetConfig+0x68>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a21      	ldr	r2, [pc, #132]	@ (80037a8 <TIM_OC2_SetConfig+0xe8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d10d      	bne.n	8003744 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800372e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003742:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a17      	ldr	r2, [pc, #92]	@ (80037a4 <TIM_OC2_SetConfig+0xe4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_OC2_SetConfig+0x94>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a16      	ldr	r2, [pc, #88]	@ (80037a8 <TIM_OC2_SetConfig+0xe8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d113      	bne.n	800377c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800375a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	621a      	str	r2, [r3, #32]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40010000 	.word	0x40010000
 80037a8:	40010400 	.word	0x40010400

080037ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a21      	ldr	r2, [pc, #132]	@ (800388c <TIM_OC3_SetConfig+0xe0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d003      	beq.n	8003812 <TIM_OC3_SetConfig+0x66>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a20      	ldr	r2, [pc, #128]	@ (8003890 <TIM_OC3_SetConfig+0xe4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10d      	bne.n	800382e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800382c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a16      	ldr	r2, [pc, #88]	@ (800388c <TIM_OC3_SetConfig+0xe0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d003      	beq.n	800383e <TIM_OC3_SetConfig+0x92>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a15      	ldr	r2, [pc, #84]	@ (8003890 <TIM_OC3_SetConfig+0xe4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d113      	bne.n	8003866 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800384c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40010000 	.word	0x40010000
 8003890:	40010400 	.word	0x40010400

08003894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	031b      	lsls	r3, r3, #12
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a12      	ldr	r2, [pc, #72]	@ (8003938 <TIM_OC4_SetConfig+0xa4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_OC4_SetConfig+0x68>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a11      	ldr	r2, [pc, #68]	@ (800393c <TIM_OC4_SetConfig+0xa8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d109      	bne.n	8003910 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	621a      	str	r2, [r3, #32]
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000
 800393c:	40010400 	.word	0x40010400

08003940 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f023 0307 	bic.w	r3, r3, #7
 800396e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b70      	cmp	r3, #112	@ 0x70
 8003988:	d01a      	beq.n	80039c0 <TIM_SlaveTimer_SetConfig+0x80>
 800398a:	2b70      	cmp	r3, #112	@ 0x70
 800398c:	d860      	bhi.n	8003a50 <TIM_SlaveTimer_SetConfig+0x110>
 800398e:	2b60      	cmp	r3, #96	@ 0x60
 8003990:	d054      	beq.n	8003a3c <TIM_SlaveTimer_SetConfig+0xfc>
 8003992:	2b60      	cmp	r3, #96	@ 0x60
 8003994:	d85c      	bhi.n	8003a50 <TIM_SlaveTimer_SetConfig+0x110>
 8003996:	2b50      	cmp	r3, #80	@ 0x50
 8003998:	d046      	beq.n	8003a28 <TIM_SlaveTimer_SetConfig+0xe8>
 800399a:	2b50      	cmp	r3, #80	@ 0x50
 800399c:	d858      	bhi.n	8003a50 <TIM_SlaveTimer_SetConfig+0x110>
 800399e:	2b40      	cmp	r3, #64	@ 0x40
 80039a0:	d019      	beq.n	80039d6 <TIM_SlaveTimer_SetConfig+0x96>
 80039a2:	2b40      	cmp	r3, #64	@ 0x40
 80039a4:	d854      	bhi.n	8003a50 <TIM_SlaveTimer_SetConfig+0x110>
 80039a6:	2b30      	cmp	r3, #48	@ 0x30
 80039a8:	d055      	beq.n	8003a56 <TIM_SlaveTimer_SetConfig+0x116>
 80039aa:	2b30      	cmp	r3, #48	@ 0x30
 80039ac:	d850      	bhi.n	8003a50 <TIM_SlaveTimer_SetConfig+0x110>
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d051      	beq.n	8003a56 <TIM_SlaveTimer_SetConfig+0x116>
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d84c      	bhi.n	8003a50 <TIM_SlaveTimer_SetConfig+0x110>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d04d      	beq.n	8003a56 <TIM_SlaveTimer_SetConfig+0x116>
 80039ba:	2b10      	cmp	r3, #16
 80039bc:	d04b      	beq.n	8003a56 <TIM_SlaveTimer_SetConfig+0x116>
 80039be:	e047      	b.n	8003a50 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80039d0:	f000 f8c1 	bl	8003b56 <TIM_ETR_SetConfig>
      break;
 80039d4:	e040      	b.n	8003a58 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b05      	cmp	r3, #5
 80039dc:	d101      	bne.n	80039e2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e03b      	b.n	8003a5a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a1a      	ldr	r2, [r3, #32]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a08:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	621a      	str	r2, [r3, #32]
      break;
 8003a26:	e017      	b.n	8003a58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a34:	461a      	mov	r2, r3
 8003a36:	f000 f814 	bl	8003a62 <TIM_TI1_ConfigInputStage>
      break;
 8003a3a:	e00d      	b.n	8003a58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f000 f839 	bl	8003ac0 <TIM_TI2_ConfigInputStage>
      break;
 8003a4e:	e003      	b.n	8003a58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	75fb      	strb	r3, [r7, #23]
      break;
 8003a54:	e000      	b.n	8003a58 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003a56:	bf00      	nop
  }

  return status;
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b087      	sub	sp, #28
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f023 0201 	bic.w	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f023 030a 	bic.w	r3, r3, #10
 8003a9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f023 0210 	bic.w	r2, r3, #16
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	031b      	lsls	r3, r3, #12
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003afc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	621a      	str	r2, [r3, #32]
}
 8003b14:	bf00      	nop
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f043 0307 	orr.w	r3, r3, #7
 8003b42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	609a      	str	r2, [r3, #8]
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b087      	sub	sp, #28
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
 8003b62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	021a      	lsls	r2, r3, #8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	609a      	str	r2, [r3, #8]
}
 8003b8a:	bf00      	nop
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b087      	sub	sp, #28
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2201      	movs	r2, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a1a      	ldr	r2, [r3, #32]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	401a      	ands	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a1a      	ldr	r2, [r3, #32]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	fa01 f303 	lsl.w	r3, r1, r3
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	621a      	str	r2, [r3, #32]
}
 8003bd4:	bf00      	nop
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e05a      	b.n	8003cae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a21      	ldr	r2, [pc, #132]	@ (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d022      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c44:	d01d      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d018      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d013      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00e      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a18      	ldr	r2, [pc, #96]	@ (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d009      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a17      	ldr	r2, [pc, #92]	@ (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a15      	ldr	r2, [pc, #84]	@ (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d10c      	bne.n	8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	40010400 	.word	0x40010400
 8003cd0:	40014000 	.word	0x40014000
 8003cd4:	40001800 	.word	0x40001800

08003cd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e03d      	b.n	8003d70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e042      	b.n	8003e3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fd fbf0 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2224      	movs	r2, #36	@ 0x24
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f82b 	bl	8003e44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e48:	b0c0      	sub	sp, #256	@ 0x100
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	68d9      	ldr	r1, [r3, #12]
 8003e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	ea40 0301 	orr.w	r3, r0, r1
 8003e6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e9c:	f021 010c 	bic.w	r1, r1, #12
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebe:	6999      	ldr	r1, [r3, #24]
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	ea40 0301 	orr.w	r3, r0, r1
 8003eca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b8f      	ldr	r3, [pc, #572]	@ (8004110 <UART_SetConfig+0x2cc>)
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d005      	beq.n	8003ee4 <UART_SetConfig+0xa0>
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4b8d      	ldr	r3, [pc, #564]	@ (8004114 <UART_SetConfig+0x2d0>)
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d104      	bne.n	8003eee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ee4:	f7fe f826 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8003ee8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003eec:	e003      	b.n	8003ef6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eee:	f7fe f80d 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 8003ef2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f00:	f040 810c 	bne.w	800411c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f16:	4622      	mov	r2, r4
 8003f18:	462b      	mov	r3, r5
 8003f1a:	1891      	adds	r1, r2, r2
 8003f1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f1e:	415b      	adcs	r3, r3
 8003f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f26:	4621      	mov	r1, r4
 8003f28:	eb12 0801 	adds.w	r8, r2, r1
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	eb43 0901 	adc.w	r9, r3, r1
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f46:	4690      	mov	r8, r2
 8003f48:	4699      	mov	r9, r3
 8003f4a:	4623      	mov	r3, r4
 8003f4c:	eb18 0303 	adds.w	r3, r8, r3
 8003f50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f54:	462b      	mov	r3, r5
 8003f56:	eb49 0303 	adc.w	r3, r9, r3
 8003f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f72:	460b      	mov	r3, r1
 8003f74:	18db      	adds	r3, r3, r3
 8003f76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f78:	4613      	mov	r3, r2
 8003f7a:	eb42 0303 	adc.w	r3, r2, r3
 8003f7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f88:	f7fc f93c 	bl	8000204 <__aeabi_uldivmod>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4b61      	ldr	r3, [pc, #388]	@ (8004118 <UART_SetConfig+0x2d4>)
 8003f92:	fba3 2302 	umull	r2, r3, r3, r2
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	011c      	lsls	r4, r3, #4
 8003f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fa4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003fa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003fac:	4642      	mov	r2, r8
 8003fae:	464b      	mov	r3, r9
 8003fb0:	1891      	adds	r1, r2, r2
 8003fb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003fb4:	415b      	adcs	r3, r3
 8003fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	eb12 0a01 	adds.w	sl, r2, r1
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	eb43 0b01 	adc.w	fp, r3, r1
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fdc:	4692      	mov	sl, r2
 8003fde:	469b      	mov	fp, r3
 8003fe0:	4643      	mov	r3, r8
 8003fe2:	eb1a 0303 	adds.w	r3, sl, r3
 8003fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fea:	464b      	mov	r3, r9
 8003fec:	eb4b 0303 	adc.w	r3, fp, r3
 8003ff0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004000:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004004:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004008:	460b      	mov	r3, r1
 800400a:	18db      	adds	r3, r3, r3
 800400c:	643b      	str	r3, [r7, #64]	@ 0x40
 800400e:	4613      	mov	r3, r2
 8004010:	eb42 0303 	adc.w	r3, r2, r3
 8004014:	647b      	str	r3, [r7, #68]	@ 0x44
 8004016:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800401a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800401e:	f7fc f8f1 	bl	8000204 <__aeabi_uldivmod>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4611      	mov	r1, r2
 8004028:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <UART_SetConfig+0x2d4>)
 800402a:	fba3 2301 	umull	r2, r3, r3, r1
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	2264      	movs	r2, #100	@ 0x64
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	1acb      	subs	r3, r1, r3
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800403e:	4b36      	ldr	r3, [pc, #216]	@ (8004118 <UART_SetConfig+0x2d4>)
 8004040:	fba3 2302 	umull	r2, r3, r3, r2
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800404c:	441c      	add	r4, r3
 800404e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004052:	2200      	movs	r2, #0
 8004054:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004058:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800405c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004060:	4642      	mov	r2, r8
 8004062:	464b      	mov	r3, r9
 8004064:	1891      	adds	r1, r2, r2
 8004066:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004068:	415b      	adcs	r3, r3
 800406a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800406c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004070:	4641      	mov	r1, r8
 8004072:	1851      	adds	r1, r2, r1
 8004074:	6339      	str	r1, [r7, #48]	@ 0x30
 8004076:	4649      	mov	r1, r9
 8004078:	414b      	adcs	r3, r1
 800407a:	637b      	str	r3, [r7, #52]	@ 0x34
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004088:	4659      	mov	r1, fp
 800408a:	00cb      	lsls	r3, r1, #3
 800408c:	4651      	mov	r1, sl
 800408e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004092:	4651      	mov	r1, sl
 8004094:	00ca      	lsls	r2, r1, #3
 8004096:	4610      	mov	r0, r2
 8004098:	4619      	mov	r1, r3
 800409a:	4603      	mov	r3, r0
 800409c:	4642      	mov	r2, r8
 800409e:	189b      	adds	r3, r3, r2
 80040a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040a4:	464b      	mov	r3, r9
 80040a6:	460a      	mov	r2, r1
 80040a8:	eb42 0303 	adc.w	r3, r2, r3
 80040ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040c4:	460b      	mov	r3, r1
 80040c6:	18db      	adds	r3, r3, r3
 80040c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040ca:	4613      	mov	r3, r2
 80040cc:	eb42 0303 	adc.w	r3, r2, r3
 80040d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040da:	f7fc f893 	bl	8000204 <__aeabi_uldivmod>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004118 <UART_SetConfig+0x2d4>)
 80040e4:	fba3 1302 	umull	r1, r3, r3, r2
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	2164      	movs	r1, #100	@ 0x64
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	3332      	adds	r3, #50	@ 0x32
 80040f6:	4a08      	ldr	r2, [pc, #32]	@ (8004118 <UART_SetConfig+0x2d4>)
 80040f8:	fba2 2303 	umull	r2, r3, r2, r3
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	f003 0207 	and.w	r2, r3, #7
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4422      	add	r2, r4
 800410a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800410c:	e106      	b.n	800431c <UART_SetConfig+0x4d8>
 800410e:	bf00      	nop
 8004110:	40011000 	.word	0x40011000
 8004114:	40011400 	.word	0x40011400
 8004118:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800411c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004120:	2200      	movs	r2, #0
 8004122:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004126:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800412a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800412e:	4642      	mov	r2, r8
 8004130:	464b      	mov	r3, r9
 8004132:	1891      	adds	r1, r2, r2
 8004134:	6239      	str	r1, [r7, #32]
 8004136:	415b      	adcs	r3, r3
 8004138:	627b      	str	r3, [r7, #36]	@ 0x24
 800413a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800413e:	4641      	mov	r1, r8
 8004140:	1854      	adds	r4, r2, r1
 8004142:	4649      	mov	r1, r9
 8004144:	eb43 0501 	adc.w	r5, r3, r1
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	00eb      	lsls	r3, r5, #3
 8004152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004156:	00e2      	lsls	r2, r4, #3
 8004158:	4614      	mov	r4, r2
 800415a:	461d      	mov	r5, r3
 800415c:	4643      	mov	r3, r8
 800415e:	18e3      	adds	r3, r4, r3
 8004160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004164:	464b      	mov	r3, r9
 8004166:	eb45 0303 	adc.w	r3, r5, r3
 800416a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800417a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800418a:	4629      	mov	r1, r5
 800418c:	008b      	lsls	r3, r1, #2
 800418e:	4621      	mov	r1, r4
 8004190:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004194:	4621      	mov	r1, r4
 8004196:	008a      	lsls	r2, r1, #2
 8004198:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800419c:	f7fc f832 	bl	8000204 <__aeabi_uldivmod>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4b60      	ldr	r3, [pc, #384]	@ (8004328 <UART_SetConfig+0x4e4>)
 80041a6:	fba3 2302 	umull	r2, r3, r3, r2
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	011c      	lsls	r4, r3, #4
 80041ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80041c0:	4642      	mov	r2, r8
 80041c2:	464b      	mov	r3, r9
 80041c4:	1891      	adds	r1, r2, r2
 80041c6:	61b9      	str	r1, [r7, #24]
 80041c8:	415b      	adcs	r3, r3
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d0:	4641      	mov	r1, r8
 80041d2:	1851      	adds	r1, r2, r1
 80041d4:	6139      	str	r1, [r7, #16]
 80041d6:	4649      	mov	r1, r9
 80041d8:	414b      	adcs	r3, r1
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041e8:	4659      	mov	r1, fp
 80041ea:	00cb      	lsls	r3, r1, #3
 80041ec:	4651      	mov	r1, sl
 80041ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041f2:	4651      	mov	r1, sl
 80041f4:	00ca      	lsls	r2, r1, #3
 80041f6:	4610      	mov	r0, r2
 80041f8:	4619      	mov	r1, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	4642      	mov	r2, r8
 80041fe:	189b      	adds	r3, r3, r2
 8004200:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004204:	464b      	mov	r3, r9
 8004206:	460a      	mov	r2, r1
 8004208:	eb42 0303 	adc.w	r3, r2, r3
 800420c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	67bb      	str	r3, [r7, #120]	@ 0x78
 800421a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004228:	4649      	mov	r1, r9
 800422a:	008b      	lsls	r3, r1, #2
 800422c:	4641      	mov	r1, r8
 800422e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004232:	4641      	mov	r1, r8
 8004234:	008a      	lsls	r2, r1, #2
 8004236:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800423a:	f7fb ffe3 	bl	8000204 <__aeabi_uldivmod>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4611      	mov	r1, r2
 8004244:	4b38      	ldr	r3, [pc, #224]	@ (8004328 <UART_SetConfig+0x4e4>)
 8004246:	fba3 2301 	umull	r2, r3, r3, r1
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	2264      	movs	r2, #100	@ 0x64
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	1acb      	subs	r3, r1, r3
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	3332      	adds	r3, #50	@ 0x32
 8004258:	4a33      	ldr	r2, [pc, #204]	@ (8004328 <UART_SetConfig+0x4e4>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004264:	441c      	add	r4, r3
 8004266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800426a:	2200      	movs	r2, #0
 800426c:	673b      	str	r3, [r7, #112]	@ 0x70
 800426e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004270:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004274:	4642      	mov	r2, r8
 8004276:	464b      	mov	r3, r9
 8004278:	1891      	adds	r1, r2, r2
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	415b      	adcs	r3, r3
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004284:	4641      	mov	r1, r8
 8004286:	1851      	adds	r1, r2, r1
 8004288:	6039      	str	r1, [r7, #0]
 800428a:	4649      	mov	r1, r9
 800428c:	414b      	adcs	r3, r1
 800428e:	607b      	str	r3, [r7, #4]
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800429c:	4659      	mov	r1, fp
 800429e:	00cb      	lsls	r3, r1, #3
 80042a0:	4651      	mov	r1, sl
 80042a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042a6:	4651      	mov	r1, sl
 80042a8:	00ca      	lsls	r2, r1, #3
 80042aa:	4610      	mov	r0, r2
 80042ac:	4619      	mov	r1, r3
 80042ae:	4603      	mov	r3, r0
 80042b0:	4642      	mov	r2, r8
 80042b2:	189b      	adds	r3, r3, r2
 80042b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042b6:	464b      	mov	r3, r9
 80042b8:	460a      	mov	r2, r1
 80042ba:	eb42 0303 	adc.w	r3, r2, r3
 80042be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80042ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042d8:	4649      	mov	r1, r9
 80042da:	008b      	lsls	r3, r1, #2
 80042dc:	4641      	mov	r1, r8
 80042de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042e2:	4641      	mov	r1, r8
 80042e4:	008a      	lsls	r2, r1, #2
 80042e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042ea:	f7fb ff8b 	bl	8000204 <__aeabi_uldivmod>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <UART_SetConfig+0x4e4>)
 80042f4:	fba3 1302 	umull	r1, r3, r3, r2
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	2164      	movs	r1, #100	@ 0x64
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	3332      	adds	r3, #50	@ 0x32
 8004306:	4a08      	ldr	r2, [pc, #32]	@ (8004328 <UART_SetConfig+0x4e4>)
 8004308:	fba2 2303 	umull	r2, r3, r2, r3
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	f003 020f 	and.w	r2, r3, #15
 8004312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4422      	add	r2, r4
 800431a:	609a      	str	r2, [r3, #8]
}
 800431c:	bf00      	nop
 800431e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004322:	46bd      	mov	sp, r7
 8004324:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004328:	51eb851f 	.word	0x51eb851f

0800432c <memset>:
 800432c:	4402      	add	r2, r0
 800432e:	4603      	mov	r3, r0
 8004330:	4293      	cmp	r3, r2
 8004332:	d100      	bne.n	8004336 <memset+0xa>
 8004334:	4770      	bx	lr
 8004336:	f803 1b01 	strb.w	r1, [r3], #1
 800433a:	e7f9      	b.n	8004330 <memset+0x4>

0800433c <__libc_init_array>:
 800433c:	b570      	push	{r4, r5, r6, lr}
 800433e:	4d0d      	ldr	r5, [pc, #52]	@ (8004374 <__libc_init_array+0x38>)
 8004340:	4c0d      	ldr	r4, [pc, #52]	@ (8004378 <__libc_init_array+0x3c>)
 8004342:	1b64      	subs	r4, r4, r5
 8004344:	10a4      	asrs	r4, r4, #2
 8004346:	2600      	movs	r6, #0
 8004348:	42a6      	cmp	r6, r4
 800434a:	d109      	bne.n	8004360 <__libc_init_array+0x24>
 800434c:	4d0b      	ldr	r5, [pc, #44]	@ (800437c <__libc_init_array+0x40>)
 800434e:	4c0c      	ldr	r4, [pc, #48]	@ (8004380 <__libc_init_array+0x44>)
 8004350:	f000 f818 	bl	8004384 <_init>
 8004354:	1b64      	subs	r4, r4, r5
 8004356:	10a4      	asrs	r4, r4, #2
 8004358:	2600      	movs	r6, #0
 800435a:	42a6      	cmp	r6, r4
 800435c:	d105      	bne.n	800436a <__libc_init_array+0x2e>
 800435e:	bd70      	pop	{r4, r5, r6, pc}
 8004360:	f855 3b04 	ldr.w	r3, [r5], #4
 8004364:	4798      	blx	r3
 8004366:	3601      	adds	r6, #1
 8004368:	e7ee      	b.n	8004348 <__libc_init_array+0xc>
 800436a:	f855 3b04 	ldr.w	r3, [r5], #4
 800436e:	4798      	blx	r3
 8004370:	3601      	adds	r6, #1
 8004372:	e7f2      	b.n	800435a <__libc_init_array+0x1e>
 8004374:	080043bc 	.word	0x080043bc
 8004378:	080043bc 	.word	0x080043bc
 800437c:	080043bc 	.word	0x080043bc
 8004380:	080043c0 	.word	0x080043c0

08004384 <_init>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	bf00      	nop
 8004388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438a:	bc08      	pop	{r3}
 800438c:	469e      	mov	lr, r3
 800438e:	4770      	bx	lr

08004390 <_fini>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	bf00      	nop
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr
