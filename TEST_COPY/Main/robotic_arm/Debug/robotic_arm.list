
robotic_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004864  08004864  00005864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800487c  0800487c  00006034  2**0
                  CONTENTS
  4 .ARM          00000008  0800487c  0800487c  0000587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004884  08004884  00006034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004884  08004884  00005884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004888  08004888  00005888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  0800488c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000034  080048c0  00006034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  080048c0  000063b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c27e  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002064  00000000  00000000  000122e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00014348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000892  00000000  00000000  00014e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214f9  00000000  00000000  0001570a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4ef  00000000  00000000  00036c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb19a  00000000  00000000  000450f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011028c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d04  00000000  00000000  001102d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00112fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000034 	.word	0x20000034
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800484c 	.word	0x0800484c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000038 	.word	0x20000038
 8000200:	0800484c 	.word	0x0800484c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <end_eff_config>:
 */
#include "end_eff_gpio.h"



void end_eff_config(int time,TIM_HandleTypeDef *htim){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
	if(time<1){ //0
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2b00      	cmp	r3, #0
 8000502:	dc04      	bgt.n	800050e <end_eff_config+0x1a>
		HAL_GPIO_TogglePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin);
 8000504:	2104      	movs	r1, #4
 8000506:	4808      	ldr	r0, [pc, #32]	@ (8000528 <end_eff_config+0x34>)
 8000508:	f002 f881 	bl	800260e <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin, GPIO_PIN_SET);

		HAL_TIM_Base_Start_IT(htim);

	}
}
 800050c:	e007      	b.n	800051e <end_eff_config+0x2a>
		HAL_GPIO_WritePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2104      	movs	r1, #4
 8000512:	4805      	ldr	r0, [pc, #20]	@ (8000528 <end_eff_config+0x34>)
 8000514:	f002 f862 	bl	80025dc <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(htim);
 8000518:	6838      	ldr	r0, [r7, #0]
 800051a:	f002 ff37 	bl	800338c <HAL_TIM_Base_Start_IT>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40020400 	.word	0x40020400

0800052c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{

 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	@ 0x28
 8000530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};

 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	613b      	str	r3, [r7, #16]
 8000546:	4b66      	ldr	r3, [pc, #408]	@ (80006e0 <MX_GPIO_Init+0x1b4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a65      	ldr	r2, [pc, #404]	@ (80006e0 <MX_GPIO_Init+0x1b4>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b63      	ldr	r3, [pc, #396]	@ (80006e0 <MX_GPIO_Init+0x1b4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	4b5f      	ldr	r3, [pc, #380]	@ (80006e0 <MX_GPIO_Init+0x1b4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a5e      	ldr	r2, [pc, #376]	@ (80006e0 <MX_GPIO_Init+0x1b4>)
 8000568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b5c      	ldr	r3, [pc, #368]	@ (80006e0 <MX_GPIO_Init+0x1b4>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	4b58      	ldr	r3, [pc, #352]	@ (80006e0 <MX_GPIO_Init+0x1b4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	4a57      	ldr	r2, [pc, #348]	@ (80006e0 <MX_GPIO_Init+0x1b4>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6313      	str	r3, [r2, #48]	@ 0x30
 800058a:	4b55      	ldr	r3, [pc, #340]	@ (80006e0 <MX_GPIO_Init+0x1b4>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]

 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b51      	ldr	r3, [pc, #324]	@ (80006e0 <MX_GPIO_Init+0x1b4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a50      	ldr	r2, [pc, #320]	@ (80006e0 <MX_GPIO_Init+0x1b4>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b4e      	ldr	r3, [pc, #312]	@ (80006e0 <MX_GPIO_Init+0x1b4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIRECTION4_Pin|DIRECTION3_Pin, GPIO_PIN_RESET);

 80005b2:	2200      	movs	r2, #0
 80005b4:	21e0      	movs	r1, #224	@ 0xe0
 80005b6:	484b      	ldr	r0, [pc, #300]	@ (80006e4 <MX_GPIO_Init+0x1b8>)
 80005b8:	f002 f810 	bl	80025dc <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION2_GPIO_Port, DIRECTION2_Pin, GPIO_PIN_RESET);

 80005bc:	2200      	movs	r2, #0
 80005be:	2110      	movs	r1, #16
 80005c0:	4849      	ldr	r0, [pc, #292]	@ (80006e8 <MX_GPIO_Init+0x1bc>)
 80005c2:	f002 f80b 	bl	80025dc <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);

 80005c6:	2201      	movs	r2, #1
 80005c8:	2120      	movs	r1, #32
 80005ca:	4847      	ldr	r0, [pc, #284]	@ (80006e8 <MX_GPIO_Init+0x1bc>)
 80005cc:	f002 f806 	bl	80025dc <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIRECTION1_Pin|SERVO_en_Pin, GPIO_PIN_RESET);

 80005d0:	2200      	movs	r2, #0
 80005d2:	2103      	movs	r1, #3
 80005d4:	4845      	ldr	r0, [pc, #276]	@ (80006ec <MX_GPIO_Init+0x1c0>)
 80005d6:	f002 f801 	bl	80025dc <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin, GPIO_PIN_SET);

 80005da:	2201      	movs	r2, #1
 80005dc:	2104      	movs	r1, #4
 80005de:	4843      	ldr	r0, [pc, #268]	@ (80006ec <MX_GPIO_Init+0x1c0>)
 80005e0:	f001 fffc 	bl	80025dc <HAL_GPIO_WritePin>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISABLE_button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISABLE_button_GPIO_Port, &GPIO_InitStruct);
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]

 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	483b      	ldr	r0, [pc, #236]	@ (80006e8 <MX_GPIO_Init+0x1bc>)
 80005fc:	f001 fe5a 	bl	80022b4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2304      	movs	r3, #4
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2302      	movs	r3, #2
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800060c:	2303      	movs	r3, #3
 800060e:	623b      	str	r3, [r7, #32]

 8000610:	2307      	movs	r3, #7
 8000612:	627b      	str	r3, [r7, #36]	@ 0x24
  /*Configure GPIO pins : PAPin PAPin */
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	4832      	ldr	r0, [pc, #200]	@ (80006e4 <MX_GPIO_Init+0x1b8>)
 800061c:	f001 fe4a 	bl	80022b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIRECTION4_Pin|DIRECTION3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000620:	2320      	movs	r3, #32
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2301      	movs	r3, #1
 8000626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]

 800062c:	2300      	movs	r3, #0
 800062e:	623b      	str	r3, [r7, #32]
  /*Configure GPIO pin : PtPin */
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4619      	mov	r1, r3
 8000636:	482b      	ldr	r0, [pc, #172]	@ (80006e4 <MX_GPIO_Init+0x1b8>)
 8000638:	f001 fe3c 	bl	80022b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIRECTION2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800063c:	23c0      	movs	r3, #192	@ 0xc0
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2301      	movs	r3, #1
 8000642:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIRECTION2_GPIO_Port, &GPIO_InitStruct);
 8000644:	2302      	movs	r3, #2
 8000646:	61fb      	str	r3, [r7, #28]

 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  /*Configure GPIO pin : PtPin */
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4824      	ldr	r0, [pc, #144]	@ (80006e4 <MX_GPIO_Init+0x1b8>)
 8000654:	f001 fe2e 	bl	80022b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000658:	2310      	movs	r3, #16
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000660:	2302      	movs	r3, #2
 8000662:	61fb      	str	r3, [r7, #28]

 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  /*Configure GPIO pins : PBPin PBPin */
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	481e      	ldr	r0, [pc, #120]	@ (80006e8 <MX_GPIO_Init+0x1bc>)
 8000670:	f001 fe20 	bl	80022b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIRECTION1_Pin|SERVO_en_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000674:	2320      	movs	r3, #32
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067c:	2301      	movs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]

 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  /*Configure GPIO pin : PtPin */
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4817      	ldr	r0, [pc, #92]	@ (80006e8 <MX_GPIO_Init+0x1bc>)
 800068c:	f001 fe12 	bl	80022b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENDEFF_en_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000690:	2303      	movs	r3, #3
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2301      	movs	r3, #1
 8000696:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENDEFF_en_GPIO_Port, &GPIO_InitStruct);
 8000698:	2302      	movs	r3, #2
 800069a:	61fb      	str	r3, [r7, #28]

 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
  /* EXTI interrupt init*/
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	4811      	ldr	r0, [pc, #68]	@ (80006ec <MX_GPIO_Init+0x1c0>)
 80006a8:	f001 fe04 	bl	80022b4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

 80006ac:	2304      	movs	r3, #4
 80006ae:	617b      	str	r3, [r7, #20]
}
 80006b0:	2301      	movs	r3, #1
 80006b2:	61bb      	str	r3, [r7, #24]

 80006b4:	2301      	movs	r3, #1
 80006b6:	61fb      	str	r3, [r7, #28]
/* USER CODE BEGIN 2 */
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]

 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	480a      	ldr	r0, [pc, #40]	@ (80006ec <MX_GPIO_Init+0x1c0>)
 80006c4:	f001 fdf6 	bl	80022b4 <HAL_GPIO_Init>
/* USER CODE END 2 */
 80006c8:	2200      	movs	r2, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	2028      	movs	r0, #40	@ 0x28
 80006ce:	f001 fdba 	bl	8002246 <HAL_NVIC_SetPriority>
 80006d2:	2028      	movs	r0, #40	@ 0x28
 80006d4:	f001 fdd3 	bl	800227e <HAL_NVIC_EnableIRQ>
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	@ 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000
 80006e8:	40020800 	.word	0x40020800
 80006ec:	40020400 	.word	0x40020400

080006f0 <trapezoidal_func>:
		/* Disable the TIM Counter */
		TIMx->CR1 &= (uint16_t) (~((uint16_t) TIM_CR1_CEN));
	}
}

void trapezoidal_func(int k, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *hslave) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]

	int cnt = __HAL_TIM_GET_COUNTER(hslave);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000702:	617b      	str	r3, [r7, #20]
	if (cnt >= hslave->Instance->ARR) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	429a      	cmp	r2, r3
 800070e:	d82c      	bhi.n	800076a <trapezoidal_func+0x7a>
		if (hslave->Instance == TIM3) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a8b      	ldr	r2, [pc, #556]	@ (8000944 <trapezoidal_func+0x254>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d103      	bne.n	8000722 <trapezoidal_func+0x32>
			HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_2);
 800071a:	2104      	movs	r1, #4
 800071c:	68b8      	ldr	r0, [r7, #8]
 800071e:	f003 f843 	bl	80037a8 <HAL_TIM_PWM_Stop_IT>
		}

		HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 8000722:	2100      	movs	r1, #0
 8000724:	68b8      	ldr	r0, [r7, #8]
 8000726:	f003 f83f 	bl	80037a8 <HAL_TIM_PWM_Stop_IT>

		count_rising_edge[k] = 0;
 800072a:	4a87      	ldr	r2, [pc, #540]	@ (8000948 <trapezoidal_func+0x258>)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2100      	movs	r1, #0
 8000730:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		acc_count[k] = 0;  //debug
 8000734:	4a85      	ldr	r2, [pc, #532]	@ (800094c <trapezoidal_func+0x25c>)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2100      	movs	r1, #0
 800073a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		dec_count[k] = 0; //debug
 800073e:	4a84      	ldr	r2, [pc, #528]	@ (8000950 <trapezoidal_func+0x260>)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	2100      	movs	r1, #0
 8000744:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		htim->Instance->EGR |= TIM_EGR_UG;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	695a      	ldr	r2, [r3, #20]
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f042 0201 	orr.w	r2, r2, #1
 8000756:	615a      	str	r2, [r3, #20]
		hslave->Instance->EGR |= TIM_EGR_UG;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	695a      	ldr	r2, [r3, #20]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f042 0201 	orr.w	r2, r2, #1
 8000766:	615a      	str	r2, [r3, #20]
			}

		}
	}

}
 8000768:	e15c      	b.n	8000a24 <trapezoidal_func+0x334>
		if (arr_des_a[k] > arr_start[k]) { //arr has to be greater than the arr that starts the motor
 800076a:	4a7a      	ldr	r2, [pc, #488]	@ (8000954 <trapezoidal_func+0x264>)
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000772:	4979      	ldr	r1, [pc, #484]	@ (8000958 <trapezoidal_func+0x268>)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800077a:	429a      	cmp	r2, r3
 800077c:	dd2a      	ble.n	80007d4 <trapezoidal_func+0xe4>
			__HAL_TIM_SET_AUTORELOAD(htim, arr_start[k]);
 800077e:	4a76      	ldr	r2, [pc, #472]	@ (8000958 <trapezoidal_func+0x268>)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800078c:	4a72      	ldr	r2, [pc, #456]	@ (8000958 <trapezoidal_func+0x268>)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000794:	461a      	mov	r2, r3
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	60da      	str	r2, [r3, #12]
			hslave->Instance->PSC = arr_start[k];
 800079a:	4a6f      	ldr	r2, [pc, #444]	@ (8000958 <trapezoidal_func+0x268>)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	629a      	str	r2, [r3, #40]	@ 0x28
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	0852      	lsrs	r2, r2, #1
 80007b4:	635a      	str	r2, [r3, #52]	@ 0x34
			hslave->Instance->EGR |= TIM_EGR_UG;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	695a      	ldr	r2, [r3, #20]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f042 0201 	orr.w	r2, r2, #1
 80007c4:	615a      	str	r2, [r3, #20]
			hslave->Instance->CNT = count_rising_edge[k];
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	495f      	ldr	r1, [pc, #380]	@ (8000948 <trapezoidal_func+0x258>)
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007d2:	625a      	str	r2, [r3, #36]	@ 0x24
		if (arr_des_a[k] < (arr_current[k] - ACCEL_RATE)
 80007d4:	4a5f      	ldr	r2, [pc, #380]	@ (8000954 <trapezoidal_func+0x264>)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007dc:	495f      	ldr	r1, [pc, #380]	@ (800095c <trapezoidal_func+0x26c>)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007e4:	3b14      	subs	r3, #20
 80007e6:	429a      	cmp	r2, r3
 80007e8:	da60      	bge.n	80008ac <trapezoidal_func+0x1bc>
				&& cnt <= (int) (n_steps_a[k] * 1 / 2)) { //acceleration phase
 80007ea:	4a5d      	ldr	r2, [pc, #372]	@ (8000960 <trapezoidal_func+0x270>)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f2:	0fda      	lsrs	r2, r3, #31
 80007f4:	4413      	add	r3, r2
 80007f6:	105b      	asrs	r3, r3, #1
 80007f8:	461a      	mov	r2, r3
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	4293      	cmp	r3, r2
 80007fe:	dc55      	bgt.n	80008ac <trapezoidal_func+0x1bc>
			arr_current[k] -= ACCEL_RATE;
 8000800:	4a56      	ldr	r2, [pc, #344]	@ (800095c <trapezoidal_func+0x26c>)
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000808:	f1a3 0214 	sub.w	r2, r3, #20
 800080c:	4953      	ldr	r1, [pc, #332]	@ (800095c <trapezoidal_func+0x26c>)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (arr_current[k] <= arr_max[k])
 8000814:	4a51      	ldr	r2, [pc, #324]	@ (800095c <trapezoidal_func+0x26c>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800081c:	4951      	ldr	r1, [pc, #324]	@ (8000964 <trapezoidal_func+0x274>)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000824:	429a      	cmp	r2, r3
 8000826:	dc07      	bgt.n	8000838 <trapezoidal_func+0x148>
				arr_current[k] = arr_max[k];
 8000828:	4a4e      	ldr	r2, [pc, #312]	@ (8000964 <trapezoidal_func+0x274>)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000830:	494a      	ldr	r1, [pc, #296]	@ (800095c <trapezoidal_func+0x26c>)
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			__HAL_TIM_SET_AUTORELOAD(htim, arr_current[k]);
 8000838:	4a48      	ldr	r2, [pc, #288]	@ (800095c <trapezoidal_func+0x26c>)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000846:	4a45      	ldr	r2, [pc, #276]	@ (800095c <trapezoidal_func+0x26c>)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084e:	461a      	mov	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	60da      	str	r2, [r3, #12]
			hslave->Instance->PSC = arr_current[k];
 8000854:	4a41      	ldr	r2, [pc, #260]	@ (800095c <trapezoidal_func+0x26c>)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	629a      	str	r2, [r3, #40]	@ 0x28
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	0852      	lsrs	r2, r2, #1
 800086e:	635a      	str	r2, [r3, #52]	@ 0x34
			hslave->Instance->EGR |= TIM_EGR_UG;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	695a      	ldr	r2, [r3, #20]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f042 0201 	orr.w	r2, r2, #1
 800087e:	615a      	str	r2, [r3, #20]
			hslave->Instance->CNT = count_rising_edge[k];
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4930      	ldr	r1, [pc, #192]	@ (8000948 <trapezoidal_func+0x258>)
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
			acc_count[k] += (htim->Instance->PSC + 1); //debug
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000894:	3301      	adds	r3, #1
 8000896:	492d      	ldr	r1, [pc, #180]	@ (800094c <trapezoidal_func+0x25c>)
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800089e:	4413      	add	r3, r2
 80008a0:	4619      	mov	r1, r3
 80008a2:	4a2a      	ldr	r2, [pc, #168]	@ (800094c <trapezoidal_func+0x25c>)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80008aa:	e0bb      	b.n	8000a24 <trapezoidal_func+0x334>
			if (arr_des_a[k] >= (arr_current[k] - ACCEL_RATE)
 80008ac:	4a29      	ldr	r2, [pc, #164]	@ (8000954 <trapezoidal_func+0x264>)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008b4:	4929      	ldr	r1, [pc, #164]	@ (800095c <trapezoidal_func+0x26c>)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008bc:	3b14      	subs	r3, #20
 80008be:	429a      	cmp	r2, r3
 80008c0:	db52      	blt.n	8000968 <trapezoidal_func+0x278>
					&& arr_current[k] > arr_des_a[k]
 80008c2:	4a26      	ldr	r2, [pc, #152]	@ (800095c <trapezoidal_func+0x26c>)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ca:	4922      	ldr	r1, [pc, #136]	@ (8000954 <trapezoidal_func+0x264>)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dd48      	ble.n	8000968 <trapezoidal_func+0x278>
					&& cnt <= (int) (n_steps_a[k] * 1 / 2)) { //constant phase
 80008d6:	4a22      	ldr	r2, [pc, #136]	@ (8000960 <trapezoidal_func+0x270>)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008de:	0fda      	lsrs	r2, r3, #31
 80008e0:	4413      	add	r3, r2
 80008e2:	105b      	asrs	r3, r3, #1
 80008e4:	461a      	mov	r2, r3
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	4293      	cmp	r3, r2
 80008ea:	dc3d      	bgt.n	8000968 <trapezoidal_func+0x278>
				__HAL_TIM_SET_AUTORELOAD(htim, arr_des_a[k]);
 80008ec:	4a19      	ldr	r2, [pc, #100]	@ (8000954 <trapezoidal_func+0x264>)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008fa:	4a16      	ldr	r2, [pc, #88]	@ (8000954 <trapezoidal_func+0x264>)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000902:	461a      	mov	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60da      	str	r2, [r3, #12]
				hslave->Instance->PSC = arr_des_a[k];
 8000908:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <trapezoidal_func+0x264>)
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	629a      	str	r2, [r3, #40]	@ 0x28
				__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	0852      	lsrs	r2, r2, #1
 8000922:	635a      	str	r2, [r3, #52]	@ 0x34
				hslave->Instance->EGR |= TIM_EGR_UG;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f042 0201 	orr.w	r2, r2, #1
 8000932:	615a      	str	r2, [r3, #20]
				hslave->Instance->CNT = count_rising_edge[k];
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4903      	ldr	r1, [pc, #12]	@ (8000948 <trapezoidal_func+0x258>)
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
 8000942:	e06f      	b.n	8000a24 <trapezoidal_func+0x334>
 8000944:	40000400 	.word	0x40000400
 8000948:	20000050 	.word	0x20000050
 800094c:	2000005c 	.word	0x2000005c
 8000950:	20000068 	.word	0x20000068
 8000954:	20000114 	.word	0x20000114
 8000958:	20000000 	.word	0x20000000
 800095c:	20000018 	.word	0x20000018
 8000960:	20000108 	.word	0x20000108
 8000964:	2000000c 	.word	0x2000000c
				if (cnt >= (n_steps_a[k] - acc_count[k])) { //deceleration phase
 8000968:	4a30      	ldr	r2, [pc, #192]	@ (8000a2c <trapezoidal_func+0x33c>)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000970:	492f      	ldr	r1, [pc, #188]	@ (8000a30 <trapezoidal_func+0x340>)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	429a      	cmp	r2, r3
 800097e:	db51      	blt.n	8000a24 <trapezoidal_func+0x334>
					arr_current[k] += ACCEL_RATE;
 8000980:	4a2c      	ldr	r2, [pc, #176]	@ (8000a34 <trapezoidal_func+0x344>)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000988:	f103 0214 	add.w	r2, r3, #20
 800098c:	4929      	ldr	r1, [pc, #164]	@ (8000a34 <trapezoidal_func+0x344>)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (arr_current[k] >= (arr_start[k] - ACCEL_RATE))
 8000994:	4a27      	ldr	r2, [pc, #156]	@ (8000a34 <trapezoidal_func+0x344>)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800099c:	4926      	ldr	r1, [pc, #152]	@ (8000a38 <trapezoidal_func+0x348>)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009a4:	3b14      	subs	r3, #20
 80009a6:	429a      	cmp	r2, r3
 80009a8:	db07      	blt.n	80009ba <trapezoidal_func+0x2ca>
						arr_current[k] = arr_start[k];
 80009aa:	4a23      	ldr	r2, [pc, #140]	@ (8000a38 <trapezoidal_func+0x348>)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009b2:	4920      	ldr	r1, [pc, #128]	@ (8000a34 <trapezoidal_func+0x344>)
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					__HAL_TIM_SET_AUTORELOAD(htim, arr_current[k]);
 80009ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000a34 <trapezoidal_func+0x344>)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <trapezoidal_func+0x344>)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	461a      	mov	r2, r3
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	60da      	str	r2, [r3, #12]
					hslave->Instance->PSC = arr_current[k];
 80009d6:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <trapezoidal_func+0x344>)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	629a      	str	r2, [r3, #40]	@ 0x28
					__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	0852      	lsrs	r2, r2, #1
 80009f0:	635a      	str	r2, [r3, #52]	@ 0x34
					hslave->Instance->EGR |= TIM_EGR_UG;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	695a      	ldr	r2, [r3, #20]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f042 0201 	orr.w	r2, r2, #1
 8000a00:	615a      	str	r2, [r3, #20]
					hslave->Instance->CNT = count_rising_edge[k];
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	490d      	ldr	r1, [pc, #52]	@ (8000a3c <trapezoidal_func+0x34c>)
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a0e:	625a      	str	r2, [r3, #36]	@ 0x24
					dec_count[k] += 5; //debug
 8000a10:	4a0b      	ldr	r2, [pc, #44]	@ (8000a40 <trapezoidal_func+0x350>)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a18:	1d5a      	adds	r2, r3, #5
 8000a1a:	4909      	ldr	r1, [pc, #36]	@ (8000a40 <trapezoidal_func+0x350>)
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a22:	e7ff      	b.n	8000a24 <trapezoidal_func+0x334>
 8000a24:	bf00      	nop
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000108 	.word	0x20000108
 8000a30:	2000005c 	.word	0x2000005c
 8000a34:	20000018 	.word	0x20000018
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000050 	.word	0x20000050
 8000a40:	20000068 	.word	0x20000068

08000a44 <HAL_TIM_PeriodElapsedCallback>:

//slave callback for trapezoidal profile
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]


	if (htim->Instance == TIM6) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a07      	ldr	r2, [pc, #28]	@ (8000a70 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d107      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x22>

		HAL_GPIO_WritePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin, GPIO_PIN_RESET); //disable the end_eff
 8000a56:	2200      	movs	r2, #0
 8000a58:	2104      	movs	r1, #4
 8000a5a:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a5c:	f001 fdbe 	bl	80025dc <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(htim);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f002 fd03 	bl	800346c <HAL_TIM_Base_Stop_IT>

	}

}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40001000 	.word	0x40001000
 8000a74:	40020400 	.word	0x40020400

08000a78 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1d      	ldr	r2, [pc, #116]	@ (8000afc <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d10d      	bne.n	8000aa6 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>

		count_rising_edge[0] += (htim->Instance->PSC + 1);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a19      	ldr	r2, [pc, #100]	@ (8000b00 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000a9a:	6013      	str	r3, [r2, #0]
		//arr[0] = -(__HAL_TIM_GET_AUTORELOAD(&htim1));  //debug graph
		trapezoidal_func(0, htim, &htim4); //0,1,2 for the tipology of the timer
 8000a9c:	4a19      	ldr	r2, [pc, #100]	@ (8000b04 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff fe25 	bl	80006f0 <trapezoidal_func>

	}

	if (htim->Instance == TIM2) {
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aae:	d10d      	bne.n	8000acc <HAL_TIM_PWM_PulseFinishedCallback+0x54>

		count_rising_edge[1] += (htim->Instance->PSC + 1);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a10      	ldr	r2, [pc, #64]	@ (8000b00 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000ac0:	6053      	str	r3, [r2, #4]
		//arr[1] = -(__HAL_TIM_GET_AUTORELOAD(htim));  //debug graph
		trapezoidal_func(1, htim, &htim3); //0,1,2 for the tipology of the timer
 8000ac2:	4a11      	ldr	r2, [pc, #68]	@ (8000b08 <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8000ac4:	6879      	ldr	r1, [r7, #4]
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f7ff fe12 	bl	80006f0 <trapezoidal_func>

	}

	if (htim->Instance == TIM8) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	@ (8000b0c <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d10d      	bne.n	8000af2 <HAL_TIM_PWM_PulseFinishedCallback+0x7a>

		count_rising_edge[2] += (htim->Instance->PSC + 1);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a06      	ldr	r2, [pc, #24]	@ (8000b00 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000ae6:	6093      	str	r3, [r2, #8]
		//arr[2] = -(__HAL_TIM_GET_AUTORELOAD(htim));  //debug graph
		trapezoidal_func(2, htim, &htim5); //0,1,2 for the tipology of the timer
 8000ae8:	4a09      	ldr	r2, [pc, #36]	@ (8000b10 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	2002      	movs	r0, #2
 8000aee:	f7ff fdff 	bl	80006f0 <trapezoidal_func>

	}
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40010000 	.word	0x40010000
 8000b00:	20000050 	.word	0x20000050
 8000b04:	20000200 	.word	0x20000200
 8000b08:	200001b8 	.word	0x200001b8
 8000b0c:	40010400 	.word	0x40010400
 8000b10:	20000248 	.word	0x20000248

08000b14 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b1a:	f001 fa23 	bl	8001f64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b1e:	f000 f933 	bl	8000d88 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b22:	f7ff fd03 	bl	800052c <MX_GPIO_Init>
	MX_TIM3_Init();
 8000b26:	f000 fd43 	bl	80015b0 <MX_TIM3_Init>
	MX_TIM5_Init();
 8000b2a:	f000 fe09 	bl	8001740 <MX_TIM5_Init>
	MX_TIM1_Init();
 8000b2e:	f000 fc1b 	bl	8001368 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000b32:	f000 fcbb 	bl	80014ac <MX_TIM2_Init>
	MX_TIM4_Init();
 8000b36:	f000 fd9f 	bl	8001678 <MX_TIM4_Init>
	MX_TIM8_Init();
 8000b3a:	f000 fe9b 	bl	8001874 <MX_TIM8_Init>
	MX_TIM10_Init();
 8000b3e:	f000 ff3b 	bl	80019b8 <MX_TIM10_Init>
	MX_TIM11_Init();
 8000b42:	f000 ff87 	bl	8001a54 <MX_TIM11_Init>
	MX_TIM6_Init();
 8000b46:	f000 fe5f 	bl	8001808 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim4); //1st joint
 8000b4a:	4878      	ldr	r0, [pc, #480]	@ (8000d2c <main+0x218>)
 8000b4c:	f002 fbb6 	bl	80032bc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3); //2nd joint
 8000b50:	4877      	ldr	r0, [pc, #476]	@ (8000d30 <main+0x21c>)
 8000b52:	f002 fbb3 	bl	80032bc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5); //3rd joint
 8000b56:	4877      	ldr	r0, [pc, #476]	@ (8000d34 <main+0x220>)
 8000b58:	f002 fbb0 	bl	80032bc <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET); //ENABLE
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2120      	movs	r1, #32
 8000b60:	4875      	ldr	r0, [pc, #468]	@ (8000d38 <main+0x224>)
 8000b62:	f001 fd3b 	bl	80025dc <HAL_GPIO_WritePin>
	/*
	 stepper_init(obj, resol, microstep, enable_port, direction_port, timer slave, timerpwm*/
	stepper_init(&stp1, &htim1, &htim4, 1.8, 4 * 4.27, DIRECTION1_GPIO_Port,
 8000b66:	2301      	movs	r3, #1
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	4b74      	ldr	r3, [pc, #464]	@ (8000d3c <main+0x228>)
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2311      	movs	r3, #17
 8000b70:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 8000d40 <main+0x22c>
 8000b74:	4a6d      	ldr	r2, [pc, #436]	@ (8000d2c <main+0x218>)
 8000b76:	4973      	ldr	r1, [pc, #460]	@ (8000d44 <main+0x230>)
 8000b78:	4873      	ldr	r0, [pc, #460]	@ (8000d48 <main+0x234>)
 8000b7a:	f000 f9f5 	bl	8000f68 <stepper_init>
	DIRECTION1_Pin);
	stepper_init(&stp2, &htim2, &htim3, 1.8, 4 * 6, DIRECTION2_GPIO_Port,
 8000b7e:	2310      	movs	r3, #16
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	4b6d      	ldr	r3, [pc, #436]	@ (8000d38 <main+0x224>)
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	2318      	movs	r3, #24
 8000b88:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 8000d40 <main+0x22c>
 8000b8c:	4a68      	ldr	r2, [pc, #416]	@ (8000d30 <main+0x21c>)
 8000b8e:	496f      	ldr	r1, [pc, #444]	@ (8000d4c <main+0x238>)
 8000b90:	486f      	ldr	r0, [pc, #444]	@ (8000d50 <main+0x23c>)
 8000b92:	f000 f9e9 	bl	8000f68 <stepper_init>
	DIRECTION2_Pin);
	stepper_init(&stp3, &htim2, &htim3, 1.8, 4 * 6, DIRECTION3_GPIO_Port,
 8000b96:	2380      	movs	r3, #128	@ 0x80
 8000b98:	9301      	str	r3, [sp, #4]
 8000b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8000d54 <main+0x240>)
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2318      	movs	r3, #24
 8000ba0:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 8000d40 <main+0x22c>
 8000ba4:	4a62      	ldr	r2, [pc, #392]	@ (8000d30 <main+0x21c>)
 8000ba6:	4969      	ldr	r1, [pc, #420]	@ (8000d4c <main+0x238>)
 8000ba8:	486b      	ldr	r0, [pc, #428]	@ (8000d58 <main+0x244>)
 8000baa:	f000 f9dd 	bl	8000f68 <stepper_init>
	DIRECTION3_Pin);
	stepper_init(&stp4, &htim8, &htim5, 1.8, 8 * 4.9, DIRECTION4_GPIO_Port,
 8000bae:	2340      	movs	r3, #64	@ 0x40
 8000bb0:	9301      	str	r3, [sp, #4]
 8000bb2:	4b68      	ldr	r3, [pc, #416]	@ (8000d54 <main+0x240>)
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2327      	movs	r3, #39	@ 0x27
 8000bb8:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 8000d40 <main+0x22c>
 8000bbc:	4a5d      	ldr	r2, [pc, #372]	@ (8000d34 <main+0x220>)
 8000bbe:	4967      	ldr	r1, [pc, #412]	@ (8000d5c <main+0x248>)
 8000bc0:	4867      	ldr	r0, [pc, #412]	@ (8000d60 <main+0x24c>)
 8000bc2:	f000 f9d1 	bl	8000f68 <stepper_init>
	DIRECTION4_Pin);
	servo_init(&srv1, &htim10); //default position
 8000bc6:	4967      	ldr	r1, [pc, #412]	@ (8000d64 <main+0x250>)
 8000bc8:	4867      	ldr	r0, [pc, #412]	@ (8000d68 <main+0x254>)
 8000bca:	f000 f951 	bl	8000e70 <servo_init>
	servo_init(&srv2, &htim11); //default position
 8000bce:	4967      	ldr	r1, [pc, #412]	@ (8000d6c <main+0x258>)
 8000bd0:	4867      	ldr	r0, [pc, #412]	@ (8000d70 <main+0x25c>)
 8000bd2:	f000 f94d 	bl	8000e70 <servo_init>
	//for (int i = 0; i < 2; i++) {

	//HAL_Delay(1200);

	//SI ABBASSA
	stepper_move(&stp1, CLOCKWISE, 30, 30);
 8000bd6:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000bda:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8000bde:	2101      	movs	r1, #1
 8000be0:	4859      	ldr	r0, [pc, #356]	@ (8000d48 <main+0x234>)
 8000be2:	f000 f9fb 	bl	8000fdc <stepper_move>

	stepper_move(&stp2, CLOCKWISE, 126, 30);
 8000be6:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000bea:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 8000d74 <main+0x260>
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4857      	ldr	r0, [pc, #348]	@ (8000d50 <main+0x23c>)
 8000bf2:	f000 f9f3 	bl	8000fdc <stepper_move>
	stepper_move(&stp3, COUNTERCLOCKWISE, 126, 30);
 8000bf6:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000bfa:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8000d74 <main+0x260>
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4855      	ldr	r0, [pc, #340]	@ (8000d58 <main+0x244>)
 8000c02:	f000 f9eb 	bl	8000fdc <stepper_move>

	stepper_move(&stp4, COUNTERCLOCKWISE, 90, 90);
 8000c06:	eddf 0a5c 	vldr	s1, [pc, #368]	@ 8000d78 <main+0x264>
 8000c0a:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 8000d78 <main+0x264>
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4853      	ldr	r0, [pc, #332]	@ (8000d60 <main+0x24c>)
 8000c12:	f000 f9e3 	bl	8000fdc <stepper_move>

	stepper_move(&stp4, CLOCKWISE, 31, 10);
 8000c16:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000c1a:	eeb3 0a0f 	vmov.f32	s0, #63	@ 0x41f80000  31.0
 8000c1e:	2101      	movs	r1, #1
 8000c20:	484f      	ldr	r0, [pc, #316]	@ (8000d60 <main+0x24c>)
 8000c22:	f000 f9db 	bl	8000fdc <stepper_move>
	servo_move(&srv2, -10);
 8000c26:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8000c2a:	4851      	ldr	r0, [pc, #324]	@ (8000d70 <main+0x25c>)
 8000c2c:	f000 f948 	bl	8000ec0 <servo_move>
	end_eff_config(0, &htim6);
 8000c30:	4952      	ldr	r1, [pc, #328]	@ (8000d7c <main+0x268>)
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff fc5e 	bl	80004f4 <end_eff_config>

	//SI ALZA

	HAL_Delay(4200);
 8000c38:	f241 0068 	movw	r0, #4200	@ 0x1068
 8000c3c:	f001 fa04 	bl	8002048 <HAL_Delay>

	stepper_move(&stp2, COUNTERCLOCKWISE, 126, 30);
 8000c40:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000c44:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8000d74 <main+0x260>
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4841      	ldr	r0, [pc, #260]	@ (8000d50 <main+0x23c>)
 8000c4c:	f000 f9c6 	bl	8000fdc <stepper_move>
	stepper_move(&stp3, CLOCKWISE, 126, 30);
 8000c50:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000c54:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8000d74 <main+0x260>
 8000c58:	2101      	movs	r1, #1
 8000c5a:	483f      	ldr	r0, [pc, #252]	@ (8000d58 <main+0x244>)
 8000c5c:	f000 f9be 	bl	8000fdc <stepper_move>

	stepper_move(&stp4, COUNTERCLOCKWISE, 31, 10);
 8000c60:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000c64:	eeb3 0a0f 	vmov.f32	s0, #63	@ 0x41f80000  31.0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	483d      	ldr	r0, [pc, #244]	@ (8000d60 <main+0x24c>)
 8000c6c:	f000 f9b6 	bl	8000fdc <stepper_move>
	servo_move(&srv2, 10);
 8000c70:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000c74:	483e      	ldr	r0, [pc, #248]	@ (8000d70 <main+0x25c>)
 8000c76:	f000 f923 	bl	8000ec0 <servo_move>

	//GIRA ANTIORARIO
	//HAL_Delay(4000);
	stepper_move(&stp1, COUNTERCLOCKWISE, 60, 30);
 8000c7a:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000c7e:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8000d80 <main+0x26c>
 8000c82:	2100      	movs	r1, #0
 8000c84:	4830      	ldr	r0, [pc, #192]	@ (8000d48 <main+0x234>)
 8000c86:	f000 f9a9 	bl	8000fdc <stepper_move>

	//SI ABBASSA

	HAL_Delay(3000);
 8000c8a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000c8e:	f001 f9db 	bl	8002048 <HAL_Delay>

	stepper_move(&stp2, CLOCKWISE, 115, 30);
 8000c92:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000c96:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8000d84 <main+0x270>
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	482c      	ldr	r0, [pc, #176]	@ (8000d50 <main+0x23c>)
 8000c9e:	f000 f99d 	bl	8000fdc <stepper_move>
	stepper_move(&stp3, COUNTERCLOCKWISE, 115, 30);
 8000ca2:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000ca6:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8000d84 <main+0x270>
 8000caa:	2100      	movs	r1, #0
 8000cac:	482a      	ldr	r0, [pc, #168]	@ (8000d58 <main+0x244>)
 8000cae:	f000 f995 	bl	8000fdc <stepper_move>

	stepper_move(&stp4, CLOCKWISE, 30, 10);
 8000cb2:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000cb6:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8000cba:	2101      	movs	r1, #1
 8000cbc:	4828      	ldr	r0, [pc, #160]	@ (8000d60 <main+0x24c>)
 8000cbe:	f000 f98d 	bl	8000fdc <stepper_move>
	servo_move(&srv2, -10);
 8000cc2:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8000cc6:	482a      	ldr	r0, [pc, #168]	@ (8000d70 <main+0x25c>)
 8000cc8:	f000 f8fa 	bl	8000ec0 <servo_move>

	//SI ALZA

	HAL_Delay(4000);
 8000ccc:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000cd0:	f001 f9ba 	bl	8002048 <HAL_Delay>
	end_eff_config(0, &htim6);
 8000cd4:	4929      	ldr	r1, [pc, #164]	@ (8000d7c <main+0x268>)
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fc0c 	bl	80004f4 <end_eff_config>

	stepper_move(&stp2, COUNTERCLOCKWISE, 115, 30);
 8000cdc:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000ce0:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8000d84 <main+0x270>
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	481a      	ldr	r0, [pc, #104]	@ (8000d50 <main+0x23c>)
 8000ce8:	f000 f978 	bl	8000fdc <stepper_move>
	stepper_move(&stp3, CLOCKWISE, 115, 30);
 8000cec:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000cf0:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8000d84 <main+0x270>
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	4818      	ldr	r0, [pc, #96]	@ (8000d58 <main+0x244>)
 8000cf8:	f000 f970 	bl	8000fdc <stepper_move>

	stepper_move(&stp4, COUNTERCLOCKWISE, 30, 10);
 8000cfc:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000d00:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8000d04:	2100      	movs	r1, #0
 8000d06:	4816      	ldr	r0, [pc, #88]	@ (8000d60 <main+0x24c>)
 8000d08:	f000 f968 	bl	8000fdc <stepper_move>
	servo_move(&srv2, 10);
 8000d0c:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000d10:	4817      	ldr	r0, [pc, #92]	@ (8000d70 <main+0x25c>)
 8000d12:	f000 f8d5 	bl	8000ec0 <servo_move>

	//GIRA ORARIO
	//HAL_Delay(4000);
	stepper_move(&stp1, CLOCKWISE, 30, 30);
 8000d16:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000d1a:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4809      	ldr	r0, [pc, #36]	@ (8000d48 <main+0x234>)
 8000d22:	f000 f95b 	bl	8000fdc <stepper_move>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8000d26:	bf00      	nop
 8000d28:	e7fd      	b.n	8000d26 <main+0x212>
 8000d2a:	bf00      	nop
 8000d2c:	20000200 	.word	0x20000200
 8000d30:	200001b8 	.word	0x200001b8
 8000d34:	20000248 	.word	0x20000248
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	3fe66666 	.word	0x3fe66666
 8000d44:	20000128 	.word	0x20000128
 8000d48:	20000074 	.word	0x20000074
 8000d4c:	20000170 	.word	0x20000170
 8000d50:	20000094 	.word	0x20000094
 8000d54:	40020000 	.word	0x40020000
 8000d58:	200000b4 	.word	0x200000b4
 8000d5c:	200002d8 	.word	0x200002d8
 8000d60:	200000d4 	.word	0x200000d4
 8000d64:	20000320 	.word	0x20000320
 8000d68:	200000f4 	.word	0x200000f4
 8000d6c:	20000368 	.word	0x20000368
 8000d70:	200000fc 	.word	0x200000fc
 8000d74:	42fc0000 	.word	0x42fc0000
 8000d78:	42b40000 	.word	0x42b40000
 8000d7c:	20000290 	.word	0x20000290
 8000d80:	42700000 	.word	0x42700000
 8000d84:	42e60000 	.word	0x42e60000

08000d88 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b094      	sub	sp, #80	@ 0x50
 8000d8c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2234      	movs	r2, #52	@ 0x34
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 fd2c 	bl	80047f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e5c <SystemClock_Config+0xd4>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db4:	4a29      	ldr	r2, [pc, #164]	@ (8000e5c <SystemClock_Config+0xd4>)
 8000db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbc:	4b27      	ldr	r3, [pc, #156]	@ (8000e5c <SystemClock_Config+0xd4>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	4b24      	ldr	r3, [pc, #144]	@ (8000e60 <SystemClock_Config+0xd8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dd4:	4a22      	ldr	r2, [pc, #136]	@ (8000e60 <SystemClock_Config+0xd8>)
 8000dd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b20      	ldr	r3, [pc, #128]	@ (8000e60 <SystemClock_Config+0xd8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de8:	2301      	movs	r3, #1
 8000dea:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 84;
 8000e00:	2354      	movs	r3, #84	@ 0x54
 8000e02:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 ff63 	bl	8002ce0 <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x9c>
		Error_Handler();
 8000e20:	f000 f820 	bl	8000e64 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e24:	230f      	movs	r3, #15
 8000e26:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e34:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	2102      	movs	r1, #2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 fc16 	bl	8002674 <HAL_RCC_ClockConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0xca>
		Error_Handler();
 8000e4e:	f000 f809 	bl	8000e64 <Error_Handler>
	}
}
 8000e52:	bf00      	nop
 8000e54:	3750      	adds	r7, #80	@ 0x50
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40007000 	.word	0x40007000

08000e64 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <Error_Handler+0x8>

08000e70 <servo_init>:
 *  Created on: Mar 2, 2025
 *      Author: david
 */
#include <servo.h>

void servo_init(servo_obj *srv, TIM_HandleTypeDef *pwm_timer) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
	srv->pwm_timer = pwm_timer;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	601a      	str	r2, [r3, #0]
	srv->unit = (CCR_MAX - CCR_MIN) / (2 * ANGLE_MAX);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a0e      	ldr	r2, [pc, #56]	@ (8000ebc <servo_init+0x4c>)
 8000e84:	605a      	str	r2, [r3, #4]
	//pwm=50hz
	srv->pwm_timer->Instance->PSC = 27;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	221b      	movs	r2, #27
 8000e8e:	629a      	str	r2, [r3, #40]	@ 0x28
	srv->pwm_timer->Instance->ARR = 60000 - 1;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	__HAL_TIM_SET_COMPARE(srv->pwm_timer, TIM_CHANNEL_1,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f241 1293 	movw	r2, #4499	@ 0x1193
 8000ea6:	635a      	str	r2, [r3, #52]	@ 0x34
			(int) ((CCR_MAX + CCR_MIN) / 2));
	HAL_TIM_PWM_Start_IT(srv->pwm_timer, TIM_CHANNEL_1); //START PWM)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 fb64 	bl	800357c <HAL_TIM_PWM_Start_IT>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	42055555 	.word	0x42055555

08000ec0 <servo_move>:
int ccr; //debug

void servo_move(servo_obj *srv, float position) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	ed87 0a00 	vstr	s0, [r7]

	//saturation
	if (position > ANGLE_MAX)
 8000ecc:	edd7 7a00 	vldr	s15, [r7]
 8000ed0:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000f54 <servo_move+0x94>
 8000ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	dd01      	ble.n	8000ee2 <servo_move+0x22>
		position = ANGLE_MAX; //max angle position available
 8000ede:	4b1e      	ldr	r3, [pc, #120]	@ (8000f58 <servo_move+0x98>)
 8000ee0:	603b      	str	r3, [r7, #0]
	if (position < -ANGLE_MAX)
 8000ee2:	edd7 7a00 	vldr	s15, [r7]
 8000ee6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000f5c <servo_move+0x9c>
 8000eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef2:	d501      	bpl.n	8000ef8 <servo_move+0x38>
		position = -ANGLE_MAX; //min angle position available
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <servo_move+0xa0>)
 8000ef6:	603b      	str	r3, [r7, #0]

	//compute ccr value
	if (position != 0)
 8000ef8:	edd7 7a00 	vldr	s15, [r7]
 8000efc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f04:	d010      	beq.n	8000f28 <servo_move+0x68>
		ccr = (int) ((CCR_MAX + CCR_MIN) / 2) + (int) (srv->unit * position);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f0c:	edd7 7a00 	vldr	s15, [r7]
 8000f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f18:	ee17 3a90 	vmov	r3, s15
 8000f1c:	f503 538c 	add.w	r3, r3, #4480	@ 0x1180
 8000f20:	3313      	adds	r3, #19
 8000f22:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <servo_move+0xa4>)
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e003      	b.n	8000f30 <servo_move+0x70>

	else {  //position==0
		ccr = (int) ((CCR_MAX + CCR_MIN) / 2);
 8000f28:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <servo_move+0xa4>)
 8000f2a:	f241 1293 	movw	r2, #4499	@ 0x1193
 8000f2e:	601a      	str	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(srv->pwm_timer, TIM_CHANNEL_1, ccr); //deg=0
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <servo_move+0xa4>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	635a      	str	r2, [r3, #52]	@ 0x34
	srv->pwm_timer->Instance->EGR = TIM_EGR_UG; //not relevant in this case
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2201      	movs	r2, #1
 8000f44:	615a      	str	r2, [r3, #20]

}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	42b40000 	.word	0x42b40000
 8000f58:	42b40000 	.word	0x42b40000
 8000f5c:	c2b40000 	.word	0xc2b40000
 8000f60:	c2b40000 	.word	0xc2b40000
 8000f64:	20000104 	.word	0x20000104

08000f68 <stepper_init>:

//definisco la struct stepper con i seguenti parametri
void stepper_init(stepper_obj *stp, TIM_HandleTypeDef *pwm_timer,
		TIM_HandleTypeDef *position_timer, float stepper_resolution,
		uint16_t microstep, GPIO_TypeDef *direction_port,
		uint16_t direction_pin) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6178      	str	r0, [r7, #20]
 8000f70:	6139      	str	r1, [r7, #16]
 8000f72:	60fa      	str	r2, [r7, #12]
 8000f74:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f78:	80fb      	strh	r3, [r7, #6]

	stp->position_timer = position_timer;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	605a      	str	r2, [r3, #4]
	stp->pwm_timer = pwm_timer;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	601a      	str	r2, [r3, #0]

	stp->direction_port = direction_port;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	6a3a      	ldr	r2, [r7, #32]
 8000f8a:	609a      	str	r2, [r3, #8]
	stp->direction_pin = direction_pin;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f90:	819a      	strh	r2, [r3, #12]

	stp->stepper_resolution = stepper_resolution;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	611a      	str	r2, [r3, #16]
	stp->microstep = microstep;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	88fa      	ldrh	r2, [r7, #6]
 8000f9c:	831a      	strh	r2, [r3, #24]
	stp->step_per_rev = 360.0f / stepper_resolution; // 360°/resolution
 8000f9e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000fd8 <stepper_init+0x70>
 8000fa2:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	edc3 7a05 	vstr	s15, [r3, #20]
	stp->step_scale = stp->step_per_rev * microstep;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	ed93 7a05 	vldr	s14, [r3, #20]
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	ee07 3a90 	vmov	s15, r3
 8000fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8000fca:	bf00      	nop
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	43b40000 	.word	0x43b40000

08000fdc <stepper_move>:

float freq_des_steps; //DEBUG
static int arr_des = 20000;  //random value

void stepper_move(stepper_obj *stp, direction_str direction, float position,
		float freq_desired) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fea:	edc7 0a00 	vstr	s1, [r7]
 8000fee:	72fb      	strb	r3, [r7, #11]

	int i = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
	int n_steps = stp->step_scale * position / 360.0f; //[n_steps]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	ed93 7a07 	vldr	s14, [r3, #28]
 8000ffa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ffe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001002:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80011c0 <stepper_move+0x1e4>
 8001006:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800100a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800100e:	ee17 3a90 	vmov	r3, s15
 8001012:	613b      	str	r3, [r7, #16]

	freq_des_steps = stp->step_scale * freq_desired / 360.0f; //[n_steps/s]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	ed93 7a07 	vldr	s14, [r3, #28]
 800101a:	edd7 7a00 	vldr	s15, [r7]
 800101e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001022:	eddf 6a67 	vldr	s13, [pc, #412]	@ 80011c0 <stepper_move+0x1e4>
 8001026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102a:	4b66      	ldr	r3, [pc, #408]	@ (80011c4 <stepper_move+0x1e8>)
 800102c:	edc3 7a00 	vstr	s15, [r3]

	arr_des = (HAL_RCC_GetPCLK2Freq() * 2 / freq_des_steps)
 8001030:	f001 fc12 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 8001034:	4603      	mov	r3, r0
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001040:	4b60      	ldr	r3, [pc, #384]	@ (80011c4 <stepper_move+0x1e8>)
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	eec7 6a27 	vdiv.f32	s13, s14, s15
			/ (stp->pwm_timer->Instance->PSC + 1) - 1;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001052:	3301      	adds	r3, #1
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001060:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001064:	ee77 7ac7 	vsub.f32	s15, s15, s14
	arr_des = (HAL_RCC_GetPCLK2Freq() * 2 / freq_des_steps)
 8001068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800106c:	ee17 2a90 	vmov	r2, s15
 8001070:	4b55      	ldr	r3, [pc, #340]	@ (80011c8 <stepper_move+0x1ec>)
 8001072:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(stp->direction_port, stp->direction_pin, direction); //DIRECTION
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6898      	ldr	r0, [r3, #8]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	899b      	ldrh	r3, [r3, #12]
 800107c:	7afa      	ldrb	r2, [r7, #11]
 800107e:	4619      	mov	r1, r3
 8001080:	f001 faac 	bl	80025dc <HAL_GPIO_WritePin>

	if (stp->pwm_timer->Instance != TIM2) {
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800108e:	d028      	beq.n	80010e2 <stepper_move+0x106>

		//reset_timers(stp);

		__HAL_TIM_SET_AUTORELOAD(stp->position_timer,
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001098:	3301      	adds	r3, #1
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	fb03 f202 	mul.w	r2, r3, r2
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3a01      	subs	r2, #1
 80010a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b2:	3301      	adds	r3, #1
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	fb03 f202 	mul.w	r2, r3, r2
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	3a01      	subs	r2, #1
 80010c0:	60da      	str	r2, [r3, #12]
				(n_steps * (stp->pwm_timer->Instance->PSC + 1)) - 1);
		__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_1,
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	0852      	lsrs	r2, r2, #1
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);

		HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_1); //START PWM
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fa4e 	bl	800357c <HAL_TIM_PWM_Start_IT>
 80010e0:	e041      	b.n	8001166 <stepper_move+0x18a>

	} else { //set parameters for the timer2 separately cause it has 2 channel
		if (flag_configured_timer2 != 1) { //this cause the second stepper must be equal to the first one
 80010e2:	4b3a      	ldr	r3, [pc, #232]	@ (80011cc <stepper_move+0x1f0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d02b      	beq.n	8001142 <stepper_move+0x166>

			//reset_timers(stp);
			__HAL_TIM_SET_AUTORELOAD(stp->position_timer,
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f2:	3301      	adds	r3, #1
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	fb03 f202 	mul.w	r2, r3, r2
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3a01      	subs	r2, #1
 8001102:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800110c:	3301      	adds	r3, #1
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	fb03 f202 	mul.w	r2, r3, r2
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	3a01      	subs	r2, #1
 800111a:	60da      	str	r2, [r3, #12]
					(n_steps * (stp->pwm_timer->Instance->PSC + 1)) - 1);
			__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_1,
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	0852      	lsrs	r2, r2, #1
 800112c:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);

			__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_2,
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	0852      	lsrs	r2, r2, #1
 800113e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001140:	e00b      	b.n	800115a <stepper_move+0x17e>
					__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);
			HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_1); //START PWM
						HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_2); //START PWM)

 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fa17 	bl	800357c <HAL_TIM_PWM_Start_IT>
		} else {
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2104      	movs	r1, #4
 8001154:	4618      	mov	r0, r3
 8001156:	f002 fa11 	bl	800357c <HAL_TIM_PWM_Start_IT>


		}
 800115a:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <stepper_move+0x1f0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f083 0301 	eor.w	r3, r3, #1
 8001162:	4a1a      	ldr	r2, [pc, #104]	@ (80011cc <stepper_move+0x1f0>)
 8001164:	6013      	str	r3, [r2, #0]
		flag_configured_timer2 ^= 1;

	}
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116e:	3301      	adds	r3, #1
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	613b      	str	r3, [r7, #16]
	n_steps = n_steps * (stp->pwm_timer->Instance->PSC + 1);

 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a14      	ldr	r2, [pc, #80]	@ (80011d0 <stepper_move+0x1f4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d102      	bne.n	800118a <stepper_move+0x1ae>
	if (stp->pwm_timer->Instance == TIM1) {
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	e00a      	b.n	80011a0 <stepper_move+0x1c4>
		i = 0;
	} else {
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001194:	d102      	bne.n	800119c <stepper_move+0x1c0>
		if (stp->pwm_timer->Instance == TIM2) {
 8001196:	2301      	movs	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	e001      	b.n	80011a0 <stepper_move+0x1c4>
			i = 1;
		} else
 800119c:	2302      	movs	r3, #2
 800119e:	617b      	str	r3, [r7, #20]
			i = 2;
	}
 80011a0:	490c      	ldr	r1, [pc, #48]	@ (80011d4 <stepper_move+0x1f8>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	n_steps_a[i] = n_steps;
 80011aa:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <stepper_move+0x1ec>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	490a      	ldr	r1, [pc, #40]	@ (80011d8 <stepper_move+0x1fc>)
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	arr_des_a[i] = arr_des;

 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	43b40000 	.word	0x43b40000
 80011c4:	20000124 	.word	0x20000124
 80011c8:	20000024 	.word	0x20000024
 80011cc:	20000120 	.word	0x20000120
 80011d0:	40010000 	.word	0x40010000
 80011d4:	20000108 	.word	0x20000108
 80011d8:	20000114 	.word	0x20000114

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <HAL_MspInit+0x4c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <HAL_MspInit+0x4c>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <HAL_MspInit+0x4c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	4a08      	ldr	r2, [pc, #32]	@ (8001228 <HAL_MspInit+0x4c>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	@ 0x40
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_MspInit+0x4c>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800121a:	2006      	movs	r0, #6
 800121c:	f001 f808 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800

0800122c <NMI_Handler>:
/* USER CODE END EV */

/******************************************************************************/
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <NMI_Handler+0x4>

08001234 <HardFault_Handler>:
  {
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <MemManage_Handler+0x4>

08001244 <BusFault_Handler>:
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}

/**
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
  }
}

/**
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <UsageFault_Handler+0x4>

08001254 <SVC_Handler>:
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}

/**
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <DebugMon_Handler>:
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}

/**
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <PendSV_Handler>:
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}

/**
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <SysTick_Handler>:
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001282:	f000 fec1 	bl	8002008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <TIM1_TRG_COM_TIM11_IRQHandler>:
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/**
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001290:	4803      	ldr	r0, [pc, #12]	@ (80012a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001292:	f002 fb47 	bl	8003924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
 8001296:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001298:	f002 fb44 	bl	8003924 <HAL_TIM_IRQHandler>

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000128 	.word	0x20000128
 80012a4:	20000368 	.word	0x20000368

080012a8 <TIM1_CC_IRQHandler>:

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
 80012ac:	4802      	ldr	r0, [pc, #8]	@ (80012b8 <TIM1_CC_IRQHandler+0x10>)
 80012ae:	f002 fb39 	bl	8003924 <HAL_TIM_IRQHandler>

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  HAL_TIM_IRQHandler(&htim10);
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000128 	.word	0x20000128

080012bc <TIM2_IRQHandler>:
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}

/**
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <TIM2_IRQHandler+0x10>)
 80012c2:	f002 fb2f 	bl	8003924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000170 	.word	0x20000170

080012d0 <EXTI15_10_IRQHandler>:
  HAL_TIM_IRQHandler(&htim11);
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}

 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
 80012d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012d8:	f001 f9b4 	bl	8002644 <HAL_GPIO_EXTI_IRQHandler>
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <TIM8_BRK_TIM12_IRQHandler>:
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}

 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
 80012e4:	4802      	ldr	r0, [pc, #8]	@ (80012f0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80012e6:	f002 fb1d 	bl	8003924 <HAL_TIM_IRQHandler>
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200002d8 	.word	0x200002d8

080012f4 <TIM8_UP_TIM13_IRQHandler>:
  HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}

 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
 80012f8:	4802      	ldr	r0, [pc, #8]	@ (8001304 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80012fa:	f002 fb13 	bl	8003924 <HAL_TIM_IRQHandler>
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200002d8 	.word	0x200002d8

08001308 <TIM8_TRG_COM_TIM14_IRQHandler>:
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}

 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800130e:	f002 fb09 	bl	8003924 <HAL_TIM_IRQHandler>
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200002d8 	.word	0x200002d8

0800131c <TIM8_CC_IRQHandler>:
  HAL_TIM_IRQHandler(&htim4);
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}

 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <TIM8_CC_IRQHandler+0x10>)
 8001322:	f002 faff 	bl	8003924 <HAL_TIM_IRQHandler>
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200002d8 	.word	0x200002d8

08001330 <TIM6_DAC_IRQHandler>:
  HAL_GPIO_EXTI_IRQHandler(DISABLE_button_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}

 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <TIM6_DAC_IRQHandler+0x10>)
 8001336:	f002 faf5 	bl	8003924 <HAL_TIM_IRQHandler>
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000290 	.word	0x20000290

08001344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b096      	sub	sp, #88	@ 0x58
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2220      	movs	r2, #32
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fa27 	bl	80047f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a6:	4b3f      	ldr	r3, [pc, #252]	@ (80014a4 <MX_TIM1_Init+0x13c>)
 80013a8:	4a3f      	ldr	r2, [pc, #252]	@ (80014a8 <MX_TIM1_Init+0x140>)
 80013aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80013ac:	4b3d      	ldr	r3, [pc, #244]	@ (80014a4 <MX_TIM1_Init+0x13c>)
 80013ae:	2204      	movs	r2, #4
 80013b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b3c      	ldr	r3, [pc, #240]	@ (80014a4 <MX_TIM1_Init+0x13c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013b8:	4b3a      	ldr	r3, [pc, #232]	@ (80014a4 <MX_TIM1_Init+0x13c>)
 80013ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b38      	ldr	r3, [pc, #224]	@ (80014a4 <MX_TIM1_Init+0x13c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c6:	4b37      	ldr	r3, [pc, #220]	@ (80014a4 <MX_TIM1_Init+0x13c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013cc:	4b35      	ldr	r3, [pc, #212]	@ (80014a4 <MX_TIM1_Init+0x13c>)
 80013ce:	2280      	movs	r2, #128	@ 0x80
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d2:	4834      	ldr	r0, [pc, #208]	@ (80014a4 <MX_TIM1_Init+0x13c>)
 80013d4:	f001 ff22 	bl	800321c <HAL_TIM_Base_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013de:	f7ff fd41 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013ec:	4619      	mov	r1, r3
 80013ee:	482d      	ldr	r0, [pc, #180]	@ (80014a4 <MX_TIM1_Init+0x13c>)
 80013f0:	f002 fc4a 	bl	8003c88 <HAL_TIM_ConfigClockSource>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013fa:	f7ff fd33 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013fe:	4829      	ldr	r0, [pc, #164]	@ (80014a4 <MX_TIM1_Init+0x13c>)
 8001400:	f002 f863 	bl	80034ca <HAL_TIM_PWM_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800140a:	f7ff fd2b 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800140e:	2320      	movs	r3, #32
 8001410:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001412:	2380      	movs	r3, #128	@ 0x80
 8001414:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001416:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800141a:	4619      	mov	r1, r3
 800141c:	4821      	ldr	r0, [pc, #132]	@ (80014a4 <MX_TIM1_Init+0x13c>)
 800141e:	f003 f907 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001428:	f7ff fd1c 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142c:	2360      	movs	r3, #96	@ 0x60
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 8001430:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800143a:	2300      	movs	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800143e:	2304      	movs	r3, #4
 8001440:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800144a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144e:	2200      	movs	r2, #0
 8001450:	4619      	mov	r1, r3
 8001452:	4814      	ldr	r0, [pc, #80]	@ (80014a4 <MX_TIM1_Init+0x13c>)
 8001454:	f002 fb56 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800145e:	f7ff fd01 	bl	8000e64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001476:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800147a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4807      	ldr	r0, [pc, #28]	@ (80014a4 <MX_TIM1_Init+0x13c>)
 8001486:	f003 f94f 	bl	8004728 <HAL_TIMEx_ConfigBreakDeadTime>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001490:	f7ff fce8 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001494:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <MX_TIM1_Init+0x13c>)
 8001496:	f000 fc41 	bl	8001d1c <HAL_TIM_MspPostInit>

}
 800149a:	bf00      	nop
 800149c:	3758      	adds	r7, #88	@ 0x58
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000128 	.word	0x20000128
 80014a8:	40010000 	.word	0x40010000

080014ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08e      	sub	sp, #56	@ 0x38
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	f107 0320 	add.w	r3, r7, #32
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
 80014d8:	615a      	str	r2, [r3, #20]
 80014da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014dc:	4b33      	ldr	r3, [pc, #204]	@ (80015ac <MX_TIM2_Init+0x100>)
 80014de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 80014e4:	4b31      	ldr	r3, [pc, #196]	@ (80015ac <MX_TIM2_Init+0x100>)
 80014e6:	2204      	movs	r2, #4
 80014e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b30      	ldr	r3, [pc, #192]	@ (80015ac <MX_TIM2_Init+0x100>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014f0:	4b2e      	ldr	r3, [pc, #184]	@ (80015ac <MX_TIM2_Init+0x100>)
 80014f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b2c      	ldr	r3, [pc, #176]	@ (80015ac <MX_TIM2_Init+0x100>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014fe:	4b2b      	ldr	r3, [pc, #172]	@ (80015ac <MX_TIM2_Init+0x100>)
 8001500:	2280      	movs	r2, #128	@ 0x80
 8001502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001504:	4829      	ldr	r0, [pc, #164]	@ (80015ac <MX_TIM2_Init+0x100>)
 8001506:	f001 fe89 	bl	800321c <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001510:	f7ff fca8 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800151a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800151e:	4619      	mov	r1, r3
 8001520:	4822      	ldr	r0, [pc, #136]	@ (80015ac <MX_TIM2_Init+0x100>)
 8001522:	f002 fbb1 	bl	8003c88 <HAL_TIM_ConfigClockSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800152c:	f7ff fc9a 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001530:	481e      	ldr	r0, [pc, #120]	@ (80015ac <MX_TIM2_Init+0x100>)
 8001532:	f001 ffca 	bl	80034ca <HAL_TIM_PWM_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800153c:	f7ff fc92 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001540:	2320      	movs	r3, #32
 8001542:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001548:	f107 0320 	add.w	r3, r7, #32
 800154c:	4619      	mov	r1, r3
 800154e:	4817      	ldr	r0, [pc, #92]	@ (80015ac <MX_TIM2_Init+0x100>)
 8001550:	f003 f86e 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800155a:	f7ff fc83 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155e:	2360      	movs	r3, #96	@ 0x60
 8001560:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32768;
 8001562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001566:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800156c:	2304      	movs	r3, #4
 800156e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	480d      	ldr	r0, [pc, #52]	@ (80015ac <MX_TIM2_Init+0x100>)
 8001578:	f002 fac4 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001582:	f7ff fc6f 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2204      	movs	r2, #4
 800158a:	4619      	mov	r1, r3
 800158c:	4807      	ldr	r0, [pc, #28]	@ (80015ac <MX_TIM2_Init+0x100>)
 800158e:	f002 fab9 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001598:	f7ff fc64 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800159c:	4803      	ldr	r0, [pc, #12]	@ (80015ac <MX_TIM2_Init+0x100>)
 800159e:	f000 fbbd 	bl	8001d1c <HAL_TIM_MspPostInit>

}
 80015a2:	bf00      	nop
 80015a4:	3738      	adds	r7, #56	@ 0x38
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000170 	.word	0x20000170

080015b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	@ 0x30
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015dc:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <MX_TIM3_Init+0xc0>)
 80015de:	4a25      	ldr	r2, [pc, #148]	@ (8001674 <MX_TIM3_Init+0xc4>)
 80015e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 80015e2:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <MX_TIM3_Init+0xc0>)
 80015e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <MX_TIM3_Init+0xc0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001670 <MX_TIM3_Init+0xc0>)
 80015f2:	22c7      	movs	r2, #199	@ 0xc7
 80015f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <MX_TIM3_Init+0xc0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <MX_TIM3_Init+0xc0>)
 80015fe:	2280      	movs	r2, #128	@ 0x80
 8001600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001602:	481b      	ldr	r0, [pc, #108]	@ (8001670 <MX_TIM3_Init+0xc0>)
 8001604:	f001 fe0a 	bl	800321c <HAL_TIM_Base_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800160e:	f7ff fc29 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001616:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	4619      	mov	r1, r3
 800161e:	4814      	ldr	r0, [pc, #80]	@ (8001670 <MX_TIM3_Init+0xc0>)
 8001620:	f002 fb32 	bl	8003c88 <HAL_TIM_ConfigClockSource>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800162a:	f7ff fc1b 	bl	8000e64 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800162e:	2306      	movs	r3, #6
 8001630:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001632:	2310      	movs	r3, #16
 8001634:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	4619      	mov	r1, r3
 800163c:	480c      	ldr	r0, [pc, #48]	@ (8001670 <MX_TIM3_Init+0xc0>)
 800163e:	f002 fbea 	bl	8003e16 <HAL_TIM_SlaveConfigSynchro>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001648:	f7ff fc0c 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_TIM3_Init+0xc0>)
 800165a:	f002 ffe9 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001664:	f7ff fbfe 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3730      	adds	r7, #48	@ 0x30
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200001b8 	.word	0x200001b8
 8001674:	40000400 	.word	0x40000400

08001678 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08c      	sub	sp, #48	@ 0x30
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016a4:	4b24      	ldr	r3, [pc, #144]	@ (8001738 <MX_TIM4_Init+0xc0>)
 80016a6:	4a25      	ldr	r2, [pc, #148]	@ (800173c <MX_TIM4_Init+0xc4>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 65535;
 80016aa:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <MX_TIM4_Init+0xc0>)
 80016ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <MX_TIM4_Init+0xc0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 80016b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <MX_TIM4_Init+0xc0>)
 80016ba:	22c7      	movs	r2, #199	@ 0xc7
 80016bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b1e      	ldr	r3, [pc, #120]	@ (8001738 <MX_TIM4_Init+0xc0>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <MX_TIM4_Init+0xc0>)
 80016c6:	2280      	movs	r2, #128	@ 0x80
 80016c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016ca:	481b      	ldr	r0, [pc, #108]	@ (8001738 <MX_TIM4_Init+0xc0>)
 80016cc:	f001 fda6 	bl	800321c <HAL_TIM_Base_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80016d6:	f7ff fbc5 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016de:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016e0:	f107 0320 	add.w	r3, r7, #32
 80016e4:	4619      	mov	r1, r3
 80016e6:	4814      	ldr	r0, [pc, #80]	@ (8001738 <MX_TIM4_Init+0xc0>)
 80016e8:	f002 face 	bl	8003c88 <HAL_TIM_ConfigClockSource>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80016f2:	f7ff fbb7 	bl	8000e64 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80016f6:	2306      	movs	r3, #6
 80016f8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	4619      	mov	r1, r3
 8001704:	480c      	ldr	r0, [pc, #48]	@ (8001738 <MX_TIM4_Init+0xc0>)
 8001706:	f002 fb86 	bl	8003e16 <HAL_TIM_SlaveConfigSynchro>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001710:	f7ff fba8 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <MX_TIM4_Init+0xc0>)
 8001722:	f002 ff85 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 800172c:	f7ff fb9a 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	3730      	adds	r7, #48	@ 0x30
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000200 	.word	0x20000200
 800173c:	40000800 	.word	0x40000800

08001740 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	@ 0x30
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800176c:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <MX_TIM5_Init+0xc0>)
 800176e:	4a25      	ldr	r2, [pc, #148]	@ (8001804 <MX_TIM5_Init+0xc4>)
 8001770:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8001772:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <MX_TIM5_Init+0xc0>)
 8001774:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001778:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	4b21      	ldr	r3, [pc, #132]	@ (8001800 <MX_TIM5_Init+0xc0>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 199;
 8001780:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <MX_TIM5_Init+0xc0>)
 8001782:	22c7      	movs	r2, #199	@ 0xc7
 8001784:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001786:	4b1e      	ldr	r3, [pc, #120]	@ (8001800 <MX_TIM5_Init+0xc0>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178c:	4b1c      	ldr	r3, [pc, #112]	@ (8001800 <MX_TIM5_Init+0xc0>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001792:	481b      	ldr	r0, [pc, #108]	@ (8001800 <MX_TIM5_Init+0xc0>)
 8001794:	f001 fd42 	bl	800321c <HAL_TIM_Base_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 800179e:	f7ff fb61 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017a8:	f107 0320 	add.w	r3, r7, #32
 80017ac:	4619      	mov	r1, r3
 80017ae:	4814      	ldr	r0, [pc, #80]	@ (8001800 <MX_TIM5_Init+0xc0>)
 80017b0:	f002 fa6a 	bl	8003c88 <HAL_TIM_ConfigClockSource>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80017ba:	f7ff fb53 	bl	8000e64 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80017be:	2306      	movs	r3, #6
 80017c0:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80017c2:	2330      	movs	r3, #48	@ 0x30
 80017c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4619      	mov	r1, r3
 80017cc:	480c      	ldr	r0, [pc, #48]	@ (8001800 <MX_TIM5_Init+0xc0>)
 80017ce:	f002 fb22 	bl	8003e16 <HAL_TIM_SlaveConfigSynchro>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80017d8:	f7ff fb44 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	@ (8001800 <MX_TIM5_Init+0xc0>)
 80017ea:	f002 ff21 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 80017f4:	f7ff fb36 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	3730      	adds	r7, #48	@ 0x30
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000248 	.word	0x20000248
 8001804:	40000c00 	.word	0x40000c00

08001808 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180e:	463b      	mov	r3, r7
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <MX_TIM6_Init+0x64>)
 8001818:	4a15      	ldr	r2, [pc, #84]	@ (8001870 <MX_TIM6_Init+0x68>)
 800181a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1400*3;
 800181c:	4b13      	ldr	r3, [pc, #76]	@ (800186c <MX_TIM6_Init+0x64>)
 800181e:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001822:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_TIM6_Init+0x64>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 59999;
 800182a:	4b10      	ldr	r3, [pc, #64]	@ (800186c <MX_TIM6_Init+0x64>)
 800182c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001830:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <MX_TIM6_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001838:	480c      	ldr	r0, [pc, #48]	@ (800186c <MX_TIM6_Init+0x64>)
 800183a:	f001 fcef 	bl	800321c <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001844:	f7ff fb0e 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	@ (800186c <MX_TIM6_Init+0x64>)
 8001856:	f002 feeb 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001860:	f7ff fb00 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000290 	.word	0x20000290
 8001870:	40001000 	.word	0x40001000

08001874 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b096      	sub	sp, #88	@ 0x58
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001888:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]
 80018a2:	615a      	str	r2, [r3, #20]
 80018a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2220      	movs	r2, #32
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 ffa1 	bl	80047f4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018b2:	4b3f      	ldr	r3, [pc, #252]	@ (80019b0 <MX_TIM8_Init+0x13c>)
 80018b4:	4a3f      	ldr	r2, [pc, #252]	@ (80019b4 <MX_TIM8_Init+0x140>)
 80018b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4;
 80018b8:	4b3d      	ldr	r3, [pc, #244]	@ (80019b0 <MX_TIM8_Init+0x13c>)
 80018ba:	2204      	movs	r2, #4
 80018bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018be:	4b3c      	ldr	r3, [pc, #240]	@ (80019b0 <MX_TIM8_Init+0x13c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80018c4:	4b3a      	ldr	r3, [pc, #232]	@ (80019b0 <MX_TIM8_Init+0x13c>)
 80018c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018cc:	4b38      	ldr	r3, [pc, #224]	@ (80019b0 <MX_TIM8_Init+0x13c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018d2:	4b37      	ldr	r3, [pc, #220]	@ (80019b0 <MX_TIM8_Init+0x13c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018d8:	4b35      	ldr	r3, [pc, #212]	@ (80019b0 <MX_TIM8_Init+0x13c>)
 80018da:	2280      	movs	r2, #128	@ 0x80
 80018dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018de:	4834      	ldr	r0, [pc, #208]	@ (80019b0 <MX_TIM8_Init+0x13c>)
 80018e0:	f001 fc9c 	bl	800321c <HAL_TIM_Base_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80018ea:	f7ff fabb 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018f8:	4619      	mov	r1, r3
 80018fa:	482d      	ldr	r0, [pc, #180]	@ (80019b0 <MX_TIM8_Init+0x13c>)
 80018fc:	f002 f9c4 	bl	8003c88 <HAL_TIM_ConfigClockSource>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001906:	f7ff faad 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800190a:	4829      	ldr	r0, [pc, #164]	@ (80019b0 <MX_TIM8_Init+0x13c>)
 800190c:	f001 fddd 	bl	80034ca <HAL_TIM_PWM_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001916:	f7ff faa5 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800191a:	2320      	movs	r3, #32
 800191c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800191e:	2380      	movs	r3, #128	@ 0x80
 8001920:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001922:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001926:	4619      	mov	r1, r3
 8001928:	4821      	ldr	r0, [pc, #132]	@ (80019b0 <MX_TIM8_Init+0x13c>)
 800192a:	f002 fe81 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001934:	f7ff fa96 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001938:	2360      	movs	r3, #96	@ 0x60
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 800193c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001940:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800194a:	2304      	movs	r3, #4
 800194c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800195a:	2200      	movs	r2, #0
 800195c:	4619      	mov	r1, r3
 800195e:	4814      	ldr	r0, [pc, #80]	@ (80019b0 <MX_TIM8_Init+0x13c>)
 8001960:	f002 f8d0 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800196a:	f7ff fa7b 	bl	8000e64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001982:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001986:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	4619      	mov	r1, r3
 8001990:	4807      	ldr	r0, [pc, #28]	@ (80019b0 <MX_TIM8_Init+0x13c>)
 8001992:	f002 fec9 	bl	8004728 <HAL_TIMEx_ConfigBreakDeadTime>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 800199c:	f7ff fa62 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80019a0:	4803      	ldr	r0, [pc, #12]	@ (80019b0 <MX_TIM8_Init+0x13c>)
 80019a2:	f000 f9bb 	bl	8001d1c <HAL_TIM_MspPostInit>

}
 80019a6:	bf00      	nop
 80019a8:	3758      	adds	r7, #88	@ 0x58
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200002d8 	.word	0x200002d8
 80019b4:	40010400 	.word	0x40010400

080019b8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
 80019cc:	615a      	str	r2, [r3, #20]
 80019ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80019d0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a4c <MX_TIM10_Init+0x94>)
 80019d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a50 <MX_TIM10_Init+0x98>)
 80019d4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80019d6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <MX_TIM10_Init+0x94>)
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <MX_TIM10_Init+0x94>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <MX_TIM10_Init+0x94>)
 80019e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019e8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ea:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <MX_TIM10_Init+0x94>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019f0:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <MX_TIM10_Init+0x94>)
 80019f2:	2280      	movs	r2, #128	@ 0x80
 80019f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80019f6:	4815      	ldr	r0, [pc, #84]	@ (8001a4c <MX_TIM10_Init+0x94>)
 80019f8:	f001 fc10 	bl	800321c <HAL_TIM_Base_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001a02:	f7ff fa2f 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001a06:	4811      	ldr	r0, [pc, #68]	@ (8001a4c <MX_TIM10_Init+0x94>)
 8001a08:	f001 fd5f 	bl	80034ca <HAL_TIM_PWM_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001a12:	f7ff fa27 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a16:	2360      	movs	r3, #96	@ 0x60
 8001a18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a22:	2304      	movs	r3, #4
 8001a24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4807      	ldr	r0, [pc, #28]	@ (8001a4c <MX_TIM10_Init+0x94>)
 8001a2e:	f002 f869 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001a38:	f7ff fa14 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001a3c:	4803      	ldr	r0, [pc, #12]	@ (8001a4c <MX_TIM10_Init+0x94>)
 8001a3e:	f000 f96d 	bl	8001d1c <HAL_TIM_MspPostInit>

}
 8001a42:	bf00      	nop
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000320 	.word	0x20000320
 8001a50:	40014400 	.word	0x40014400

08001a54 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
 8001a68:	615a      	str	r2, [r3, #20]
 8001a6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <MX_TIM11_Init+0x94>)
 8001a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001aec <MX_TIM11_Init+0x98>)
 8001a70:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001a72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <MX_TIM11_Init+0x94>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <MX_TIM11_Init+0x94>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <MX_TIM11_Init+0x94>)
 8001a80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a84:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a86:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <MX_TIM11_Init+0x94>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <MX_TIM11_Init+0x94>)
 8001a8e:	2280      	movs	r2, #128	@ 0x80
 8001a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a92:	4815      	ldr	r0, [pc, #84]	@ (8001ae8 <MX_TIM11_Init+0x94>)
 8001a94:	f001 fbc2 	bl	800321c <HAL_TIM_Base_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001a9e:	f7ff f9e1 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001aa2:	4811      	ldr	r0, [pc, #68]	@ (8001ae8 <MX_TIM11_Init+0x94>)
 8001aa4:	f001 fd11 	bl	80034ca <HAL_TIM_PWM_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001aae:	f7ff f9d9 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab2:	2360      	movs	r3, #96	@ 0x60
 8001ab4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4807      	ldr	r0, [pc, #28]	@ (8001ae8 <MX_TIM11_Init+0x94>)
 8001aca:	f002 f81b 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001ad4:	f7ff f9c6 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001ad8:	4803      	ldr	r0, [pc, #12]	@ (8001ae8 <MX_TIM11_Init+0x94>)
 8001ada:	f000 f91f 	bl	8001d1c <HAL_TIM_MspPostInit>

}
 8001ade:	bf00      	nop
 8001ae0:	3720      	adds	r7, #32
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000368 	.word	0x20000368
 8001aec:	40014800 	.word	0x40014800

08001af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	@ 0x30
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a7e      	ldr	r2, [pc, #504]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x208>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d11e      	bne.n	8001b40 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b06:	4b7d      	ldr	r3, [pc, #500]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	4a7c      	ldr	r2, [pc, #496]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b12:	4b7a      	ldr	r3, [pc, #488]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2101      	movs	r1, #1
 8001b22:	201a      	movs	r0, #26
 8001b24:	f000 fb8f 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b28:	201a      	movs	r0, #26
 8001b2a:	f000 fba8 	bl	800227e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2101      	movs	r1, #1
 8001b32:	201b      	movs	r0, #27
 8001b34:	f000 fb87 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b38:	201b      	movs	r0, #27
 8001b3a:	f000 fba0 	bl	800227e <HAL_NVIC_EnableIRQ>
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b3e:	e0d6      	b.n	8001cee <HAL_TIM_Base_MspInit+0x1fe>
  /* USER CODE BEGIN TIM1_MspInit 1 */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b48:	d116      	bne.n	8001b78 <HAL_TIM_Base_MspInit+0x88>
  /* USER CODE BEGIN TIM2_MspInit 0 */
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b4e:	4b6b      	ldr	r3, [pc, #428]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	4a6a      	ldr	r2, [pc, #424]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5a:	4b68      	ldr	r3, [pc, #416]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* TIM2 clock enable */
 8001b66:	2200      	movs	r2, #0
 8001b68:	2101      	movs	r1, #1
 8001b6a:	201c      	movs	r0, #28
 8001b6c:	f000 fb6b 	bl	8002246 <HAL_NVIC_SetPriority>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b70:	201c      	movs	r0, #28
 8001b72:	f000 fb84 	bl	800227e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b76:	e0ba      	b.n	8001cee <HAL_TIM_Base_MspInit+0x1fe>
  /* USER CODE BEGIN TIM2_MspInit 1 */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a60      	ldr	r2, [pc, #384]	@ (8001d00 <HAL_TIM_Base_MspInit+0x210>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10e      	bne.n	8001ba0 <HAL_TIM_Base_MspInit+0xb0>
  /* USER CODE BEGIN TIM3_MspInit 0 */
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b86:	4b5d      	ldr	r3, [pc, #372]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	4a5c      	ldr	r2, [pc, #368]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b92:	4b5a      	ldr	r3, [pc, #360]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b9e:	e0a6      	b.n	8001cee <HAL_TIM_Base_MspInit+0x1fe>

 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a57      	ldr	r2, [pc, #348]	@ (8001d04 <HAL_TIM_Base_MspInit+0x214>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d10e      	bne.n	8001bc8 <HAL_TIM_Base_MspInit+0xd8>
  /* USER CODE END TIM3_MspInit 1 */
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
 8001bae:	4b53      	ldr	r3, [pc, #332]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	4a52      	ldr	r2, [pc, #328]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bba:	4b50      	ldr	r3, [pc, #320]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001bc6:	e092      	b.n	8001cee <HAL_TIM_Base_MspInit+0x1fe>

 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a4e      	ldr	r2, [pc, #312]	@ (8001d08 <HAL_TIM_Base_MspInit+0x218>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d10e      	bne.n	8001bf0 <HAL_TIM_Base_MspInit+0x100>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	4b49      	ldr	r3, [pc, #292]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	4a48      	ldr	r2, [pc, #288]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001bdc:	f043 0308 	orr.w	r3, r3, #8
 8001be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be2:	4b46      	ldr	r3, [pc, #280]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001bee:	e07e      	b.n	8001cee <HAL_TIM_Base_MspInit+0x1fe>
  }
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a45      	ldr	r2, [pc, #276]	@ (8001d0c <HAL_TIM_Base_MspInit+0x21c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d116      	bne.n	8001c28 <HAL_TIM_Base_MspInit+0x138>
    /* TIM5 clock enable */
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	4a3e      	ldr	r2, [pc, #248]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001c04:	f043 0310 	orr.w	r3, r3, #16
 8001c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	69bb      	ldr	r3, [r7, #24]
    /* TIM5 interrupt Init */
 8001c16:	2200      	movs	r2, #0
 8001c18:	2101      	movs	r1, #1
 8001c1a:	2036      	movs	r0, #54	@ 0x36
 8001c1c:	f000 fb13 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8001c20:	2036      	movs	r0, #54	@ 0x36
 8001c22:	f000 fb2c 	bl	800227e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c26:	e062      	b.n	8001cee <HAL_TIM_Base_MspInit+0x1fe>
  }
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a38      	ldr	r2, [pc, #224]	@ (8001d10 <HAL_TIM_Base_MspInit+0x220>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d12e      	bne.n	8001c90 <HAL_TIM_Base_MspInit+0x1a0>
    /* TIM6 clock enable */
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	4b31      	ldr	r3, [pc, #196]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	4a30      	ldr	r2, [pc, #192]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c42:	4b2e      	ldr	r3, [pc, #184]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2101      	movs	r1, #1
 8001c52:	202b      	movs	r0, #43	@ 0x2b
 8001c54:	f000 faf7 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001c58:	202b      	movs	r0, #43	@ 0x2b
 8001c5a:	f000 fb10 	bl	800227e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2101      	movs	r1, #1
 8001c62:	202c      	movs	r0, #44	@ 0x2c
 8001c64:	f000 faef 	bl	8002246 <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN TIM6_MspInit 1 */
 8001c68:	202c      	movs	r0, #44	@ 0x2c
 8001c6a:	f000 fb08 	bl	800227e <HAL_NVIC_EnableIRQ>

 8001c6e:	2200      	movs	r2, #0
 8001c70:	2101      	movs	r1, #1
 8001c72:	202d      	movs	r0, #45	@ 0x2d
 8001c74:	f000 fae7 	bl	8002246 <HAL_NVIC_SetPriority>
  /* USER CODE END TIM6_MspInit 1 */
 8001c78:	202d      	movs	r0, #45	@ 0x2d
 8001c7a:	f000 fb00 	bl	800227e <HAL_NVIC_EnableIRQ>
  }
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2101      	movs	r1, #1
 8001c82:	202e      	movs	r0, #46	@ 0x2e
 8001c84:	f000 fadf 	bl	8002246 <HAL_NVIC_SetPriority>
  else if(tim_baseHandle->Instance==TIM8)
 8001c88:	202e      	movs	r0, #46	@ 0x2e
 8001c8a:	f000 faf8 	bl	800227e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c8e:	e02e      	b.n	8001cee <HAL_TIM_Base_MspInit+0x1fe>
    /* TIM8 clock enable */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	@ (8001d14 <HAL_TIM_Base_MspInit+0x224>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d10e      	bne.n	8001cb8 <HAL_TIM_Base_MspInit+0x1c8>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	4a16      	ldr	r2, [pc, #88]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001caa:	4b14      	ldr	r3, [pc, #80]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001cb6:	e01a      	b.n	8001cee <HAL_TIM_Base_MspInit+0x1fe>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a16      	ldr	r2, [pc, #88]	@ (8001d18 <HAL_TIM_Base_MspInit+0x228>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d115      	bne.n	8001cee <HAL_TIM_Base_MspInit+0x1fe>
  {
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	4a0c      	ldr	r2, [pc, #48]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <HAL_TIM_Base_MspInit+0x20c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END TIM10_MspInit 0 */
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	201a      	movs	r0, #26
 8001ce4:	f000 faaf 	bl	8002246 <HAL_NVIC_SetPriority>
    /* TIM10 clock enable */
 8001ce8:	201a      	movs	r0, #26
 8001cea:	f000 fac8 	bl	800227e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001cee:	bf00      	nop
 8001cf0:	3730      	adds	r7, #48	@ 0x30
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40000800 	.word	0x40000800
 8001d08:	40000c00 	.word	0x40000c00
 8001d0c:	40001000 	.word	0x40001000
 8001d10:	40010400 	.word	0x40010400
 8001d14:	40014400 	.word	0x40014400
 8001d18:	40014800 	.word	0x40014800

08001d1c <HAL_TIM_MspPostInit>:
  /* USER CODE BEGIN TIM10_MspInit 1 */

 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	@ 0x30
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* USER CODE END TIM10_MspInit 1 */
  }
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  else if(tim_baseHandle->Instance==TIM11)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a5b      	ldr	r2, [pc, #364]	@ (8001ea8 <HAL_TIM_MspPostInit+0x18c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d11f      	bne.n	8001d7e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	4b5a      	ldr	r3, [pc, #360]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	4a59      	ldr	r2, [pc, #356]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4e:	4b57      	ldr	r3, [pc, #348]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM11_CLK_ENABLE();

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8001d5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d5e:	61fb      	str	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001d60:	2302      	movs	r3, #2
 8001d62:	623b      	str	r3, [r7, #32]
  /* USER CODE BEGIN TIM11_MspInit 1 */
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24

 8001d68:	2300      	movs	r3, #0
 8001d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* USER CODE END TIM11_MspInit 1 */
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	4619      	mov	r1, r3
 8001d76:	484e      	ldr	r0, [pc, #312]	@ (8001eb0 <HAL_TIM_MspPostInit+0x194>)
 8001d78:	f000 fa9c 	bl	80022b4 <HAL_GPIO_Init>

  /* USER CODE END TIM10_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM11)
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */
 8001d7c:	e090      	b.n	8001ea0 <HAL_TIM_MspPostInit+0x184>
  if(timHandle->Instance==TIM1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d86:	d11e      	bne.n	8001dc6 <HAL_TIM_MspPostInit+0xaa>
    /**TIM1 GPIO Configuration
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	4b47      	ldr	r3, [pc, #284]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	4a46      	ldr	r2, [pc, #280]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d98:	4b44      	ldr	r3, [pc, #272]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2303      	movs	r3, #3
 8001da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2302      	movs	r3, #2
 8001daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8001db0:	2300      	movs	r3, #0
 8001db2:	62bb      	str	r3, [r7, #40]	@ 0x28

 8001db4:	2301      	movs	r3, #1
 8001db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIM1_MspPostInit 1 */
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	483c      	ldr	r0, [pc, #240]	@ (8001eb0 <HAL_TIM_MspPostInit+0x194>)
 8001dc0:	f000 fa78 	bl	80022b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 0 */
 8001dc4:	e06c      	b.n	8001ea0 <HAL_TIM_MspPostInit+0x184>
  /* USER CODE BEGIN TIM2_MspPostInit 0 */
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a3a      	ldr	r2, [pc, #232]	@ (8001eb4 <HAL_TIM_MspPostInit+0x198>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d11e      	bne.n	8001e0e <HAL_TIM_MspPostInit+0xf2>
    PA0-WKUP     ------> TIM2_CH1
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	4b35      	ldr	r3, [pc, #212]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd8:	4a34      	ldr	r2, [pc, #208]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de0:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2340      	movs	r3, #64	@ 0x40
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2302      	movs	r3, #2
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	482c      	ldr	r0, [pc, #176]	@ (8001eb8 <HAL_TIM_MspPostInit+0x19c>)
 8001e08:	f000 fa54 	bl	80022b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 0 */
 8001e0c:	e048      	b.n	8001ea0 <HAL_TIM_MspPostInit+0x184>
  {
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a2a      	ldr	r2, [pc, #168]	@ (8001ebc <HAL_TIM_MspPostInit+0x1a0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d11f      	bne.n	8001e58 <HAL_TIM_MspPostInit+0x13c>
    /**TIM8 GPIO Configuration
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	4b23      	ldr	r3, [pc, #140]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	4a22      	ldr	r2, [pc, #136]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e28:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(PWM4_GPIO_Port, &GPIO_InitStruct);
 8001e46:	2303      	movs	r3, #3
 8001e48:	62fb      	str	r3, [r7, #44]	@ 0x2c

 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	4619      	mov	r1, r3
 8001e50:	481b      	ldr	r0, [pc, #108]	@ (8001ec0 <HAL_TIM_MspPostInit+0x1a4>)
 8001e52:	f000 fa2f 	bl	80022b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 0 */
 8001e56:	e023      	b.n	8001ea0 <HAL_TIM_MspPostInit+0x184>
  {
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a19      	ldr	r2, [pc, #100]	@ (8001ec4 <HAL_TIM_MspPostInit+0x1a8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d11e      	bne.n	8001ea0 <HAL_TIM_MspPostInit+0x184>
    /**TIM10 GPIO Configuration
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	4a10      	ldr	r2, [pc, #64]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <HAL_TIM_MspPostInit+0x190>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2302      	movs	r3, #2
 8001e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(SERVO_1_GPIO_Port, &GPIO_InitStruct);
 8001e90:	2303      	movs	r3, #3
 8001e92:	62fb      	str	r3, [r7, #44]	@ 0x2c

 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4809      	ldr	r0, [pc, #36]	@ (8001ec0 <HAL_TIM_MspPostInit+0x1a4>)
 8001e9c:	f000 fa0a 	bl	80022b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 0 */
 8001ea0:	bf00      	nop
 8001ea2:	3730      	adds	r7, #48	@ 0x30
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	40010400 	.word	0x40010400
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40014400 	.word	0x40014400
 8001ec0:	40020400 	.word	0x40020400
 8001ec4:	40014800 	.word	0x40014800

08001ec8 <HAL_GPIO_EXTI_Callback>:
    HAL_NVIC_DisableIRQ(TIM8_TRG_COM_TIM14_IRQn);
    HAL_NVIC_DisableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspDeInit 1 */

  /* USER CODE END TIM8_MspDeInit 1 */
  }
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
  else if(tim_baseHandle->Instance==TIM10)
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ed8:	d112      	bne.n	8001f00 <HAL_GPIO_EXTI_Callback+0x38>
  {
 8001eda:	2201      	movs	r2, #1
 8001edc:	2120      	movs	r1, #32
 8001ede:	480a      	ldr	r0, [pc, #40]	@ (8001f08 <HAL_GPIO_EXTI_Callback+0x40>)
 8001ee0:	f000 fb7c 	bl	80025dc <HAL_GPIO_WritePin>
  /* USER CODE BEGIN TIM10_MspDeInit 0 */
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	4808      	ldr	r0, [pc, #32]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0x44>)
 8001eea:	f000 fb77 	bl	80025dc <HAL_GPIO_WritePin>

 8001eee:	2201      	movs	r2, #1
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	4806      	ldr	r0, [pc, #24]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0x44>)
 8001ef4:	f000 fb72 	bl	80025dc <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef8:	b672      	cpsid	i
}
 8001efa:	bf00      	nop
  /* USER CODE END TIM10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM10_CLK_DISABLE();
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <HAL_GPIO_EXTI_Callback+0x34>

    /* TIM10 interrupt Deinit */
  /* USER CODE BEGIN TIM10:TIM1_UP_TIM10_IRQn disable */
    /**
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40020800 	.word	0x40020800
 8001f0c:	40020400 	.word	0x40020400

08001f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f14:	f7ff fa16 	bl	8001344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f18:	480c      	ldr	r0, [pc, #48]	@ (8001f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f1a:	490d      	ldr	r1, [pc, #52]	@ (8001f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f20:	e002      	b.n	8001f28 <LoopCopyDataInit>

08001f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f26:	3304      	adds	r3, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f2c:	d3f9      	bcc.n	8001f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f30:	4c0a      	ldr	r4, [pc, #40]	@ (8001f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f34:	e001      	b.n	8001f3a <LoopFillZerobss>

08001f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f38:	3204      	adds	r2, #4

08001f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f3c:	d3fb      	bcc.n	8001f36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f3e:	f002 fc61 	bl	8004804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f42:	f7fe fde7 	bl	8000b14 <main>
  bx  lr    
 8001f46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f50:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001f54:	0800488c 	.word	0x0800488c
  ldr r2, =_sbss
 8001f58:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001f5c:	200003b4 	.word	0x200003b4

08001f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f60:	e7fe      	b.n	8001f60 <ADC_IRQHandler>
	...

08001f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f68:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <HAL_Init+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <HAL_Init+0x40>)
 8001f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f74:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_Init+0x40>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa4 <HAL_Init+0x40>)
 8001f7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f80:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <HAL_Init+0x40>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a07      	ldr	r2, [pc, #28]	@ (8001fa4 <HAL_Init+0x40>)
 8001f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f000 f94f 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f92:	2000      	movs	r0, #0
 8001f94:	f000 f808 	bl	8001fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f98:	f7ff f920 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023c00 	.word	0x40023c00

08001fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_InitTick+0x54>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <HAL_InitTick+0x58>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f967 	bl	800229a <HAL_SYSTICK_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00e      	b.n	8001ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	d80a      	bhi.n	8001ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f000 f92f 	bl	8002246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe8:	4a06      	ldr	r2, [pc, #24]	@ (8002004 <HAL_InitTick+0x5c>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000028 	.word	0x20000028
 8002000:	20000030 	.word	0x20000030
 8002004:	2000002c 	.word	0x2000002c

08002008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_IncTick+0x20>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_IncTick+0x24>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4413      	add	r3, r2
 8002018:	4a04      	ldr	r2, [pc, #16]	@ (800202c <HAL_IncTick+0x24>)
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000030 	.word	0x20000030
 800202c:	200003b0 	.word	0x200003b0

08002030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return uwTick;
 8002034:	4b03      	ldr	r3, [pc, #12]	@ (8002044 <HAL_GetTick+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	200003b0 	.word	0x200003b0

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff ffee 	bl	8002030 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d005      	beq.n	800206e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_Delay+0x44>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800206e:	bf00      	nop
 8002070:	f7ff ffde 	bl	8002030 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f7      	bhi.n	8002070 <HAL_Delay+0x28>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000030 	.word	0x20000030

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0b      	blt.n	800211e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4907      	ldr	r1, [pc, #28]	@ (800212c <__NVIC_EnableIRQ+0x38>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2001      	movs	r0, #1
 8002116:	fa00 f202 	lsl.w	r2, r0, r2
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	@ (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	@ (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	@ 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021fc:	d301      	bcc.n	8002202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <SysTick_Config+0x40>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220a:	210f      	movs	r1, #15
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f7ff ff8e 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <SysTick_Config+0x40>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b04      	ldr	r3, [pc, #16]	@ (800222c <SysTick_Config+0x40>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	e000e010 	.word	0xe000e010

08002230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff29 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002258:	f7ff ff3e 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 800225c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff ff8e 	bl	8002184 <NVIC_EncodePriority>
 8002268:	4602      	mov	r2, r0
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff5d 	bl	8002130 <__NVIC_SetPriority>
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff31 	bl	80020f4 <__NVIC_EnableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffa2 	bl	80021ec <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	@ 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	e165      	b.n	800259c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d0:	2201      	movs	r2, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f040 8154 	bne.w	8002596 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d005      	beq.n	8002306 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002302:	2b02      	cmp	r3, #2
 8002304:	d130      	bne.n	8002368 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	2203      	movs	r2, #3
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800233c:	2201      	movs	r2, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 0201 	and.w	r2, r3, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b03      	cmp	r3, #3
 8002372:	d017      	beq.n	80023a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d123      	bne.n	80023f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	220f      	movs	r2, #15
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	08da      	lsrs	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3208      	adds	r2, #8
 80023f2:	69b9      	ldr	r1, [r7, #24]
 80023f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0203 	and.w	r2, r3, #3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80ae 	beq.w	8002596 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b5d      	ldr	r3, [pc, #372]	@ (80025b4 <HAL_GPIO_Init+0x300>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002442:	4a5c      	ldr	r2, [pc, #368]	@ (80025b4 <HAL_GPIO_Init+0x300>)
 8002444:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002448:	6453      	str	r3, [r2, #68]	@ 0x44
 800244a:	4b5a      	ldr	r3, [pc, #360]	@ (80025b4 <HAL_GPIO_Init+0x300>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002456:	4a58      	ldr	r2, [pc, #352]	@ (80025b8 <HAL_GPIO_Init+0x304>)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3302      	adds	r3, #2
 800245e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	220f      	movs	r2, #15
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4f      	ldr	r2, [pc, #316]	@ (80025bc <HAL_GPIO_Init+0x308>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d025      	beq.n	80024ce <HAL_GPIO_Init+0x21a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4e      	ldr	r2, [pc, #312]	@ (80025c0 <HAL_GPIO_Init+0x30c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01f      	beq.n	80024ca <HAL_GPIO_Init+0x216>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4d      	ldr	r2, [pc, #308]	@ (80025c4 <HAL_GPIO_Init+0x310>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d019      	beq.n	80024c6 <HAL_GPIO_Init+0x212>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4c      	ldr	r2, [pc, #304]	@ (80025c8 <HAL_GPIO_Init+0x314>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_GPIO_Init+0x20e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4b      	ldr	r2, [pc, #300]	@ (80025cc <HAL_GPIO_Init+0x318>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00d      	beq.n	80024be <HAL_GPIO_Init+0x20a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4a      	ldr	r2, [pc, #296]	@ (80025d0 <HAL_GPIO_Init+0x31c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <HAL_GPIO_Init+0x206>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a49      	ldr	r2, [pc, #292]	@ (80025d4 <HAL_GPIO_Init+0x320>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_GPIO_Init+0x202>
 80024b2:	2306      	movs	r3, #6
 80024b4:	e00c      	b.n	80024d0 <HAL_GPIO_Init+0x21c>
 80024b6:	2307      	movs	r3, #7
 80024b8:	e00a      	b.n	80024d0 <HAL_GPIO_Init+0x21c>
 80024ba:	2305      	movs	r3, #5
 80024bc:	e008      	b.n	80024d0 <HAL_GPIO_Init+0x21c>
 80024be:	2304      	movs	r3, #4
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x21c>
 80024c2:	2303      	movs	r3, #3
 80024c4:	e004      	b.n	80024d0 <HAL_GPIO_Init+0x21c>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e002      	b.n	80024d0 <HAL_GPIO_Init+0x21c>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_Init+0x21c>
 80024ce:	2300      	movs	r3, #0
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	f002 0203 	and.w	r2, r2, #3
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	4093      	lsls	r3, r2
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e0:	4935      	ldr	r1, [pc, #212]	@ (80025b8 <HAL_GPIO_Init+0x304>)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	3302      	adds	r3, #2
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ee:	4b3a      	ldr	r3, [pc, #232]	@ (80025d8 <HAL_GPIO_Init+0x324>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002512:	4a31      	ldr	r2, [pc, #196]	@ (80025d8 <HAL_GPIO_Init+0x324>)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002518:	4b2f      	ldr	r3, [pc, #188]	@ (80025d8 <HAL_GPIO_Init+0x324>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800253c:	4a26      	ldr	r2, [pc, #152]	@ (80025d8 <HAL_GPIO_Init+0x324>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002542:	4b25      	ldr	r3, [pc, #148]	@ (80025d8 <HAL_GPIO_Init+0x324>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002566:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <HAL_GPIO_Init+0x324>)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800256c:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <HAL_GPIO_Init+0x324>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002590:	4a11      	ldr	r2, [pc, #68]	@ (80025d8 <HAL_GPIO_Init+0x324>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3301      	adds	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b0f      	cmp	r3, #15
 80025a0:	f67f ae96 	bls.w	80022d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3724      	adds	r7, #36	@ 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40013800 	.word	0x40013800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	40020400 	.word	0x40020400
 80025c4:	40020800 	.word	0x40020800
 80025c8:	40020c00 	.word	0x40020c00
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40021400 	.word	0x40021400
 80025d4:	40021800 	.word	0x40021800
 80025d8:	40013c00 	.word	0x40013c00

080025dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]
 80025e8:	4613      	mov	r3, r2
 80025ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025ec:	787b      	ldrb	r3, [r7, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f8:	e003      	b.n	8002602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025fa:	887b      	ldrh	r3, [r7, #2]
 80025fc:	041a      	lsls	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	619a      	str	r2, [r3, #24]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800260e:	b480      	push	{r7}
 8002610:	b085      	sub	sp, #20
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002620:	887a      	ldrh	r2, [r7, #2]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4013      	ands	r3, r2
 8002626:	041a      	lsls	r2, r3, #16
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	43d9      	mvns	r1, r3
 800262c:	887b      	ldrh	r3, [r7, #2]
 800262e:	400b      	ands	r3, r1
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	619a      	str	r2, [r3, #24]
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800264e:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800265a:	4a05      	ldr	r2, [pc, #20]	@ (8002670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fc30 	bl	8001ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40013c00 	.word	0x40013c00

08002674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0cc      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4b68      	ldr	r3, [pc, #416]	@ (800282c <HAL_RCC_ClockConfig+0x1b8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d90c      	bls.n	80026b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b65      	ldr	r3, [pc, #404]	@ (800282c <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b63      	ldr	r3, [pc, #396]	@ (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0b8      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c8:	4b59      	ldr	r3, [pc, #356]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a58      	ldr	r2, [pc, #352]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e0:	4b53      	ldr	r3, [pc, #332]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a52      	ldr	r2, [pc, #328]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4b50      	ldr	r3, [pc, #320]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	494d      	ldr	r1, [pc, #308]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d044      	beq.n	8002794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b47      	ldr	r3, [pc, #284]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d119      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e07f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d003      	beq.n	8002732 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272e:	2b03      	cmp	r3, #3
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	4b3f      	ldr	r3, [pc, #252]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e06f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	4b3b      	ldr	r3, [pc, #236]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e067      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002752:	4b37      	ldr	r3, [pc, #220]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f023 0203 	bic.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4934      	ldr	r1, [pc, #208]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002764:	f7ff fc64 	bl	8002030 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	e00a      	b.n	8002782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7ff fc60 	bl	8002030 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e04f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	4b2b      	ldr	r3, [pc, #172]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 020c 	and.w	r2, r3, #12
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	429a      	cmp	r2, r3
 8002792:	d1eb      	bne.n	800276c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002794:	4b25      	ldr	r3, [pc, #148]	@ (800282c <HAL_RCC_ClockConfig+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d20c      	bcs.n	80027bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b22      	ldr	r3, [pc, #136]	@ (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b20      	ldr	r3, [pc, #128]	@ (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e032      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c8:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4916      	ldr	r1, [pc, #88]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e6:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	490e      	ldr	r1, [pc, #56]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027fa:	f000 f841 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 80027fe:	4602      	mov	r2, r0
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	490a      	ldr	r1, [pc, #40]	@ (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	5ccb      	ldrb	r3, [r1, r3]
 800280e:	fa22 f303 	lsr.w	r3, r2, r3
 8002812:	4a09      	ldr	r2, [pc, #36]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002816:	4b09      	ldr	r3, [pc, #36]	@ (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fbc4 	bl	8001fa8 <HAL_InitTick>

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023c00 	.word	0x40023c00
 8002830:	40023800 	.word	0x40023800
 8002834:	08004864 	.word	0x08004864
 8002838:	20000028 	.word	0x20000028
 800283c:	2000002c 	.word	0x2000002c

08002840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002844:	4b03      	ldr	r3, [pc, #12]	@ (8002854 <HAL_RCC_GetHCLKFreq+0x14>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000028 	.word	0x20000028

08002858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800285c:	f7ff fff0 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b05      	ldr	r3, [pc, #20]	@ (8002878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0b5b      	lsrs	r3, r3, #13
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4903      	ldr	r1, [pc, #12]	@ (800287c <HAL_RCC_GetPCLK2Freq+0x24>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	08004874 	.word	0x08004874

08002880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002884:	b0ae      	sub	sp, #184	@ 0xb8
 8002886:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028a6:	4bcb      	ldr	r3, [pc, #812]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	f200 8206 	bhi.w	8002cc0 <HAL_RCC_GetSysClockFreq+0x440>
 80028b4:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028f1 	.word	0x080028f1
 80028c0:	08002cc1 	.word	0x08002cc1
 80028c4:	08002cc1 	.word	0x08002cc1
 80028c8:	08002cc1 	.word	0x08002cc1
 80028cc:	080028f9 	.word	0x080028f9
 80028d0:	08002cc1 	.word	0x08002cc1
 80028d4:	08002cc1 	.word	0x08002cc1
 80028d8:	08002cc1 	.word	0x08002cc1
 80028dc:	08002901 	.word	0x08002901
 80028e0:	08002cc1 	.word	0x08002cc1
 80028e4:	08002cc1 	.word	0x08002cc1
 80028e8:	08002cc1 	.word	0x08002cc1
 80028ec:	08002af1 	.word	0x08002af1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f0:	4bb9      	ldr	r3, [pc, #740]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x358>)
 80028f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028f6:	e1e7      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028f8:	4bb8      	ldr	r3, [pc, #736]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x35c>)
 80028fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028fe:	e1e3      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002900:	4bb4      	ldr	r3, [pc, #720]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002908:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800290c:	4bb1      	ldr	r3, [pc, #708]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d071      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002918:	4bae      	ldr	r3, [pc, #696]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	099b      	lsrs	r3, r3, #6
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002924:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002928:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800292c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002930:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800293a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800293e:	4622      	mov	r2, r4
 8002940:	462b      	mov	r3, r5
 8002942:	f04f 0000 	mov.w	r0, #0
 8002946:	f04f 0100 	mov.w	r1, #0
 800294a:	0159      	lsls	r1, r3, #5
 800294c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002950:	0150      	lsls	r0, r2, #5
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4621      	mov	r1, r4
 8002958:	1a51      	subs	r1, r2, r1
 800295a:	6439      	str	r1, [r7, #64]	@ 0x40
 800295c:	4629      	mov	r1, r5
 800295e:	eb63 0301 	sbc.w	r3, r3, r1
 8002962:	647b      	str	r3, [r7, #68]	@ 0x44
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002970:	4649      	mov	r1, r9
 8002972:	018b      	lsls	r3, r1, #6
 8002974:	4641      	mov	r1, r8
 8002976:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800297a:	4641      	mov	r1, r8
 800297c:	018a      	lsls	r2, r1, #6
 800297e:	4641      	mov	r1, r8
 8002980:	1a51      	subs	r1, r2, r1
 8002982:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002984:	4649      	mov	r1, r9
 8002986:	eb63 0301 	sbc.w	r3, r3, r1
 800298a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002998:	4649      	mov	r1, r9
 800299a:	00cb      	lsls	r3, r1, #3
 800299c:	4641      	mov	r1, r8
 800299e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029a2:	4641      	mov	r1, r8
 80029a4:	00ca      	lsls	r2, r1, #3
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	4622      	mov	r2, r4
 80029ae:	189b      	adds	r3, r3, r2
 80029b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80029b2:	462b      	mov	r3, r5
 80029b4:	460a      	mov	r2, r1
 80029b6:	eb42 0303 	adc.w	r3, r2, r3
 80029ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029c8:	4629      	mov	r1, r5
 80029ca:	024b      	lsls	r3, r1, #9
 80029cc:	4621      	mov	r1, r4
 80029ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029d2:	4621      	mov	r1, r4
 80029d4:	024a      	lsls	r2, r1, #9
 80029d6:	4610      	mov	r0, r2
 80029d8:	4619      	mov	r1, r3
 80029da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029de:	2200      	movs	r2, #0
 80029e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80029e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80029e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80029ec:	f7fd fc0a 	bl	8000204 <__aeabi_uldivmod>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4613      	mov	r3, r2
 80029f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029fa:	e067      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fc:	4b75      	ldr	r3, [pc, #468]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a08:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002a0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a16:	2300      	movs	r3, #0
 8002a18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a1a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002a1e:	4622      	mov	r2, r4
 8002a20:	462b      	mov	r3, r5
 8002a22:	f04f 0000 	mov.w	r0, #0
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	0159      	lsls	r1, r3, #5
 8002a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a30:	0150      	lsls	r0, r2, #5
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4621      	mov	r1, r4
 8002a38:	1a51      	subs	r1, r2, r1
 8002a3a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002a50:	4649      	mov	r1, r9
 8002a52:	018b      	lsls	r3, r1, #6
 8002a54:	4641      	mov	r1, r8
 8002a56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a5a:	4641      	mov	r1, r8
 8002a5c:	018a      	lsls	r2, r1, #6
 8002a5e:	4641      	mov	r1, r8
 8002a60:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a64:	4649      	mov	r1, r9
 8002a66:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a76:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a7e:	4692      	mov	sl, r2
 8002a80:	469b      	mov	fp, r3
 8002a82:	4623      	mov	r3, r4
 8002a84:	eb1a 0303 	adds.w	r3, sl, r3
 8002a88:	623b      	str	r3, [r7, #32]
 8002a8a:	462b      	mov	r3, r5
 8002a8c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	028b      	lsls	r3, r1, #10
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	028a      	lsls	r2, r1, #10
 8002aac:	4610      	mov	r0, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ab8:	677a      	str	r2, [r7, #116]	@ 0x74
 8002aba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002abe:	f7fd fba1 	bl	8000204 <__aeabi_uldivmod>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002acc:	4b41      	ldr	r3, [pc, #260]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	0c1b      	lsrs	r3, r3, #16
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002ade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ae2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002aee:	e0eb      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af0:	4b38      	ldr	r3, [pc, #224]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002af8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afc:	4b35      	ldr	r3, [pc, #212]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d06b      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b08:	4b32      	ldr	r3, [pc, #200]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	099b      	lsrs	r3, r3, #6
 8002b0e:	2200      	movs	r2, #0
 8002b10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002b24:	4622      	mov	r2, r4
 8002b26:	462b      	mov	r3, r5
 8002b28:	f04f 0000 	mov.w	r0, #0
 8002b2c:	f04f 0100 	mov.w	r1, #0
 8002b30:	0159      	lsls	r1, r3, #5
 8002b32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b36:	0150      	lsls	r0, r2, #5
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	1a51      	subs	r1, r2, r1
 8002b40:	61b9      	str	r1, [r7, #24]
 8002b42:	4629      	mov	r1, r5
 8002b44:	eb63 0301 	sbc.w	r3, r3, r1
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002b56:	4659      	mov	r1, fp
 8002b58:	018b      	lsls	r3, r1, #6
 8002b5a:	4651      	mov	r1, sl
 8002b5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b60:	4651      	mov	r1, sl
 8002b62:	018a      	lsls	r2, r1, #6
 8002b64:	4651      	mov	r1, sl
 8002b66:	ebb2 0801 	subs.w	r8, r2, r1
 8002b6a:	4659      	mov	r1, fp
 8002b6c:	eb63 0901 	sbc.w	r9, r3, r1
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b84:	4690      	mov	r8, r2
 8002b86:	4699      	mov	r9, r3
 8002b88:	4623      	mov	r3, r4
 8002b8a:	eb18 0303 	adds.w	r3, r8, r3
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	462b      	mov	r3, r5
 8002b92:	eb49 0303 	adc.w	r3, r9, r3
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	024b      	lsls	r3, r1, #9
 8002ba8:	4621      	mov	r1, r4
 8002baa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bae:	4621      	mov	r1, r4
 8002bb0:	024a      	lsls	r2, r1, #9
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bba:	2200      	movs	r2, #0
 8002bbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002bbe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002bc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002bc4:	f7fd fb1e 	bl	8000204 <__aeabi_uldivmod>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4613      	mov	r3, r2
 8002bce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bd2:	e065      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x420>
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	00f42400 	.word	0x00f42400
 8002bdc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be0:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	099b      	lsrs	r3, r3, #6
 8002be6:	2200      	movs	r2, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	4611      	mov	r1, r2
 8002bec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bf0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bf6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002bfa:	4642      	mov	r2, r8
 8002bfc:	464b      	mov	r3, r9
 8002bfe:	f04f 0000 	mov.w	r0, #0
 8002c02:	f04f 0100 	mov.w	r1, #0
 8002c06:	0159      	lsls	r1, r3, #5
 8002c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c0c:	0150      	lsls	r0, r2, #5
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4641      	mov	r1, r8
 8002c14:	1a51      	subs	r1, r2, r1
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	4649      	mov	r1, r9
 8002c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002c2c:	4659      	mov	r1, fp
 8002c2e:	018b      	lsls	r3, r1, #6
 8002c30:	4651      	mov	r1, sl
 8002c32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c36:	4651      	mov	r1, sl
 8002c38:	018a      	lsls	r2, r1, #6
 8002c3a:	4651      	mov	r1, sl
 8002c3c:	1a54      	subs	r4, r2, r1
 8002c3e:	4659      	mov	r1, fp
 8002c40:	eb63 0501 	sbc.w	r5, r3, r1
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	00eb      	lsls	r3, r5, #3
 8002c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c52:	00e2      	lsls	r2, r4, #3
 8002c54:	4614      	mov	r4, r2
 8002c56:	461d      	mov	r5, r3
 8002c58:	4643      	mov	r3, r8
 8002c5a:	18e3      	adds	r3, r4, r3
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	464b      	mov	r3, r9
 8002c60:	eb45 0303 	adc.w	r3, r5, r3
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c72:	4629      	mov	r1, r5
 8002c74:	028b      	lsls	r3, r1, #10
 8002c76:	4621      	mov	r1, r4
 8002c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c7c:	4621      	mov	r1, r4
 8002c7e:	028a      	lsls	r2, r1, #10
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c88:	2200      	movs	r2, #0
 8002c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c8c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c92:	f7fd fab7 	bl	8000204 <__aeabi_uldivmod>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	0f1b      	lsrs	r3, r3, #28
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cbe:	e003      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x45c>)
 8002cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	37b8      	adds	r7, #184	@ 0xb8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	00f42400 	.word	0x00f42400

08002ce0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e28d      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8083 	beq.w	8002e06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d00:	4b94      	ldr	r3, [pc, #592]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d019      	beq.n	8002d40 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d0c:	4b91      	ldr	r3, [pc, #580]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d18:	4b8e      	ldr	r3, [pc, #568]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d24:	d00c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b8b      	ldr	r3, [pc, #556]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d112      	bne.n	8002d58 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b88      	ldr	r3, [pc, #544]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d3e:	d10b      	bne.n	8002d58 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	4b84      	ldr	r3, [pc, #528]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05b      	beq.n	8002e04 <HAL_RCC_OscConfig+0x124>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d157      	bne.n	8002e04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e25a      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d60:	d106      	bne.n	8002d70 <HAL_RCC_OscConfig+0x90>
 8002d62:	4b7c      	ldr	r3, [pc, #496]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a7b      	ldr	r2, [pc, #492]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e01d      	b.n	8002dac <HAL_RCC_OscConfig+0xcc>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0xb4>
 8002d7a:	4b76      	ldr	r3, [pc, #472]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a75      	ldr	r2, [pc, #468]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b73      	ldr	r3, [pc, #460]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a72      	ldr	r2, [pc, #456]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0xcc>
 8002d94:	4b6f      	ldr	r3, [pc, #444]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a6e      	ldr	r2, [pc, #440]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b6c      	ldr	r3, [pc, #432]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a6b      	ldr	r2, [pc, #428]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d013      	beq.n	8002ddc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7ff f93c 	bl	8002030 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7ff f938 	bl	8002030 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	@ 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e21f      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b61      	ldr	r3, [pc, #388]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0xdc>
 8002dda:	e014      	b.n	8002e06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7ff f928 	bl	8002030 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de4:	f7ff f924 	bl	8002030 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	@ 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e20b      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	4b57      	ldr	r3, [pc, #348]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x104>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d06f      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e12:	4b50      	ldr	r3, [pc, #320]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d017      	beq.n	8002e4e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e1e:	4b4d      	ldr	r3, [pc, #308]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d105      	bne.n	8002e36 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00b      	beq.n	8002e4e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e36:	4b47      	ldr	r3, [pc, #284]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e3e:	2b0c      	cmp	r3, #12
 8002e40:	d11c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e42:	4b44      	ldr	r3, [pc, #272]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d116      	bne.n	8002e7c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	4b41      	ldr	r3, [pc, #260]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_RCC_OscConfig+0x186>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e1d3      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e66:	4b3b      	ldr	r3, [pc, #236]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4937      	ldr	r1, [pc, #220]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7a:	e03a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e84:	4b34      	ldr	r3, [pc, #208]	@ (8002f58 <HAL_RCC_OscConfig+0x278>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7ff f8d1 	bl	8002030 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e92:	f7ff f8cd 	bl	8002030 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e1b4      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb0:	4b28      	ldr	r3, [pc, #160]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4925      	ldr	r1, [pc, #148]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
 8002ec4:	e015      	b.n	8002ef2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec6:	4b24      	ldr	r3, [pc, #144]	@ (8002f58 <HAL_RCC_OscConfig+0x278>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7ff f8b0 	bl	8002030 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7ff f8ac 	bl	8002030 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e193      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d036      	beq.n	8002f6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f06:	4b15      	ldr	r3, [pc, #84]	@ (8002f5c <HAL_RCC_OscConfig+0x27c>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7ff f890 	bl	8002030 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f14:	f7ff f88c 	bl	8002030 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e173      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f26:	4b0b      	ldr	r3, [pc, #44]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x234>
 8002f32:	e01b      	b.n	8002f6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f34:	4b09      	ldr	r3, [pc, #36]	@ (8002f5c <HAL_RCC_OscConfig+0x27c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7ff f879 	bl	8002030 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f40:	e00e      	b.n	8002f60 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f42:	f7ff f875 	bl	8002030 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d907      	bls.n	8002f60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e15c      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
 8002f54:	40023800 	.word	0x40023800
 8002f58:	42470000 	.word	0x42470000
 8002f5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f60:	4b8a      	ldr	r3, [pc, #552]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8002f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ea      	bne.n	8002f42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8097 	beq.w	80030a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7e:	4b83      	ldr	r3, [pc, #524]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10f      	bne.n	8002faa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	4b7f      	ldr	r3, [pc, #508]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	4a7e      	ldr	r2, [pc, #504]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8002f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f9a:	4b7c      	ldr	r3, [pc, #496]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002faa:	4b79      	ldr	r3, [pc, #484]	@ (8003190 <HAL_RCC_OscConfig+0x4b0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d118      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb6:	4b76      	ldr	r3, [pc, #472]	@ (8003190 <HAL_RCC_OscConfig+0x4b0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a75      	ldr	r2, [pc, #468]	@ (8003190 <HAL_RCC_OscConfig+0x4b0>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc2:	f7ff f835 	bl	8002030 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7ff f831 	bl	8002030 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e118      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8003190 <HAL_RCC_OscConfig+0x4b0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x31e>
 8002ff0:	4b66      	ldr	r3, [pc, #408]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff4:	4a65      	ldr	r2, [pc, #404]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ffc:	e01c      	b.n	8003038 <HAL_RCC_OscConfig+0x358>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b05      	cmp	r3, #5
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x340>
 8003006:	4b61      	ldr	r3, [pc, #388]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300a:	4a60      	ldr	r2, [pc, #384]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 800300c:	f043 0304 	orr.w	r3, r3, #4
 8003010:	6713      	str	r3, [r2, #112]	@ 0x70
 8003012:	4b5e      	ldr	r3, [pc, #376]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003016:	4a5d      	ldr	r2, [pc, #372]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6713      	str	r3, [r2, #112]	@ 0x70
 800301e:	e00b      	b.n	8003038 <HAL_RCC_OscConfig+0x358>
 8003020:	4b5a      	ldr	r3, [pc, #360]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003024:	4a59      	ldr	r2, [pc, #356]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003026:	f023 0301 	bic.w	r3, r3, #1
 800302a:	6713      	str	r3, [r2, #112]	@ 0x70
 800302c:	4b57      	ldr	r3, [pc, #348]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003030:	4a56      	ldr	r2, [pc, #344]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003032:	f023 0304 	bic.w	r3, r3, #4
 8003036:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d015      	beq.n	800306c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fe fff6 	bl	8002030 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	e00a      	b.n	800305e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003048:	f7fe fff2 	bl	8002030 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e0d7      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	4b4b      	ldr	r3, [pc, #300]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0ee      	beq.n	8003048 <HAL_RCC_OscConfig+0x368>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7fe ffe0 	bl	8002030 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003072:	e00a      	b.n	800308a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003074:	f7fe ffdc 	bl	8002030 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e0c1      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308a:	4b40      	ldr	r3, [pc, #256]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1ee      	bne.n	8003074 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003096:	7dfb      	ldrb	r3, [r7, #23]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d105      	bne.n	80030a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309c:	4b3b      	ldr	r3, [pc, #236]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a0:	4a3a      	ldr	r2, [pc, #232]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 80030a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80ad 	beq.w	800320c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030b2:	4b36      	ldr	r3, [pc, #216]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d060      	beq.n	8003180 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d145      	bne.n	8003152 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c6:	4b33      	ldr	r3, [pc, #204]	@ (8003194 <HAL_RCC_OscConfig+0x4b4>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe ffb0 	bl	8002030 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d4:	f7fe ffac 	bl	8002030 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e093      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e6:	4b29      	ldr	r3, [pc, #164]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003100:	019b      	lsls	r3, r3, #6
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003108:	085b      	lsrs	r3, r3, #1
 800310a:	3b01      	subs	r3, #1
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311c:	071b      	lsls	r3, r3, #28
 800311e:	491b      	ldr	r1, [pc, #108]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003124:	4b1b      	ldr	r3, [pc, #108]	@ (8003194 <HAL_RCC_OscConfig+0x4b4>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7fe ff81 	bl	8002030 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003132:	f7fe ff7d 	bl	8002030 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e064      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003144:	4b11      	ldr	r3, [pc, #68]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x452>
 8003150:	e05c      	b.n	800320c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b10      	ldr	r3, [pc, #64]	@ (8003194 <HAL_RCC_OscConfig+0x4b4>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe ff6a 	bl	8002030 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe ff66 	bl	8002030 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e04d      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	4b06      	ldr	r3, [pc, #24]	@ (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x480>
 800317e:	e045      	b.n	800320c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e040      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
 800318c:	40023800 	.word	0x40023800
 8003190:	40007000 	.word	0x40007000
 8003194:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003198:	4b1f      	ldr	r3, [pc, #124]	@ (8003218 <HAL_RCC_OscConfig+0x538>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d030      	beq.n	8003208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d129      	bne.n	8003208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d122      	bne.n	8003208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031c8:	4013      	ands	r3, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d119      	bne.n	8003208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	3b01      	subs	r3, #1
 80031e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d10f      	bne.n	8003208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003202:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800

0800321c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e041      	b.n	80032b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fe fc54 	bl	8001af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f000 fe3c 	bl	8003ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d001      	beq.n	80032d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e046      	b.n	8003362 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a23      	ldr	r2, [pc, #140]	@ (8003370 <HAL_TIM_Base_Start+0xb4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d022      	beq.n	800332c <HAL_TIM_Base_Start+0x70>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ee:	d01d      	beq.n	800332c <HAL_TIM_Base_Start+0x70>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003374 <HAL_TIM_Base_Start+0xb8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d018      	beq.n	800332c <HAL_TIM_Base_Start+0x70>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003378 <HAL_TIM_Base_Start+0xbc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d013      	beq.n	800332c <HAL_TIM_Base_Start+0x70>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1c      	ldr	r2, [pc, #112]	@ (800337c <HAL_TIM_Base_Start+0xc0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00e      	beq.n	800332c <HAL_TIM_Base_Start+0x70>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1b      	ldr	r2, [pc, #108]	@ (8003380 <HAL_TIM_Base_Start+0xc4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d009      	beq.n	800332c <HAL_TIM_Base_Start+0x70>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a19      	ldr	r2, [pc, #100]	@ (8003384 <HAL_TIM_Base_Start+0xc8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_TIM_Base_Start+0x70>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a18      	ldr	r2, [pc, #96]	@ (8003388 <HAL_TIM_Base_Start+0xcc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d111      	bne.n	8003350 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b06      	cmp	r3, #6
 800333c:	d010      	beq.n	8003360 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0201 	orr.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334e:	e007      	b.n	8003360 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40010000 	.word	0x40010000
 8003374:	40000400 	.word	0x40000400
 8003378:	40000800 	.word	0x40000800
 800337c:	40000c00 	.word	0x40000c00
 8003380:	40010400 	.word	0x40010400
 8003384:	40014000 	.word	0x40014000
 8003388:	40001800 	.word	0x40001800

0800338c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d001      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e04e      	b.n	8003442 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a23      	ldr	r2, [pc, #140]	@ (8003450 <HAL_TIM_Base_Start_IT+0xc4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d022      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ce:	d01d      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003454 <HAL_TIM_Base_Start_IT+0xc8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d018      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1e      	ldr	r2, [pc, #120]	@ (8003458 <HAL_TIM_Base_Start_IT+0xcc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d013      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1c      	ldr	r2, [pc, #112]	@ (800345c <HAL_TIM_Base_Start_IT+0xd0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00e      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003460 <HAL_TIM_Base_Start_IT+0xd4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a19      	ldr	r2, [pc, #100]	@ (8003464 <HAL_TIM_Base_Start_IT+0xd8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a18      	ldr	r2, [pc, #96]	@ (8003468 <HAL_TIM_Base_Start_IT+0xdc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d111      	bne.n	8003430 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b06      	cmp	r3, #6
 800341c:	d010      	beq.n	8003440 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342e:	e007      	b.n	8003440 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40010000 	.word	0x40010000
 8003454:	40000400 	.word	0x40000400
 8003458:	40000800 	.word	0x40000800
 800345c:	40000c00 	.word	0x40000c00
 8003460:	40010400 	.word	0x40010400
 8003464:	40014000 	.word	0x40014000
 8003468:	40001800 	.word	0x40001800

0800346c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a1a      	ldr	r2, [r3, #32]
 800348a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10f      	bne.n	80034b4 <HAL_TIM_Base_Stop_IT+0x48>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6a1a      	ldr	r2, [r3, #32]
 800349a:	f240 4344 	movw	r3, #1092	@ 0x444
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_TIM_Base_Stop_IT+0x48>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e041      	b.n	8003560 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f839 	bl	8003568 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3304      	adds	r3, #4
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f000 fce5 	bl	8003ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <HAL_TIM_PWM_Start_IT+0x28>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	bf14      	ite	ne
 800359c:	2301      	movne	r3, #1
 800359e:	2300      	moveq	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	e022      	b.n	80035ea <HAL_TIM_PWM_Start_IT+0x6e>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d109      	bne.n	80035be <HAL_TIM_PWM_Start_IT+0x42>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	e015      	b.n	80035ea <HAL_TIM_PWM_Start_IT+0x6e>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d109      	bne.n	80035d8 <HAL_TIM_PWM_Start_IT+0x5c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e008      	b.n	80035ea <HAL_TIM_PWM_Start_IT+0x6e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e0c7      	b.n	8003782 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_PWM_Start_IT+0x86>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003600:	e013      	b.n	800362a <HAL_TIM_PWM_Start_IT+0xae>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b04      	cmp	r3, #4
 8003606:	d104      	bne.n	8003612 <HAL_TIM_PWM_Start_IT+0x96>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003610:	e00b      	b.n	800362a <HAL_TIM_PWM_Start_IT+0xae>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d104      	bne.n	8003622 <HAL_TIM_PWM_Start_IT+0xa6>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003620:	e003      	b.n	800362a <HAL_TIM_PWM_Start_IT+0xae>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2202      	movs	r2, #2
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b0c      	cmp	r3, #12
 800362e:	d841      	bhi.n	80036b4 <HAL_TIM_PWM_Start_IT+0x138>
 8003630:	a201      	add	r2, pc, #4	@ (adr r2, 8003638 <HAL_TIM_PWM_Start_IT+0xbc>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	0800366d 	.word	0x0800366d
 800363c:	080036b5 	.word	0x080036b5
 8003640:	080036b5 	.word	0x080036b5
 8003644:	080036b5 	.word	0x080036b5
 8003648:	0800367f 	.word	0x0800367f
 800364c:	080036b5 	.word	0x080036b5
 8003650:	080036b5 	.word	0x080036b5
 8003654:	080036b5 	.word	0x080036b5
 8003658:	08003691 	.word	0x08003691
 800365c:	080036b5 	.word	0x080036b5
 8003660:	080036b5 	.word	0x080036b5
 8003664:	080036b5 	.word	0x080036b5
 8003668:	080036a3 	.word	0x080036a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0202 	orr.w	r2, r2, #2
 800367a:	60da      	str	r2, [r3, #12]
      break;
 800367c:	e01d      	b.n	80036ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0204 	orr.w	r2, r2, #4
 800368c:	60da      	str	r2, [r3, #12]
      break;
 800368e:	e014      	b.n	80036ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0208 	orr.w	r2, r2, #8
 800369e:	60da      	str	r2, [r3, #12]
      break;
 80036a0:	e00b      	b.n	80036ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0210 	orr.w	r2, r2, #16
 80036b0:	60da      	str	r2, [r3, #12]
      break;
 80036b2:	e002      	b.n	80036ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
      break;
 80036b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d15f      	bne.n	8003780 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2201      	movs	r2, #1
 80036c6:	6839      	ldr	r1, [r7, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 ff8c 	bl	80045e6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a2e      	ldr	r2, [pc, #184]	@ (800378c <HAL_TIM_PWM_Start_IT+0x210>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_TIM_PWM_Start_IT+0x166>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003790 <HAL_TIM_PWM_Start_IT+0x214>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_PWM_Start_IT+0x16a>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <HAL_TIM_PWM_Start_IT+0x16c>
 80036e6:	2300      	movs	r3, #0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a22      	ldr	r2, [pc, #136]	@ (800378c <HAL_TIM_PWM_Start_IT+0x210>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d022      	beq.n	800374c <HAL_TIM_PWM_Start_IT+0x1d0>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800370e:	d01d      	beq.n	800374c <HAL_TIM_PWM_Start_IT+0x1d0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1f      	ldr	r2, [pc, #124]	@ (8003794 <HAL_TIM_PWM_Start_IT+0x218>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d018      	beq.n	800374c <HAL_TIM_PWM_Start_IT+0x1d0>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1e      	ldr	r2, [pc, #120]	@ (8003798 <HAL_TIM_PWM_Start_IT+0x21c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d013      	beq.n	800374c <HAL_TIM_PWM_Start_IT+0x1d0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1c      	ldr	r2, [pc, #112]	@ (800379c <HAL_TIM_PWM_Start_IT+0x220>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00e      	beq.n	800374c <HAL_TIM_PWM_Start_IT+0x1d0>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a17      	ldr	r2, [pc, #92]	@ (8003790 <HAL_TIM_PWM_Start_IT+0x214>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d009      	beq.n	800374c <HAL_TIM_PWM_Start_IT+0x1d0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a18      	ldr	r2, [pc, #96]	@ (80037a0 <HAL_TIM_PWM_Start_IT+0x224>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <HAL_TIM_PWM_Start_IT+0x1d0>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a17      	ldr	r2, [pc, #92]	@ (80037a4 <HAL_TIM_PWM_Start_IT+0x228>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d111      	bne.n	8003770 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b06      	cmp	r3, #6
 800375c:	d010      	beq.n	8003780 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376e:	e007      	b.n	8003780 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40010000 	.word	0x40010000
 8003790:	40010400 	.word	0x40010400
 8003794:	40000400 	.word	0x40000400
 8003798:	40000800 	.word	0x40000800
 800379c:	40000c00 	.word	0x40000c00
 80037a0:	40014000 	.word	0x40014000
 80037a4:	40001800 	.word	0x40001800

080037a8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b0c      	cmp	r3, #12
 80037ba:	d841      	bhi.n	8003840 <HAL_TIM_PWM_Stop_IT+0x98>
 80037bc:	a201      	add	r2, pc, #4	@ (adr r2, 80037c4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	080037f9 	.word	0x080037f9
 80037c8:	08003841 	.word	0x08003841
 80037cc:	08003841 	.word	0x08003841
 80037d0:	08003841 	.word	0x08003841
 80037d4:	0800380b 	.word	0x0800380b
 80037d8:	08003841 	.word	0x08003841
 80037dc:	08003841 	.word	0x08003841
 80037e0:	08003841 	.word	0x08003841
 80037e4:	0800381d 	.word	0x0800381d
 80037e8:	08003841 	.word	0x08003841
 80037ec:	08003841 	.word	0x08003841
 80037f0:	08003841 	.word	0x08003841
 80037f4:	0800382f 	.word	0x0800382f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0202 	bic.w	r2, r2, #2
 8003806:	60da      	str	r2, [r3, #12]
      break;
 8003808:	e01d      	b.n	8003846 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0204 	bic.w	r2, r2, #4
 8003818:	60da      	str	r2, [r3, #12]
      break;
 800381a:	e014      	b.n	8003846 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0208 	bic.w	r2, r2, #8
 800382a:	60da      	str	r2, [r3, #12]
      break;
 800382c:	e00b      	b.n	8003846 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0210 	bic.w	r2, r2, #16
 800383c:	60da      	str	r2, [r3, #12]
      break;
 800383e:	e002      	b.n	8003846 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      break;
 8003844:	bf00      	nop
  }

  if (status == HAL_OK)
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d161      	bne.n	8003910 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2200      	movs	r2, #0
 8003852:	6839      	ldr	r1, [r7, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f000 fec6 	bl	80045e6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2f      	ldr	r2, [pc, #188]	@ (800391c <HAL_TIM_PWM_Stop_IT+0x174>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <HAL_TIM_PWM_Stop_IT+0xc6>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2d      	ldr	r2, [pc, #180]	@ (8003920 <HAL_TIM_PWM_Stop_IT+0x178>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_TIM_PWM_Stop_IT+0xca>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_TIM_PWM_Stop_IT+0xcc>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d017      	beq.n	80038a8 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6a1a      	ldr	r2, [r3, #32]
 800387e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10f      	bne.n	80038a8 <HAL_TIM_PWM_Stop_IT+0x100>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6a1a      	ldr	r2, [r3, #32]
 800388e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d107      	bne.n	80038a8 <HAL_TIM_PWM_Stop_IT+0x100>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6a1a      	ldr	r2, [r3, #32]
 80038ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10f      	bne.n	80038d8 <HAL_TIM_PWM_Stop_IT+0x130>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6a1a      	ldr	r2, [r3, #32]
 80038be:	f240 4344 	movw	r3, #1092	@ 0x444
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d107      	bne.n	80038d8 <HAL_TIM_PWM_Stop_IT+0x130>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d104      	bne.n	80038e8 <HAL_TIM_PWM_Stop_IT+0x140>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038e6:	e013      	b.n	8003910 <HAL_TIM_PWM_Stop_IT+0x168>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d104      	bne.n	80038f8 <HAL_TIM_PWM_Stop_IT+0x150>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038f6:	e00b      	b.n	8003910 <HAL_TIM_PWM_Stop_IT+0x168>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d104      	bne.n	8003908 <HAL_TIM_PWM_Stop_IT+0x160>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003906:	e003      	b.n	8003910 <HAL_TIM_PWM_Stop_IT+0x168>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003910:	7bfb      	ldrb	r3, [r7, #15]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40010000 	.word	0x40010000
 8003920:	40010400 	.word	0x40010400

08003924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d020      	beq.n	8003988 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01b      	beq.n	8003988 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0202 	mvn.w	r2, #2
 8003958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fa9d 	bl	8003eae <HAL_TIM_IC_CaptureCallback>
 8003974:	e005      	b.n	8003982 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fa8f 	bl	8003e9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7fd f87b 	bl	8000a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d020      	beq.n	80039d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01b      	beq.n	80039d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0204 	mvn.w	r2, #4
 80039a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa77 	bl	8003eae <HAL_TIM_IC_CaptureCallback>
 80039c0:	e005      	b.n	80039ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fa69 	bl	8003e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7fd f855 	bl	8000a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d020      	beq.n	8003a20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01b      	beq.n	8003a20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0208 	mvn.w	r2, #8
 80039f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2204      	movs	r2, #4
 80039f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fa51 	bl	8003eae <HAL_TIM_IC_CaptureCallback>
 8003a0c:	e005      	b.n	8003a1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fa43 	bl	8003e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7fd f82f 	bl	8000a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d020      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01b      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0210 	mvn.w	r2, #16
 8003a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2208      	movs	r2, #8
 8003a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fa2b 	bl	8003eae <HAL_TIM_IC_CaptureCallback>
 8003a58:	e005      	b.n	8003a66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fa1d 	bl	8003e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7fd f809 	bl	8000a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00c      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0201 	mvn.w	r2, #1
 8003a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fc ffda 	bl	8000a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00c      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fe96 	bl	80047e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00c      	beq.n	8003ad8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d007      	beq.n	8003ad8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f9f5 	bl	8003ec2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00c      	beq.n	8003afc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f06f 0220 	mvn.w	r2, #32
 8003af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fe68 	bl	80047cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e0ae      	b.n	8003c80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	f200 809f 	bhi.w	8003c70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b32:	a201      	add	r2, pc, #4	@ (adr r2, 8003b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b6d 	.word	0x08003b6d
 8003b3c:	08003c71 	.word	0x08003c71
 8003b40:	08003c71 	.word	0x08003c71
 8003b44:	08003c71 	.word	0x08003c71
 8003b48:	08003bad 	.word	0x08003bad
 8003b4c:	08003c71 	.word	0x08003c71
 8003b50:	08003c71 	.word	0x08003c71
 8003b54:	08003c71 	.word	0x08003c71
 8003b58:	08003bef 	.word	0x08003bef
 8003b5c:	08003c71 	.word	0x08003c71
 8003b60:	08003c71 	.word	0x08003c71
 8003b64:	08003c71 	.word	0x08003c71
 8003b68:	08003c2f 	.word	0x08003c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fa5c 	bl	8004030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0208 	orr.w	r2, r2, #8
 8003b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0204 	bic.w	r2, r2, #4
 8003b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6999      	ldr	r1, [r3, #24]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	619a      	str	r2, [r3, #24]
      break;
 8003baa:	e064      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 faac 	bl	8004110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6999      	ldr	r1, [r3, #24]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	021a      	lsls	r2, r3, #8
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	619a      	str	r2, [r3, #24]
      break;
 8003bec:	e043      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fb01 	bl	80041fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0208 	orr.w	r2, r2, #8
 8003c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0204 	bic.w	r2, r2, #4
 8003c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69d9      	ldr	r1, [r3, #28]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	61da      	str	r2, [r3, #28]
      break;
 8003c2c:	e023      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fb55 	bl	80042e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69da      	ldr	r2, [r3, #28]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69d9      	ldr	r1, [r3, #28]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	021a      	lsls	r2, r3, #8
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	61da      	str	r2, [r3, #28]
      break;
 8003c6e:	e002      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	75fb      	strb	r3, [r7, #23]
      break;
 8003c74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e0b4      	b.n	8003e0e <HAL_TIM_ConfigClockSource+0x186>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cdc:	d03e      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0xd4>
 8003cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce2:	f200 8087 	bhi.w	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cea:	f000 8086 	beq.w	8003dfa <HAL_TIM_ConfigClockSource+0x172>
 8003cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf2:	d87f      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b70      	cmp	r3, #112	@ 0x70
 8003cf6:	d01a      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0xa6>
 8003cf8:	2b70      	cmp	r3, #112	@ 0x70
 8003cfa:	d87b      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b60      	cmp	r3, #96	@ 0x60
 8003cfe:	d050      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x11a>
 8003d00:	2b60      	cmp	r3, #96	@ 0x60
 8003d02:	d877      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b50      	cmp	r3, #80	@ 0x50
 8003d06:	d03c      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0xfa>
 8003d08:	2b50      	cmp	r3, #80	@ 0x50
 8003d0a:	d873      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b40      	cmp	r3, #64	@ 0x40
 8003d0e:	d058      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x13a>
 8003d10:	2b40      	cmp	r3, #64	@ 0x40
 8003d12:	d86f      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b30      	cmp	r3, #48	@ 0x30
 8003d16:	d064      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d18:	2b30      	cmp	r3, #48	@ 0x30
 8003d1a:	d86b      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d060      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d867      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d05c      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d05a      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d2c:	e062      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d3e:	f000 fc32 	bl	80045a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	609a      	str	r2, [r3, #8]
      break;
 8003d5a:	e04f      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d6c:	f000 fc1b 	bl	80045a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d7e:	609a      	str	r2, [r3, #8]
      break;
 8003d80:	e03c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f000 fb8f 	bl	80044b2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2150      	movs	r1, #80	@ 0x50
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fbe8 	bl	8004570 <TIM_ITRx_SetConfig>
      break;
 8003da0:	e02c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dae:	461a      	mov	r2, r3
 8003db0:	f000 fbae 	bl	8004510 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2160      	movs	r1, #96	@ 0x60
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fbd8 	bl	8004570 <TIM_ITRx_SetConfig>
      break;
 8003dc0:	e01c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f000 fb6f 	bl	80044b2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2140      	movs	r1, #64	@ 0x40
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fbc8 	bl	8004570 <TIM_ITRx_SetConfig>
      break;
 8003de0:	e00c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f000 fbbf 	bl	8004570 <TIM_ITRx_SetConfig>
      break;
 8003df2:	e003      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
      break;
 8003df8:	e000      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_TIM_SlaveConfigSynchro+0x18>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e031      	b.n	8003e92 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003e3e:	6839      	ldr	r1, [r7, #0]
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 faa5 	bl	8004390 <TIM_SlaveTimer_SetConfig>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e018      	b.n	8003e92 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e7e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a46      	ldr	r2, [pc, #280]	@ (8004004 <TIM_Base_SetConfig+0x12c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d013      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef6:	d00f      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a43      	ldr	r2, [pc, #268]	@ (8004008 <TIM_Base_SetConfig+0x130>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00b      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a42      	ldr	r2, [pc, #264]	@ (800400c <TIM_Base_SetConfig+0x134>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d007      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a41      	ldr	r2, [pc, #260]	@ (8004010 <TIM_Base_SetConfig+0x138>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a40      	ldr	r2, [pc, #256]	@ (8004014 <TIM_Base_SetConfig+0x13c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d108      	bne.n	8003f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a35      	ldr	r2, [pc, #212]	@ (8004004 <TIM_Base_SetConfig+0x12c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d02b      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f38:	d027      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a32      	ldr	r2, [pc, #200]	@ (8004008 <TIM_Base_SetConfig+0x130>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d023      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a31      	ldr	r2, [pc, #196]	@ (800400c <TIM_Base_SetConfig+0x134>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01f      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a30      	ldr	r2, [pc, #192]	@ (8004010 <TIM_Base_SetConfig+0x138>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01b      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a2f      	ldr	r2, [pc, #188]	@ (8004014 <TIM_Base_SetConfig+0x13c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d017      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8004018 <TIM_Base_SetConfig+0x140>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d013      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a2d      	ldr	r2, [pc, #180]	@ (800401c <TIM_Base_SetConfig+0x144>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00f      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004020 <TIM_Base_SetConfig+0x148>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a2b      	ldr	r2, [pc, #172]	@ (8004024 <TIM_Base_SetConfig+0x14c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d007      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004028 <TIM_Base_SetConfig+0x150>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d003      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a29      	ldr	r2, [pc, #164]	@ (800402c <TIM_Base_SetConfig+0x154>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d108      	bne.n	8003f9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a10      	ldr	r2, [pc, #64]	@ (8004004 <TIM_Base_SetConfig+0x12c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_Base_SetConfig+0xf8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a12      	ldr	r2, [pc, #72]	@ (8004014 <TIM_Base_SetConfig+0x13c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d103      	bne.n	8003fd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d105      	bne.n	8003ff6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f023 0201 	bic.w	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	611a      	str	r2, [r3, #16]
  }
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010000 	.word	0x40010000
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800
 8004010:	40000c00 	.word	0x40000c00
 8004014:	40010400 	.word	0x40010400
 8004018:	40014000 	.word	0x40014000
 800401c:	40014400 	.word	0x40014400
 8004020:	40014800 	.word	0x40014800
 8004024:	40001800 	.word	0x40001800
 8004028:	40001c00 	.word	0x40001c00
 800402c:	40002000 	.word	0x40002000

08004030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f023 0201 	bic.w	r2, r3, #1
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f023 0302 	bic.w	r3, r3, #2
 8004078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a20      	ldr	r2, [pc, #128]	@ (8004108 <TIM_OC1_SetConfig+0xd8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_OC1_SetConfig+0x64>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a1f      	ldr	r2, [pc, #124]	@ (800410c <TIM_OC1_SetConfig+0xdc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d10c      	bne.n	80040ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f023 0308 	bic.w	r3, r3, #8
 800409a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f023 0304 	bic.w	r3, r3, #4
 80040ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a15      	ldr	r2, [pc, #84]	@ (8004108 <TIM_OC1_SetConfig+0xd8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC1_SetConfig+0x8e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a14      	ldr	r2, [pc, #80]	@ (800410c <TIM_OC1_SetConfig+0xdc>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d111      	bne.n	80040e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	621a      	str	r2, [r3, #32]
}
 80040fc:	bf00      	nop
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	40010000 	.word	0x40010000
 800410c:	40010400 	.word	0x40010400

08004110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f023 0210 	bic.w	r2, r3, #16
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800413e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f023 0320 	bic.w	r3, r3, #32
 800415a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a22      	ldr	r2, [pc, #136]	@ (80041f4 <TIM_OC2_SetConfig+0xe4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <TIM_OC2_SetConfig+0x68>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a21      	ldr	r2, [pc, #132]	@ (80041f8 <TIM_OC2_SetConfig+0xe8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d10d      	bne.n	8004194 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800417e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004192:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a17      	ldr	r2, [pc, #92]	@ (80041f4 <TIM_OC2_SetConfig+0xe4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_OC2_SetConfig+0x94>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a16      	ldr	r2, [pc, #88]	@ (80041f8 <TIM_OC2_SetConfig+0xe8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d113      	bne.n	80041cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40010400 	.word	0x40010400

080041fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800422a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a21      	ldr	r2, [pc, #132]	@ (80042dc <TIM_OC3_SetConfig+0xe0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d003      	beq.n	8004262 <TIM_OC3_SetConfig+0x66>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a20      	ldr	r2, [pc, #128]	@ (80042e0 <TIM_OC3_SetConfig+0xe4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d10d      	bne.n	800427e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800427c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a16      	ldr	r2, [pc, #88]	@ (80042dc <TIM_OC3_SetConfig+0xe0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d003      	beq.n	800428e <TIM_OC3_SetConfig+0x92>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a15      	ldr	r2, [pc, #84]	@ (80042e0 <TIM_OC3_SetConfig+0xe4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d113      	bne.n	80042b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800429c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	621a      	str	r2, [r3, #32]
}
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40010000 	.word	0x40010000
 80042e0:	40010400 	.word	0x40010400

080042e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800431a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800432e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	031b      	lsls	r3, r3, #12
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a12      	ldr	r2, [pc, #72]	@ (8004388 <TIM_OC4_SetConfig+0xa4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <TIM_OC4_SetConfig+0x68>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a11      	ldr	r2, [pc, #68]	@ (800438c <TIM_OC4_SetConfig+0xa8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d109      	bne.n	8004360 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	019b      	lsls	r3, r3, #6
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40010000 	.word	0x40010000
 800438c:	40010400 	.word	0x40010400

08004390 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f023 0307 	bic.w	r3, r3, #7
 80043be:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b70      	cmp	r3, #112	@ 0x70
 80043d8:	d01a      	beq.n	8004410 <TIM_SlaveTimer_SetConfig+0x80>
 80043da:	2b70      	cmp	r3, #112	@ 0x70
 80043dc:	d860      	bhi.n	80044a0 <TIM_SlaveTimer_SetConfig+0x110>
 80043de:	2b60      	cmp	r3, #96	@ 0x60
 80043e0:	d054      	beq.n	800448c <TIM_SlaveTimer_SetConfig+0xfc>
 80043e2:	2b60      	cmp	r3, #96	@ 0x60
 80043e4:	d85c      	bhi.n	80044a0 <TIM_SlaveTimer_SetConfig+0x110>
 80043e6:	2b50      	cmp	r3, #80	@ 0x50
 80043e8:	d046      	beq.n	8004478 <TIM_SlaveTimer_SetConfig+0xe8>
 80043ea:	2b50      	cmp	r3, #80	@ 0x50
 80043ec:	d858      	bhi.n	80044a0 <TIM_SlaveTimer_SetConfig+0x110>
 80043ee:	2b40      	cmp	r3, #64	@ 0x40
 80043f0:	d019      	beq.n	8004426 <TIM_SlaveTimer_SetConfig+0x96>
 80043f2:	2b40      	cmp	r3, #64	@ 0x40
 80043f4:	d854      	bhi.n	80044a0 <TIM_SlaveTimer_SetConfig+0x110>
 80043f6:	2b30      	cmp	r3, #48	@ 0x30
 80043f8:	d055      	beq.n	80044a6 <TIM_SlaveTimer_SetConfig+0x116>
 80043fa:	2b30      	cmp	r3, #48	@ 0x30
 80043fc:	d850      	bhi.n	80044a0 <TIM_SlaveTimer_SetConfig+0x110>
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d051      	beq.n	80044a6 <TIM_SlaveTimer_SetConfig+0x116>
 8004402:	2b20      	cmp	r3, #32
 8004404:	d84c      	bhi.n	80044a0 <TIM_SlaveTimer_SetConfig+0x110>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d04d      	beq.n	80044a6 <TIM_SlaveTimer_SetConfig+0x116>
 800440a:	2b10      	cmp	r3, #16
 800440c:	d04b      	beq.n	80044a6 <TIM_SlaveTimer_SetConfig+0x116>
 800440e:	e047      	b.n	80044a0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004420:	f000 f8c1 	bl	80045a6 <TIM_ETR_SetConfig>
      break;
 8004424:	e040      	b.n	80044a8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b05      	cmp	r3, #5
 800442c:	d101      	bne.n	8004432 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e03b      	b.n	80044aa <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a1a      	ldr	r2, [r3, #32]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0201 	bic.w	r2, r2, #1
 8004448:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004458:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	4313      	orrs	r3, r2
 8004464:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
      break;
 8004476:	e017      	b.n	80044a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004484:	461a      	mov	r2, r3
 8004486:	f000 f814 	bl	80044b2 <TIM_TI1_ConfigInputStage>
      break;
 800448a:	e00d      	b.n	80044a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004498:	461a      	mov	r2, r3
 800449a:	f000 f839 	bl	8004510 <TIM_TI2_ConfigInputStage>
      break;
 800449e:	e003      	b.n	80044a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
      break;
 80044a4:	e000      	b.n	80044a8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80044a6:	bf00      	nop
  }

  return status;
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b087      	sub	sp, #28
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f023 0201 	bic.w	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f023 030a 	bic.w	r3, r3, #10
 80044ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	621a      	str	r2, [r3, #32]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	f023 0210 	bic.w	r2, r3, #16
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800453a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	031b      	lsls	r3, r3, #12
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800454c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	621a      	str	r2, [r3, #32]
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004586:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	f043 0307 	orr.w	r3, r3, #7
 8004592:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	609a      	str	r2, [r3, #8]
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b087      	sub	sp, #28
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	021a      	lsls	r2, r3, #8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	431a      	orrs	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	609a      	str	r2, [r3, #8]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b087      	sub	sp, #28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	2201      	movs	r2, #1
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a1a      	ldr	r2, [r3, #32]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	43db      	mvns	r3, r3
 8004608:	401a      	ands	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a1a      	ldr	r2, [r3, #32]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	fa01 f303 	lsl.w	r3, r1, r3
 800461e:	431a      	orrs	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	621a      	str	r2, [r3, #32]
}
 8004624:	bf00      	nop
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004644:	2302      	movs	r3, #2
 8004646:	e05a      	b.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a21      	ldr	r2, [pc, #132]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d022      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004694:	d01d      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1d      	ldr	r2, [pc, #116]	@ (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d018      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a18      	ldr	r2, [pc, #96]	@ (800471c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a17      	ldr	r2, [pc, #92]	@ (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a15      	ldr	r2, [pc, #84]	@ (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d10c      	bne.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40010000 	.word	0x40010000
 8004710:	40000400 	.word	0x40000400
 8004714:	40000800 	.word	0x40000800
 8004718:	40000c00 	.word	0x40000c00
 800471c:	40010400 	.word	0x40010400
 8004720:	40014000 	.word	0x40014000
 8004724:	40001800 	.word	0x40001800

08004728 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004740:	2302      	movs	r3, #2
 8004742:	e03d      	b.n	80047c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <memset>:
 80047f4:	4402      	add	r2, r0
 80047f6:	4603      	mov	r3, r0
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d100      	bne.n	80047fe <memset+0xa>
 80047fc:	4770      	bx	lr
 80047fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004802:	e7f9      	b.n	80047f8 <memset+0x4>

08004804 <__libc_init_array>:
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	4d0d      	ldr	r5, [pc, #52]	@ (800483c <__libc_init_array+0x38>)
 8004808:	4c0d      	ldr	r4, [pc, #52]	@ (8004840 <__libc_init_array+0x3c>)
 800480a:	1b64      	subs	r4, r4, r5
 800480c:	10a4      	asrs	r4, r4, #2
 800480e:	2600      	movs	r6, #0
 8004810:	42a6      	cmp	r6, r4
 8004812:	d109      	bne.n	8004828 <__libc_init_array+0x24>
 8004814:	4d0b      	ldr	r5, [pc, #44]	@ (8004844 <__libc_init_array+0x40>)
 8004816:	4c0c      	ldr	r4, [pc, #48]	@ (8004848 <__libc_init_array+0x44>)
 8004818:	f000 f818 	bl	800484c <_init>
 800481c:	1b64      	subs	r4, r4, r5
 800481e:	10a4      	asrs	r4, r4, #2
 8004820:	2600      	movs	r6, #0
 8004822:	42a6      	cmp	r6, r4
 8004824:	d105      	bne.n	8004832 <__libc_init_array+0x2e>
 8004826:	bd70      	pop	{r4, r5, r6, pc}
 8004828:	f855 3b04 	ldr.w	r3, [r5], #4
 800482c:	4798      	blx	r3
 800482e:	3601      	adds	r6, #1
 8004830:	e7ee      	b.n	8004810 <__libc_init_array+0xc>
 8004832:	f855 3b04 	ldr.w	r3, [r5], #4
 8004836:	4798      	blx	r3
 8004838:	3601      	adds	r6, #1
 800483a:	e7f2      	b.n	8004822 <__libc_init_array+0x1e>
 800483c:	08004884 	.word	0x08004884
 8004840:	08004884 	.word	0x08004884
 8004844:	08004884 	.word	0x08004884
 8004848:	08004888 	.word	0x08004888

0800484c <_init>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	bf00      	nop
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr

08004858 <_fini>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	bf00      	nop
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr
