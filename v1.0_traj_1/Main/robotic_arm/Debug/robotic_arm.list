
robotic_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800483c  0800483c  0000583c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004854  08004854  00006040  2**0
                  CONTENTS
  4 .ARM          00000008  08004854  08004854  00005854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800485c  0800485c  00006040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800485c  0800485c  0000585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004860  08004860  00005860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  08004864  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000040  080048a4  00006040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  080048a4  000063b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c15f  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002036  00000000  00000000  000121cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00014208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000880  00000000  00000000  00014d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002150b  00000000  00000000  000155a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4f2  00000000  00000000  00036aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb179  00000000  00000000  00044f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110116  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca8  00000000  00000000  0011015c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00112e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000040 	.word	0x20000040
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004824 	.word	0x08004824

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000044 	.word	0x20000044
 8000200:	08004824 	.word	0x08004824

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <end_eff_config>:
 */
#include "end_eff_gpio.h"



void end_eff_config(int time,TIM_HandleTypeDef *htim){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
	if(time<1){ //0
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2b00      	cmp	r3, #0
 8000502:	dc03      	bgt.n	800050c <end_eff_config+0x18>
		HAL_GPIO_TogglePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin);
 8000504:	2104      	movs	r1, #4
 8000506:	4803      	ldr	r0, [pc, #12]	@ (8000514 <end_eff_config+0x20>)
 8000508:	f002 f843 	bl	8002592 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin, GPIO_PIN_SET);

		HAL_TIM_Base_Start_IT(htim);

	}*/
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40020400 	.word	0x40020400

08000518 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{

 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	@ 0x28
 800051c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};

 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	4b66      	ldr	r3, [pc, #408]	@ (80006cc <MX_GPIO_Init+0x1b4>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	4a65      	ldr	r2, [pc, #404]	@ (80006cc <MX_GPIO_Init+0x1b4>)
 8000538:	f043 0304 	orr.w	r3, r3, #4
 800053c:	6313      	str	r3, [r2, #48]	@ 0x30
 800053e:	4b63      	ldr	r3, [pc, #396]	@ (80006cc <MX_GPIO_Init+0x1b4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	4b5f      	ldr	r3, [pc, #380]	@ (80006cc <MX_GPIO_Init+0x1b4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	4a5e      	ldr	r2, [pc, #376]	@ (80006cc <MX_GPIO_Init+0x1b4>)
 8000554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000558:	6313      	str	r3, [r2, #48]	@ 0x30
 800055a:	4b5c      	ldr	r3, [pc, #368]	@ (80006cc <MX_GPIO_Init+0x1b4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	4b58      	ldr	r3, [pc, #352]	@ (80006cc <MX_GPIO_Init+0x1b4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a57      	ldr	r2, [pc, #348]	@ (80006cc <MX_GPIO_Init+0x1b4>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b55      	ldr	r3, [pc, #340]	@ (80006cc <MX_GPIO_Init+0x1b4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]

 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	4b51      	ldr	r3, [pc, #324]	@ (80006cc <MX_GPIO_Init+0x1b4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a50      	ldr	r2, [pc, #320]	@ (80006cc <MX_GPIO_Init+0x1b4>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b4e      	ldr	r3, [pc, #312]	@ (80006cc <MX_GPIO_Init+0x1b4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIRECTION4_Pin|DIRECTION3_Pin, GPIO_PIN_RESET);

 800059e:	2200      	movs	r2, #0
 80005a0:	21e0      	movs	r1, #224	@ 0xe0
 80005a2:	484b      	ldr	r0, [pc, #300]	@ (80006d0 <MX_GPIO_Init+0x1b8>)
 80005a4:	f001 ffdc 	bl	8002560 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION2_GPIO_Port, DIRECTION2_Pin, GPIO_PIN_RESET);

 80005a8:	2200      	movs	r2, #0
 80005aa:	2110      	movs	r1, #16
 80005ac:	4849      	ldr	r0, [pc, #292]	@ (80006d4 <MX_GPIO_Init+0x1bc>)
 80005ae:	f001 ffd7 	bl	8002560 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);

 80005b2:	2201      	movs	r2, #1
 80005b4:	2120      	movs	r1, #32
 80005b6:	4847      	ldr	r0, [pc, #284]	@ (80006d4 <MX_GPIO_Init+0x1bc>)
 80005b8:	f001 ffd2 	bl	8002560 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIRECTION1_Pin|SERVO_en_Pin, GPIO_PIN_RESET);

 80005bc:	2200      	movs	r2, #0
 80005be:	2103      	movs	r1, #3
 80005c0:	4845      	ldr	r0, [pc, #276]	@ (80006d8 <MX_GPIO_Init+0x1c0>)
 80005c2:	f001 ffcd 	bl	8002560 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin, GPIO_PIN_SET);

 80005c6:	2201      	movs	r2, #1
 80005c8:	2104      	movs	r1, #4
 80005ca:	4843      	ldr	r0, [pc, #268]	@ (80006d8 <MX_GPIO_Init+0x1c0>)
 80005cc:	f001 ffc8 	bl	8002560 <HAL_GPIO_WritePin>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISABLE_button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISABLE_button_GPIO_Port, &GPIO_InitStruct);
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]

 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4619      	mov	r1, r3
 80005e6:	483b      	ldr	r0, [pc, #236]	@ (80006d4 <MX_GPIO_Init+0x1bc>)
 80005e8:	f001 fe26 	bl	8002238 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2304      	movs	r3, #4
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005f8:	2303      	movs	r3, #3
 80005fa:	623b      	str	r3, [r7, #32]

 80005fc:	2307      	movs	r3, #7
 80005fe:	627b      	str	r3, [r7, #36]	@ 0x24
  /*Configure GPIO pins : PAPin PAPin */
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	4832      	ldr	r0, [pc, #200]	@ (80006d0 <MX_GPIO_Init+0x1b8>)
 8000608:	f001 fe16 	bl	8002238 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIRECTION4_Pin|DIRECTION3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800060c:	2320      	movs	r3, #32
 800060e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2301      	movs	r3, #1
 8000612:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]

 8000618:	2300      	movs	r3, #0
 800061a:	623b      	str	r3, [r7, #32]
  /*Configure GPIO pin : PtPin */
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4619      	mov	r1, r3
 8000622:	482b      	ldr	r0, [pc, #172]	@ (80006d0 <MX_GPIO_Init+0x1b8>)
 8000624:	f001 fe08 	bl	8002238 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIRECTION2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000628:	23c0      	movs	r3, #192	@ 0xc0
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2301      	movs	r3, #1
 800062e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIRECTION2_GPIO_Port, &GPIO_InitStruct);
 8000630:	2302      	movs	r3, #2
 8000632:	61fb      	str	r3, [r7, #28]

 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
  /*Configure GPIO pin : PtPin */
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	4824      	ldr	r0, [pc, #144]	@ (80006d0 <MX_GPIO_Init+0x1b8>)
 8000640:	f001 fdfa 	bl	8002238 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000644:	2310      	movs	r3, #16
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800064c:	2302      	movs	r3, #2
 800064e:	61fb      	str	r3, [r7, #28]

 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
  /*Configure GPIO pins : PBPin PBPin */
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	481e      	ldr	r0, [pc, #120]	@ (80006d4 <MX_GPIO_Init+0x1bc>)
 800065c:	f001 fdec 	bl	8002238 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIRECTION1_Pin|SERVO_en_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000660:	2320      	movs	r3, #32
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	2301      	movs	r3, #1
 800066a:	61fb      	str	r3, [r7, #28]

 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  /*Configure GPIO pin : PtPin */
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4817      	ldr	r0, [pc, #92]	@ (80006d4 <MX_GPIO_Init+0x1bc>)
 8000678:	f001 fdde 	bl	8002238 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENDEFF_en_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800067c:	2303      	movs	r3, #3
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2301      	movs	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENDEFF_en_GPIO_Port, &GPIO_InitStruct);
 8000684:	2302      	movs	r3, #2
 8000686:	61fb      	str	r3, [r7, #28]

 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  /* EXTI interrupt init*/
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4811      	ldr	r0, [pc, #68]	@ (80006d8 <MX_GPIO_Init+0x1c0>)
 8000694:	f001 fdd0 	bl	8002238 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

 8000698:	2304      	movs	r3, #4
 800069a:	617b      	str	r3, [r7, #20]
}
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]

 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
/* USER CODE BEGIN 2 */
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]

 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MX_GPIO_Init+0x1c0>)
 80006b0:	f001 fdc2 	bl	8002238 <HAL_GPIO_Init>
/* USER CODE END 2 */
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	2028      	movs	r0, #40	@ 0x28
 80006ba:	f001 fd86 	bl	80021ca <HAL_NVIC_SetPriority>
 80006be:	2028      	movs	r0, #40	@ 0x28
 80006c0:	f001 fd9f 	bl	8002202 <HAL_NVIC_EnableIRQ>
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	@ 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020000 	.word	0x40020000
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020400 	.word	0x40020400

080006dc <trapezoidal_func>:





void trapezoidal_func(int k, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *hslave) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]

	int cnt = __HAL_TIM_GET_COUNTER(hslave);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ee:	617b      	str	r3, [r7, #20]
	if (cnt >= hslave->Instance->ARR) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d827      	bhi.n	800074c <trapezoidal_func+0x70>
		if (hslave->Instance == TIM3) {
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a92      	ldr	r2, [pc, #584]	@ (800094c <trapezoidal_func+0x270>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d103      	bne.n	800070e <trapezoidal_func+0x32>
			HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_2);
 8000706:	2104      	movs	r1, #4
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	f003 f839 	bl	8003780 <HAL_TIM_PWM_Stop_IT>
		}

		HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 800070e:	2100      	movs	r1, #0
 8000710:	68b8      	ldr	r0, [r7, #8]
 8000712:	f003 f835 	bl	8003780 <HAL_TIM_PWM_Stop_IT>

		count_rising_edge[k] = 0;
 8000716:	4a8e      	ldr	r2, [pc, #568]	@ (8000950 <trapezoidal_func+0x274>)
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2100      	movs	r1, #0
 800071c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		acc_count[k] = 0;  //debug
 8000720:	4a8c      	ldr	r2, [pc, #560]	@ (8000954 <trapezoidal_func+0x278>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2100      	movs	r1, #0
 8000726:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//dec_count[k] = 0; //debug

		htim->Instance->EGR |= TIM_EGR_UG;
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	695a      	ldr	r2, [r3, #20]
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f042 0201 	orr.w	r2, r2, #1
 8000738:	615a      	str	r2, [r3, #20]
		hslave->Instance->EGR |= TIM_EGR_UG;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	695a      	ldr	r2, [r3, #20]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f042 0201 	orr.w	r2, r2, #1
 8000748:	615a      	str	r2, [r3, #20]
			}

		}
	}

}
 800074a:	e172      	b.n	8000a32 <trapezoidal_func+0x356>
		if (arr_des_a[k] > arr_start[k]) { //arr has to be greater than the arr that starts the motor
 800074c:	4a82      	ldr	r2, [pc, #520]	@ (8000958 <trapezoidal_func+0x27c>)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000754:	4619      	mov	r1, r3
 8000756:	4a81      	ldr	r2, [pc, #516]	@ (800095c <trapezoidal_func+0x280>)
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800075e:	4299      	cmp	r1, r3
 8000760:	d929      	bls.n	80007b6 <trapezoidal_func+0xda>
			__HAL_TIM_SET_AUTORELOAD(htim, arr_start[k]);
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	497d      	ldr	r1, [pc, #500]	@ (800095c <trapezoidal_func+0x280>)
 8000768:	68fa      	ldr	r2, [r7, #12]
 800076a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800076e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000770:	4a7a      	ldr	r2, [pc, #488]	@ (800095c <trapezoidal_func+0x280>)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	60da      	str	r2, [r3, #12]
			hslave->Instance->PSC = arr_start[k];
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4976      	ldr	r1, [pc, #472]	@ (800095c <trapezoidal_func+0x280>)
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000788:	629a      	str	r2, [r3, #40]	@ 0x28
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	0852      	lsrs	r2, r2, #1
 8000796:	635a      	str	r2, [r3, #52]	@ 0x34
			hslave->Instance->EGR |= TIM_EGR_UG;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	695a      	ldr	r2, [r3, #20]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f042 0201 	orr.w	r2, r2, #1
 80007a6:	615a      	str	r2, [r3, #20]
			hslave->Instance->CNT = count_rising_edge[k];
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4968      	ldr	r1, [pc, #416]	@ (8000950 <trapezoidal_func+0x274>)
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007b4:	625a      	str	r2, [r3, #36]	@ 0x24
		if (arr_des_a[k] < (arr_current[k] - acc_rate_a[k])
 80007b6:	4a68      	ldr	r2, [pc, #416]	@ (8000958 <trapezoidal_func+0x27c>)
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007be:	4619      	mov	r1, r3
 80007c0:	4a67      	ldr	r2, [pc, #412]	@ (8000960 <trapezoidal_func+0x284>)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c8:	4618      	mov	r0, r3
 80007ca:	4a66      	ldr	r2, [pc, #408]	@ (8000964 <trapezoidal_func+0x288>)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d2:	1ac3      	subs	r3, r0, r3
 80007d4:	4299      	cmp	r1, r3
 80007d6:	d266      	bcs.n	80008a6 <trapezoidal_func+0x1ca>
				&& cnt <= (int) (n_steps_a[k] * 1 / 2)) { //acceleration phase
 80007d8:	4a63      	ldr	r2, [pc, #396]	@ (8000968 <trapezoidal_func+0x28c>)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e0:	0fda      	lsrs	r2, r3, #31
 80007e2:	4413      	add	r3, r2
 80007e4:	105b      	asrs	r3, r3, #1
 80007e6:	461a      	mov	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	4293      	cmp	r3, r2
 80007ec:	dc5b      	bgt.n	80008a6 <trapezoidal_func+0x1ca>
			arr_current[k] -= acc_rate_a[k];
 80007ee:	4a5c      	ldr	r2, [pc, #368]	@ (8000960 <trapezoidal_func+0x284>)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f6:	4619      	mov	r1, r3
 80007f8:	4a5a      	ldr	r2, [pc, #360]	@ (8000964 <trapezoidal_func+0x288>)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000800:	1acb      	subs	r3, r1, r3
 8000802:	4619      	mov	r1, r3
 8000804:	4a56      	ldr	r2, [pc, #344]	@ (8000960 <trapezoidal_func+0x284>)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (arr_current[k] <= arr_max[k])
 800080c:	4a54      	ldr	r2, [pc, #336]	@ (8000960 <trapezoidal_func+0x284>)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000814:	4619      	mov	r1, r3
 8000816:	4a55      	ldr	r2, [pc, #340]	@ (800096c <trapezoidal_func+0x290>)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081e:	4299      	cmp	r1, r3
 8000820:	d808      	bhi.n	8000834 <trapezoidal_func+0x158>
				arr_current[k] = arr_max[k];
 8000822:	4a52      	ldr	r2, [pc, #328]	@ (800096c <trapezoidal_func+0x290>)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082a:	4619      	mov	r1, r3
 800082c:	4a4c      	ldr	r2, [pc, #304]	@ (8000960 <trapezoidal_func+0x284>)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			__HAL_TIM_SET_AUTORELOAD(htim, arr_current[k]);
 8000834:	4a4a      	ldr	r2, [pc, #296]	@ (8000960 <trapezoidal_func+0x284>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000842:	4a47      	ldr	r2, [pc, #284]	@ (8000960 <trapezoidal_func+0x284>)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084a:	461a      	mov	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	60da      	str	r2, [r3, #12]
			hslave->Instance->PSC = arr_current[k];
 8000850:	4a43      	ldr	r2, [pc, #268]	@ (8000960 <trapezoidal_func+0x284>)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	629a      	str	r2, [r3, #40]	@ 0x28
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	0852      	lsrs	r2, r2, #1
 800086a:	635a      	str	r2, [r3, #52]	@ 0x34
			hslave->Instance->EGR |= TIM_EGR_UG;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	695a      	ldr	r2, [r3, #20]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f042 0201 	orr.w	r2, r2, #1
 800087a:	615a      	str	r2, [r3, #20]
			hslave->Instance->CNT = count_rising_edge[k];
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4933      	ldr	r1, [pc, #204]	@ (8000950 <trapezoidal_func+0x274>)
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000888:	625a      	str	r2, [r3, #36]	@ 0x24
			acc_count[k] += (htim->Instance->PSC + 1); //debug
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	4930      	ldr	r1, [pc, #192]	@ (8000954 <trapezoidal_func+0x278>)
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800089a:	441a      	add	r2, r3
 800089c:	492d      	ldr	r1, [pc, #180]	@ (8000954 <trapezoidal_func+0x278>)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80008a4:	e0c5      	b.n	8000a32 <trapezoidal_func+0x356>
			if (arr_des_a[k] >= (arr_current[k] - acc_rate_a[k])
 80008a6:	4a2c      	ldr	r2, [pc, #176]	@ (8000958 <trapezoidal_func+0x27c>)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ae:	4619      	mov	r1, r3
 80008b0:	4a2b      	ldr	r2, [pc, #172]	@ (8000960 <trapezoidal_func+0x284>)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b8:	4618      	mov	r0, r3
 80008ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000964 <trapezoidal_func+0x288>)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c2:	1ac3      	subs	r3, r0, r3
 80008c4:	4299      	cmp	r1, r3
 80008c6:	d353      	bcc.n	8000970 <trapezoidal_func+0x294>
					&& arr_current[k] > arr_des_a[k]
 80008c8:	4a25      	ldr	r2, [pc, #148]	@ (8000960 <trapezoidal_func+0x284>)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008d0:	4921      	ldr	r1, [pc, #132]	@ (8000958 <trapezoidal_func+0x27c>)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008d8:	429a      	cmp	r2, r3
 80008da:	dd49      	ble.n	8000970 <trapezoidal_func+0x294>
					&& cnt <= (int) (n_steps_a[k] * 1 / 2)) { //constant phase
 80008dc:	4a22      	ldr	r2, [pc, #136]	@ (8000968 <trapezoidal_func+0x28c>)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e4:	0fda      	lsrs	r2, r3, #31
 80008e6:	4413      	add	r3, r2
 80008e8:	105b      	asrs	r3, r3, #1
 80008ea:	461a      	mov	r2, r3
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	4293      	cmp	r3, r2
 80008f0:	dc3e      	bgt.n	8000970 <trapezoidal_func+0x294>
				__HAL_TIM_SET_AUTORELOAD(htim, arr_des_a[k]);
 80008f2:	4a19      	ldr	r2, [pc, #100]	@ (8000958 <trapezoidal_func+0x27c>)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000900:	4a15      	ldr	r2, [pc, #84]	@ (8000958 <trapezoidal_func+0x27c>)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000908:	461a      	mov	r2, r3
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	60da      	str	r2, [r3, #12]
				hslave->Instance->PSC = arr_des_a[k];
 800090e:	4a12      	ldr	r2, [pc, #72]	@ (8000958 <trapezoidal_func+0x27c>)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	629a      	str	r2, [r3, #40]	@ 0x28
				__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	0852      	lsrs	r2, r2, #1
 8000928:	635a      	str	r2, [r3, #52]	@ 0x34
				hslave->Instance->EGR |= TIM_EGR_UG;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	695a      	ldr	r2, [r3, #20]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f042 0201 	orr.w	r2, r2, #1
 8000938:	615a      	str	r2, [r3, #20]
				hslave->Instance->CNT = count_rising_edge[k];
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4904      	ldr	r1, [pc, #16]	@ (8000950 <trapezoidal_func+0x274>)
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000946:	625a      	str	r2, [r3, #36]	@ 0x24
 8000948:	e073      	b.n	8000a32 <trapezoidal_func+0x356>
 800094a:	bf00      	nop
 800094c:	40000400 	.word	0x40000400
 8000950:	2000005c 	.word	0x2000005c
 8000954:	20000068 	.word	0x20000068
 8000958:	20000114 	.word	0x20000114
 800095c:	20000000 	.word	0x20000000
 8000960:	20000024 	.word	0x20000024
 8000964:	20000018 	.word	0x20000018
 8000968:	20000108 	.word	0x20000108
 800096c:	2000000c 	.word	0x2000000c
				if (cnt >= (n_steps_a[k] - acc_count[k])) { //deceleration phase
 8000970:	4a32      	ldr	r2, [pc, #200]	@ (8000a3c <trapezoidal_func+0x360>)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000978:	4619      	mov	r1, r3
 800097a:	4a31      	ldr	r2, [pc, #196]	@ (8000a40 <trapezoidal_func+0x364>)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000982:	1aca      	subs	r2, r1, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	429a      	cmp	r2, r3
 8000988:	d853      	bhi.n	8000a32 <trapezoidal_func+0x356>
					arr_current[k] += acc_rate_a[k];
 800098a:	4a2e      	ldr	r2, [pc, #184]	@ (8000a44 <trapezoidal_func+0x368>)
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000992:	4619      	mov	r1, r3
 8000994:	4a2c      	ldr	r2, [pc, #176]	@ (8000a48 <trapezoidal_func+0x36c>)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099c:	440b      	add	r3, r1
 800099e:	4619      	mov	r1, r3
 80009a0:	4a28      	ldr	r2, [pc, #160]	@ (8000a44 <trapezoidal_func+0x368>)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (arr_current[k] >= (arr_start[k] - acc_rate_a[k]))
 80009a8:	4a26      	ldr	r2, [pc, #152]	@ (8000a44 <trapezoidal_func+0x368>)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	4618      	mov	r0, r3
 80009b2:	4a26      	ldr	r2, [pc, #152]	@ (8000a4c <trapezoidal_func+0x370>)
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ba:	4923      	ldr	r1, [pc, #140]	@ (8000a48 <trapezoidal_func+0x36c>)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	4298      	cmp	r0, r3
 80009c6:	d308      	bcc.n	80009da <trapezoidal_func+0x2fe>
						arr_current[k] = arr_start[k];
 80009c8:	4a20      	ldr	r2, [pc, #128]	@ (8000a4c <trapezoidal_func+0x370>)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	4619      	mov	r1, r3
 80009d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a44 <trapezoidal_func+0x368>)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					__HAL_TIM_SET_AUTORELOAD(htim, arr_current[k]);
 80009da:	4a1a      	ldr	r2, [pc, #104]	@ (8000a44 <trapezoidal_func+0x368>)
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009e8:	4a16      	ldr	r2, [pc, #88]	@ (8000a44 <trapezoidal_func+0x368>)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f0:	461a      	mov	r2, r3
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	60da      	str	r2, [r3, #12]
					hslave->Instance->PSC = arr_current[k];
 80009f6:	4a13      	ldr	r2, [pc, #76]	@ (8000a44 <trapezoidal_func+0x368>)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	629a      	str	r2, [r3, #40]	@ 0x28
					__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	0852      	lsrs	r2, r2, #1
 8000a10:	635a      	str	r2, [r3, #52]	@ 0x34
					hslave->Instance->EGR |= TIM_EGR_UG;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	695a      	ldr	r2, [r3, #20]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f042 0201 	orr.w	r2, r2, #1
 8000a20:	615a      	str	r2, [r3, #20]
					hslave->Instance->CNT = count_rising_edge[k];
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	490a      	ldr	r1, [pc, #40]	@ (8000a50 <trapezoidal_func+0x374>)
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a2e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a30:	e7ff      	b.n	8000a32 <trapezoidal_func+0x356>
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000108 	.word	0x20000108
 8000a40:	20000068 	.word	0x20000068
 8000a44:	20000024 	.word	0x20000024
 8000a48:	20000018 	.word	0x20000018
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	2000005c 	.word	0x2000005c

08000a54 <HAL_TIM_PeriodElapsedCallback>:

//slave callback for trapezoidal profile
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin, GPIO_PIN_RESET); //disable the end_eff
	 HAL_TIM_Base_Stop_IT(htim);

	 }*/

}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a1d      	ldr	r2, [pc, #116]	@ (8000aec <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d10d      	bne.n	8000a96 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>

		count_rising_edge[0] += (htim->Instance->PSC + 1);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a80:	1c5a      	adds	r2, r3, #1
 8000a82:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a19      	ldr	r2, [pc, #100]	@ (8000af0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000a8a:	6013      	str	r3, [r2, #0]
		//arr[0] = -(__HAL_TIM_GET_AUTORELOAD(&htim1));  //debug graph
		trapezoidal_func(0, htim, &htim4); //0,1,2 for the tipology of the timer
 8000a8c:	4a19      	ldr	r2, [pc, #100]	@ (8000af4 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fe23 	bl	80006dc <trapezoidal_func>

	}

	if (htim->Instance == TIM2) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a9e:	d10d      	bne.n	8000abc <HAL_TIM_PWM_PulseFinishedCallback+0x54>

		count_rising_edge[1] += (htim->Instance->PSC + 1);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aa6:	1c5a      	adds	r2, r3, #1
 8000aa8:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a10      	ldr	r2, [pc, #64]	@ (8000af0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000ab0:	6053      	str	r3, [r2, #4]
		//arr[1] = -(__HAL_TIM_GET_AUTORELOAD(htim));  //debug graph
		trapezoidal_func(1, htim, &htim3); //0,1,2 for the tipology of the timer
 8000ab2:	4a11      	ldr	r2, [pc, #68]	@ (8000af8 <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f7ff fe10 	bl	80006dc <trapezoidal_func>

	}

	if (htim->Instance == TIM8) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0e      	ldr	r2, [pc, #56]	@ (8000afc <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d10d      	bne.n	8000ae2 <HAL_TIM_PWM_PulseFinishedCallback+0x7a>

		count_rising_edge[2] += (htim->Instance->PSC + 1);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a06      	ldr	r2, [pc, #24]	@ (8000af0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000ad6:	6093      	str	r3, [r2, #8]
		//arr[2] = -(__HAL_TIM_GET_AUTORELOAD(htim));  //debug graph
		trapezoidal_func(2, htim, &htim5); //0,1,2 for the tipology of the timer
 8000ad8:	4a09      	ldr	r2, [pc, #36]	@ (8000b00 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	2002      	movs	r0, #2
 8000ade:	f7ff fdfd 	bl	80006dc <trapezoidal_func>

	}
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40010000 	.word	0x40010000
 8000af0:	2000005c 	.word	0x2000005c
 8000af4:	20000200 	.word	0x20000200
 8000af8:	200001b8 	.word	0x200001b8
 8000afc:	40010400 	.word	0x40010400
 8000b00:	20000248 	.word	0x20000248

08000b04 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b0a:	f001 f9ed 	bl	8001ee8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b0e:	f000 f92d 	bl	8000d6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b12:	f7ff fd01 	bl	8000518 <MX_GPIO_Init>
	MX_TIM3_Init();
 8000b16:	f000 fd25 	bl	8001564 <MX_TIM3_Init>
	MX_TIM5_Init();
 8000b1a:	f000 fdeb 	bl	80016f4 <MX_TIM5_Init>
	MX_TIM1_Init();
 8000b1e:	f000 fbfd 	bl	800131c <MX_TIM1_Init>
	MX_TIM2_Init();
 8000b22:	f000 fc9d 	bl	8001460 <MX_TIM2_Init>
	MX_TIM4_Init();
 8000b26:	f000 fd81 	bl	800162c <MX_TIM4_Init>
	MX_TIM8_Init();
 8000b2a:	f000 fe7d 	bl	8001828 <MX_TIM8_Init>
	MX_TIM10_Init();
 8000b2e:	f000 ff1d 	bl	800196c <MX_TIM10_Init>
	MX_TIM11_Init();
 8000b32:	f000 ff69 	bl	8001a08 <MX_TIM11_Init>
	MX_TIM6_Init();
 8000b36:	f000 fe41 	bl	80017bc <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim4); //1st joint
 8000b3a:	4870      	ldr	r0, [pc, #448]	@ (8000cfc <main+0x1f8>)
 8000b3c:	f002 fb80 	bl	8003240 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3); //2nd joint
 8000b40:	486f      	ldr	r0, [pc, #444]	@ (8000d00 <main+0x1fc>)
 8000b42:	f002 fb7d 	bl	8003240 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5); //3rd joint
 8000b46:	486f      	ldr	r0, [pc, #444]	@ (8000d04 <main+0x200>)
 8000b48:	f002 fb7a 	bl	8003240 <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET); //ENABLE
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2120      	movs	r1, #32
 8000b50:	486d      	ldr	r0, [pc, #436]	@ (8000d08 <main+0x204>)
 8000b52:	f001 fd05 	bl	8002560 <HAL_GPIO_WritePin>
	/*
	 stepper_init(obj, resol, microstep, enable_port, direction_port, timer slave, timerpwm*/
	stepper_init(&stp1, &htim1, &htim4, 1.8, 4 * 4.27, DIRECTION1_GPIO_Port,
 8000b56:	2301      	movs	r3, #1
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	4b6c      	ldr	r3, [pc, #432]	@ (8000d0c <main+0x208>)
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2311      	movs	r3, #17
 8000b60:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8000d10 <main+0x20c>
 8000b64:	4a65      	ldr	r2, [pc, #404]	@ (8000cfc <main+0x1f8>)
 8000b66:	496b      	ldr	r1, [pc, #428]	@ (8000d14 <main+0x210>)
 8000b68:	486b      	ldr	r0, [pc, #428]	@ (8000d18 <main+0x214>)
 8000b6a:	f000 f9ef 	bl	8000f4c <stepper_init>
	DIRECTION1_Pin);
	stepper_init(&stp2, &htim2, &htim3, 1.8, 4 * 6, DIRECTION2_GPIO_Port,
 8000b6e:	2310      	movs	r3, #16
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	4b65      	ldr	r3, [pc, #404]	@ (8000d08 <main+0x204>)
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2318      	movs	r3, #24
 8000b78:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8000d10 <main+0x20c>
 8000b7c:	4a60      	ldr	r2, [pc, #384]	@ (8000d00 <main+0x1fc>)
 8000b7e:	4967      	ldr	r1, [pc, #412]	@ (8000d1c <main+0x218>)
 8000b80:	4867      	ldr	r0, [pc, #412]	@ (8000d20 <main+0x21c>)
 8000b82:	f000 f9e3 	bl	8000f4c <stepper_init>
	DIRECTION2_Pin);
	stepper_init(&stp3, &htim2, &htim3, 1.8, 4 * 6, DIRECTION3_GPIO_Port,
 8000b86:	2380      	movs	r3, #128	@ 0x80
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	4b66      	ldr	r3, [pc, #408]	@ (8000d24 <main+0x220>)
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2318      	movs	r3, #24
 8000b90:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8000d10 <main+0x20c>
 8000b94:	4a5a      	ldr	r2, [pc, #360]	@ (8000d00 <main+0x1fc>)
 8000b96:	4961      	ldr	r1, [pc, #388]	@ (8000d1c <main+0x218>)
 8000b98:	4863      	ldr	r0, [pc, #396]	@ (8000d28 <main+0x224>)
 8000b9a:	f000 f9d7 	bl	8000f4c <stepper_init>
	DIRECTION3_Pin);
	stepper_init(&stp4, &htim8, &htim5, 1.8, 8 * 4.9, DIRECTION4_GPIO_Port,
 8000b9e:	2340      	movs	r3, #64	@ 0x40
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <main+0x220>)
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2327      	movs	r3, #39	@ 0x27
 8000ba8:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8000d10 <main+0x20c>
 8000bac:	4a55      	ldr	r2, [pc, #340]	@ (8000d04 <main+0x200>)
 8000bae:	495f      	ldr	r1, [pc, #380]	@ (8000d2c <main+0x228>)
 8000bb0:	485f      	ldr	r0, [pc, #380]	@ (8000d30 <main+0x22c>)
 8000bb2:	f000 f9cb 	bl	8000f4c <stepper_init>
	DIRECTION4_Pin);
	servo_init(&srv1, &htim10); //default position
 8000bb6:	495f      	ldr	r1, [pc, #380]	@ (8000d34 <main+0x230>)
 8000bb8:	485f      	ldr	r0, [pc, #380]	@ (8000d38 <main+0x234>)
 8000bba:	f000 f94b 	bl	8000e54 <servo_init>
	servo_init(&srv2, &htim11); //default position
 8000bbe:	495f      	ldr	r1, [pc, #380]	@ (8000d3c <main+0x238>)
 8000bc0:	485f      	ldr	r0, [pc, #380]	@ (8000d40 <main+0x23c>)
 8000bc2:	f000 f947 	bl	8000e54 <servo_init>

	for (int i = 0; i < 2; i++) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	e090      	b.n	8000cee <main+0x1ea>

		//FIRST MOVEMENT
		stepper_move(&stp1, COUNTERCLOCKWISE, 36.5, 40);
 8000bcc:	eddf 0a5d 	vldr	s1, [pc, #372]	@ 8000d44 <main+0x240>
 8000bd0:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 8000d48 <main+0x244>
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4850      	ldr	r0, [pc, #320]	@ (8000d18 <main+0x214>)
 8000bd8:	f000 f9f2 	bl	8000fc0 <stepper_move>

		stepper_move(&stp2, CLOCKWISE, 132.5, 10);
 8000bdc:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000be0:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8000d4c <main+0x248>
 8000be4:	2101      	movs	r1, #1
 8000be6:	484e      	ldr	r0, [pc, #312]	@ (8000d20 <main+0x21c>)
 8000be8:	f000 f9ea 	bl	8000fc0 <stepper_move>
		stepper_move(&stp3, COUNTERCLOCKWISE, 132.5, 10);
 8000bec:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000bf0:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8000d4c <main+0x248>
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	484c      	ldr	r0, [pc, #304]	@ (8000d28 <main+0x224>)
 8000bf8:	f000 f9e2 	bl	8000fc0 <stepper_move>

		stepper_move(&stp4, CLOCKWISE, 40, 40);
 8000bfc:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8000d44 <main+0x240>
 8000c00:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 8000d44 <main+0x240>
 8000c04:	2101      	movs	r1, #1
 8000c06:	484a      	ldr	r0, [pc, #296]	@ (8000d30 <main+0x22c>)
 8000c08:	f000 f9da 	bl	8000fc0 <stepper_move>

		servo_move(&srv2, -15);
 8000c0c:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8000c10:	484b      	ldr	r0, [pc, #300]	@ (8000d40 <main+0x23c>)
 8000c12:	f000 f947 	bl	8000ea4 <servo_move>
		end_eff_config(0, &htim6);
 8000c16:	494e      	ldr	r1, [pc, #312]	@ (8000d50 <main+0x24c>)
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fc6b 	bl	80004f4 <end_eff_config>

		HAL_Delay(3500);
 8000c1e:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8000c22:	f001 f9d3 	bl	8001fcc <HAL_Delay>

		//SECOND MOVEMENT

		stepper_move(&stp2, COUNTERCLOCKWISE, 75, 10);
 8000c26:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000c2a:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8000d54 <main+0x250>
 8000c2e:	2100      	movs	r1, #0
 8000c30:	483b      	ldr	r0, [pc, #236]	@ (8000d20 <main+0x21c>)
 8000c32:	f000 f9c5 	bl	8000fc0 <stepper_move>
		stepper_move(&stp3, CLOCKWISE, 75, 10);
 8000c36:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000c3a:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8000d54 <main+0x250>
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4839      	ldr	r0, [pc, #228]	@ (8000d28 <main+0x224>)
 8000c42:	f000 f9bd 	bl	8000fc0 <stepper_move>

		HAL_Delay(2000);
 8000c46:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c4a:	f001 f9bf 	bl	8001fcc <HAL_Delay>

		//third mov

		stepper_move(&stp1, CLOCKWISE, 70, 70);
 8000c4e:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8000d58 <main+0x254>
 8000c52:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8000d58 <main+0x254>
 8000c56:	2101      	movs	r1, #1
 8000c58:	482f      	ldr	r0, [pc, #188]	@ (8000d18 <main+0x214>)
 8000c5a:	f000 f9b1 	bl	8000fc0 <stepper_move>
		HAL_Delay(3900);
 8000c5e:	f640 703c 	movw	r0, #3900	@ 0xf3c
 8000c62:	f001 f9b3 	bl	8001fcc <HAL_Delay>

		//4 MOV

		stepper_move(&stp2, CLOCKWISE, 45, 10);
 8000c66:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000c6a:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8000d5c <main+0x258>
 8000c6e:	2101      	movs	r1, #1
 8000c70:	482b      	ldr	r0, [pc, #172]	@ (8000d20 <main+0x21c>)
 8000c72:	f000 f9a5 	bl	8000fc0 <stepper_move>
		stepper_move(&stp3, COUNTERCLOCKWISE, 45, 10);
 8000c76:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000c7a:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8000d5c <main+0x258>
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4829      	ldr	r0, [pc, #164]	@ (8000d28 <main+0x224>)
 8000c82:	f000 f99d 	bl	8000fc0 <stepper_move>

		//stepper_move(&stp4, CLOCKWISE, 8, 8);

		servo_move(&srv2, 0);
 8000c86:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8000d60 <main+0x25c>
 8000c8a:	482d      	ldr	r0, [pc, #180]	@ (8000d40 <main+0x23c>)
 8000c8c:	f000 f90a 	bl	8000ea4 <servo_move>

		HAL_Delay(4000);
 8000c90:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000c94:	f001 f99a 	bl	8001fcc <HAL_Delay>

		end_eff_config(0, &htim6);
 8000c98:	492d      	ldr	r1, [pc, #180]	@ (8000d50 <main+0x24c>)
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fc2a 	bl	80004f4 <end_eff_config>

		stepper_move(&stp2, COUNTERCLOCKWISE, 104.5, 10);
 8000ca0:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000ca4:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8000d64 <main+0x260>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	481d      	ldr	r0, [pc, #116]	@ (8000d20 <main+0x21c>)
 8000cac:	f000 f988 	bl	8000fc0 <stepper_move>
		stepper_move(&stp3, CLOCKWISE, 104.5, 10);
 8000cb0:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000cb4:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8000d64 <main+0x260>
 8000cb8:	2101      	movs	r1, #1
 8000cba:	481b      	ldr	r0, [pc, #108]	@ (8000d28 <main+0x224>)
 8000cbc:	f000 f980 	bl	8000fc0 <stepper_move>

		stepper_move(&stp1, COUNTERCLOCKWISE, 33.5, 40);
 8000cc0:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8000d44 <main+0x240>
 8000cc4:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8000d68 <main+0x264>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4813      	ldr	r0, [pc, #76]	@ (8000d18 <main+0x214>)
 8000ccc:	f000 f978 	bl	8000fc0 <stepper_move>

		stepper_move(&stp4, COUNTERCLOCKWISE, 40, 40);
 8000cd0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8000d44 <main+0x240>
 8000cd4:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8000d44 <main+0x240>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4815      	ldr	r0, [pc, #84]	@ (8000d30 <main+0x22c>)
 8000cdc:	f000 f970 	bl	8000fc0 <stepper_move>

		HAL_Delay(3000);
 8000ce0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ce4:	f001 f972 	bl	8001fcc <HAL_Delay>
	for (int i = 0; i < 2; i++) {
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3301      	adds	r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	f77f af6b 	ble.w	8000bcc <main+0xc8>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8000cf6:	bf00      	nop
 8000cf8:	e7fd      	b.n	8000cf6 <main+0x1f2>
 8000cfa:	bf00      	nop
 8000cfc:	20000200 	.word	0x20000200
 8000d00:	200001b8 	.word	0x200001b8
 8000d04:	20000248 	.word	0x20000248
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	3fe66666 	.word	0x3fe66666
 8000d14:	20000128 	.word	0x20000128
 8000d18:	20000074 	.word	0x20000074
 8000d1c:	20000170 	.word	0x20000170
 8000d20:	20000094 	.word	0x20000094
 8000d24:	40020000 	.word	0x40020000
 8000d28:	200000b4 	.word	0x200000b4
 8000d2c:	200002d8 	.word	0x200002d8
 8000d30:	200000d4 	.word	0x200000d4
 8000d34:	20000320 	.word	0x20000320
 8000d38:	200000f4 	.word	0x200000f4
 8000d3c:	20000368 	.word	0x20000368
 8000d40:	200000fc 	.word	0x200000fc
 8000d44:	42200000 	.word	0x42200000
 8000d48:	42120000 	.word	0x42120000
 8000d4c:	43048000 	.word	0x43048000
 8000d50:	20000290 	.word	0x20000290
 8000d54:	42960000 	.word	0x42960000
 8000d58:	428c0000 	.word	0x428c0000
 8000d5c:	42340000 	.word	0x42340000
 8000d60:	00000000 	.word	0x00000000
 8000d64:	42d10000 	.word	0x42d10000
 8000d68:	42060000 	.word	0x42060000

08000d6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	@ 0x50
 8000d70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	2234      	movs	r2, #52	@ 0x34
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f003 fd26 	bl	80047cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <SystemClock_Config+0xd4>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	4a29      	ldr	r2, [pc, #164]	@ (8000e40 <SystemClock_Config+0xd4>)
 8000d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da0:	4b27      	ldr	r3, [pc, #156]	@ (8000e40 <SystemClock_Config+0xd4>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dac:	2300      	movs	r3, #0
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	4b24      	ldr	r3, [pc, #144]	@ (8000e44 <SystemClock_Config+0xd8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000db8:	4a22      	ldr	r2, [pc, #136]	@ (8000e44 <SystemClock_Config+0xd8>)
 8000dba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b20      	ldr	r3, [pc, #128]	@ (8000e44 <SystemClock_Config+0xd8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dd4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dde:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000de0:	2304      	movs	r3, #4
 8000de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 84;
 8000de4:	2354      	movs	r3, #84	@ 0x54
 8000de6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 ff33 	bl	8002c64 <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x9c>
		Error_Handler();
 8000e04:	f000 f820 	bl	8000e48 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e08:	230f      	movs	r3, #15
 8000e0a:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e18:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e1e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	2102      	movs	r1, #2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fbe6 	bl	80025f8 <HAL_RCC_ClockConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0xca>
		Error_Handler();
 8000e32:	f000 f809 	bl	8000e48 <Error_Handler>
	}
}
 8000e36:	bf00      	nop
 8000e38:	3750      	adds	r7, #80	@ 0x50
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40007000 	.word	0x40007000

08000e48 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <Error_Handler+0x8>

08000e54 <servo_init>:
 *  Created on: Mar 2, 2025
 *      Author: david
 */
#include <servo.h>

void servo_init(servo_obj *srv, TIM_HandleTypeDef *pwm_timer) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	srv->pwm_timer = pwm_timer;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	601a      	str	r2, [r3, #0]
	srv->unit = (CCR_MAX - CCR_MIN) / (2 * ANGLE_MAX);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea0 <servo_init+0x4c>)
 8000e68:	605a      	str	r2, [r3, #4]
	//pwm=50hz
	srv->pwm_timer->Instance->PSC = 27;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	221b      	movs	r2, #27
 8000e72:	629a      	str	r2, [r3, #40]	@ 0x28
	srv->pwm_timer->Instance->ARR = 60000 - 1;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	__HAL_TIM_SET_COMPARE(srv->pwm_timer, TIM_CHANNEL_1,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f241 1293 	movw	r2, #4499	@ 0x1193
 8000e8a:	635a      	str	r2, [r3, #52]	@ 0x34
			(int) ((CCR_MAX + CCR_MIN) / 2));
	HAL_TIM_PWM_Start(srv->pwm_timer, TIM_CHANNEL_1); //START PWM)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 fa96 	bl	80033c4 <HAL_TIM_PWM_Start>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	42055555 	.word	0x42055555

08000ea4 <servo_move>:
int ccr; //debug

void servo_move(servo_obj *srv, float position) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	ed87 0a00 	vstr	s0, [r7]

	//saturation
	if (position > ANGLE_MAX)
 8000eb0:	edd7 7a00 	vldr	s15, [r7]
 8000eb4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000f38 <servo_move+0x94>
 8000eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec0:	dd01      	ble.n	8000ec6 <servo_move+0x22>
		position = ANGLE_MAX; //max angle position available
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <servo_move+0x98>)
 8000ec4:	603b      	str	r3, [r7, #0]
	if (position < -ANGLE_MAX)
 8000ec6:	edd7 7a00 	vldr	s15, [r7]
 8000eca:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000f40 <servo_move+0x9c>
 8000ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed6:	d501      	bpl.n	8000edc <servo_move+0x38>
		position = -ANGLE_MAX; //min angle position available
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <servo_move+0xa0>)
 8000eda:	603b      	str	r3, [r7, #0]

	//compute ccr value
	if (position != 0)
 8000edc:	edd7 7a00 	vldr	s15, [r7]
 8000ee0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee8:	d010      	beq.n	8000f0c <servo_move+0x68>
		ccr = (int) ((CCR_MAX + CCR_MIN) / 2) + (int) (srv->unit * position);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ef0:	edd7 7a00 	vldr	s15, [r7]
 8000ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000efc:	ee17 3a90 	vmov	r3, s15
 8000f00:	f503 538c 	add.w	r3, r3, #4480	@ 0x1180
 8000f04:	3313      	adds	r3, #19
 8000f06:	4a10      	ldr	r2, [pc, #64]	@ (8000f48 <servo_move+0xa4>)
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e003      	b.n	8000f14 <servo_move+0x70>

	else {  //position==0
		ccr = (int) ((CCR_MAX + CCR_MIN) / 2);
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <servo_move+0xa4>)
 8000f0e:	f241 1293 	movw	r2, #4499	@ 0x1193
 8000f12:	601a      	str	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(srv->pwm_timer, TIM_CHANNEL_1, ccr); //deg=0
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <servo_move+0xa4>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	635a      	str	r2, [r3, #52]	@ 0x34
	srv->pwm_timer->Instance->EGR = TIM_EGR_UG; //not relevant in this case
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2201      	movs	r2, #1
 8000f28:	615a      	str	r2, [r3, #20]

}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	42b40000 	.word	0x42b40000
 8000f3c:	42b40000 	.word	0x42b40000
 8000f40:	c2b40000 	.word	0xc2b40000
 8000f44:	c2b40000 	.word	0xc2b40000
 8000f48:	20000104 	.word	0x20000104

08000f4c <stepper_init>:

//definisco la struct stepper con i seguenti parametri
void stepper_init(stepper_obj *stp, TIM_HandleTypeDef *pwm_timer,
		TIM_HandleTypeDef *position_timer, float stepper_resolution,
		uint16_t microstep, GPIO_TypeDef *direction_port,
		uint16_t direction_pin) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6178      	str	r0, [r7, #20]
 8000f54:	6139      	str	r1, [r7, #16]
 8000f56:	60fa      	str	r2, [r7, #12]
 8000f58:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f5c:	80fb      	strh	r3, [r7, #6]

	stp->position_timer = position_timer;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	605a      	str	r2, [r3, #4]
	stp->pwm_timer = pwm_timer;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	601a      	str	r2, [r3, #0]

	stp->direction_port = direction_port;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	6a3a      	ldr	r2, [r7, #32]
 8000f6e:	609a      	str	r2, [r3, #8]
	stp->direction_pin = direction_pin;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f74:	819a      	strh	r2, [r3, #12]

	stp->stepper_resolution = stepper_resolution;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	611a      	str	r2, [r3, #16]
	stp->microstep = microstep;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	88fa      	ldrh	r2, [r7, #6]
 8000f80:	831a      	strh	r2, [r3, #24]
	stp->step_per_rev = 360.0f / stepper_resolution; // 360°/resolution
 8000f82:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000fbc <stepper_init+0x70>
 8000f86:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	edc3 7a05 	vstr	s15, [r3, #20]
	stp->step_scale = stp->step_per_rev * microstep;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8000fae:	bf00      	nop
 8000fb0:	371c      	adds	r7, #28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	43b40000 	.word	0x43b40000

08000fc0 <stepper_move>:

float freq_des_steps; //DEBUG
static int arr_des = 20000;  //random value

void stepper_move(stepper_obj *stp, direction_str direction, float position,
		float freq_desired) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fce:	edc7 0a00 	vstr	s1, [r7]
 8000fd2:	72fb      	strb	r3, [r7, #11]

	int i = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
	int n_steps = stp->step_scale * position / 360.0f; //[n_steps]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	ed93 7a07 	vldr	s14, [r3, #28]
 8000fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80011a4 <stepper_move+0x1e4>
 8000fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff2:	ee17 3a90 	vmov	r3, s15
 8000ff6:	613b      	str	r3, [r7, #16]

	freq_des_steps = stp->step_scale * freq_desired / 360.0f; //[n_steps/s]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	ed93 7a07 	vldr	s14, [r3, #28]
 8000ffe:	edd7 7a00 	vldr	s15, [r7]
 8001002:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001006:	eddf 6a67 	vldr	s13, [pc, #412]	@ 80011a4 <stepper_move+0x1e4>
 800100a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800100e:	4b66      	ldr	r3, [pc, #408]	@ (80011a8 <stepper_move+0x1e8>)
 8001010:	edc3 7a00 	vstr	s15, [r3]

	arr_des = (HAL_RCC_GetPCLK2Freq() * 2 / freq_des_steps)
 8001014:	f001 fbe2 	bl	80027dc <HAL_RCC_GetPCLK2Freq>
 8001018:	4603      	mov	r3, r0
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001024:	4b60      	ldr	r3, [pc, #384]	@ (80011a8 <stepper_move+0x1e8>)
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	eec7 6a27 	vdiv.f32	s13, s14, s15
			/ (stp->pwm_timer->Instance->PSC + 1) - 1;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001036:	3301      	adds	r3, #1
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001044:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001048:	ee77 7ac7 	vsub.f32	s15, s15, s14
	arr_des = (HAL_RCC_GetPCLK2Freq() * 2 / freq_des_steps)
 800104c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001050:	ee17 2a90 	vmov	r2, s15
 8001054:	4b55      	ldr	r3, [pc, #340]	@ (80011ac <stepper_move+0x1ec>)
 8001056:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(stp->direction_port, stp->direction_pin, direction); //DIRECTION
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6898      	ldr	r0, [r3, #8]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	899b      	ldrh	r3, [r3, #12]
 8001060:	7afa      	ldrb	r2, [r7, #11]
 8001062:	4619      	mov	r1, r3
 8001064:	f001 fa7c 	bl	8002560 <HAL_GPIO_WritePin>

	if (stp->pwm_timer->Instance != TIM2) {
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001072:	d028      	beq.n	80010c6 <stepper_move+0x106>

		//reset_timers(stp);

		__HAL_TIM_SET_AUTORELOAD(stp->position_timer,
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800107c:	3301      	adds	r3, #1
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	fb03 f202 	mul.w	r2, r3, r2
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3a01      	subs	r2, #1
 800108c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001096:	3301      	adds	r3, #1
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	fb03 f202 	mul.w	r2, r3, r2
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	3a01      	subs	r2, #1
 80010a4:	60da      	str	r2, [r3, #12]
				(n_steps * (stp->pwm_timer->Instance->PSC + 1)) - 1);
		__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_1,
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0852      	lsrs	r2, r2, #1
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);

		HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_1); //START PWM
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fa48 	bl	8003554 <HAL_TIM_PWM_Start_IT>
 80010c4:	e041      	b.n	800114a <stepper_move+0x18a>

	} else { //set parameters for the timer2 separately cause it has 2 channel
		if (flag_configured_timer2 != 1) { //this cause the second stepper must be equal to the first one
 80010c6:	4b3a      	ldr	r3, [pc, #232]	@ (80011b0 <stepper_move+0x1f0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d02b      	beq.n	8001126 <stepper_move+0x166>

			//reset_timers(stp);
			__HAL_TIM_SET_AUTORELOAD(stp->position_timer,
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d6:	3301      	adds	r3, #1
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	fb03 f202 	mul.w	r2, r3, r2
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3a01      	subs	r2, #1
 80010e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f0:	3301      	adds	r3, #1
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	fb03 f202 	mul.w	r2, r3, r2
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	3a01      	subs	r2, #1
 80010fe:	60da      	str	r2, [r3, #12]
					(n_steps * (stp->pwm_timer->Instance->PSC + 1)) - 1);
			__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_1,
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	0852      	lsrs	r2, r2, #1
 8001110:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);

			__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_2,
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0852      	lsrs	r2, r2, #1
 8001122:	639a      	str	r2, [r3, #56]	@ 0x38
 8001124:	e00b      	b.n	800113e <stepper_move+0x17e>
					__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);
			HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_1); //START PWM
						HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_2); //START PWM)

 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f002 fa11 	bl	8003554 <HAL_TIM_PWM_Start_IT>
		} else {
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2104      	movs	r1, #4
 8001138:	4618      	mov	r0, r3
 800113a:	f002 fa0b 	bl	8003554 <HAL_TIM_PWM_Start_IT>


		}
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <stepper_move+0x1f0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f083 0301 	eor.w	r3, r3, #1
 8001146:	4a1a      	ldr	r2, [pc, #104]	@ (80011b0 <stepper_move+0x1f0>)
 8001148:	6013      	str	r3, [r2, #0]
		flag_configured_timer2 ^= 1;

	}
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001152:	3301      	adds	r3, #1
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	613b      	str	r3, [r7, #16]
	n_steps = n_steps * (stp->pwm_timer->Instance->PSC + 1);

 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a14      	ldr	r2, [pc, #80]	@ (80011b4 <stepper_move+0x1f4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d102      	bne.n	800116e <stepper_move+0x1ae>
	if (stp->pwm_timer->Instance == TIM1) {
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	e00a      	b.n	8001184 <stepper_move+0x1c4>
		i = 0;
	} else {
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001178:	d102      	bne.n	8001180 <stepper_move+0x1c0>
		if (stp->pwm_timer->Instance == TIM2) {
 800117a:	2301      	movs	r3, #1
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	e001      	b.n	8001184 <stepper_move+0x1c4>
			i = 1;
		} else
 8001180:	2302      	movs	r3, #2
 8001182:	617b      	str	r3, [r7, #20]
			i = 2;
	}
 8001184:	490c      	ldr	r1, [pc, #48]	@ (80011b8 <stepper_move+0x1f8>)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	n_steps_a[i] = n_steps;
 800118e:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <stepper_move+0x1ec>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	490a      	ldr	r1, [pc, #40]	@ (80011bc <stepper_move+0x1fc>)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	arr_des_a[i] = arr_des;

 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	43b40000 	.word	0x43b40000
 80011a8:	20000124 	.word	0x20000124
 80011ac:	20000030 	.word	0x20000030
 80011b0:	20000120 	.word	0x20000120
 80011b4:	40010000 	.word	0x40010000
 80011b8:	20000108 	.word	0x20000108
 80011bc:	20000114 	.word	0x20000114

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <HAL_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	4a0f      	ldr	r2, [pc, #60]	@ (800120c <HAL_MspInit+0x4c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	4a08      	ldr	r2, [pc, #32]	@ (800120c <HAL_MspInit+0x4c>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80011fe:	2006      	movs	r0, #6
 8001200:	f000 ffd8 	bl	80021b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <NMI_Handler+0x4>

08001218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <MemManage_Handler+0x4>

08001228 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <UsageFault_Handler+0x4>

08001238 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001266:	f000 fe91 	bl	8001f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001274:	4802      	ldr	r0, [pc, #8]	@ (8001280 <TIM1_CC_IRQHandler+0x10>)
 8001276:	f002 fb41 	bl	80038fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000128 	.word	0x20000128

08001284 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <TIM2_IRQHandler+0x10>)
 800128a:	f002 fb37 	bl	80038fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000170 	.word	0x20000170

08001298 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DISABLE_button_Pin);
 800129c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012a0:	f001 f992 	bl	80025c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80012ac:	4802      	ldr	r0, [pc, #8]	@ (80012b8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80012ae:	f002 fb25 	bl	80038fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200002d8 	.word	0x200002d8

080012bc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <TIM8_UP_TIM13_IRQHandler+0x10>)
 80012c2:	f002 fb1b 	bl	80038fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200002d8 	.word	0x200002d8

080012d0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80012d6:	f002 fb11 	bl	80038fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200002d8 	.word	0x200002d8

080012e4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80012e8:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <TIM8_CC_IRQHandler+0x10>)
 80012ea:	f002 fb07 	bl	80038fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200002d8 	.word	0x200002d8

080012f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <SystemInit+0x20>)
 80012fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001302:	4a05      	ldr	r2, [pc, #20]	@ (8001318 <SystemInit+0x20>)
 8001304:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001308:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b096      	sub	sp, #88	@ 0x58
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2220      	movs	r2, #32
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f003 fa39 	bl	80047cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800135a:	4b3f      	ldr	r3, [pc, #252]	@ (8001458 <MX_TIM1_Init+0x13c>)
 800135c:	4a3f      	ldr	r2, [pc, #252]	@ (800145c <MX_TIM1_Init+0x140>)
 800135e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8001360:	4b3d      	ldr	r3, [pc, #244]	@ (8001458 <MX_TIM1_Init+0x13c>)
 8001362:	2204      	movs	r2, #4
 8001364:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b3c      	ldr	r3, [pc, #240]	@ (8001458 <MX_TIM1_Init+0x13c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800136c:	4b3a      	ldr	r3, [pc, #232]	@ (8001458 <MX_TIM1_Init+0x13c>)
 800136e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001372:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b38      	ldr	r3, [pc, #224]	@ (8001458 <MX_TIM1_Init+0x13c>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800137a:	4b37      	ldr	r3, [pc, #220]	@ (8001458 <MX_TIM1_Init+0x13c>)
 800137c:	2200      	movs	r2, #0
 800137e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001380:	4b35      	ldr	r3, [pc, #212]	@ (8001458 <MX_TIM1_Init+0x13c>)
 8001382:	2280      	movs	r2, #128	@ 0x80
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001386:	4834      	ldr	r0, [pc, #208]	@ (8001458 <MX_TIM1_Init+0x13c>)
 8001388:	f001 ff0a 	bl	80031a0 <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001392:	f7ff fd59 	bl	8000e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800139a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800139c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013a0:	4619      	mov	r1, r3
 80013a2:	482d      	ldr	r0, [pc, #180]	@ (8001458 <MX_TIM1_Init+0x13c>)
 80013a4:	f002 fc5c 	bl	8003c60 <HAL_TIM_ConfigClockSource>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013ae:	f7ff fd4b 	bl	8000e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013b2:	4829      	ldr	r0, [pc, #164]	@ (8001458 <MX_TIM1_Init+0x13c>)
 80013b4:	f001 ffac 	bl	8003310 <HAL_TIM_PWM_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013be:	f7ff fd43 	bl	8000e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013c2:	2320      	movs	r3, #32
 80013c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80013c6:	2380      	movs	r3, #128	@ 0x80
 80013c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013ce:	4619      	mov	r1, r3
 80013d0:	4821      	ldr	r0, [pc, #132]	@ (8001458 <MX_TIM1_Init+0x13c>)
 80013d2:	f003 f919 	bl	8004608 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013dc:	f7ff fd34 	bl	8000e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e0:	2360      	movs	r3, #96	@ 0x60
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 80013e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ee:	2300      	movs	r3, #0
 80013f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013f2:	2304      	movs	r3, #4
 80013f4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	4814      	ldr	r0, [pc, #80]	@ (8001458 <MX_TIM1_Init+0x13c>)
 8001408:	f002 fb68 	bl	8003adc <HAL_TIM_PWM_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001412:	f7ff fd19 	bl	8000e48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800142a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	4619      	mov	r1, r3
 8001438:	4807      	ldr	r0, [pc, #28]	@ (8001458 <MX_TIM1_Init+0x13c>)
 800143a:	f003 f961 	bl	8004700 <HAL_TIMEx_ConfigBreakDeadTime>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001444:	f7ff fd00 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001448:	4803      	ldr	r0, [pc, #12]	@ (8001458 <MX_TIM1_Init+0x13c>)
 800144a:	f000 fc29 	bl	8001ca0 <HAL_TIM_MspPostInit>

}
 800144e:	bf00      	nop
 8001450:	3758      	adds	r7, #88	@ 0x58
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000128 	.word	0x20000128
 800145c:	40010000 	.word	0x40010000

08001460 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08e      	sub	sp, #56	@ 0x38
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001466:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	f107 0320 	add.w	r3, r7, #32
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
 800148c:	615a      	str	r2, [r3, #20]
 800148e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001490:	4b33      	ldr	r3, [pc, #204]	@ (8001560 <MX_TIM2_Init+0x100>)
 8001492:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001496:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8001498:	4b31      	ldr	r3, [pc, #196]	@ (8001560 <MX_TIM2_Init+0x100>)
 800149a:	2204      	movs	r2, #4
 800149c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149e:	4b30      	ldr	r3, [pc, #192]	@ (8001560 <MX_TIM2_Init+0x100>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001560 <MX_TIM2_Init+0x100>)
 80014a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001560 <MX_TIM2_Init+0x100>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001560 <MX_TIM2_Init+0x100>)
 80014b4:	2280      	movs	r2, #128	@ 0x80
 80014b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014b8:	4829      	ldr	r0, [pc, #164]	@ (8001560 <MX_TIM2_Init+0x100>)
 80014ba:	f001 fe71 	bl	80031a0 <HAL_TIM_Base_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014c4:	f7ff fcc0 	bl	8000e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014d2:	4619      	mov	r1, r3
 80014d4:	4822      	ldr	r0, [pc, #136]	@ (8001560 <MX_TIM2_Init+0x100>)
 80014d6:	f002 fbc3 	bl	8003c60 <HAL_TIM_ConfigClockSource>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014e0:	f7ff fcb2 	bl	8000e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014e4:	481e      	ldr	r0, [pc, #120]	@ (8001560 <MX_TIM2_Init+0x100>)
 80014e6:	f001 ff13 	bl	8003310 <HAL_TIM_PWM_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014f0:	f7ff fcaa 	bl	8000e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014f4:	2320      	movs	r3, #32
 80014f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014fc:	f107 0320 	add.w	r3, r7, #32
 8001500:	4619      	mov	r1, r3
 8001502:	4817      	ldr	r0, [pc, #92]	@ (8001560 <MX_TIM2_Init+0x100>)
 8001504:	f003 f880 	bl	8004608 <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800150e:	f7ff fc9b 	bl	8000e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001512:	2360      	movs	r3, #96	@ 0x60
 8001514:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32768;
 8001516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800151a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001520:	2304      	movs	r3, #4
 8001522:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	4619      	mov	r1, r3
 800152a:	480d      	ldr	r0, [pc, #52]	@ (8001560 <MX_TIM2_Init+0x100>)
 800152c:	f002 fad6 	bl	8003adc <HAL_TIM_PWM_ConfigChannel>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001536:	f7ff fc87 	bl	8000e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2204      	movs	r2, #4
 800153e:	4619      	mov	r1, r3
 8001540:	4807      	ldr	r0, [pc, #28]	@ (8001560 <MX_TIM2_Init+0x100>)
 8001542:	f002 facb 	bl	8003adc <HAL_TIM_PWM_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800154c:	f7ff fc7c 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001550:	4803      	ldr	r0, [pc, #12]	@ (8001560 <MX_TIM2_Init+0x100>)
 8001552:	f000 fba5 	bl	8001ca0 <HAL_TIM_MspPostInit>

}
 8001556:	bf00      	nop
 8001558:	3738      	adds	r7, #56	@ 0x38
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000170 	.word	0x20000170

08001564 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	@ 0x30
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0320 	add.w	r3, r7, #32
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001590:	4b24      	ldr	r3, [pc, #144]	@ (8001624 <MX_TIM3_Init+0xc0>)
 8001592:	4a25      	ldr	r2, [pc, #148]	@ (8001628 <MX_TIM3_Init+0xc4>)
 8001594:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 8001596:	4b23      	ldr	r3, [pc, #140]	@ (8001624 <MX_TIM3_Init+0xc0>)
 8001598:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800159c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b21      	ldr	r3, [pc, #132]	@ (8001624 <MX_TIM3_Init+0xc0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 80015a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001624 <MX_TIM3_Init+0xc0>)
 80015a6:	22c7      	movs	r2, #199	@ 0xc7
 80015a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001624 <MX_TIM3_Init+0xc0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001624 <MX_TIM3_Init+0xc0>)
 80015b2:	2280      	movs	r2, #128	@ 0x80
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015b6:	481b      	ldr	r0, [pc, #108]	@ (8001624 <MX_TIM3_Init+0xc0>)
 80015b8:	f001 fdf2 	bl	80031a0 <HAL_TIM_Base_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80015c2:	f7ff fc41 	bl	8000e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015cc:	f107 0320 	add.w	r3, r7, #32
 80015d0:	4619      	mov	r1, r3
 80015d2:	4814      	ldr	r0, [pc, #80]	@ (8001624 <MX_TIM3_Init+0xc0>)
 80015d4:	f002 fb44 	bl	8003c60 <HAL_TIM_ConfigClockSource>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80015de:	f7ff fc33 	bl	8000e48 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80015e2:	2306      	movs	r3, #6
 80015e4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80015e6:	2310      	movs	r3, #16
 80015e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	4619      	mov	r1, r3
 80015f0:	480c      	ldr	r0, [pc, #48]	@ (8001624 <MX_TIM3_Init+0xc0>)
 80015f2:	f002 fbfc 	bl	8003dee <HAL_TIM_SlaveConfigSynchro>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80015fc:	f7ff fc24 	bl	8000e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	@ (8001624 <MX_TIM3_Init+0xc0>)
 800160e:	f002 fffb 	bl	8004608 <HAL_TIMEx_MasterConfigSynchronization>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001618:	f7ff fc16 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	3730      	adds	r7, #48	@ 0x30
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200001b8 	.word	0x200001b8
 8001628:	40000400 	.word	0x40000400

0800162c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	@ 0x30
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001658:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <MX_TIM4_Init+0xc0>)
 800165a:	4a25      	ldr	r2, [pc, #148]	@ (80016f0 <MX_TIM4_Init+0xc4>)
 800165c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 65535;
 800165e:	4b23      	ldr	r3, [pc, #140]	@ (80016ec <MX_TIM4_Init+0xc0>)
 8001660:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001664:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <MX_TIM4_Init+0xc0>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <MX_TIM4_Init+0xc0>)
 800166e:	22c7      	movs	r2, #199	@ 0xc7
 8001670:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <MX_TIM4_Init+0xc0>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001678:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <MX_TIM4_Init+0xc0>)
 800167a:	2280      	movs	r2, #128	@ 0x80
 800167c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800167e:	481b      	ldr	r0, [pc, #108]	@ (80016ec <MX_TIM4_Init+0xc0>)
 8001680:	f001 fd8e 	bl	80031a0 <HAL_TIM_Base_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800168a:	f7ff fbdd 	bl	8000e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001692:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001694:	f107 0320 	add.w	r3, r7, #32
 8001698:	4619      	mov	r1, r3
 800169a:	4814      	ldr	r0, [pc, #80]	@ (80016ec <MX_TIM4_Init+0xc0>)
 800169c:	f002 fae0 	bl	8003c60 <HAL_TIM_ConfigClockSource>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80016a6:	f7ff fbcf 	bl	8000e48 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80016aa:	2306      	movs	r3, #6
 80016ac:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	4619      	mov	r1, r3
 80016b8:	480c      	ldr	r0, [pc, #48]	@ (80016ec <MX_TIM4_Init+0xc0>)
 80016ba:	f002 fb98 	bl	8003dee <HAL_TIM_SlaveConfigSynchro>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80016c4:	f7ff fbc0 	bl	8000e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	@ (80016ec <MX_TIM4_Init+0xc0>)
 80016d6:	f002 ff97 	bl	8004608 <HAL_TIMEx_MasterConfigSynchronization>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 80016e0:	f7ff fbb2 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	3730      	adds	r7, #48	@ 0x30
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000200 	.word	0x20000200
 80016f0:	40000800 	.word	0x40000800

080016f4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	@ 0x30
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001720:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <MX_TIM5_Init+0xc0>)
 8001722:	4a25      	ldr	r2, [pc, #148]	@ (80017b8 <MX_TIM5_Init+0xc4>)
 8001724:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8001726:	4b23      	ldr	r3, [pc, #140]	@ (80017b4 <MX_TIM5_Init+0xc0>)
 8001728:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800172c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172e:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <MX_TIM5_Init+0xc0>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 199;
 8001734:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <MX_TIM5_Init+0xc0>)
 8001736:	22c7      	movs	r2, #199	@ 0xc7
 8001738:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <MX_TIM5_Init+0xc0>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <MX_TIM5_Init+0xc0>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001746:	481b      	ldr	r0, [pc, #108]	@ (80017b4 <MX_TIM5_Init+0xc0>)
 8001748:	f001 fd2a 	bl	80031a0 <HAL_TIM_Base_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8001752:	f7ff fb79 	bl	8000e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800175a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800175c:	f107 0320 	add.w	r3, r7, #32
 8001760:	4619      	mov	r1, r3
 8001762:	4814      	ldr	r0, [pc, #80]	@ (80017b4 <MX_TIM5_Init+0xc0>)
 8001764:	f002 fa7c 	bl	8003c60 <HAL_TIM_ConfigClockSource>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800176e:	f7ff fb6b 	bl	8000e48 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001772:	2306      	movs	r3, #6
 8001774:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001776:	2330      	movs	r3, #48	@ 0x30
 8001778:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	4619      	mov	r1, r3
 8001780:	480c      	ldr	r0, [pc, #48]	@ (80017b4 <MX_TIM5_Init+0xc0>)
 8001782:	f002 fb34 	bl	8003dee <HAL_TIM_SlaveConfigSynchro>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800178c:	f7ff fb5c 	bl	8000e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4619      	mov	r1, r3
 800179c:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <MX_TIM5_Init+0xc0>)
 800179e:	f002 ff33 	bl	8004608 <HAL_TIMEx_MasterConfigSynchronization>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 80017a8:	f7ff fb4e 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	3730      	adds	r7, #48	@ 0x30
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000248 	.word	0x20000248
 80017b8:	40000c00 	.word	0x40000c00

080017bc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c2:	463b      	mov	r3, r7
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <MX_TIM6_Init+0x64>)
 80017cc:	4a15      	ldr	r2, [pc, #84]	@ (8001824 <MX_TIM6_Init+0x68>)
 80017ce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1400*3;
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <MX_TIM6_Init+0x64>)
 80017d2:	f241 0268 	movw	r2, #4200	@ 0x1068
 80017d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <MX_TIM6_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 59999;
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <MX_TIM6_Init+0x64>)
 80017e0:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80017e4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <MX_TIM6_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017ec:	480c      	ldr	r0, [pc, #48]	@ (8001820 <MX_TIM6_Init+0x64>)
 80017ee:	f001 fcd7 	bl	80031a0 <HAL_TIM_Base_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80017f8:	f7ff fb26 	bl	8000e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001804:	463b      	mov	r3, r7
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	@ (8001820 <MX_TIM6_Init+0x64>)
 800180a:	f002 fefd 	bl	8004608 <HAL_TIMEx_MasterConfigSynchronization>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001814:	f7ff fb18 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000290 	.word	0x20000290
 8001824:	40001000 	.word	0x40001000

08001828 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b096      	sub	sp, #88	@ 0x58
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	615a      	str	r2, [r3, #20]
 8001858:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2220      	movs	r2, #32
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f002 ffb3 	bl	80047cc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001866:	4b3f      	ldr	r3, [pc, #252]	@ (8001964 <MX_TIM8_Init+0x13c>)
 8001868:	4a3f      	ldr	r2, [pc, #252]	@ (8001968 <MX_TIM8_Init+0x140>)
 800186a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4;
 800186c:	4b3d      	ldr	r3, [pc, #244]	@ (8001964 <MX_TIM8_Init+0x13c>)
 800186e:	2204      	movs	r2, #4
 8001870:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001872:	4b3c      	ldr	r3, [pc, #240]	@ (8001964 <MX_TIM8_Init+0x13c>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001878:	4b3a      	ldr	r3, [pc, #232]	@ (8001964 <MX_TIM8_Init+0x13c>)
 800187a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800187e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001880:	4b38      	ldr	r3, [pc, #224]	@ (8001964 <MX_TIM8_Init+0x13c>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001886:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <MX_TIM8_Init+0x13c>)
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800188c:	4b35      	ldr	r3, [pc, #212]	@ (8001964 <MX_TIM8_Init+0x13c>)
 800188e:	2280      	movs	r2, #128	@ 0x80
 8001890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001892:	4834      	ldr	r0, [pc, #208]	@ (8001964 <MX_TIM8_Init+0x13c>)
 8001894:	f001 fc84 	bl	80031a0 <HAL_TIM_Base_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800189e:	f7ff fad3 	bl	8000e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018ac:	4619      	mov	r1, r3
 80018ae:	482d      	ldr	r0, [pc, #180]	@ (8001964 <MX_TIM8_Init+0x13c>)
 80018b0:	f002 f9d6 	bl	8003c60 <HAL_TIM_ConfigClockSource>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80018ba:	f7ff fac5 	bl	8000e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80018be:	4829      	ldr	r0, [pc, #164]	@ (8001964 <MX_TIM8_Init+0x13c>)
 80018c0:	f001 fd26 	bl	8003310 <HAL_TIM_PWM_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80018ca:	f7ff fabd 	bl	8000e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018ce:	2320      	movs	r3, #32
 80018d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018da:	4619      	mov	r1, r3
 80018dc:	4821      	ldr	r0, [pc, #132]	@ (8001964 <MX_TIM8_Init+0x13c>)
 80018de:	f002 fe93 	bl	8004608 <HAL_TIMEx_MasterConfigSynchronization>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80018e8:	f7ff faae 	bl	8000e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ec:	2360      	movs	r3, #96	@ 0x60
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 80018f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018fa:	2300      	movs	r3, #0
 80018fc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80018fe:	2304      	movs	r3, #4
 8001900:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800190a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800190e:	2200      	movs	r2, #0
 8001910:	4619      	mov	r1, r3
 8001912:	4814      	ldr	r0, [pc, #80]	@ (8001964 <MX_TIM8_Init+0x13c>)
 8001914:	f002 f8e2 	bl	8003adc <HAL_TIM_PWM_ConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800191e:	f7ff fa93 	bl	8000e48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001936:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800193a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	4619      	mov	r1, r3
 8001944:	4807      	ldr	r0, [pc, #28]	@ (8001964 <MX_TIM8_Init+0x13c>)
 8001946:	f002 fedb 	bl	8004700 <HAL_TIMEx_ConfigBreakDeadTime>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001950:	f7ff fa7a 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001954:	4803      	ldr	r0, [pc, #12]	@ (8001964 <MX_TIM8_Init+0x13c>)
 8001956:	f000 f9a3 	bl	8001ca0 <HAL_TIM_MspPostInit>

}
 800195a:	bf00      	nop
 800195c:	3758      	adds	r7, #88	@ 0x58
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200002d8 	.word	0x200002d8
 8001968:	40010400 	.word	0x40010400

0800196c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	615a      	str	r2, [r3, #20]
 8001982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001984:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <MX_TIM10_Init+0x94>)
 8001986:	4a1f      	ldr	r2, [pc, #124]	@ (8001a04 <MX_TIM10_Init+0x98>)
 8001988:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800198a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a00 <MX_TIM10_Init+0x94>)
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <MX_TIM10_Init+0x94>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001996:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <MX_TIM10_Init+0x94>)
 8001998:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800199c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <MX_TIM10_Init+0x94>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019a4:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <MX_TIM10_Init+0x94>)
 80019a6:	2280      	movs	r2, #128	@ 0x80
 80019a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80019aa:	4815      	ldr	r0, [pc, #84]	@ (8001a00 <MX_TIM10_Init+0x94>)
 80019ac:	f001 fbf8 	bl	80031a0 <HAL_TIM_Base_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80019b6:	f7ff fa47 	bl	8000e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80019ba:	4811      	ldr	r0, [pc, #68]	@ (8001a00 <MX_TIM10_Init+0x94>)
 80019bc:	f001 fca8 	bl	8003310 <HAL_TIM_PWM_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80019c6:	f7ff fa3f 	bl	8000e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ca:	2360      	movs	r3, #96	@ 0x60
 80019cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80019ce:	2301      	movs	r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80019d6:	2304      	movs	r3, #4
 80019d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	4619      	mov	r1, r3
 80019e0:	4807      	ldr	r0, [pc, #28]	@ (8001a00 <MX_TIM10_Init+0x94>)
 80019e2:	f002 f87b 	bl	8003adc <HAL_TIM_PWM_ConfigChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80019ec:	f7ff fa2c 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80019f0:	4803      	ldr	r0, [pc, #12]	@ (8001a00 <MX_TIM10_Init+0x94>)
 80019f2:	f000 f955 	bl	8001ca0 <HAL_TIM_MspPostInit>

}
 80019f6:	bf00      	nop
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000320 	.word	0x20000320
 8001a04:	40014400 	.word	0x40014400

08001a08 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
 8001a1c:	615a      	str	r2, [r3, #20]
 8001a1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <MX_TIM11_Init+0x94>)
 8001a22:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa0 <MX_TIM11_Init+0x98>)
 8001a24:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001a26:	4b1d      	ldr	r3, [pc, #116]	@ (8001a9c <MX_TIM11_Init+0x94>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <MX_TIM11_Init+0x94>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	@ (8001a9c <MX_TIM11_Init+0x94>)
 8001a34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a38:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3a:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <MX_TIM11_Init+0x94>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a40:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <MX_TIM11_Init+0x94>)
 8001a42:	2280      	movs	r2, #128	@ 0x80
 8001a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a46:	4815      	ldr	r0, [pc, #84]	@ (8001a9c <MX_TIM11_Init+0x94>)
 8001a48:	f001 fbaa 	bl	80031a0 <HAL_TIM_Base_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001a52:	f7ff f9f9 	bl	8000e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001a56:	4811      	ldr	r0, [pc, #68]	@ (8001a9c <MX_TIM11_Init+0x94>)
 8001a58:	f001 fc5a 	bl	8003310 <HAL_TIM_PWM_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001a62:	f7ff f9f1 	bl	8000e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a66:	2360      	movs	r3, #96	@ 0x60
 8001a68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a72:	2304      	movs	r3, #4
 8001a74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2200      	movs	r2, #0
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4807      	ldr	r0, [pc, #28]	@ (8001a9c <MX_TIM11_Init+0x94>)
 8001a7e:	f002 f82d 	bl	8003adc <HAL_TIM_PWM_ConfigChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001a88:	f7ff f9de 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001a8c:	4803      	ldr	r0, [pc, #12]	@ (8001a9c <MX_TIM11_Init+0x94>)
 8001a8e:	f000 f907 	bl	8001ca0 <HAL_TIM_MspPostInit>

}
 8001a92:	bf00      	nop
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000368 	.word	0x20000368
 8001aa0:	40014800 	.word	0x40014800

08001aa4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08c      	sub	sp, #48	@ 0x30
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a72      	ldr	r2, [pc, #456]	@ (8001c7c <HAL_TIM_Base_MspInit+0x1d8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d116      	bne.n	8001ae4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aba:	4b71      	ldr	r3, [pc, #452]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	4a70      	ldr	r2, [pc, #448]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	201b      	movs	r0, #27
 8001ad8:	f000 fb77 	bl	80021ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001adc:	201b      	movs	r0, #27
 8001ade:	f000 fb90 	bl	8002202 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001ae2:	e0c6      	b.n	8001c72 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aec:	d116      	bne.n	8001b1c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001af2:	4b63      	ldr	r3, [pc, #396]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	4a62      	ldr	r2, [pc, #392]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001afe:	4b60      	ldr	r3, [pc, #384]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	201c      	movs	r0, #28
 8001b10:	f000 fb5b 	bl	80021ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b14:	201c      	movs	r0, #28
 8001b16:	f000 fb74 	bl	8002202 <HAL_NVIC_EnableIRQ>
}
 8001b1a:	e0aa      	b.n	8001c72 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM3)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a58      	ldr	r2, [pc, #352]	@ (8001c84 <HAL_TIM_Base_MspInit+0x1e0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d10e      	bne.n	8001b44 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b2a:	4b55      	ldr	r3, [pc, #340]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	4a54      	ldr	r2, [pc, #336]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b36:	4b52      	ldr	r3, [pc, #328]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001b42:	e096      	b.n	8001c72 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM4)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a4f      	ldr	r2, [pc, #316]	@ (8001c88 <HAL_TIM_Base_MspInit+0x1e4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d10e      	bne.n	8001b6c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
 8001b52:	4b4b      	ldr	r3, [pc, #300]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	4a4a      	ldr	r2, [pc, #296]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5e:	4b48      	ldr	r3, [pc, #288]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	623b      	str	r3, [r7, #32]
 8001b68:	6a3b      	ldr	r3, [r7, #32]
}
 8001b6a:	e082      	b.n	8001c72 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM5)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a46      	ldr	r2, [pc, #280]	@ (8001c8c <HAL_TIM_Base_MspInit+0x1e8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d10e      	bne.n	8001b94 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	4b41      	ldr	r3, [pc, #260]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	4a40      	ldr	r2, [pc, #256]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001b80:	f043 0308 	orr.w	r3, r3, #8
 8001b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b86:	4b3e      	ldr	r3, [pc, #248]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	69fb      	ldr	r3, [r7, #28]
}
 8001b92:	e06e      	b.n	8001c72 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM6)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a3d      	ldr	r2, [pc, #244]	@ (8001c90 <HAL_TIM_Base_MspInit+0x1ec>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d10e      	bne.n	8001bbc <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	4b37      	ldr	r3, [pc, #220]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	4a36      	ldr	r2, [pc, #216]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001ba8:	f043 0310 	orr.w	r3, r3, #16
 8001bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bae:	4b34      	ldr	r3, [pc, #208]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
}
 8001bba:	e05a      	b.n	8001c72 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM8)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a34      	ldr	r2, [pc, #208]	@ (8001c94 <HAL_TIM_Base_MspInit+0x1f0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d12e      	bne.n	8001c24 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	4b2d      	ldr	r3, [pc, #180]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	4a2c      	ldr	r2, [pc, #176]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 1, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2101      	movs	r1, #1
 8001be6:	202b      	movs	r0, #43	@ 0x2b
 8001be8:	f000 faef 	bl	80021ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001bec:	202b      	movs	r0, #43	@ 0x2b
 8001bee:	f000 fb08 	bl	8002202 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	202c      	movs	r0, #44	@ 0x2c
 8001bf8:	f000 fae7 	bl	80021ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001bfc:	202c      	movs	r0, #44	@ 0x2c
 8001bfe:	f000 fb00 	bl	8002202 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2101      	movs	r1, #1
 8001c06:	202d      	movs	r0, #45	@ 0x2d
 8001c08:	f000 fadf 	bl	80021ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001c0c:	202d      	movs	r0, #45	@ 0x2d
 8001c0e:	f000 faf8 	bl	8002202 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2101      	movs	r1, #1
 8001c16:	202e      	movs	r0, #46	@ 0x2e
 8001c18:	f000 fad7 	bl	80021ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001c1c:	202e      	movs	r0, #46	@ 0x2e
 8001c1e:	f000 faf0 	bl	8002202 <HAL_NVIC_EnableIRQ>
}
 8001c22:	e026      	b.n	8001c72 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM10)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1b      	ldr	r2, [pc, #108]	@ (8001c98 <HAL_TIM_Base_MspInit+0x1f4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d10e      	bne.n	8001c4c <HAL_TIM_Base_MspInit+0x1a8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	4a12      	ldr	r2, [pc, #72]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3e:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
}
 8001c4a:	e012      	b.n	8001c72 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM11)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a12      	ldr	r2, [pc, #72]	@ (8001c9c <HAL_TIM_Base_MspInit+0x1f8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d10d      	bne.n	8001c72 <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	4a08      	ldr	r2, [pc, #32]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_TIM_Base_MspInit+0x1dc>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
}
 8001c72:	bf00      	nop
 8001c74:	3730      	adds	r7, #48	@ 0x30
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40000400 	.word	0x40000400
 8001c88:	40000800 	.word	0x40000800
 8001c8c:	40000c00 	.word	0x40000c00
 8001c90:	40001000 	.word	0x40001000
 8001c94:	40010400 	.word	0x40010400
 8001c98:	40014400 	.word	0x40014400
 8001c9c:	40014800 	.word	0x40014800

08001ca0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	@ 0x30
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a5b      	ldr	r2, [pc, #364]	@ (8001e2c <HAL_TIM_MspPostInit+0x18c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d11f      	bne.n	8001d02 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	4b5a      	ldr	r3, [pc, #360]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a59      	ldr	r2, [pc, #356]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b57      	ldr	r3, [pc, #348]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 8001cde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	484e      	ldr	r0, [pc, #312]	@ (8001e34 <HAL_TIM_MspPostInit+0x194>)
 8001cfc:	f000 fa9c 	bl	8002238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001d00:	e090      	b.n	8001e24 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM2)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0a:	d11e      	bne.n	8001d4a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d14:	4a46      	ldr	r2, [pc, #280]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1c:	4b44      	ldr	r3, [pc, #272]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3c:	f107 031c 	add.w	r3, r7, #28
 8001d40:	4619      	mov	r1, r3
 8001d42:	483c      	ldr	r0, [pc, #240]	@ (8001e34 <HAL_TIM_MspPostInit+0x194>)
 8001d44:	f000 fa78 	bl	8002238 <HAL_GPIO_Init>
}
 8001d48:	e06c      	b.n	8001e24 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM8)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e38 <HAL_TIM_MspPostInit+0x198>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d11e      	bne.n	8001d92 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	4b35      	ldr	r3, [pc, #212]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5c:	4a34      	ldr	r2, [pc, #208]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d64:	4b32      	ldr	r3, [pc, #200]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM4_Pin;
 8001d70:	2340      	movs	r3, #64	@ 0x40
 8001d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d80:	2303      	movs	r3, #3
 8001d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM4_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	4619      	mov	r1, r3
 8001d8a:	482c      	ldr	r0, [pc, #176]	@ (8001e3c <HAL_TIM_MspPostInit+0x19c>)
 8001d8c:	f000 fa54 	bl	8002238 <HAL_GPIO_Init>
}
 8001d90:	e048      	b.n	8001e24 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM10)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2a      	ldr	r2, [pc, #168]	@ (8001e40 <HAL_TIM_MspPostInit+0x1a0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d11f      	bne.n	8001ddc <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	4b23      	ldr	r3, [pc, #140]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da4:	4a22      	ldr	r2, [pc, #136]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dac:	4b20      	ldr	r3, [pc, #128]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_1_Pin;
 8001db8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SERVO_1_GPIO_Port, &GPIO_InitStruct);
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	481b      	ldr	r0, [pc, #108]	@ (8001e44 <HAL_TIM_MspPostInit+0x1a4>)
 8001dd6:	f000 fa2f 	bl	8002238 <HAL_GPIO_Init>
}
 8001dda:	e023      	b.n	8001e24 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM11)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a19      	ldr	r2, [pc, #100]	@ (8001e48 <HAL_TIM_MspPostInit+0x1a8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d11e      	bne.n	8001e24 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a10      	ldr	r2, [pc, #64]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <HAL_TIM_MspPostInit+0x190>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8001e02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001e14:	2303      	movs	r3, #3
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4809      	ldr	r0, [pc, #36]	@ (8001e44 <HAL_TIM_MspPostInit+0x1a4>)
 8001e20:	f000 fa0a 	bl	8002238 <HAL_GPIO_Init>
}
 8001e24:	bf00      	nop
 8001e26:	3730      	adds	r7, #48	@ 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	40010400 	.word	0x40010400
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40014400 	.word	0x40014400
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40014800 	.word	0x40014800

08001e4c <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN 1 */

//emergency stop button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==DISABLE_button_Pin){
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e5c:	d112      	bne.n	8001e84 <HAL_GPIO_EXTI_Callback+0x38>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET); //the stepper motors have a negative enable logic
 8001e5e:	2201      	movs	r2, #1
 8001e60:	2120      	movs	r1, #32
 8001e62:	480a      	ldr	r0, [pc, #40]	@ (8001e8c <HAL_GPIO_EXTI_Callback+0x40>)
 8001e64:	f000 fb7c 	bl	8002560 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SERVO_en_GPIO_Port, SERVO_en_Pin, GPIO_PIN_SET); //disable the servp
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2102      	movs	r1, #2
 8001e6c:	4808      	ldr	r0, [pc, #32]	@ (8001e90 <HAL_GPIO_EXTI_Callback+0x44>)
 8001e6e:	f000 fb77 	bl	8002560 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin, GPIO_PIN_SET); //disable the end_eff
 8001e72:	2201      	movs	r2, #1
 8001e74:	2104      	movs	r1, #4
 8001e76:	4806      	ldr	r0, [pc, #24]	@ (8001e90 <HAL_GPIO_EXTI_Callback+0x44>)
 8001e78:	f000 fb72 	bl	8002560 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
}
 8001e7e:	bf00      	nop
		__disable_irq();

		while(1){
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <HAL_GPIO_EXTI_Callback+0x34>

		}
	}
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020400 	.word	0x40020400

08001e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

 8001e94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ecc <LoopFillZerobss+0xe>
  ldr   sp, =_estack      /* set stack pointer */
  
/* Call the clock system initialization function.*/
 8001e98:	f7ff fa2e 	bl	80012f8 <SystemInit>
  bl  SystemInit  

/* Copy the data segment initializers from flash to SRAM */  
 8001e9c:	480c      	ldr	r0, [pc, #48]	@ (8001ed0 <LoopFillZerobss+0x12>)
  ldr r0, =_sdata
 8001e9e:	490d      	ldr	r1, [pc, #52]	@ (8001ed4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea2:	2300      	movs	r3, #0
  movs r3, #0
 8001ea4:	e002      	b.n	8001eac <LoopCopyDataInit>

08001ea6 <CopyDataInit>:
  b LoopCopyDataInit

CopyDataInit:
 8001ea6:	58d4      	ldr	r4, [r2, r3]
  ldr r4, [r2, r3]
 8001ea8:	50c4      	str	r4, [r0, r3]
  str r4, [r0, r3]
 8001eaa:	3304      	adds	r3, #4

08001eac <LoopCopyDataInit>:
  adds r3, r3, #4

LoopCopyDataInit:
 8001eac:	18c4      	adds	r4, r0, r3
  adds r4, r0, r3
 8001eae:	428c      	cmp	r4, r1
  cmp r4, r1
 8001eb0:	d3f9      	bcc.n	8001ea6 <CopyDataInit>
  bcc CopyDataInit
  
/* Zero fill the bss segment. */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <LoopFillZerobss+0x1e>)
  ldr r2, =_sbss
 8001eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ee0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eb6:	2300      	movs	r3, #0
  movs r3, #0
 8001eb8:	e001      	b.n	8001ebe <LoopFillZerobss>

08001eba <FillZerobss>:
  b LoopFillZerobss

FillZerobss:
 8001eba:	6013      	str	r3, [r2, #0]
  str  r3, [r2]
 8001ebc:	3204      	adds	r2, #4

08001ebe <LoopFillZerobss>:
  adds r2, r2, #4

LoopFillZerobss:
 8001ebe:	42a2      	cmp	r2, r4
  cmp r2, r4
 8001ec0:	d3fb      	bcc.n	8001eba <FillZerobss>
  bcc FillZerobss
  
/* Call static constructors */
 8001ec2:	f002 fc8b 	bl	80047dc <__libc_init_array>
    bl __libc_init_array
/* Call the application's entry point.*/
 8001ec6:	f7fe fe1d 	bl	8000b04 <main>
  bl  main
 8001eca:	4770      	bx	lr

 8001ecc:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
 8001ed0:	20000000 	.word	0x20000000
  ldr r0, =_sdata
 8001ed4:	20000040 	.word	0x20000040
  ldr r1, =_edata
 8001ed8:	08004864 	.word	0x08004864
/* Zero fill the bss segment. */
 8001edc:	20000040 	.word	0x20000040
  ldr r2, =_sbss
 8001ee0:	200003b4 	.word	0x200003b4

08001ee4 <ADC_IRQHandler>:
 * @param  None     
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
 8001ee4:	e7fe      	b.n	8001ee4 <ADC_IRQHandler>
	...

08001ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eec:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <HAL_Init+0x40>)
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <HAL_Init+0x40>)
 8001efe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a07      	ldr	r2, [pc, #28]	@ (8001f28 <HAL_Init+0x40>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f000 f94f 	bl	80021b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f000 f808 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f1c:	f7ff f950 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023c00 	.word	0x40023c00

08001f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f34:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_InitTick+0x54>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_InitTick+0x58>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f967 	bl	800221e <HAL_SYSTICK_Config>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00e      	b.n	8001f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d80a      	bhi.n	8001f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f60:	2200      	movs	r2, #0
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f000 f92f 	bl	80021ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f6c:	4a06      	ldr	r2, [pc, #24]	@ (8001f88 <HAL_InitTick+0x5c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e000      	b.n	8001f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000034 	.word	0x20000034
 8001f84:	2000003c 	.word	0x2000003c
 8001f88:	20000038 	.word	0x20000038

08001f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_IncTick+0x20>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	2000003c 	.word	0x2000003c
 8001fb0:	200003b0 	.word	0x200003b0

08001fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	@ (8001fc8 <HAL_GetTick+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	200003b0 	.word	0x200003b0

08001fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff ffee 	bl	8001fb4 <HAL_GetTick>
 8001fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d005      	beq.n	8001ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <HAL_Delay+0x44>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ff2:	bf00      	nop
 8001ff4:	f7ff ffde 	bl	8001fb4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d8f7      	bhi.n	8001ff4 <HAL_Delay+0x28>
  {
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2000003c 	.word	0x2000003c

08002014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002024:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800203c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002046:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	60d3      	str	r3, [r2, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002060:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <__NVIC_GetPriorityGrouping+0x18>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f003 0307 	and.w	r3, r3, #7
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	2b00      	cmp	r3, #0
 8002088:	db0b      	blt.n	80020a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	4907      	ldr	r1, [pc, #28]	@ (80020b0 <__NVIC_EnableIRQ+0x38>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	2001      	movs	r0, #1
 800209a:	fa00 f202 	lsl.w	r2, r0, r2
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000e100 	.word	0xe000e100

080020b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	db0a      	blt.n	80020de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	490c      	ldr	r1, [pc, #48]	@ (8002100 <__NVIC_SetPriority+0x4c>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	440b      	add	r3, r1
 80020d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020dc:	e00a      	b.n	80020f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4908      	ldr	r1, [pc, #32]	@ (8002104 <__NVIC_SetPriority+0x50>)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	3b04      	subs	r3, #4
 80020ec:	0112      	lsls	r2, r2, #4
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	440b      	add	r3, r1
 80020f2:	761a      	strb	r2, [r3, #24]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000e100 	.word	0xe000e100
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	@ 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f1c3 0307 	rsb	r3, r3, #7
 8002122:	2b04      	cmp	r3, #4
 8002124:	bf28      	it	cs
 8002126:	2304      	movcs	r3, #4
 8002128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3304      	adds	r3, #4
 800212e:	2b06      	cmp	r3, #6
 8002130:	d902      	bls.n	8002138 <NVIC_EncodePriority+0x30>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3b03      	subs	r3, #3
 8002136:	e000      	b.n	800213a <NVIC_EncodePriority+0x32>
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	f04f 32ff 	mov.w	r2, #4294967295
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	401a      	ands	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002150:	f04f 31ff 	mov.w	r1, #4294967295
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43d9      	mvns	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	4313      	orrs	r3, r2
         );
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	@ 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002180:	d301      	bcc.n	8002186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002182:	2301      	movs	r3, #1
 8002184:	e00f      	b.n	80021a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <SysTick_Config+0x40>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218e:	210f      	movs	r1, #15
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f7ff ff8e 	bl	80020b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <SysTick_Config+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <SysTick_Config+0x40>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff29 	bl	8002014 <__NVIC_SetPriorityGrouping>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021dc:	f7ff ff3e 	bl	800205c <__NVIC_GetPriorityGrouping>
 80021e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	f7ff ff8e 	bl	8002108 <NVIC_EncodePriority>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff5d 	bl	80020b4 <__NVIC_SetPriority>
}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff31 	bl	8002078 <__NVIC_EnableIRQ>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ffa2 	bl	8002170 <SysTick_Config>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	@ 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e165      	b.n	8002520 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002254:	2201      	movs	r2, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	429a      	cmp	r2, r3
 800226e:	f040 8154 	bne.w	800251a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d005      	beq.n	800228a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	2b02      	cmp	r3, #2
 8002288:	d130      	bne.n	80022ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c0:	2201      	movs	r2, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 0201 	and.w	r2, r3, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d017      	beq.n	8002328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d123      	bne.n	800237c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	220f      	movs	r2, #15
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	08da      	lsrs	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3208      	adds	r2, #8
 8002376:	69b9      	ldr	r1, [r7, #24]
 8002378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0203 	and.w	r2, r3, #3
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80ae 	beq.w	800251a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002538 <HAL_GPIO_Init+0x300>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002538 <HAL_GPIO_Init+0x300>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002538 <HAL_GPIO_Init+0x300>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023da:	4a58      	ldr	r2, [pc, #352]	@ (800253c <HAL_GPIO_Init+0x304>)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	220f      	movs	r2, #15
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4f      	ldr	r2, [pc, #316]	@ (8002540 <HAL_GPIO_Init+0x308>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d025      	beq.n	8002452 <HAL_GPIO_Init+0x21a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4e      	ldr	r2, [pc, #312]	@ (8002544 <HAL_GPIO_Init+0x30c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d01f      	beq.n	800244e <HAL_GPIO_Init+0x216>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4d      	ldr	r2, [pc, #308]	@ (8002548 <HAL_GPIO_Init+0x310>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d019      	beq.n	800244a <HAL_GPIO_Init+0x212>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4c      	ldr	r2, [pc, #304]	@ (800254c <HAL_GPIO_Init+0x314>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_GPIO_Init+0x20e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4b      	ldr	r2, [pc, #300]	@ (8002550 <HAL_GPIO_Init+0x318>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00d      	beq.n	8002442 <HAL_GPIO_Init+0x20a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4a      	ldr	r2, [pc, #296]	@ (8002554 <HAL_GPIO_Init+0x31c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d007      	beq.n	800243e <HAL_GPIO_Init+0x206>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a49      	ldr	r2, [pc, #292]	@ (8002558 <HAL_GPIO_Init+0x320>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d101      	bne.n	800243a <HAL_GPIO_Init+0x202>
 8002436:	2306      	movs	r3, #6
 8002438:	e00c      	b.n	8002454 <HAL_GPIO_Init+0x21c>
 800243a:	2307      	movs	r3, #7
 800243c:	e00a      	b.n	8002454 <HAL_GPIO_Init+0x21c>
 800243e:	2305      	movs	r3, #5
 8002440:	e008      	b.n	8002454 <HAL_GPIO_Init+0x21c>
 8002442:	2304      	movs	r3, #4
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x21c>
 8002446:	2303      	movs	r3, #3
 8002448:	e004      	b.n	8002454 <HAL_GPIO_Init+0x21c>
 800244a:	2302      	movs	r3, #2
 800244c:	e002      	b.n	8002454 <HAL_GPIO_Init+0x21c>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_GPIO_Init+0x21c>
 8002452:	2300      	movs	r3, #0
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	f002 0203 	and.w	r2, r2, #3
 800245a:	0092      	lsls	r2, r2, #2
 800245c:	4093      	lsls	r3, r2
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002464:	4935      	ldr	r1, [pc, #212]	@ (800253c <HAL_GPIO_Init+0x304>)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	3302      	adds	r3, #2
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002472:	4b3a      	ldr	r3, [pc, #232]	@ (800255c <HAL_GPIO_Init+0x324>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002496:	4a31      	ldr	r2, [pc, #196]	@ (800255c <HAL_GPIO_Init+0x324>)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800249c:	4b2f      	ldr	r3, [pc, #188]	@ (800255c <HAL_GPIO_Init+0x324>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c0:	4a26      	ldr	r2, [pc, #152]	@ (800255c <HAL_GPIO_Init+0x324>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c6:	4b25      	ldr	r3, [pc, #148]	@ (800255c <HAL_GPIO_Init+0x324>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ea:	4a1c      	ldr	r2, [pc, #112]	@ (800255c <HAL_GPIO_Init+0x324>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f0:	4b1a      	ldr	r3, [pc, #104]	@ (800255c <HAL_GPIO_Init+0x324>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002514:	4a11      	ldr	r2, [pc, #68]	@ (800255c <HAL_GPIO_Init+0x324>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3301      	adds	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	f67f ae96 	bls.w	8002254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3724      	adds	r7, #36	@ 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	40013800 	.word	0x40013800
 8002540:	40020000 	.word	0x40020000
 8002544:	40020400 	.word	0x40020400
 8002548:	40020800 	.word	0x40020800
 800254c:	40020c00 	.word	0x40020c00
 8002550:	40021000 	.word	0x40021000
 8002554:	40021400 	.word	0x40021400
 8002558:	40021800 	.word	0x40021800
 800255c:	40013c00 	.word	0x40013c00

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025a4:	887a      	ldrh	r2, [r7, #2]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4013      	ands	r3, r2
 80025aa:	041a      	lsls	r2, r3, #16
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	400b      	ands	r3, r1
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	619a      	str	r2, [r3, #24]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025d2:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d006      	beq.n	80025ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025de:	4a05      	ldr	r2, [pc, #20]	@ (80025f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fc30 	bl	8001e4c <HAL_GPIO_EXTI_Callback>
  }
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40013c00 	.word	0x40013c00

080025f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0cc      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b68      	ldr	r3, [pc, #416]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d90c      	bls.n	8002634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b65      	ldr	r3, [pc, #404]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a58      	ldr	r2, [pc, #352]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002656:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a52      	ldr	r2, [pc, #328]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800266e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d044      	beq.n	8002718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d119      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b3f      	ldr	r3, [pc, #252]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e06f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	4b3b      	ldr	r3, [pc, #236]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e067      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4b37      	ldr	r3, [pc, #220]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4934      	ldr	r1, [pc, #208]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e8:	f7ff fc64 	bl	8001fb4 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7ff fc60 	bl	8001fb4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e04f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	4b2b      	ldr	r3, [pc, #172]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 020c 	and.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d1eb      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002718:	4b25      	ldr	r3, [pc, #148]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d20c      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b22      	ldr	r3, [pc, #136]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276a:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f841 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fbc4 	bl	8001f2c <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00
 80027b4:	40023800 	.word	0x40023800
 80027b8:	0800483c 	.word	0x0800483c
 80027bc:	20000034 	.word	0x20000034
 80027c0:	20000038 	.word	0x20000038

080027c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c8:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000034 	.word	0x20000034

080027dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027e0:	f7ff fff0 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	0b5b      	lsrs	r3, r3, #13
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4903      	ldr	r1, [pc, #12]	@ (8002800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	0800484c 	.word	0x0800484c

08002804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002808:	b0ae      	sub	sp, #184	@ 0xb8
 800280a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800282a:	4bcb      	ldr	r3, [pc, #812]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x354>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b0c      	cmp	r3, #12
 8002834:	f200 8206 	bhi.w	8002c44 <HAL_RCC_GetSysClockFreq+0x440>
 8002838:	a201      	add	r2, pc, #4	@ (adr r2, 8002840 <HAL_RCC_GetSysClockFreq+0x3c>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002875 	.word	0x08002875
 8002844:	08002c45 	.word	0x08002c45
 8002848:	08002c45 	.word	0x08002c45
 800284c:	08002c45 	.word	0x08002c45
 8002850:	0800287d 	.word	0x0800287d
 8002854:	08002c45 	.word	0x08002c45
 8002858:	08002c45 	.word	0x08002c45
 800285c:	08002c45 	.word	0x08002c45
 8002860:	08002885 	.word	0x08002885
 8002864:	08002c45 	.word	0x08002c45
 8002868:	08002c45 	.word	0x08002c45
 800286c:	08002c45 	.word	0x08002c45
 8002870:	08002a75 	.word	0x08002a75
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4bb9      	ldr	r3, [pc, #740]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x358>)
 8002876:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800287a:	e1e7      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800287c:	4bb8      	ldr	r3, [pc, #736]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x35c>)
 800287e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002882:	e1e3      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002884:	4bb4      	ldr	r3, [pc, #720]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800288c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002890:	4bb1      	ldr	r3, [pc, #708]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d071      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289c:	4bae      	ldr	r3, [pc, #696]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x354>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	099b      	lsrs	r3, r3, #6
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80028ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028c2:	4622      	mov	r2, r4
 80028c4:	462b      	mov	r3, r5
 80028c6:	f04f 0000 	mov.w	r0, #0
 80028ca:	f04f 0100 	mov.w	r1, #0
 80028ce:	0159      	lsls	r1, r3, #5
 80028d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d4:	0150      	lsls	r0, r2, #5
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4621      	mov	r1, r4
 80028dc:	1a51      	subs	r1, r2, r1
 80028de:	6439      	str	r1, [r7, #64]	@ 0x40
 80028e0:	4629      	mov	r1, r5
 80028e2:	eb63 0301 	sbc.w	r3, r3, r1
 80028e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80028f4:	4649      	mov	r1, r9
 80028f6:	018b      	lsls	r3, r1, #6
 80028f8:	4641      	mov	r1, r8
 80028fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028fe:	4641      	mov	r1, r8
 8002900:	018a      	lsls	r2, r1, #6
 8002902:	4641      	mov	r1, r8
 8002904:	1a51      	subs	r1, r2, r1
 8002906:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002908:	4649      	mov	r1, r9
 800290a:	eb63 0301 	sbc.w	r3, r3, r1
 800290e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800291c:	4649      	mov	r1, r9
 800291e:	00cb      	lsls	r3, r1, #3
 8002920:	4641      	mov	r1, r8
 8002922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002926:	4641      	mov	r1, r8
 8002928:	00ca      	lsls	r2, r1, #3
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	4603      	mov	r3, r0
 8002930:	4622      	mov	r2, r4
 8002932:	189b      	adds	r3, r3, r2
 8002934:	633b      	str	r3, [r7, #48]	@ 0x30
 8002936:	462b      	mov	r3, r5
 8002938:	460a      	mov	r2, r1
 800293a:	eb42 0303 	adc.w	r3, r2, r3
 800293e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800294c:	4629      	mov	r1, r5
 800294e:	024b      	lsls	r3, r1, #9
 8002950:	4621      	mov	r1, r4
 8002952:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002956:	4621      	mov	r1, r4
 8002958:	024a      	lsls	r2, r1, #9
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002962:	2200      	movs	r2, #0
 8002964:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002968:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800296c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002970:	f7fd fc48 	bl	8000204 <__aeabi_uldivmod>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4613      	mov	r3, r2
 800297a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800297e:	e067      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002980:	4b75      	ldr	r3, [pc, #468]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	2200      	movs	r2, #0
 8002988:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800298c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002990:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002998:	67bb      	str	r3, [r7, #120]	@ 0x78
 800299a:	2300      	movs	r3, #0
 800299c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800299e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80029a2:	4622      	mov	r2, r4
 80029a4:	462b      	mov	r3, r5
 80029a6:	f04f 0000 	mov.w	r0, #0
 80029aa:	f04f 0100 	mov.w	r1, #0
 80029ae:	0159      	lsls	r1, r3, #5
 80029b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b4:	0150      	lsls	r0, r2, #5
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4621      	mov	r1, r4
 80029bc:	1a51      	subs	r1, r2, r1
 80029be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80029c0:	4629      	mov	r1, r5
 80029c2:	eb63 0301 	sbc.w	r3, r3, r1
 80029c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80029d4:	4649      	mov	r1, r9
 80029d6:	018b      	lsls	r3, r1, #6
 80029d8:	4641      	mov	r1, r8
 80029da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029de:	4641      	mov	r1, r8
 80029e0:	018a      	lsls	r2, r1, #6
 80029e2:	4641      	mov	r1, r8
 80029e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80029e8:	4649      	mov	r1, r9
 80029ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a02:	4692      	mov	sl, r2
 8002a04:	469b      	mov	fp, r3
 8002a06:	4623      	mov	r3, r4
 8002a08:	eb1a 0303 	adds.w	r3, sl, r3
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	462b      	mov	r3, r5
 8002a10:	eb4b 0303 	adc.w	r3, fp, r3
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a22:	4629      	mov	r1, r5
 8002a24:	028b      	lsls	r3, r1, #10
 8002a26:	4621      	mov	r1, r4
 8002a28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	028a      	lsls	r2, r1, #10
 8002a30:	4610      	mov	r0, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a38:	2200      	movs	r2, #0
 8002a3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a3c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a42:	f7fd fbdf 	bl	8000204 <__aeabi_uldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a50:	4b41      	ldr	r3, [pc, #260]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002a62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a72:	e0eb      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a74:	4b38      	ldr	r3, [pc, #224]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a80:	4b35      	ldr	r3, [pc, #212]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d06b      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8c:	4b32      	ldr	r3, [pc, #200]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	099b      	lsrs	r3, r3, #6
 8002a92:	2200      	movs	r2, #0
 8002a94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002aa4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	462b      	mov	r3, r5
 8002aac:	f04f 0000 	mov.w	r0, #0
 8002ab0:	f04f 0100 	mov.w	r1, #0
 8002ab4:	0159      	lsls	r1, r3, #5
 8002ab6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aba:	0150      	lsls	r0, r2, #5
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	1a51      	subs	r1, r2, r1
 8002ac4:	61b9      	str	r1, [r7, #24]
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	eb63 0301 	sbc.w	r3, r3, r1
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ada:	4659      	mov	r1, fp
 8002adc:	018b      	lsls	r3, r1, #6
 8002ade:	4651      	mov	r1, sl
 8002ae0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ae4:	4651      	mov	r1, sl
 8002ae6:	018a      	lsls	r2, r1, #6
 8002ae8:	4651      	mov	r1, sl
 8002aea:	ebb2 0801 	subs.w	r8, r2, r1
 8002aee:	4659      	mov	r1, fp
 8002af0:	eb63 0901 	sbc.w	r9, r3, r1
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b08:	4690      	mov	r8, r2
 8002b0a:	4699      	mov	r9, r3
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	eb18 0303 	adds.w	r3, r8, r3
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	462b      	mov	r3, r5
 8002b16:	eb49 0303 	adc.w	r3, r9, r3
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b28:	4629      	mov	r1, r5
 8002b2a:	024b      	lsls	r3, r1, #9
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b32:	4621      	mov	r1, r4
 8002b34:	024a      	lsls	r2, r1, #9
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b3e:	2200      	movs	r2, #0
 8002b40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b42:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b48:	f7fd fb5c 	bl	8000204 <__aeabi_uldivmod>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4613      	mov	r3, r2
 8002b52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b56:	e065      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x420>
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	00f42400 	.word	0x00f42400
 8002b60:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b64:	4b3d      	ldr	r3, [pc, #244]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x458>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	099b      	lsrs	r3, r3, #6
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	4611      	mov	r1, r2
 8002b70:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b74:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b76:	2300      	movs	r3, #0
 8002b78:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b7a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b7e:	4642      	mov	r2, r8
 8002b80:	464b      	mov	r3, r9
 8002b82:	f04f 0000 	mov.w	r0, #0
 8002b86:	f04f 0100 	mov.w	r1, #0
 8002b8a:	0159      	lsls	r1, r3, #5
 8002b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b90:	0150      	lsls	r0, r2, #5
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4641      	mov	r1, r8
 8002b98:	1a51      	subs	r1, r2, r1
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	4649      	mov	r1, r9
 8002b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002bb0:	4659      	mov	r1, fp
 8002bb2:	018b      	lsls	r3, r1, #6
 8002bb4:	4651      	mov	r1, sl
 8002bb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bba:	4651      	mov	r1, sl
 8002bbc:	018a      	lsls	r2, r1, #6
 8002bbe:	4651      	mov	r1, sl
 8002bc0:	1a54      	subs	r4, r2, r1
 8002bc2:	4659      	mov	r1, fp
 8002bc4:	eb63 0501 	sbc.w	r5, r3, r1
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	00eb      	lsls	r3, r5, #3
 8002bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bd6:	00e2      	lsls	r2, r4, #3
 8002bd8:	4614      	mov	r4, r2
 8002bda:	461d      	mov	r5, r3
 8002bdc:	4643      	mov	r3, r8
 8002bde:	18e3      	adds	r3, r4, r3
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	464b      	mov	r3, r9
 8002be4:	eb45 0303 	adc.w	r3, r5, r3
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	028b      	lsls	r3, r1, #10
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c00:	4621      	mov	r1, r4
 8002c02:	028a      	lsls	r2, r1, #10
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c10:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c16:	f7fd faf5 	bl	8000204 <__aeabi_uldivmod>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4613      	mov	r3, r2
 8002c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c24:	4b0d      	ldr	r3, [pc, #52]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x458>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	0f1b      	lsrs	r3, r3, #28
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002c32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c42:	e003      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	37b8      	adds	r7, #184	@ 0xb8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	00f42400 	.word	0x00f42400

08002c64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e28d      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8083 	beq.w	8002d8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c84:	4b94      	ldr	r3, [pc, #592]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d019      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c90:	4b91      	ldr	r3, [pc, #580]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c9c:	4b8e      	ldr	r3, [pc, #568]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ca4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002caa:	4b8b      	ldr	r3, [pc, #556]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d112      	bne.n	8002cdc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4b88      	ldr	r3, [pc, #544]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cc2:	d10b      	bne.n	8002cdc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	4b84      	ldr	r3, [pc, #528]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d05b      	beq.n	8002d88 <HAL_RCC_OscConfig+0x124>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d157      	bne.n	8002d88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e25a      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x90>
 8002ce6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a7b      	ldr	r2, [pc, #492]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e01d      	b.n	8002d30 <HAL_RCC_OscConfig+0xcc>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0xb4>
 8002cfe:	4b76      	ldr	r3, [pc, #472]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a75      	ldr	r2, [pc, #468]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002d04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	4b73      	ldr	r3, [pc, #460]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a72      	ldr	r2, [pc, #456]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0xcc>
 8002d18:	4b6f      	ldr	r3, [pc, #444]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4b6c      	ldr	r3, [pc, #432]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6b      	ldr	r2, [pc, #428]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002d2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d013      	beq.n	8002d60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7ff f93c 	bl	8001fb4 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d40:	f7ff f938 	bl	8001fb4 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	@ 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e21f      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	4b61      	ldr	r3, [pc, #388]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0xdc>
 8002d5e:	e014      	b.n	8002d8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7ff f928 	bl	8001fb4 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7ff f924 	bl	8001fb4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	@ 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e20b      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7a:	4b57      	ldr	r3, [pc, #348]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x104>
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d06f      	beq.n	8002e76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d96:	4b50      	ldr	r3, [pc, #320]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d017      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002da2:	4b4d      	ldr	r3, [pc, #308]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d105      	bne.n	8002dba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dae:	4b4a      	ldr	r3, [pc, #296]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b47      	ldr	r3, [pc, #284]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d11c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b44      	ldr	r3, [pc, #272]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d116      	bne.n	8002e00 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	4b41      	ldr	r3, [pc, #260]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_RCC_OscConfig+0x186>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d001      	beq.n	8002dea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e1d3      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dea:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4937      	ldr	r1, [pc, #220]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	e03a      	b.n	8002e76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d020      	beq.n	8002e4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e08:	4b34      	ldr	r3, [pc, #208]	@ (8002edc <HAL_RCC_OscConfig+0x278>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7ff f8d1 	bl	8001fb4 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e16:	f7ff f8cd 	bl	8001fb4 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e1b4      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e34:	4b28      	ldr	r3, [pc, #160]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4925      	ldr	r1, [pc, #148]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]
 8002e48:	e015      	b.n	8002e76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4a:	4b24      	ldr	r3, [pc, #144]	@ (8002edc <HAL_RCC_OscConfig+0x278>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7ff f8b0 	bl	8001fb4 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e58:	f7ff f8ac 	bl	8001fb4 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e193      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d036      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ee0 <HAL_RCC_OscConfig+0x27c>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7ff f890 	bl	8001fb4 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e98:	f7ff f88c 	bl	8001fb4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e173      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x234>
 8002eb6:	e01b      	b.n	8002ef0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <HAL_RCC_OscConfig+0x27c>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7ff f879 	bl	8001fb4 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec4:	e00e      	b.n	8002ee4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec6:	f7ff f875 	bl	8001fb4 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d907      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e15c      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	42470000 	.word	0x42470000
 8002ee0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	4b8a      	ldr	r3, [pc, #552]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1ea      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8097 	beq.w	800302c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f02:	4b83      	ldr	r3, [pc, #524]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	4b7f      	ldr	r3, [pc, #508]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	4a7e      	ldr	r2, [pc, #504]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f1e:	4b7c      	ldr	r3, [pc, #496]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2e:	4b79      	ldr	r3, [pc, #484]	@ (8003114 <HAL_RCC_OscConfig+0x4b0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d118      	bne.n	8002f6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3a:	4b76      	ldr	r3, [pc, #472]	@ (8003114 <HAL_RCC_OscConfig+0x4b0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a75      	ldr	r2, [pc, #468]	@ (8003114 <HAL_RCC_OscConfig+0x4b0>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f46:	f7ff f835 	bl	8001fb4 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4e:	f7ff f831 	bl	8001fb4 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e118      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	4b6c      	ldr	r3, [pc, #432]	@ (8003114 <HAL_RCC_OscConfig+0x4b0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d106      	bne.n	8002f82 <HAL_RCC_OscConfig+0x31e>
 8002f74:	4b66      	ldr	r3, [pc, #408]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f78:	4a65      	ldr	r2, [pc, #404]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f80:	e01c      	b.n	8002fbc <HAL_RCC_OscConfig+0x358>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b05      	cmp	r3, #5
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x340>
 8002f8a:	4b61      	ldr	r3, [pc, #388]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8e:	4a60      	ldr	r2, [pc, #384]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002f90:	f043 0304 	orr.w	r3, r3, #4
 8002f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f96:	4b5e      	ldr	r3, [pc, #376]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9a:	4a5d      	ldr	r2, [pc, #372]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCC_OscConfig+0x358>
 8002fa4:	4b5a      	ldr	r3, [pc, #360]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa8:	4a59      	ldr	r2, [pc, #356]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb0:	4b57      	ldr	r3, [pc, #348]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb4:	4a56      	ldr	r2, [pc, #344]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002fb6:	f023 0304 	bic.w	r3, r3, #4
 8002fba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d015      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7fe fff6 	bl	8001fb4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fcc:	f7fe fff2 	bl	8001fb4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e0d7      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ee      	beq.n	8002fcc <HAL_RCC_OscConfig+0x368>
 8002fee:	e014      	b.n	800301a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fe ffe0 	bl	8001fb4 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff6:	e00a      	b.n	800300e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff8:	f7fe ffdc 	bl	8001fb4 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e0c1      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300e:	4b40      	ldr	r3, [pc, #256]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1ee      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003020:	4b3b      	ldr	r3, [pc, #236]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	4a3a      	ldr	r2, [pc, #232]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8003026:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800302a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80ad 	beq.w	8003190 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003036:	4b36      	ldr	r3, [pc, #216]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b08      	cmp	r3, #8
 8003040:	d060      	beq.n	8003104 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d145      	bne.n	80030d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304a:	4b33      	ldr	r3, [pc, #204]	@ (8003118 <HAL_RCC_OscConfig+0x4b4>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe ffb0 	bl	8001fb4 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe ffac 	bl	8001fb4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e093      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	4b29      	ldr	r3, [pc, #164]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	019b      	lsls	r3, r3, #6
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	3b01      	subs	r3, #1
 8003090:	041b      	lsls	r3, r3, #16
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	071b      	lsls	r3, r3, #28
 80030a2:	491b      	ldr	r1, [pc, #108]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003118 <HAL_RCC_OscConfig+0x4b4>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7fe ff81 	bl	8001fb4 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fe ff7d 	bl	8001fb4 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e064      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c8:	4b11      	ldr	r3, [pc, #68]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x452>
 80030d4:	e05c      	b.n	8003190 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <HAL_RCC_OscConfig+0x4b4>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe ff6a 	bl	8001fb4 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe ff66 	bl	8001fb4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e04d      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <HAL_RCC_OscConfig+0x4ac>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x480>
 8003102:	e045      	b.n	8003190 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d107      	bne.n	800311c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e040      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
 8003110:	40023800 	.word	0x40023800
 8003114:	40007000 	.word	0x40007000
 8003118:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800311c:	4b1f      	ldr	r3, [pc, #124]	@ (800319c <HAL_RCC_OscConfig+0x538>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d030      	beq.n	800318c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d129      	bne.n	800318c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d122      	bne.n	800318c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800314c:	4013      	ands	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003152:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003154:	4293      	cmp	r3, r2
 8003156:	d119      	bne.n	800318c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	3b01      	subs	r3, #1
 8003166:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d10f      	bne.n	800318c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003176:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d107      	bne.n	800318c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800

080031a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e041      	b.n	8003236 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fe fc6c 	bl	8001aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3304      	adds	r3, #4
 80031dc:	4619      	mov	r1, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	f000 fe66 	bl	8003eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d001      	beq.n	8003258 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e046      	b.n	80032e6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a23      	ldr	r2, [pc, #140]	@ (80032f4 <HAL_TIM_Base_Start+0xb4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d022      	beq.n	80032b0 <HAL_TIM_Base_Start+0x70>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003272:	d01d      	beq.n	80032b0 <HAL_TIM_Base_Start+0x70>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1f      	ldr	r2, [pc, #124]	@ (80032f8 <HAL_TIM_Base_Start+0xb8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d018      	beq.n	80032b0 <HAL_TIM_Base_Start+0x70>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1e      	ldr	r2, [pc, #120]	@ (80032fc <HAL_TIM_Base_Start+0xbc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d013      	beq.n	80032b0 <HAL_TIM_Base_Start+0x70>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1c      	ldr	r2, [pc, #112]	@ (8003300 <HAL_TIM_Base_Start+0xc0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00e      	beq.n	80032b0 <HAL_TIM_Base_Start+0x70>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1b      	ldr	r2, [pc, #108]	@ (8003304 <HAL_TIM_Base_Start+0xc4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d009      	beq.n	80032b0 <HAL_TIM_Base_Start+0x70>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a19      	ldr	r2, [pc, #100]	@ (8003308 <HAL_TIM_Base_Start+0xc8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d004      	beq.n	80032b0 <HAL_TIM_Base_Start+0x70>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a18      	ldr	r2, [pc, #96]	@ (800330c <HAL_TIM_Base_Start+0xcc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d111      	bne.n	80032d4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d010      	beq.n	80032e4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0201 	orr.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d2:	e007      	b.n	80032e4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40000800 	.word	0x40000800
 8003300:	40000c00 	.word	0x40000c00
 8003304:	40010400 	.word	0x40010400
 8003308:	40014000 	.word	0x40014000
 800330c:	40001800 	.word	0x40001800

08003310 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e041      	b.n	80033a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f839 	bl	80033ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f000 fdae 	bl	8003eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_TIM_PWM_Start+0x24>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e022      	b.n	800342e <HAL_TIM_PWM_Start+0x6a>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d109      	bne.n	8003402 <HAL_TIM_PWM_Start+0x3e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	bf14      	ite	ne
 80033fa:	2301      	movne	r3, #1
 80033fc:	2300      	moveq	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	e015      	b.n	800342e <HAL_TIM_PWM_Start+0x6a>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d109      	bne.n	800341c <HAL_TIM_PWM_Start+0x58>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b01      	cmp	r3, #1
 8003412:	bf14      	ite	ne
 8003414:	2301      	movne	r3, #1
 8003416:	2300      	moveq	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e008      	b.n	800342e <HAL_TIM_PWM_Start+0x6a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e07c      	b.n	8003530 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <HAL_TIM_PWM_Start+0x82>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003444:	e013      	b.n	800346e <HAL_TIM_PWM_Start+0xaa>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b04      	cmp	r3, #4
 800344a:	d104      	bne.n	8003456 <HAL_TIM_PWM_Start+0x92>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003454:	e00b      	b.n	800346e <HAL_TIM_PWM_Start+0xaa>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b08      	cmp	r3, #8
 800345a:	d104      	bne.n	8003466 <HAL_TIM_PWM_Start+0xa2>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003464:	e003      	b.n	800346e <HAL_TIM_PWM_Start+0xaa>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2202      	movs	r2, #2
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2201      	movs	r2, #1
 8003474:	6839      	ldr	r1, [r7, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f001 f8a1 	bl	80045be <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a2d      	ldr	r2, [pc, #180]	@ (8003538 <HAL_TIM_PWM_Start+0x174>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d004      	beq.n	8003490 <HAL_TIM_PWM_Start+0xcc>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2c      	ldr	r2, [pc, #176]	@ (800353c <HAL_TIM_PWM_Start+0x178>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d101      	bne.n	8003494 <HAL_TIM_PWM_Start+0xd0>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_TIM_PWM_Start+0xd2>
 8003494:	2300      	movs	r3, #0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a22      	ldr	r2, [pc, #136]	@ (8003538 <HAL_TIM_PWM_Start+0x174>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d022      	beq.n	80034fa <HAL_TIM_PWM_Start+0x136>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034bc:	d01d      	beq.n	80034fa <HAL_TIM_PWM_Start+0x136>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003540 <HAL_TIM_PWM_Start+0x17c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d018      	beq.n	80034fa <HAL_TIM_PWM_Start+0x136>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003544 <HAL_TIM_PWM_Start+0x180>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_TIM_PWM_Start+0x136>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003548 <HAL_TIM_PWM_Start+0x184>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00e      	beq.n	80034fa <HAL_TIM_PWM_Start+0x136>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a16      	ldr	r2, [pc, #88]	@ (800353c <HAL_TIM_PWM_Start+0x178>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_TIM_PWM_Start+0x136>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a18      	ldr	r2, [pc, #96]	@ (800354c <HAL_TIM_PWM_Start+0x188>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_TIM_PWM_Start+0x136>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a16      	ldr	r2, [pc, #88]	@ (8003550 <HAL_TIM_PWM_Start+0x18c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d111      	bne.n	800351e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b06      	cmp	r3, #6
 800350a:	d010      	beq.n	800352e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351c:	e007      	b.n	800352e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40010000 	.word	0x40010000
 800353c:	40010400 	.word	0x40010400
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800
 8003548:	40000c00 	.word	0x40000c00
 800354c:	40014000 	.word	0x40014000
 8003550:	40001800 	.word	0x40001800

08003554 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d109      	bne.n	800357c <HAL_TIM_PWM_Start_IT+0x28>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	bf14      	ite	ne
 8003574:	2301      	movne	r3, #1
 8003576:	2300      	moveq	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	e022      	b.n	80035c2 <HAL_TIM_PWM_Start_IT+0x6e>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b04      	cmp	r3, #4
 8003580:	d109      	bne.n	8003596 <HAL_TIM_PWM_Start_IT+0x42>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	bf14      	ite	ne
 800358e:	2301      	movne	r3, #1
 8003590:	2300      	moveq	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	e015      	b.n	80035c2 <HAL_TIM_PWM_Start_IT+0x6e>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d109      	bne.n	80035b0 <HAL_TIM_PWM_Start_IT+0x5c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e008      	b.n	80035c2 <HAL_TIM_PWM_Start_IT+0x6e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e0c7      	b.n	800375a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <HAL_TIM_PWM_Start_IT+0x86>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035d8:	e013      	b.n	8003602 <HAL_TIM_PWM_Start_IT+0xae>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d104      	bne.n	80035ea <HAL_TIM_PWM_Start_IT+0x96>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035e8:	e00b      	b.n	8003602 <HAL_TIM_PWM_Start_IT+0xae>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_PWM_Start_IT+0xa6>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035f8:	e003      	b.n	8003602 <HAL_TIM_PWM_Start_IT+0xae>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	d841      	bhi.n	800368c <HAL_TIM_PWM_Start_IT+0x138>
 8003608:	a201      	add	r2, pc, #4	@ (adr r2, 8003610 <HAL_TIM_PWM_Start_IT+0xbc>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003645 	.word	0x08003645
 8003614:	0800368d 	.word	0x0800368d
 8003618:	0800368d 	.word	0x0800368d
 800361c:	0800368d 	.word	0x0800368d
 8003620:	08003657 	.word	0x08003657
 8003624:	0800368d 	.word	0x0800368d
 8003628:	0800368d 	.word	0x0800368d
 800362c:	0800368d 	.word	0x0800368d
 8003630:	08003669 	.word	0x08003669
 8003634:	0800368d 	.word	0x0800368d
 8003638:	0800368d 	.word	0x0800368d
 800363c:	0800368d 	.word	0x0800368d
 8003640:	0800367b 	.word	0x0800367b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0202 	orr.w	r2, r2, #2
 8003652:	60da      	str	r2, [r3, #12]
      break;
 8003654:	e01d      	b.n	8003692 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0204 	orr.w	r2, r2, #4
 8003664:	60da      	str	r2, [r3, #12]
      break;
 8003666:	e014      	b.n	8003692 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0208 	orr.w	r2, r2, #8
 8003676:	60da      	str	r2, [r3, #12]
      break;
 8003678:	e00b      	b.n	8003692 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0210 	orr.w	r2, r2, #16
 8003688:	60da      	str	r2, [r3, #12]
      break;
 800368a:	e002      	b.n	8003692 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	bf00      	nop
  }

  if (status == HAL_OK)
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d15f      	bne.n	8003758 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2201      	movs	r2, #1
 800369e:	6839      	ldr	r1, [r7, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 ff8c 	bl	80045be <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003764 <HAL_TIM_PWM_Start_IT+0x210>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d004      	beq.n	80036ba <HAL_TIM_PWM_Start_IT+0x166>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003768 <HAL_TIM_PWM_Start_IT+0x214>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_TIM_PWM_Start_IT+0x16a>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_TIM_PWM_Start_IT+0x16c>
 80036be:	2300      	movs	r3, #0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d007      	beq.n	80036d4 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a22      	ldr	r2, [pc, #136]	@ (8003764 <HAL_TIM_PWM_Start_IT+0x210>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d022      	beq.n	8003724 <HAL_TIM_PWM_Start_IT+0x1d0>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e6:	d01d      	beq.n	8003724 <HAL_TIM_PWM_Start_IT+0x1d0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1f      	ldr	r2, [pc, #124]	@ (800376c <HAL_TIM_PWM_Start_IT+0x218>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d018      	beq.n	8003724 <HAL_TIM_PWM_Start_IT+0x1d0>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003770 <HAL_TIM_PWM_Start_IT+0x21c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d013      	beq.n	8003724 <HAL_TIM_PWM_Start_IT+0x1d0>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1c      	ldr	r2, [pc, #112]	@ (8003774 <HAL_TIM_PWM_Start_IT+0x220>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00e      	beq.n	8003724 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a17      	ldr	r2, [pc, #92]	@ (8003768 <HAL_TIM_PWM_Start_IT+0x214>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d009      	beq.n	8003724 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a18      	ldr	r2, [pc, #96]	@ (8003778 <HAL_TIM_PWM_Start_IT+0x224>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_TIM_PWM_Start_IT+0x1d0>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a17      	ldr	r2, [pc, #92]	@ (800377c <HAL_TIM_PWM_Start_IT+0x228>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d111      	bne.n	8003748 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b06      	cmp	r3, #6
 8003734:	d010      	beq.n	8003758 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0201 	orr.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003746:	e007      	b.n	8003758 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40010000 	.word	0x40010000
 8003768:	40010400 	.word	0x40010400
 800376c:	40000400 	.word	0x40000400
 8003770:	40000800 	.word	0x40000800
 8003774:	40000c00 	.word	0x40000c00
 8003778:	40014000 	.word	0x40014000
 800377c:	40001800 	.word	0x40001800

08003780 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b0c      	cmp	r3, #12
 8003792:	d841      	bhi.n	8003818 <HAL_TIM_PWM_Stop_IT+0x98>
 8003794:	a201      	add	r2, pc, #4	@ (adr r2, 800379c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379a:	bf00      	nop
 800379c:	080037d1 	.word	0x080037d1
 80037a0:	08003819 	.word	0x08003819
 80037a4:	08003819 	.word	0x08003819
 80037a8:	08003819 	.word	0x08003819
 80037ac:	080037e3 	.word	0x080037e3
 80037b0:	08003819 	.word	0x08003819
 80037b4:	08003819 	.word	0x08003819
 80037b8:	08003819 	.word	0x08003819
 80037bc:	080037f5 	.word	0x080037f5
 80037c0:	08003819 	.word	0x08003819
 80037c4:	08003819 	.word	0x08003819
 80037c8:	08003819 	.word	0x08003819
 80037cc:	08003807 	.word	0x08003807
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0202 	bic.w	r2, r2, #2
 80037de:	60da      	str	r2, [r3, #12]
      break;
 80037e0:	e01d      	b.n	800381e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0204 	bic.w	r2, r2, #4
 80037f0:	60da      	str	r2, [r3, #12]
      break;
 80037f2:	e014      	b.n	800381e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0208 	bic.w	r2, r2, #8
 8003802:	60da      	str	r2, [r3, #12]
      break;
 8003804:	e00b      	b.n	800381e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0210 	bic.w	r2, r2, #16
 8003814:	60da      	str	r2, [r3, #12]
      break;
 8003816:	e002      	b.n	800381e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      break;
 800381c:	bf00      	nop
  }

  if (status == HAL_OK)
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d161      	bne.n	80038e8 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2200      	movs	r2, #0
 800382a:	6839      	ldr	r1, [r7, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fec6 	bl	80045be <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a2f      	ldr	r2, [pc, #188]	@ (80038f4 <HAL_TIM_PWM_Stop_IT+0x174>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d004      	beq.n	8003846 <HAL_TIM_PWM_Stop_IT+0xc6>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2d      	ldr	r2, [pc, #180]	@ (80038f8 <HAL_TIM_PWM_Stop_IT+0x178>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <HAL_TIM_PWM_Stop_IT+0xca>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_TIM_PWM_Stop_IT+0xcc>
 800384a:	2300      	movs	r3, #0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d017      	beq.n	8003880 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6a1a      	ldr	r2, [r3, #32]
 8003856:	f241 1311 	movw	r3, #4369	@ 0x1111
 800385a:	4013      	ands	r3, r2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10f      	bne.n	8003880 <HAL_TIM_PWM_Stop_IT+0x100>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6a1a      	ldr	r2, [r3, #32]
 8003866:	f240 4344 	movw	r3, #1092	@ 0x444
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d107      	bne.n	8003880 <HAL_TIM_PWM_Stop_IT+0x100>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800387e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6a1a      	ldr	r2, [r3, #32]
 8003886:	f241 1311 	movw	r3, #4369	@ 0x1111
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10f      	bne.n	80038b0 <HAL_TIM_PWM_Stop_IT+0x130>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6a1a      	ldr	r2, [r3, #32]
 8003896:	f240 4344 	movw	r3, #1092	@ 0x444
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d107      	bne.n	80038b0 <HAL_TIM_PWM_Stop_IT+0x130>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d104      	bne.n	80038c0 <HAL_TIM_PWM_Stop_IT+0x140>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038be:	e013      	b.n	80038e8 <HAL_TIM_PWM_Stop_IT+0x168>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d104      	bne.n	80038d0 <HAL_TIM_PWM_Stop_IT+0x150>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038ce:	e00b      	b.n	80038e8 <HAL_TIM_PWM_Stop_IT+0x168>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d104      	bne.n	80038e0 <HAL_TIM_PWM_Stop_IT+0x160>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038de:	e003      	b.n	80038e8 <HAL_TIM_PWM_Stop_IT+0x168>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40010000 	.word	0x40010000
 80038f8:	40010400 	.word	0x40010400

080038fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d020      	beq.n	8003960 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01b      	beq.n	8003960 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0202 	mvn.w	r2, #2
 8003930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fa9d 	bl	8003e86 <HAL_TIM_IC_CaptureCallback>
 800394c:	e005      	b.n	800395a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fa8f 	bl	8003e72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7fd f887 	bl	8000a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	d020      	beq.n	80039ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01b      	beq.n	80039ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0204 	mvn.w	r2, #4
 800397c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fa77 	bl	8003e86 <HAL_TIM_IC_CaptureCallback>
 8003998:	e005      	b.n	80039a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fa69 	bl	8003e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7fd f861 	bl	8000a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d020      	beq.n	80039f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01b      	beq.n	80039f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0208 	mvn.w	r2, #8
 80039c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2204      	movs	r2, #4
 80039ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fa51 	bl	8003e86 <HAL_TIM_IC_CaptureCallback>
 80039e4:	e005      	b.n	80039f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fa43 	bl	8003e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7fd f83b 	bl	8000a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d020      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01b      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0210 	mvn.w	r2, #16
 8003a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2208      	movs	r2, #8
 8003a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fa2b 	bl	8003e86 <HAL_TIM_IC_CaptureCallback>
 8003a30:	e005      	b.n	8003a3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fa1d 	bl	8003e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fd f815 	bl	8000a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d007      	beq.n	8003a68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0201 	mvn.w	r2, #1
 8003a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fc fff6 	bl	8000a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00c      	beq.n	8003a8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fe96 	bl	80047b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00c      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f9f5 	bl	8003e9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00c      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0220 	mvn.w	r2, #32
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fe68 	bl	80047a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e0ae      	b.n	8003c58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	f200 809f 	bhi.w	8003c48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b45 	.word	0x08003b45
 8003b14:	08003c49 	.word	0x08003c49
 8003b18:	08003c49 	.word	0x08003c49
 8003b1c:	08003c49 	.word	0x08003c49
 8003b20:	08003b85 	.word	0x08003b85
 8003b24:	08003c49 	.word	0x08003c49
 8003b28:	08003c49 	.word	0x08003c49
 8003b2c:	08003c49 	.word	0x08003c49
 8003b30:	08003bc7 	.word	0x08003bc7
 8003b34:	08003c49 	.word	0x08003c49
 8003b38:	08003c49 	.word	0x08003c49
 8003b3c:	08003c49 	.word	0x08003c49
 8003b40:	08003c07 	.word	0x08003c07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fa5c 	bl	8004008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0208 	orr.w	r2, r2, #8
 8003b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0204 	bic.w	r2, r2, #4
 8003b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6999      	ldr	r1, [r3, #24]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	619a      	str	r2, [r3, #24]
      break;
 8003b82:	e064      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 faac 	bl	80040e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6999      	ldr	r1, [r3, #24]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	021a      	lsls	r2, r3, #8
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	619a      	str	r2, [r3, #24]
      break;
 8003bc4:	e043      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fb01 	bl	80041d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0208 	orr.w	r2, r2, #8
 8003be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0204 	bic.w	r2, r2, #4
 8003bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69d9      	ldr	r1, [r3, #28]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	61da      	str	r2, [r3, #28]
      break;
 8003c04:	e023      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fb55 	bl	80042bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69d9      	ldr	r1, [r3, #28]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	021a      	lsls	r2, r3, #8
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	61da      	str	r2, [r3, #28]
      break;
 8003c46:	e002      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_TIM_ConfigClockSource+0x1c>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e0b4      	b.n	8003de6 <HAL_TIM_ConfigClockSource+0x186>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb4:	d03e      	beq.n	8003d34 <HAL_TIM_ConfigClockSource+0xd4>
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cba:	f200 8087 	bhi.w	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc2:	f000 8086 	beq.w	8003dd2 <HAL_TIM_ConfigClockSource+0x172>
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cca:	d87f      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b70      	cmp	r3, #112	@ 0x70
 8003cce:	d01a      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0xa6>
 8003cd0:	2b70      	cmp	r3, #112	@ 0x70
 8003cd2:	d87b      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b60      	cmp	r3, #96	@ 0x60
 8003cd6:	d050      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x11a>
 8003cd8:	2b60      	cmp	r3, #96	@ 0x60
 8003cda:	d877      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cdc:	2b50      	cmp	r3, #80	@ 0x50
 8003cde:	d03c      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0xfa>
 8003ce0:	2b50      	cmp	r3, #80	@ 0x50
 8003ce2:	d873      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003ce4:	2b40      	cmp	r3, #64	@ 0x40
 8003ce6:	d058      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x13a>
 8003ce8:	2b40      	cmp	r3, #64	@ 0x40
 8003cea:	d86f      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cec:	2b30      	cmp	r3, #48	@ 0x30
 8003cee:	d064      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x15a>
 8003cf0:	2b30      	cmp	r3, #48	@ 0x30
 8003cf2:	d86b      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d060      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x15a>
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d867      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d05c      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x15a>
 8003d00:	2b10      	cmp	r3, #16
 8003d02:	d05a      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x15a>
 8003d04:	e062      	b.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d16:	f000 fc32 	bl	800457e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	609a      	str	r2, [r3, #8]
      break;
 8003d32:	e04f      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d44:	f000 fc1b 	bl	800457e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d56:	609a      	str	r2, [r3, #8]
      break;
 8003d58:	e03c      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d66:	461a      	mov	r2, r3
 8003d68:	f000 fb8f 	bl	800448a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2150      	movs	r1, #80	@ 0x50
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fbe8 	bl	8004548 <TIM_ITRx_SetConfig>
      break;
 8003d78:	e02c      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d86:	461a      	mov	r2, r3
 8003d88:	f000 fbae 	bl	80044e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2160      	movs	r1, #96	@ 0x60
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fbd8 	bl	8004548 <TIM_ITRx_SetConfig>
      break;
 8003d98:	e01c      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da6:	461a      	mov	r2, r3
 8003da8:	f000 fb6f 	bl	800448a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2140      	movs	r1, #64	@ 0x40
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fbc8 	bl	8004548 <TIM_ITRx_SetConfig>
      break;
 8003db8:	e00c      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	f000 fbbf 	bl	8004548 <TIM_ITRx_SetConfig>
      break;
 8003dca:	e003      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd0:	e000      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e031      	b.n	8003e6a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2202      	movs	r2, #2
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003e16:	6839      	ldr	r1, [r7, #0]
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 faa5 	bl	8004368 <TIM_SlaveTimer_SetConfig>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d009      	beq.n	8003e38 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e018      	b.n	8003e6a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e46:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e56:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a46      	ldr	r2, [pc, #280]	@ (8003fdc <TIM_Base_SetConfig+0x12c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d013      	beq.n	8003ef0 <TIM_Base_SetConfig+0x40>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ece:	d00f      	beq.n	8003ef0 <TIM_Base_SetConfig+0x40>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a43      	ldr	r2, [pc, #268]	@ (8003fe0 <TIM_Base_SetConfig+0x130>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00b      	beq.n	8003ef0 <TIM_Base_SetConfig+0x40>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a42      	ldr	r2, [pc, #264]	@ (8003fe4 <TIM_Base_SetConfig+0x134>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d007      	beq.n	8003ef0 <TIM_Base_SetConfig+0x40>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a41      	ldr	r2, [pc, #260]	@ (8003fe8 <TIM_Base_SetConfig+0x138>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a40      	ldr	r2, [pc, #256]	@ (8003fec <TIM_Base_SetConfig+0x13c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d108      	bne.n	8003f02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a35      	ldr	r2, [pc, #212]	@ (8003fdc <TIM_Base_SetConfig+0x12c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d02b      	beq.n	8003f62 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f10:	d027      	beq.n	8003f62 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a32      	ldr	r2, [pc, #200]	@ (8003fe0 <TIM_Base_SetConfig+0x130>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d023      	beq.n	8003f62 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a31      	ldr	r2, [pc, #196]	@ (8003fe4 <TIM_Base_SetConfig+0x134>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01f      	beq.n	8003f62 <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a30      	ldr	r2, [pc, #192]	@ (8003fe8 <TIM_Base_SetConfig+0x138>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01b      	beq.n	8003f62 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a2f      	ldr	r2, [pc, #188]	@ (8003fec <TIM_Base_SetConfig+0x13c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d017      	beq.n	8003f62 <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2e      	ldr	r2, [pc, #184]	@ (8003ff0 <TIM_Base_SetConfig+0x140>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff4 <TIM_Base_SetConfig+0x144>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00f      	beq.n	8003f62 <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff8 <TIM_Base_SetConfig+0x148>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003ffc <TIM_Base_SetConfig+0x14c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d007      	beq.n	8003f62 <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a2a      	ldr	r2, [pc, #168]	@ (8004000 <TIM_Base_SetConfig+0x150>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a29      	ldr	r2, [pc, #164]	@ (8004004 <TIM_Base_SetConfig+0x154>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d108      	bne.n	8003f74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a10      	ldr	r2, [pc, #64]	@ (8003fdc <TIM_Base_SetConfig+0x12c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_Base_SetConfig+0xf8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a12      	ldr	r2, [pc, #72]	@ (8003fec <TIM_Base_SetConfig+0x13c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d103      	bne.n	8003fb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d105      	bne.n	8003fce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f023 0201 	bic.w	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	611a      	str	r2, [r3, #16]
  }
}
 8003fce:	bf00      	nop
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	40010400 	.word	0x40010400
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	40014400 	.word	0x40014400
 8003ff8:	40014800 	.word	0x40014800
 8003ffc:	40001800 	.word	0x40001800
 8004000:	40001c00 	.word	0x40001c00
 8004004:	40002000 	.word	0x40002000

08004008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f023 0201 	bic.w	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 0302 	bic.w	r3, r3, #2
 8004050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a20      	ldr	r2, [pc, #128]	@ (80040e0 <TIM_OC1_SetConfig+0xd8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_OC1_SetConfig+0x64>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a1f      	ldr	r2, [pc, #124]	@ (80040e4 <TIM_OC1_SetConfig+0xdc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d10c      	bne.n	8004086 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0308 	bic.w	r3, r3, #8
 8004072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f023 0304 	bic.w	r3, r3, #4
 8004084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a15      	ldr	r2, [pc, #84]	@ (80040e0 <TIM_OC1_SetConfig+0xd8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_OC1_SetConfig+0x8e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a14      	ldr	r2, [pc, #80]	@ (80040e4 <TIM_OC1_SetConfig+0xdc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d111      	bne.n	80040ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800409c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40010400 	.word	0x40010400

080040e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f023 0210 	bic.w	r2, r3, #16
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800411e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0320 	bic.w	r3, r3, #32
 8004132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a22      	ldr	r2, [pc, #136]	@ (80041cc <TIM_OC2_SetConfig+0xe4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC2_SetConfig+0x68>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a21      	ldr	r2, [pc, #132]	@ (80041d0 <TIM_OC2_SetConfig+0xe8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10d      	bne.n	800416c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800416a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a17      	ldr	r2, [pc, #92]	@ (80041cc <TIM_OC2_SetConfig+0xe4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC2_SetConfig+0x94>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a16      	ldr	r2, [pc, #88]	@ (80041d0 <TIM_OC2_SetConfig+0xe8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d113      	bne.n	80041a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800418a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40010400 	.word	0x40010400

080041d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800421c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a21      	ldr	r2, [pc, #132]	@ (80042b4 <TIM_OC3_SetConfig+0xe0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_OC3_SetConfig+0x66>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a20      	ldr	r2, [pc, #128]	@ (80042b8 <TIM_OC3_SetConfig+0xe4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10d      	bne.n	8004256 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a16      	ldr	r2, [pc, #88]	@ (80042b4 <TIM_OC3_SetConfig+0xe0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_OC3_SetConfig+0x92>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a15      	ldr	r2, [pc, #84]	@ (80042b8 <TIM_OC3_SetConfig+0xe4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d113      	bne.n	800428e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800426c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	621a      	str	r2, [r3, #32]
}
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	40010000 	.word	0x40010000
 80042b8:	40010400 	.word	0x40010400

080042bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	031b      	lsls	r3, r3, #12
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a12      	ldr	r2, [pc, #72]	@ (8004360 <TIM_OC4_SetConfig+0xa4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_OC4_SetConfig+0x68>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a11      	ldr	r2, [pc, #68]	@ (8004364 <TIM_OC4_SetConfig+0xa8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d109      	bne.n	8004338 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800432a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	019b      	lsls	r3, r3, #6
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40010000 	.word	0x40010000
 8004364:	40010400 	.word	0x40010400

08004368 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004384:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f023 0307 	bic.w	r3, r3, #7
 8004396:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b70      	cmp	r3, #112	@ 0x70
 80043b0:	d01a      	beq.n	80043e8 <TIM_SlaveTimer_SetConfig+0x80>
 80043b2:	2b70      	cmp	r3, #112	@ 0x70
 80043b4:	d860      	bhi.n	8004478 <TIM_SlaveTimer_SetConfig+0x110>
 80043b6:	2b60      	cmp	r3, #96	@ 0x60
 80043b8:	d054      	beq.n	8004464 <TIM_SlaveTimer_SetConfig+0xfc>
 80043ba:	2b60      	cmp	r3, #96	@ 0x60
 80043bc:	d85c      	bhi.n	8004478 <TIM_SlaveTimer_SetConfig+0x110>
 80043be:	2b50      	cmp	r3, #80	@ 0x50
 80043c0:	d046      	beq.n	8004450 <TIM_SlaveTimer_SetConfig+0xe8>
 80043c2:	2b50      	cmp	r3, #80	@ 0x50
 80043c4:	d858      	bhi.n	8004478 <TIM_SlaveTimer_SetConfig+0x110>
 80043c6:	2b40      	cmp	r3, #64	@ 0x40
 80043c8:	d019      	beq.n	80043fe <TIM_SlaveTimer_SetConfig+0x96>
 80043ca:	2b40      	cmp	r3, #64	@ 0x40
 80043cc:	d854      	bhi.n	8004478 <TIM_SlaveTimer_SetConfig+0x110>
 80043ce:	2b30      	cmp	r3, #48	@ 0x30
 80043d0:	d055      	beq.n	800447e <TIM_SlaveTimer_SetConfig+0x116>
 80043d2:	2b30      	cmp	r3, #48	@ 0x30
 80043d4:	d850      	bhi.n	8004478 <TIM_SlaveTimer_SetConfig+0x110>
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d051      	beq.n	800447e <TIM_SlaveTimer_SetConfig+0x116>
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d84c      	bhi.n	8004478 <TIM_SlaveTimer_SetConfig+0x110>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d04d      	beq.n	800447e <TIM_SlaveTimer_SetConfig+0x116>
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d04b      	beq.n	800447e <TIM_SlaveTimer_SetConfig+0x116>
 80043e6:	e047      	b.n	8004478 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80043f8:	f000 f8c1 	bl	800457e <TIM_ETR_SetConfig>
      break;
 80043fc:	e040      	b.n	8004480 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b05      	cmp	r3, #5
 8004404:	d101      	bne.n	800440a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e03b      	b.n	8004482 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6a1a      	ldr	r2, [r3, #32]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004430:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	4313      	orrs	r3, r2
 800443c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	621a      	str	r2, [r3, #32]
      break;
 800444e:	e017      	b.n	8004480 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800445c:	461a      	mov	r2, r3
 800445e:	f000 f814 	bl	800448a <TIM_TI1_ConfigInputStage>
      break;
 8004462:	e00d      	b.n	8004480 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004470:	461a      	mov	r2, r3
 8004472:	f000 f839 	bl	80044e8 <TIM_TI2_ConfigInputStage>
      break;
 8004476:	e003      	b.n	8004480 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	75fb      	strb	r3, [r7, #23]
      break;
 800447c:	e000      	b.n	8004480 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800447e:	bf00      	nop
  }

  return status;
 8004480:	7dfb      	ldrb	r3, [r7, #23]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800448a:	b480      	push	{r7}
 800448c:	b087      	sub	sp, #28
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f023 0201 	bic.w	r2, r3, #1
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f023 030a 	bic.w	r3, r3, #10
 80044c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	621a      	str	r2, [r3, #32]
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f023 0210 	bic.w	r2, r3, #16
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	031b      	lsls	r3, r3, #12
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004524:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	621a      	str	r2, [r3, #32]
}
 800453c:	bf00      	nop
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	f043 0307 	orr.w	r3, r3, #7
 800456a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	609a      	str	r2, [r3, #8]
}
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800457e:	b480      	push	{r7}
 8004580:	b087      	sub	sp, #28
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004598:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	021a      	lsls	r2, r3, #8
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	431a      	orrs	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	609a      	str	r2, [r3, #8]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045be:	b480      	push	{r7}
 80045c0:	b087      	sub	sp, #28
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	2201      	movs	r2, #1
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1a      	ldr	r2, [r3, #32]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	43db      	mvns	r3, r3
 80045e0:	401a      	ands	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1a      	ldr	r2, [r3, #32]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	fa01 f303 	lsl.w	r3, r1, r3
 80045f6:	431a      	orrs	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800461c:	2302      	movs	r3, #2
 800461e:	e05a      	b.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a21      	ldr	r2, [pc, #132]	@ (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d022      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800466c:	d01d      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a1d      	ldr	r2, [pc, #116]	@ (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d018      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1b      	ldr	r2, [pc, #108]	@ (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d013      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1a      	ldr	r2, [pc, #104]	@ (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00e      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a18      	ldr	r2, [pc, #96]	@ (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d009      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a17      	ldr	r2, [pc, #92]	@ (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d004      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a15      	ldr	r2, [pc, #84]	@ (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d10c      	bne.n	80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40010400 	.word	0x40010400
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40001800 	.word	0x40001800

08004700 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004718:	2302      	movs	r3, #2
 800471a:	e03d      	b.n	8004798 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <memset>:
 80047cc:	4402      	add	r2, r0
 80047ce:	4603      	mov	r3, r0
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d100      	bne.n	80047d6 <memset+0xa>
 80047d4:	4770      	bx	lr
 80047d6:	f803 1b01 	strb.w	r1, [r3], #1
 80047da:	e7f9      	b.n	80047d0 <memset+0x4>

080047dc <__libc_init_array>:
 80047dc:	b570      	push	{r4, r5, r6, lr}
 80047de:	4d0d      	ldr	r5, [pc, #52]	@ (8004814 <__libc_init_array+0x38>)
 80047e0:	4c0d      	ldr	r4, [pc, #52]	@ (8004818 <__libc_init_array+0x3c>)
 80047e2:	1b64      	subs	r4, r4, r5
 80047e4:	10a4      	asrs	r4, r4, #2
 80047e6:	2600      	movs	r6, #0
 80047e8:	42a6      	cmp	r6, r4
 80047ea:	d109      	bne.n	8004800 <__libc_init_array+0x24>
 80047ec:	4d0b      	ldr	r5, [pc, #44]	@ (800481c <__libc_init_array+0x40>)
 80047ee:	4c0c      	ldr	r4, [pc, #48]	@ (8004820 <__libc_init_array+0x44>)
 80047f0:	f000 f818 	bl	8004824 <_init>
 80047f4:	1b64      	subs	r4, r4, r5
 80047f6:	10a4      	asrs	r4, r4, #2
 80047f8:	2600      	movs	r6, #0
 80047fa:	42a6      	cmp	r6, r4
 80047fc:	d105      	bne.n	800480a <__libc_init_array+0x2e>
 80047fe:	bd70      	pop	{r4, r5, r6, pc}
 8004800:	f855 3b04 	ldr.w	r3, [r5], #4
 8004804:	4798      	blx	r3
 8004806:	3601      	adds	r6, #1
 8004808:	e7ee      	b.n	80047e8 <__libc_init_array+0xc>
 800480a:	f855 3b04 	ldr.w	r3, [r5], #4
 800480e:	4798      	blx	r3
 8004810:	3601      	adds	r6, #1
 8004812:	e7f2      	b.n	80047fa <__libc_init_array+0x1e>
 8004814:	0800485c 	.word	0x0800485c
 8004818:	0800485c 	.word	0x0800485c
 800481c:	0800485c 	.word	0x0800485c
 8004820:	08004860 	.word	0x08004860

08004824 <_init>:
 8004824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004826:	bf00      	nop
 8004828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482a:	bc08      	pop	{r3}
 800482c:	469e      	mov	lr, r3
 800482e:	4770      	bx	lr

08004830 <_fini>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	bf00      	nop
 8004834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004836:	bc08      	pop	{r3}
 8004838:	469e      	mov	lr, r3
 800483a:	4770      	bx	lr
