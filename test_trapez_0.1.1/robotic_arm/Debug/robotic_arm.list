
robotic_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004880  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004a44  08004a44  00005a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a5c  08004a5c  00006034  2**0
                  CONTENTS
  4 .ARM          00000008  08004a5c  08004a5c  00005a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a64  08004a64  00006034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a64  08004a64  00005a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a68  08004a68  00005a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08004a6c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000034  08004aa0  00006034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08004aa0  00006394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb33  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002225  00000000  00000000  00014b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00016dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a52  00000000  00000000  00017af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021802  00000000  00000000  0001854a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107b9  00000000  00000000  00039d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd700  00000000  00000000  0004a505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117c05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000367c  00000000  00000000  00117c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0011b2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000034 	.word	0x20000034
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004a2c 	.word	0x08004a2c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000038 	.word	0x20000038
 8000200:	08004a2c 	.word	0x08004a2c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	4b4e      	ldr	r3, [pc, #312]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a4d      	ldr	r2, [pc, #308]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b4b      	ldr	r3, [pc, #300]	@ (8000648 <MX_GPIO_Init+0x154>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	4b47      	ldr	r3, [pc, #284]	@ (8000648 <MX_GPIO_Init+0x154>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a46      	ldr	r2, [pc, #280]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b44      	ldr	r3, [pc, #272]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4b40      	ldr	r3, [pc, #256]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a3f      	ldr	r2, [pc, #252]	@ (8000648 <MX_GPIO_Init+0x154>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b3d      	ldr	r3, [pc, #244]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b39      	ldr	r3, [pc, #228]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a38      	ldr	r2, [pc, #224]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b36      	ldr	r3, [pc, #216]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIRECTION4_Pin|DIRECTION3_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	21c0      	movs	r1, #192	@ 0xc0
 800057e:	4833      	ldr	r0, [pc, #204]	@ (800064c <MX_GPIO_Init+0x158>)
 8000580:	f001 fef4 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION2_GPIO_Port, DIRECTION2_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2110      	movs	r1, #16
 8000588:	4831      	ldr	r0, [pc, #196]	@ (8000650 <MX_GPIO_Init+0x15c>)
 800058a:	f001 feef 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2120      	movs	r1, #32
 8000592:	482f      	ldr	r0, [pc, #188]	@ (8000650 <MX_GPIO_Init+0x15c>)
 8000594:	f001 feea 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION1_GPIO_Port, DIRECTION1_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2101      	movs	r1, #1
 800059c:	482d      	ldr	r0, [pc, #180]	@ (8000654 <MX_GPIO_Init+0x160>)
 800059e:	f001 fee5 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISABLE_button_Pin;
 80005a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISABLE_button_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	4825      	ldr	r0, [pc, #148]	@ (8000650 <MX_GPIO_Init+0x15c>)
 80005ba:	f001 fd43 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIRECTION4_Pin|DIRECTION3_Pin;
 80005be:	23c0      	movs	r3, #192	@ 0xc0
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005c6:	2302      	movs	r3, #2
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	481d      	ldr	r0, [pc, #116]	@ (800064c <MX_GPIO_Init+0x158>)
 80005d6:	f001 fd35 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRECTION2_Pin;
 80005da:	2310      	movs	r3, #16
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION2_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	4817      	ldr	r0, [pc, #92]	@ (8000650 <MX_GPIO_Init+0x15c>)
 80005f2:	f001 fd27 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80005f6:	2320      	movs	r3, #32
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005fe:	2301      	movs	r3, #1
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000602:	2302      	movs	r3, #2
 8000604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4810      	ldr	r0, [pc, #64]	@ (8000650 <MX_GPIO_Init+0x15c>)
 800060e:	f001 fd19 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRECTION1_Pin;
 8000612:	2301      	movs	r3, #1
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800061a:	2302      	movs	r3, #2
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION1_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	480a      	ldr	r0, [pc, #40]	@ (8000654 <MX_GPIO_Init+0x160>)
 800062a:	f001 fd0b 	bl	8002044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	2028      	movs	r0, #40	@ 0x28
 8000634:	f001 fccf 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000638:	2028      	movs	r0, #40	@ 0x28
 800063a:	f001 fce8 	bl	800200e <HAL_NVIC_EnableIRQ>

}
 800063e:	bf00      	nop
 8000640:	3728      	adds	r7, #40	@ 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40020000 	.word	0x40020000
 8000650:	40020800 	.word	0x40020800
 8000654:	40020400 	.word	0x40020400

08000658 <TIM_Cmd>:
int acc_count; //debug
int dec_count; //debug

// int arr; //debug

void TIM_Cmd(TIM_TypeDef *TIMx, FunctionalState NewState) { //to disable the timers
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	70fb      	strb	r3, [r7, #3]
	/* Check the parameters */
	assert_param(IS_TIM_ALL_PERIPH(TIMx));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <TIM_Cmd+0x20>
		/* Enable the TIM Counter */
		TIMx->CR1 |= TIM_CR1_CEN;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f043 0201 	orr.w	r2, r3, #1
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	601a      	str	r2, [r3, #0]
	} else {
		/* Disable the TIM Counter */
		TIMx->CR1 &= (uint16_t) (~((uint16_t) TIM_CR1_CEN));
	}
}
 8000676:	e006      	b.n	8000686 <TIM_Cmd+0x2e>
		TIMx->CR1 &= (uint16_t) (~((uint16_t) TIM_CR1_CEN));
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8000680:	4013      	ands	r3, r2
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <trapezoidal_func>:

void trapezoidal_func(int k, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *hslave) {
 8000694:	b480      	push	{r7}
 8000696:	b087      	sub	sp, #28
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]

	int cnt = __HAL_TIM_GET_COUNTER(hslave);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006a6:	617b      	str	r3, [r7, #20]

	if (arr_des_a[k] > arr_start[k]) { //arr has to be greater than the arr that starts the motor
 80006a8:	4a71      	ldr	r2, [pc, #452]	@ (8000870 <trapezoidal_func+0x1dc>)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006b0:	4970      	ldr	r1, [pc, #448]	@ (8000874 <trapezoidal_func+0x1e0>)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dd2a      	ble.n	8000712 <trapezoidal_func+0x7e>
		__HAL_TIM_SET_AUTORELOAD(htim, arr_start[k]);
 80006bc:	4a6d      	ldr	r2, [pc, #436]	@ (8000874 <trapezoidal_func+0x1e0>)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ca:	4a6a      	ldr	r2, [pc, #424]	@ (8000874 <trapezoidal_func+0x1e0>)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d2:	461a      	mov	r2, r3
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	60da      	str	r2, [r3, #12]
		hslave->Instance->PSC = arr_start[k];
 80006d8:	4a66      	ldr	r2, [pc, #408]	@ (8000874 <trapezoidal_func+0x1e0>)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	0852      	lsrs	r2, r2, #1
 80006f2:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_GET_AUTORELOAD(htim)/2);

		hslave->Instance->EGR |= TIM_EGR_UG;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	695a      	ldr	r2, [r3, #20]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f042 0201 	orr.w	r2, r2, #1
 8000702:	615a      	str	r2, [r3, #20]
		hslave->Instance->CNT = count_rising_edge[k];
 8000704:	4a5c      	ldr	r2, [pc, #368]	@ (8000878 <trapezoidal_func+0x1e4>)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24

	}

	if (arr_des_a[k] < (arr_current[k] - ACCEL_RATE)
 8000712:	4a57      	ldr	r2, [pc, #348]	@ (8000870 <trapezoidal_func+0x1dc>)
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800071a:	4958      	ldr	r1, [pc, #352]	@ (800087c <trapezoidal_func+0x1e8>)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000722:	3b32      	subs	r3, #50	@ 0x32
 8000724:	429a      	cmp	r2, r3
 8000726:	da57      	bge.n	80007d8 <trapezoidal_func+0x144>
			&& cnt <= (int) (n_steps_a[k] * 1 / 2)) { //acceleration phase
 8000728:	4a55      	ldr	r2, [pc, #340]	@ (8000880 <trapezoidal_func+0x1ec>)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000730:	0fda      	lsrs	r2, r3, #31
 8000732:	4413      	add	r3, r2
 8000734:	105b      	asrs	r3, r3, #1
 8000736:	461a      	mov	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	4293      	cmp	r3, r2
 800073c:	dc4c      	bgt.n	80007d8 <trapezoidal_func+0x144>

		arr_current[k] -= ACCEL_RATE;
 800073e:	4a4f      	ldr	r2, [pc, #316]	@ (800087c <trapezoidal_func+0x1e8>)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000746:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 800074a:	494c      	ldr	r1, [pc, #304]	@ (800087c <trapezoidal_func+0x1e8>)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (arr_current[k] <= arr_max[k])
 8000752:	4a4a      	ldr	r2, [pc, #296]	@ (800087c <trapezoidal_func+0x1e8>)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800075a:	494a      	ldr	r1, [pc, #296]	@ (8000884 <trapezoidal_func+0x1f0>)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000762:	429a      	cmp	r2, r3
 8000764:	dc07      	bgt.n	8000776 <trapezoidal_func+0xe2>
			arr_current[k] = arr_max[k];
 8000766:	4a47      	ldr	r2, [pc, #284]	@ (8000884 <trapezoidal_func+0x1f0>)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800076e:	4943      	ldr	r1, [pc, #268]	@ (800087c <trapezoidal_func+0x1e8>)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		__HAL_TIM_SET_AUTORELOAD(htim, arr_current[k]);
 8000776:	4a41      	ldr	r2, [pc, #260]	@ (800087c <trapezoidal_func+0x1e8>)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000784:	4a3d      	ldr	r2, [pc, #244]	@ (800087c <trapezoidal_func+0x1e8>)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078c:	461a      	mov	r2, r3
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	60da      	str	r2, [r3, #12]
		hslave->Instance->PSC = arr_current[k];
 8000792:	4a3a      	ldr	r2, [pc, #232]	@ (800087c <trapezoidal_func+0x1e8>)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	0852      	lsrs	r2, r2, #1
 80007ac:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_GET_AUTORELOAD(htim)/2);

		hslave->Instance->EGR |= TIM_EGR_UG;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	695a      	ldr	r2, [r3, #20]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f042 0201 	orr.w	r2, r2, #1
 80007bc:	615a      	str	r2, [r3, #20]
		hslave->Instance->CNT = count_rising_edge[k];
 80007be:	4a2e      	ldr	r2, [pc, #184]	@ (8000878 <trapezoidal_func+0x1e4>)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	625a      	str	r2, [r3, #36]	@ 0x24

		acc_count += 5; //debug
 80007cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <trapezoidal_func+0x1f4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3305      	adds	r3, #5
 80007d2:	4a2d      	ldr	r2, [pc, #180]	@ (8000888 <trapezoidal_func+0x1f4>)
 80007d4:	6013      	str	r3, [r2, #0]
 80007d6:	e0b4      	b.n	8000942 <trapezoidal_func+0x2ae>

	}

	else {
		if (arr_des_a[k] >= (arr_current[k] - ACCEL_RATE)
 80007d8:	4a25      	ldr	r2, [pc, #148]	@ (8000870 <trapezoidal_func+0x1dc>)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e0:	4926      	ldr	r1, [pc, #152]	@ (800087c <trapezoidal_func+0x1e8>)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007e8:	3b32      	subs	r3, #50	@ 0x32
 80007ea:	429a      	cmp	r2, r3
 80007ec:	db4e      	blt.n	800088c <trapezoidal_func+0x1f8>
				&& arr_current[k] > arr_des_a[k]
 80007ee:	4a23      	ldr	r2, [pc, #140]	@ (800087c <trapezoidal_func+0x1e8>)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f6:	491e      	ldr	r1, [pc, #120]	@ (8000870 <trapezoidal_func+0x1dc>)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dd44      	ble.n	800088c <trapezoidal_func+0x1f8>
				&& cnt <= (int) (n_steps_a[k] * 1 / 2)) { //constant phase
 8000802:	4a1f      	ldr	r2, [pc, #124]	@ (8000880 <trapezoidal_func+0x1ec>)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080a:	0fda      	lsrs	r2, r3, #31
 800080c:	4413      	add	r3, r2
 800080e:	105b      	asrs	r3, r3, #1
 8000810:	461a      	mov	r2, r3
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	4293      	cmp	r3, r2
 8000816:	dc39      	bgt.n	800088c <trapezoidal_func+0x1f8>

			__HAL_TIM_SET_AUTORELOAD(htim, arr_des_a[k]);
 8000818:	4a15      	ldr	r2, [pc, #84]	@ (8000870 <trapezoidal_func+0x1dc>)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000826:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <trapezoidal_func+0x1dc>)
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082e:	461a      	mov	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60da      	str	r2, [r3, #12]
			hslave->Instance->PSC = arr_des_a[k];
 8000834:	4a0e      	ldr	r2, [pc, #56]	@ (8000870 <trapezoidal_func+0x1dc>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	629a      	str	r2, [r3, #40]	@ 0x28
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	0852      	lsrs	r2, r2, #1
 800084e:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_GET_AUTORELOAD(htim)/2);

			hslave->Instance->EGR |= TIM_EGR_UG;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	695a      	ldr	r2, [r3, #20]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f042 0201 	orr.w	r2, r2, #1
 800085e:	615a      	str	r2, [r3, #20]
			hslave->Instance->CNT = count_rising_edge[k];
 8000860:	4a05      	ldr	r2, [pc, #20]	@ (8000878 <trapezoidal_func+0x1e4>)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	625a      	str	r2, [r3, #36]	@ 0x24
 800086e:	e068      	b.n	8000942 <trapezoidal_func+0x2ae>
 8000870:	200000f0 	.word	0x200000f0
 8000874:	20000000 	.word	0x20000000
 8000878:	20000050 	.word	0x20000050
 800087c:	20000018 	.word	0x20000018
 8000880:	200000e4 	.word	0x200000e4
 8000884:	2000000c 	.word	0x2000000c
 8000888:	2000005c 	.word	0x2000005c

		}

		else {

			if (cnt >= (int) (n_steps_a[k] - acc_count)) { //deceleration phase
 800088c:	4a30      	ldr	r2, [pc, #192]	@ (8000950 <trapezoidal_func+0x2bc>)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000894:	4b2f      	ldr	r3, [pc, #188]	@ (8000954 <trapezoidal_func+0x2c0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	429a      	cmp	r2, r3
 800089e:	db50      	blt.n	8000942 <trapezoidal_func+0x2ae>
				arr_current[k] += ACCEL_RATE;
 80008a0:	4a2d      	ldr	r2, [pc, #180]	@ (8000958 <trapezoidal_func+0x2c4>)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80008ac:	492a      	ldr	r1, [pc, #168]	@ (8000958 <trapezoidal_func+0x2c4>)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (arr_current[k] >= (arr_start[k] + ACCEL_RATE))
 80008b4:	4a29      	ldr	r2, [pc, #164]	@ (800095c <trapezoidal_func+0x2c8>)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008bc:	f103 0231 	add.w	r2, r3, #49	@ 0x31
 80008c0:	4925      	ldr	r1, [pc, #148]	@ (8000958 <trapezoidal_func+0x2c4>)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	da09      	bge.n	80008e0 <trapezoidal_func+0x24c>
					arr_current[k] = arr_start[k] - ACCEL_RATE;
 80008cc:	4a23      	ldr	r2, [pc, #140]	@ (800095c <trapezoidal_func+0x2c8>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d4:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 80008d8:	491f      	ldr	r1, [pc, #124]	@ (8000958 <trapezoidal_func+0x2c4>)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				__HAL_TIM_SET_AUTORELOAD(htim, arr_current[k]);
 80008e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000958 <trapezoidal_func+0x2c4>)
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000958 <trapezoidal_func+0x2c4>)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f6:	461a      	mov	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60da      	str	r2, [r3, #12]
				hslave->Instance->PSC = arr_current[k];
 80008fc:	4a16      	ldr	r2, [pc, #88]	@ (8000958 <trapezoidal_func+0x2c4>)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	629a      	str	r2, [r3, #40]	@ 0x28
				__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	0852      	lsrs	r2, r2, #1
 8000916:	635a      	str	r2, [r3, #52]	@ 0x34
						__HAL_TIM_GET_AUTORELOAD(htim)/2);

				hslave->Instance->EGR |= TIM_EGR_UG;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	695a      	ldr	r2, [r3, #20]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f042 0201 	orr.w	r2, r2, #1
 8000926:	615a      	str	r2, [r3, #20]
				hslave->Instance->CNT = count_rising_edge[k];
 8000928:	4a0d      	ldr	r2, [pc, #52]	@ (8000960 <trapezoidal_func+0x2cc>)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24

				dec_count += 5; //debug
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <trapezoidal_func+0x2d0>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3305      	adds	r3, #5
 800093c:	4a09      	ldr	r2, [pc, #36]	@ (8000964 <trapezoidal_func+0x2d0>)
 800093e:	6013      	str	r3, [r2, #0]

		}

	}

}
 8000940:	e7ff      	b.n	8000942 <trapezoidal_func+0x2ae>
 8000942:	bf00      	nop
 8000944:	371c      	adds	r7, #28
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	200000e4 	.word	0x200000e4
 8000954:	2000005c 	.word	0x2000005c
 8000958:	20000018 	.word	0x20000018
 800095c:	20000000 	.word	0x20000000
 8000960:	20000050 	.word	0x20000050
 8000964:	20000060 	.word	0x20000060

08000968 <HAL_TIM_PeriodElapsedCallback>:

//slave callback for trapezoidal profile
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a44      	ldr	r2, [pc, #272]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d12a      	bne.n	80009d0 <HAL_TIM_PeriodElapsedCallback+0x68>

		if (htim->Instance->CNT >= htim->Instance->ARR) {
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000986:	429a      	cmp	r2, r3
 8000988:	d322      	bcc.n	80009d0 <HAL_TIM_PeriodElapsedCallback+0x68>
			HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 800098a:	2100      	movs	r1, #0
 800098c:	483f      	ldr	r0, [pc, #252]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800098e:	f002 fd37 	bl	8003400 <HAL_TIM_PWM_Stop_IT>
			count_rising_edge[2] = 0;
 8000992:	4b3f      	ldr	r3, [pc, #252]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
			//acc_count = 0;  //debug
			//dec_count = 0; //debug
			htim->Instance->EGR |= TIM_EGR_UG;  //reset
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	695a      	ldr	r2, [r3, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f042 0201 	orr.w	r2, r2, #1
 80009a6:	615a      	str	r2, [r3, #20]
			htim8.Instance->EGR |= TIM_EGR_UG;
 80009a8:	4b38      	ldr	r3, [pc, #224]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	695a      	ldr	r2, [r3, #20]
 80009ae:	4b37      	ldr	r3, [pc, #220]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f042 0201 	orr.w	r2, r2, #1
 80009b6:	615a      	str	r2, [r3, #20]

			TIM_Cmd(htim->Instance, DISABLE); //disable the slave timer
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe4a 	bl	8000658 <TIM_Cmd>
			TIM_Cmd(htim8.Instance, DISABLE); //disable the slave timer
 80009c4:	4b31      	ldr	r3, [pc, #196]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe44 	bl	8000658 <TIM_Cmd>

		}

	}

	if (htim->Instance == TIM3) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000a94 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d128      	bne.n	8000a2c <HAL_TIM_PeriodElapsedCallback+0xc4>
		if (htim->Instance->CNT >= htim->Instance->ARR) {
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d320      	bcc.n	8000a2c <HAL_TIM_PeriodElapsedCallback+0xc4>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80009ea:	2100      	movs	r1, #0
 80009ec:	482a      	ldr	r0, [pc, #168]	@ (8000a98 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80009ee:	f002 fd07 	bl	8003400 <HAL_TIM_PWM_Stop_IT>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 80009f2:	2104      	movs	r1, #4
 80009f4:	4828      	ldr	r0, [pc, #160]	@ (8000a98 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80009f6:	f002 fd03 	bl	8003400 <HAL_TIM_PWM_Stop_IT>
			count_rising_edge[1] = 0;
 80009fa:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
			//acc_count = 0;  //debug
			//dec_count = 0; //debug
			htim->Instance->EGR |= TIM_EGR_UG;  //reset
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	695a      	ldr	r2, [r3, #20]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f042 0201 	orr.w	r2, r2, #1
 8000a0e:	615a      	str	r2, [r3, #20]
			htim2.Instance->EGR |= TIM_EGR_UG;
 8000a10:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	695a      	ldr	r2, [r3, #20]
 8000a16:	4b20      	ldr	r3, [pc, #128]	@ (8000a98 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f042 0201 	orr.w	r2, r2, #1
 8000a1e:	615a      	str	r2, [r3, #20]

			TIM_Cmd(htim->Instance, DISABLE); //disable the slave timer
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fe16 	bl	8000658 <TIM_Cmd>

		}

	}

	if (htim->Instance == TIM4) {
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a1a      	ldr	r2, [pc, #104]	@ (8000a9c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d124      	bne.n	8000a80 <HAL_TIM_PeriodElapsedCallback+0x118>

		if (htim->Instance->CNT >= htim->Instance->ARR) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d31c      	bcc.n	8000a80 <HAL_TIM_PeriodElapsedCallback+0x118>
			HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000a46:	2100      	movs	r1, #0
 8000a48:	4815      	ldr	r0, [pc, #84]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a4a:	f002 fcd9 	bl	8003400 <HAL_TIM_PWM_Stop_IT>
			count_rising_edge[0] = 0;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
			//acc_count = 0;  //debug
			//dec_count = 0; //debug
			htim->Instance->EGR |= TIM_EGR_UG;  //reset
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	695a      	ldr	r2, [r3, #20]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f042 0201 	orr.w	r2, r2, #1
 8000a62:	615a      	str	r2, [r3, #20]
			htim1.Instance->EGR |= TIM_EGR_UG;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	695a      	ldr	r2, [r3, #20]
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f042 0201 	orr.w	r2, r2, #1
 8000a72:	615a      	str	r2, [r3, #20]

			TIM_Cmd(htim->Instance, DISABLE); //disable the slave timer
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fdec 	bl	8000658 <TIM_Cmd>

		}

	}

}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40000c00 	.word	0x40000c00
 8000a8c:	20000270 	.word	0x20000270
 8000a90:	20000050 	.word	0x20000050
 8000a94:	40000400 	.word	0x40000400
 8000a98:	20000150 	.word	0x20000150
 8000a9c:	40000800 	.word	0x40000800
 8000aa0:	20000108 	.word	0x20000108

08000aa4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b24 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d10e      	bne.n	8000ad4 <HAL_TIM_PWM_PulseFinishedCallback+0x30>

		count_rising_edge[0] += htim->Instance->PSC+1;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000abc:	3301      	adds	r3, #1
 8000abe:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000ac0:	6812      	ldr	r2, [r2, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000ac8:	601a      	str	r2, [r3, #0]
		//arr = -(__HAL_TIM_GET_AUTORELOAD(&htim1));  //debug graph
		trapezoidal_func(0, htim, &htim4); //0,1,2 for the tipology of the timer
 8000aca:	4a18      	ldr	r2, [pc, #96]	@ (8000b2c <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000acc:	6879      	ldr	r1, [r7, #4]
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f7ff fde0 	bl	8000694 <trapezoidal_func>

	}

	if (htim->Instance == TIM2) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000adc:	d10e      	bne.n	8000afc <HAL_TIM_PWM_PulseFinishedCallback+0x58>

		count_rising_edge[1] += htim->Instance->PSC+1;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	4a10      	ldr	r2, [pc, #64]	@ (8000b28 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000ae8:	6852      	ldr	r2, [r2, #4]
 8000aea:	4413      	add	r3, r2
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000af0:	605a      	str	r2, [r3, #4]
		//arr = -(__HAL_TIM_GET_AUTORELOAD(&htim1));  //debug graph
		trapezoidal_func(1, htim, &htim3); //0,1,2 for the tipology of the timer
 8000af2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b30 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff fdcc 	bl	8000694 <trapezoidal_func>

	}

	if (htim->Instance == TIM8) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0c      	ldr	r2, [pc, #48]	@ (8000b34 <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d109      	bne.n	8000b1a <HAL_TIM_PWM_PulseFinishedCallback+0x76>

		count_rising_edge[2] += 5;
 8000b06:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	3305      	adds	r3, #5
 8000b0c:	4a06      	ldr	r2, [pc, #24]	@ (8000b28 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000b0e:	6093      	str	r3, [r2, #8]
		//arr = -(__HAL_TIM_GET_AUTORELOAD(&htim1));  //debug graph
		trapezoidal_func(2, htim, &htim5); //0,1,2 for the tipology of the timer
 8000b10:	4a09      	ldr	r2, [pc, #36]	@ (8000b38 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	2002      	movs	r0, #2
 8000b16:	f7ff fdbd 	bl	8000694 <trapezoidal_func>

	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40010000 	.word	0x40010000
 8000b28:	20000050 	.word	0x20000050
 8000b2c:	200001e0 	.word	0x200001e0
 8000b30:	20000198 	.word	0x20000198
 8000b34:	40010400 	.word	0x40010400
 8000b38:	20000228 	.word	0x20000228

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b42:	f001 f8d7 	bl	8001cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b46:	f000 f87f 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4a:	f7ff fcd3 	bl	80004f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b4e:	f001 f835 	bl	8001bbc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000b52:	f000 fc57 	bl	8001404 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000b56:	f000 fd1d 	bl	8001594 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000b5a:	f000 fb2f 	bl	80011bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b5e:	f000 fbcf 	bl	8001300 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000b62:	f000 fcb3 	bl	80014cc <MX_TIM4_Init>
  MX_TIM8_Init();
 8000b66:	f000 fd79 	bl	800165c <MX_TIM8_Init>
  MX_TIM10_Init();
 8000b6a:	f000 fe19 	bl	80017a0 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000b6e:	f000 fe3b 	bl	80017e8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 8000b72:	4826      	ldr	r0, [pc, #152]	@ (8000c0c <main+0xd0>)
 8000b74:	f002 fa64 	bl	8003040 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000b78:	4825      	ldr	r0, [pc, #148]	@ (8000c10 <main+0xd4>)
 8000b7a:	f002 fa61 	bl	8003040 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8000b7e:	4825      	ldr	r0, [pc, #148]	@ (8000c14 <main+0xd8>)
 8000b80:	f002 fa5e 	bl	8003040 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET); //ENABLE
 8000b84:	2200      	movs	r2, #0
 8000b86:	2120      	movs	r1, #32
 8000b88:	4823      	ldr	r0, [pc, #140]	@ (8000c18 <main+0xdc>)
 8000b8a:	f001 fbef 	bl	800236c <HAL_GPIO_WritePin>
	/*
	 stepper_init(obj, resol, microstep, enable_port, direction_port, timer slave, timerpwm*/
	stepper_init(&stp1, &htim1, &htim4, 1.8, 4 * 4.27, DIRECTION1_GPIO_Port,
 8000b8e:	2301      	movs	r3, #1
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <main+0xe0>)
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2311      	movs	r3, #17
 8000b98:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8000c20 <main+0xe4>
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c0c <main+0xd0>)
 8000b9e:	4921      	ldr	r1, [pc, #132]	@ (8000c24 <main+0xe8>)
 8000ba0:	4821      	ldr	r0, [pc, #132]	@ (8000c28 <main+0xec>)
 8000ba2:	f000 f8c5 	bl	8000d30 <stepper_init>
	DIRECTION1_Pin);

	stepper_init(&stp2, &htim2, &htim3, 1.8,4* 6, DIRECTION2_GPIO_Port,
 8000ba6:	2310      	movs	r3, #16
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <main+0xdc>)
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2318      	movs	r3, #24
 8000bb0:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8000c20 <main+0xe4>
 8000bb4:	4a16      	ldr	r2, [pc, #88]	@ (8000c10 <main+0xd4>)
 8000bb6:	491d      	ldr	r1, [pc, #116]	@ (8000c2c <main+0xf0>)
 8000bb8:	481d      	ldr	r0, [pc, #116]	@ (8000c30 <main+0xf4>)
 8000bba:	f000 f8b9 	bl	8000d30 <stepper_init>
	DIRECTION2_Pin);
	stepper_init(&stp3, &htim2, &htim3, 1.8,4* 6, DIRECTION3_GPIO_Port,
 8000bbe:	2380      	movs	r3, #128	@ 0x80
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <main+0xf8>)
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2318      	movs	r3, #24
 8000bc8:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8000c20 <main+0xe4>
 8000bcc:	4a10      	ldr	r2, [pc, #64]	@ (8000c10 <main+0xd4>)
 8000bce:	4917      	ldr	r1, [pc, #92]	@ (8000c2c <main+0xf0>)
 8000bd0:	4819      	ldr	r0, [pc, #100]	@ (8000c38 <main+0xfc>)
 8000bd2:	f000 f8ad 	bl	8000d30 <stepper_init>
	DIRECTION3_Pin);
	stepper_init(&stp4, &htim8, &htim5, 1.8,8*4.9, DIRECTION4_GPIO_Port,
 8000bd6:	2340      	movs	r3, #64	@ 0x40
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <main+0xf8>)
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2327      	movs	r3, #39	@ 0x27
 8000be0:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000c20 <main+0xe4>
 8000be4:	4a0b      	ldr	r2, [pc, #44]	@ (8000c14 <main+0xd8>)
 8000be6:	4915      	ldr	r1, [pc, #84]	@ (8000c3c <main+0x100>)
 8000be8:	4815      	ldr	r0, [pc, #84]	@ (8000c40 <main+0x104>)
 8000bea:	f000 f8a1 	bl	8000d30 <stepper_init>
	DIRECTION4_Pin);


	stepper_move(&stp4, CLOCKWISE, 100, 100); //SET REGISTERS FOR THE MOVEMENT
 8000bee:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8000c44 <main+0x108>
 8000bf2:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8000c44 <main+0x108>
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4811      	ldr	r0, [pc, #68]	@ (8000c40 <main+0x104>)
 8000bfa:	f000 f8d3 	bl	8000da4 <stepper_move>
	HAL_Delay(6000);
 8000bfe:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000c02:	f001 f8e9 	bl	8001dd8 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c06:	bf00      	nop
 8000c08:	e7fd      	b.n	8000c06 <main+0xca>
 8000c0a:	bf00      	nop
 8000c0c:	200001e0 	.word	0x200001e0
 8000c10:	20000198 	.word	0x20000198
 8000c14:	20000228 	.word	0x20000228
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40020400 	.word	0x40020400
 8000c20:	3fe66666 	.word	0x3fe66666
 8000c24:	20000108 	.word	0x20000108
 8000c28:	20000064 	.word	0x20000064
 8000c2c:	20000150 	.word	0x20000150
 8000c30:	20000084 	.word	0x20000084
 8000c34:	40020000 	.word	0x40020000
 8000c38:	200000a4 	.word	0x200000a4
 8000c3c:	20000270 	.word	0x20000270
 8000c40:	200000c4 	.word	0x200000c4
 8000c44:	42c80000 	.word	0x42c80000

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b094      	sub	sp, #80	@ 0x50
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	2234      	movs	r2, #52	@ 0x34
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f003 febc 	bl	80049d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	4b2a      	ldr	r3, [pc, #168]	@ (8000d1c <SystemClock_Config+0xd4>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c74:	4a29      	ldr	r2, [pc, #164]	@ (8000d1c <SystemClock_Config+0xd4>)
 8000c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7c:	4b27      	ldr	r3, [pc, #156]	@ (8000d1c <SystemClock_Config+0xd4>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c88:	2300      	movs	r3, #0
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	4b24      	ldr	r3, [pc, #144]	@ (8000d20 <SystemClock_Config+0xd8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c94:	4a22      	ldr	r2, [pc, #136]	@ (8000d20 <SystemClock_Config+0xd8>)
 8000c96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <SystemClock_Config+0xd8>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000cc0:	2354      	movs	r3, #84	@ 0x54
 8000cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 fec5 	bl	8002a64 <HAL_RCC_OscConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ce0:	f000 f820 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cfa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	2102      	movs	r1, #2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 fb64 	bl	80023d0 <HAL_RCC_ClockConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d0e:	f000 f809 	bl	8000d24 <Error_Handler>
  }
}
 8000d12:	bf00      	nop
 8000d14:	3750      	adds	r7, #80	@ 0x50
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40007000 	.word	0x40007000

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <Error_Handler+0x8>

08000d30 <stepper_init>:

//definisco la struct stepper con i seguenti parametri
void stepper_init(stepper_obj *stp, TIM_HandleTypeDef *pwm_timer,
		TIM_HandleTypeDef *position_timer, float stepper_resolution,
		uint16_t microstep, GPIO_TypeDef *direction_port,
		uint16_t direction_pin) {
 8000d30:	b480      	push	{r7}
 8000d32:	b087      	sub	sp, #28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6178      	str	r0, [r7, #20]
 8000d38:	6139      	str	r1, [r7, #16]
 8000d3a:	60fa      	str	r2, [r7, #12]
 8000d3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d40:	80fb      	strh	r3, [r7, #6]

	stp->position_timer = position_timer;
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	605a      	str	r2, [r3, #4]
	stp->pwm_timer = pwm_timer;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	601a      	str	r2, [r3, #0]

	stp->direction_port = direction_port;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	6a3a      	ldr	r2, [r7, #32]
 8000d52:	609a      	str	r2, [r3, #8]
	stp->direction_pin = direction_pin;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000d58:	819a      	strh	r2, [r3, #12]

	stp->stepper_resolution = stepper_resolution;
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	611a      	str	r2, [r3, #16]
	stp->microstep = microstep;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	88fa      	ldrh	r2, [r7, #6]
 8000d64:	831a      	strh	r2, [r3, #24]
	stp->step_per_rev = 360.0f / stepper_resolution; // 360°/resolution
 8000d66:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000da0 <stepper_init+0x70>
 8000d6a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	edc3 7a05 	vstr	s15, [r3, #20]
	stp->step_scale = stp->step_per_rev * microstep;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	ee07 3a90 	vmov	s15, r3
 8000d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8000d92:	bf00      	nop
 8000d94:	371c      	adds	r7, #28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	43b40000 	.word	0x43b40000

08000da4 <stepper_move>:
float freq_des_steps; //DEBUG
static int arr_des = 20000;  //random value
static int i=0; //counter

void stepper_move(stepper_obj *stp, direction_str direction, float position,
		float freq_desired) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	460b      	mov	r3, r1
 8000dae:	ed87 0a01 	vstr	s0, [r7, #4]
 8000db2:	edc7 0a00 	vstr	s1, [r7]
 8000db6:	72fb      	strb	r3, [r7, #11]

	int n_steps = stp->step_scale * position / 360.0f; //[n_steps]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	ed93 7a07 	vldr	s14, [r3, #28]
 8000dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dc6:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8000f8c <stepper_move+0x1e8>
 8000dca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd2:	ee17 3a90 	vmov	r3, s15
 8000dd6:	617b      	str	r3, [r7, #20]

	freq_des_steps = stp->step_scale * freq_desired / 360.0f; //[n_steps/s]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	ed93 7a07 	vldr	s14, [r3, #28]
 8000dde:	edd7 7a00 	vldr	s15, [r7]
 8000de2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000de6:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8000f8c <stepper_move+0x1e8>
 8000dea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dee:	4b68      	ldr	r3, [pc, #416]	@ (8000f90 <stepper_move+0x1ec>)
 8000df0:	edc3 7a00 	vstr	s15, [r3]

	arr_des = (84 * 1000000 / freq_des_steps)
 8000df4:	4b66      	ldr	r3, [pc, #408]	@ (8000f90 <stepper_move+0x1ec>)
 8000df6:	edd3 7a00 	vldr	s15, [r3]
 8000dfa:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8000f94 <stepper_move+0x1f0>
 8000dfe:	eec7 6a27 	vdiv.f32	s13, s14, s15
			/ (stp->pwm_timer->Instance->PSC + 1) - 1;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
	arr_des = (84 * 1000000 / freq_des_steps)
 8000e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e24:	ee17 2a90 	vmov	r2, s15
 8000e28:	4b5b      	ldr	r3, [pc, #364]	@ (8000f98 <stepper_move+0x1f4>)
 8000e2a:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(stp->direction_port, stp->direction_pin, direction); //DIRECTION
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	6898      	ldr	r0, [r3, #8]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	899b      	ldrh	r3, [r3, #12]
 8000e34:	7afa      	ldrb	r2, [r7, #11]
 8000e36:	4619      	mov	r1, r3
 8000e38:	f001 fa98 	bl	800236c <HAL_GPIO_WritePin>

	if (stp->pwm_timer->Instance != TIM2) {
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e46:	d02b      	beq.n	8000ea0 <stepper_move+0xfc>

		reset_timers(stp);
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f000 f8b1 	bl	8000fb0 <reset_timers>

		__HAL_TIM_SET_AUTORELOAD(stp->position_timer,
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e56:	3301      	adds	r3, #1
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	fb03 f202 	mul.w	r2, r3, r2
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3a01      	subs	r2, #1
 8000e66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e70:	3301      	adds	r3, #1
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	fb03 f202 	mul.w	r2, r3, r2
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	3a01      	subs	r2, #1
 8000e7e:	60da      	str	r2, [r3, #12]
				(n_steps * (stp->pwm_timer->Instance->PSC + 1)) - 1);
		__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_1,
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	0852      	lsrs	r2, r2, #1
 8000e90:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);

		HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_1); //START PWM
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f002 f99b 	bl	80031d4 <HAL_TIM_PWM_Start_IT>
 8000e9e:	e043      	b.n	8000f28 <stepper_move+0x184>

	} else { //set parameters for the timer2 separately cause it has 2 channel
		if (flag_configured_timer2 != 1) { //this cause the second stepper must be equal to the first one
 8000ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8000f9c <stepper_move+0x1f8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d039      	beq.n	8000f1c <stepper_move+0x178>

			reset_timers(stp);
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f000 f881 	bl	8000fb0 <reset_timers>
			__HAL_TIM_SET_AUTORELOAD(stp->position_timer,
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	fb03 f202 	mul.w	r2, r3, r2
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3a01      	subs	r2, #1
 8000ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	fb03 f202 	mul.w	r2, r3, r2
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	3a01      	subs	r2, #1
 8000ede:	60da      	str	r2, [r3, #12]
					(n_steps * (stp->pwm_timer->Instance->PSC + 1)) - 1);
			__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_1,
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	0852      	lsrs	r2, r2, #1
 8000ef0:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);

			__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_2,
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	0852      	lsrs	r2, r2, #1
 8000f02:	639a      	str	r2, [r3, #56]	@ 0x38
					__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);

			HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_1); //START PWM
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 f962 	bl	80031d4 <HAL_TIM_PWM_Start_IT>
			HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_2); //START PWM)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2104      	movs	r1, #4
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 f95c 	bl	80031d4 <HAL_TIM_PWM_Start_IT>
		}
		flag_configured_timer2 ^= 1;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <stepper_move+0x1f8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f083 0301 	eor.w	r3, r3, #1
 8000f24:	4a1d      	ldr	r2, [pc, #116]	@ (8000f9c <stepper_move+0x1f8>)
 8000f26:	6013      	str	r3, [r2, #0]

	}
	n_steps = n_steps * (stp->pwm_timer->Instance->PSC + 1);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f30:	3301      	adds	r3, #1
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	fb02 f303 	mul.w	r3, r2, r3
 8000f38:	617b      	str	r3, [r7, #20]

	if (stp->pwm_timer->Instance == TIM1){
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a17      	ldr	r2, [pc, #92]	@ (8000fa0 <stepper_move+0x1fc>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d103      	bne.n	8000f4e <stepper_move+0x1aa>
		 i = 0;}
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <stepper_move+0x200>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	e00c      	b.n	8000f68 <stepper_move+0x1c4>
	else {
		if (stp->pwm_timer->Instance == TIM2){
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f58:	d103      	bne.n	8000f62 <stepper_move+0x1be>
			i = 1;}
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <stepper_move+0x200>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	e002      	b.n	8000f68 <stepper_move+0x1c4>
		else
			i = 2;
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <stepper_move+0x200>)
 8000f64:	2202      	movs	r2, #2
 8000f66:	601a      	str	r2, [r3, #0]
	}
	n_steps_a[i]=n_steps;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <stepper_move+0x200>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	490e      	ldr	r1, [pc, #56]	@ (8000fa8 <stepper_move+0x204>)
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	arr_des_a[i]=arr_des;
 8000f74:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <stepper_move+0x200>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	@ (8000f98 <stepper_move+0x1f4>)
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	490b      	ldr	r1, [pc, #44]	@ (8000fac <stepper_move+0x208>)
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	43b40000 	.word	0x43b40000
 8000f90:	20000100 	.word	0x20000100
 8000f94:	4ca037a0 	.word	0x4ca037a0
 8000f98:	20000024 	.word	0x20000024
 8000f9c:	200000fc 	.word	0x200000fc
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	20000104 	.word	0x20000104
 8000fa8:	200000e4 	.word	0x200000e4
 8000fac:	200000f0 	.word	0x200000f0

08000fb0 <reset_timers>:


void reset_timers(stepper_obj *stp) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

stp->pwm_timer->Instance->EGR = TIM_EGR_UG; //reset the trigger
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	615a      	str	r2, [r3, #20]
stp->position_timer->Instance->EGR = TIM_EGR_UG; //reset the trigger
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	615a      	str	r2, [r3, #20]

}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <HAL_MspInit+0x4c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8001024 <HAL_MspInit+0x4c>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <HAL_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <HAL_MspInit+0x4c>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001008:	6413      	str	r3, [r2, #64]	@ 0x40
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001016:	2006      	movs	r0, #6
 8001018:	f000 ffd2 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <NMI_Handler+0x4>

08001030 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <MemManage_Handler+0x4>

08001040 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <BusFault_Handler+0x4>

08001048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <UsageFault_Handler+0x4>

08001050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107e:	f000 fe8b 	bl	8001d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800108c:	4802      	ldr	r0, [pc, #8]	@ (8001098 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800108e:	f002 fa75 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000108 	.word	0x20000108

0800109c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010a0:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80010a2:	f002 fa6b 	bl	800357c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80010a8:	f002 fa68 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000108 	.word	0x20000108
 80010b4:	200002b8 	.word	0x200002b8

080010b8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80010be:	f002 fa5d 	bl	800357c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80010c2:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80010c4:	f002 fa5a 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000108 	.word	0x20000108
 80010d0:	20000300 	.word	0x20000300

080010d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <TIM1_CC_IRQHandler+0x10>)
 80010da:	f002 fa4f 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000108 	.word	0x20000108

080010e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <TIM2_IRQHandler+0x10>)
 80010ee:	f002 fa45 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000150 	.word	0x20000150

080010fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <TIM3_IRQHandler+0x10>)
 8001102:	f002 fa3b 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000198 	.word	0x20000198

08001110 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <TIM4_IRQHandler+0x10>)
 8001116:	f002 fa31 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001e0 	.word	0x200001e0

08001124 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DISABLE_button_Pin);
 8001128:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800112c:	f001 f938 	bl	80023a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800113a:	f002 fa1f 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000270 	.word	0x20000270

08001148 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800114e:	f002 fa15 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000270 	.word	0x20000270

0800115c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001162:	f002 fa0b 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000270 	.word	0x20000270

08001170 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001174:	4802      	ldr	r0, [pc, #8]	@ (8001180 <TIM8_CC_IRQHandler+0x10>)
 8001176:	f002 fa01 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000270 	.word	0x20000270

08001184 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001188:	4802      	ldr	r0, [pc, #8]	@ (8001194 <TIM5_IRQHandler+0x10>)
 800118a:	f002 f9f7 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000228 	.word	0x20000228

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	@ 0x58
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2220      	movs	r2, #32
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 fbed 	bl	80049d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011fa:	4b3f      	ldr	r3, [pc, #252]	@ (80012f8 <MX_TIM1_Init+0x13c>)
 80011fc:	4a3f      	ldr	r2, [pc, #252]	@ (80012fc <MX_TIM1_Init+0x140>)
 80011fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8001200:	4b3d      	ldr	r3, [pc, #244]	@ (80012f8 <MX_TIM1_Init+0x13c>)
 8001202:	2204      	movs	r2, #4
 8001204:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b3c      	ldr	r3, [pc, #240]	@ (80012f8 <MX_TIM1_Init+0x13c>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800120c:	4b3a      	ldr	r3, [pc, #232]	@ (80012f8 <MX_TIM1_Init+0x13c>)
 800120e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001212:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b38      	ldr	r3, [pc, #224]	@ (80012f8 <MX_TIM1_Init+0x13c>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800121a:	4b37      	ldr	r3, [pc, #220]	@ (80012f8 <MX_TIM1_Init+0x13c>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001220:	4b35      	ldr	r3, [pc, #212]	@ (80012f8 <MX_TIM1_Init+0x13c>)
 8001222:	2280      	movs	r2, #128	@ 0x80
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001226:	4834      	ldr	r0, [pc, #208]	@ (80012f8 <MX_TIM1_Init+0x13c>)
 8001228:	f001 feba 	bl	8002fa0 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001232:	f7ff fd77 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800123a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800123c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001240:	4619      	mov	r1, r3
 8001242:	482d      	ldr	r0, [pc, #180]	@ (80012f8 <MX_TIM1_Init+0x13c>)
 8001244:	f002 fb4c 	bl	80038e0 <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800124e:	f7ff fd69 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001252:	4829      	ldr	r0, [pc, #164]	@ (80012f8 <MX_TIM1_Init+0x13c>)
 8001254:	f001 ff64 	bl	8003120 <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800125e:	f7ff fd61 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001262:	2320      	movs	r3, #32
 8001264:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800126a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800126e:	4619      	mov	r1, r3
 8001270:	4821      	ldr	r0, [pc, #132]	@ (80012f8 <MX_TIM1_Init+0x13c>)
 8001272:	f003 f809 	bl	8004288 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800127c:	f7ff fd52 	bl	8000d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	@ 0x60
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 8001284:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001288:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800128e:	2300      	movs	r3, #0
 8001290:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001292:	2304      	movs	r3, #4
 8001294:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a2:	2200      	movs	r2, #0
 80012a4:	4619      	mov	r1, r3
 80012a6:	4814      	ldr	r0, [pc, #80]	@ (80012f8 <MX_TIM1_Init+0x13c>)
 80012a8:	f002 fa58 	bl	800375c <HAL_TIM_PWM_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80012b2:	f7ff fd37 	bl	8000d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4619      	mov	r1, r3
 80012d8:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <MX_TIM1_Init+0x13c>)
 80012da:	f003 f851 	bl	8004380 <HAL_TIMEx_ConfigBreakDeadTime>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80012e4:	f7ff fd1e 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012e8:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <MX_TIM1_Init+0x13c>)
 80012ea:	f000 fbc9 	bl	8001a80 <HAL_TIM_MspPostInit>

}
 80012ee:	bf00      	nop
 80012f0:	3758      	adds	r7, #88	@ 0x58
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000108 	.word	0x20000108
 80012fc:	40010000 	.word	0x40010000

08001300 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08e      	sub	sp, #56	@ 0x38
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	615a      	str	r2, [r3, #20]
 800132e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001330:	4b33      	ldr	r3, [pc, #204]	@ (8001400 <MX_TIM2_Init+0x100>)
 8001332:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001336:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8001338:	4b31      	ldr	r3, [pc, #196]	@ (8001400 <MX_TIM2_Init+0x100>)
 800133a:	2204      	movs	r2, #4
 800133c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b30      	ldr	r3, [pc, #192]	@ (8001400 <MX_TIM2_Init+0x100>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001344:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <MX_TIM2_Init+0x100>)
 8001346:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800134a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134c:	4b2c      	ldr	r3, [pc, #176]	@ (8001400 <MX_TIM2_Init+0x100>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001352:	4b2b      	ldr	r3, [pc, #172]	@ (8001400 <MX_TIM2_Init+0x100>)
 8001354:	2280      	movs	r2, #128	@ 0x80
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001358:	4829      	ldr	r0, [pc, #164]	@ (8001400 <MX_TIM2_Init+0x100>)
 800135a:	f001 fe21 	bl	8002fa0 <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001364:	f7ff fcde 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001368:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800136e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001372:	4619      	mov	r1, r3
 8001374:	4822      	ldr	r0, [pc, #136]	@ (8001400 <MX_TIM2_Init+0x100>)
 8001376:	f002 fab3 	bl	80038e0 <HAL_TIM_ConfigClockSource>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001380:	f7ff fcd0 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001384:	481e      	ldr	r0, [pc, #120]	@ (8001400 <MX_TIM2_Init+0x100>)
 8001386:	f001 fecb 	bl	8003120 <HAL_TIM_PWM_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001390:	f7ff fcc8 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001394:	2320      	movs	r3, #32
 8001396:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	4619      	mov	r1, r3
 80013a2:	4817      	ldr	r0, [pc, #92]	@ (8001400 <MX_TIM2_Init+0x100>)
 80013a4:	f002 ff70 	bl	8004288 <HAL_TIMEx_MasterConfigSynchronization>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013ae:	f7ff fcb9 	bl	8000d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b2:	2360      	movs	r3, #96	@ 0x60
 80013b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32768;
 80013b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013c0:	2304      	movs	r3, #4
 80013c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	4619      	mov	r1, r3
 80013ca:	480d      	ldr	r0, [pc, #52]	@ (8001400 <MX_TIM2_Init+0x100>)
 80013cc:	f002 f9c6 	bl	800375c <HAL_TIM_PWM_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80013d6:	f7ff fca5 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2204      	movs	r2, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4807      	ldr	r0, [pc, #28]	@ (8001400 <MX_TIM2_Init+0x100>)
 80013e2:	f002 f9bb 	bl	800375c <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80013ec:	f7ff fc9a 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013f0:	4803      	ldr	r0, [pc, #12]	@ (8001400 <MX_TIM2_Init+0x100>)
 80013f2:	f000 fb45 	bl	8001a80 <HAL_TIM_MspPostInit>

}
 80013f6:	bf00      	nop
 80013f8:	3738      	adds	r7, #56	@ 0x38
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000150 	.word	0x20000150

08001404 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140a:	f107 0320 	add.w	r3, r7, #32
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001430:	4b24      	ldr	r3, [pc, #144]	@ (80014c4 <MX_TIM3_Init+0xc0>)
 8001432:	4a25      	ldr	r2, [pc, #148]	@ (80014c8 <MX_TIM3_Init+0xc4>)
 8001434:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 8001436:	4b23      	ldr	r3, [pc, #140]	@ (80014c4 <MX_TIM3_Init+0xc0>)
 8001438:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <MX_TIM3_Init+0xc0>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8001444:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <MX_TIM3_Init+0xc0>)
 8001446:	22c7      	movs	r2, #199	@ 0xc7
 8001448:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <MX_TIM3_Init+0xc0>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001450:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <MX_TIM3_Init+0xc0>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001456:	481b      	ldr	r0, [pc, #108]	@ (80014c4 <MX_TIM3_Init+0xc0>)
 8001458:	f001 fda2 	bl	8002fa0 <HAL_TIM_Base_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001462:	f7ff fc5f 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001466:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800146a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	4619      	mov	r1, r3
 8001472:	4814      	ldr	r0, [pc, #80]	@ (80014c4 <MX_TIM3_Init+0xc0>)
 8001474:	f002 fa34 	bl	80038e0 <HAL_TIM_ConfigClockSource>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800147e:	f7ff fc51 	bl	8000d24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001482:	2306      	movs	r3, #6
 8001484:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001486:	2310      	movs	r3, #16
 8001488:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	4619      	mov	r1, r3
 8001490:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <MX_TIM3_Init+0xc0>)
 8001492:	f002 faec 	bl	8003a6e <HAL_TIM_SlaveConfigSynchro>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800149c:	f7ff fc42 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_TIM3_Init+0xc0>)
 80014ae:	f002 feeb 	bl	8004288 <HAL_TIMEx_MasterConfigSynchronization>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80014b8:	f7ff fc34 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	3730      	adds	r7, #48	@ 0x30
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000198 	.word	0x20000198
 80014c8:	40000400 	.word	0x40000400

080014cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08c      	sub	sp, #48	@ 0x30
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014f8:	4b24      	ldr	r3, [pc, #144]	@ (800158c <MX_TIM4_Init+0xc0>)
 80014fa:	4a25      	ldr	r2, [pc, #148]	@ (8001590 <MX_TIM4_Init+0xc4>)
 80014fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 65535;
 80014fe:	4b23      	ldr	r3, [pc, #140]	@ (800158c <MX_TIM4_Init+0xc0>)
 8001500:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001504:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <MX_TIM4_Init+0xc0>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 800150c:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <MX_TIM4_Init+0xc0>)
 800150e:	22c7      	movs	r2, #199	@ 0xc7
 8001510:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b1e      	ldr	r3, [pc, #120]	@ (800158c <MX_TIM4_Init+0xc0>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b1c      	ldr	r3, [pc, #112]	@ (800158c <MX_TIM4_Init+0xc0>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800151e:	481b      	ldr	r0, [pc, #108]	@ (800158c <MX_TIM4_Init+0xc0>)
 8001520:	f001 fd3e 	bl	8002fa0 <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800152a:	f7ff fbfb 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001532:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001534:	f107 0320 	add.w	r3, r7, #32
 8001538:	4619      	mov	r1, r3
 800153a:	4814      	ldr	r0, [pc, #80]	@ (800158c <MX_TIM4_Init+0xc0>)
 800153c:	f002 f9d0 	bl	80038e0 <HAL_TIM_ConfigClockSource>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001546:	f7ff fbed 	bl	8000d24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800154a:	2306      	movs	r3, #6
 800154c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4619      	mov	r1, r3
 8001558:	480c      	ldr	r0, [pc, #48]	@ (800158c <MX_TIM4_Init+0xc0>)
 800155a:	f002 fa88 	bl	8003a6e <HAL_TIM_SlaveConfigSynchro>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001564:	f7ff fbde 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_TIM4_Init+0xc0>)
 8001576:	f002 fe87 	bl	8004288 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8001580:	f7ff fbd0 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3730      	adds	r7, #48	@ 0x30
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200001e0 	.word	0x200001e0
 8001590:	40000800 	.word	0x40000800

08001594 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	@ 0x30
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015c0:	4b24      	ldr	r3, [pc, #144]	@ (8001654 <MX_TIM5_Init+0xc0>)
 80015c2:	4a25      	ldr	r2, [pc, #148]	@ (8001658 <MX_TIM5_Init+0xc4>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 80015c6:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <MX_TIM5_Init+0xc0>)
 80015c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015cc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <MX_TIM5_Init+0xc0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 199;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <MX_TIM5_Init+0xc0>)
 80015d6:	22c7      	movs	r2, #199	@ 0xc7
 80015d8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b1e      	ldr	r3, [pc, #120]	@ (8001654 <MX_TIM5_Init+0xc0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <MX_TIM5_Init+0xc0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015e6:	481b      	ldr	r0, [pc, #108]	@ (8001654 <MX_TIM5_Init+0xc0>)
 80015e8:	f001 fcda 	bl	8002fa0 <HAL_TIM_Base_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 80015f2:	f7ff fb97 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015fc:	f107 0320 	add.w	r3, r7, #32
 8001600:	4619      	mov	r1, r3
 8001602:	4814      	ldr	r0, [pc, #80]	@ (8001654 <MX_TIM5_Init+0xc0>)
 8001604:	f002 f96c 	bl	80038e0 <HAL_TIM_ConfigClockSource>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800160e:	f7ff fb89 	bl	8000d24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001612:	2306      	movs	r3, #6
 8001614:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001616:	2330      	movs	r3, #48	@ 0x30
 8001618:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4619      	mov	r1, r3
 8001620:	480c      	ldr	r0, [pc, #48]	@ (8001654 <MX_TIM5_Init+0xc0>)
 8001622:	f002 fa24 	bl	8003a6e <HAL_TIM_SlaveConfigSynchro>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800162c:	f7ff fb7a 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	@ (8001654 <MX_TIM5_Init+0xc0>)
 800163e:	f002 fe23 	bl	8004288 <HAL_TIMEx_MasterConfigSynchronization>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 8001648:	f7ff fb6c 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	3730      	adds	r7, #48	@ 0x30
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000228 	.word	0x20000228
 8001658:	40000c00 	.word	0x40000c00

0800165c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b096      	sub	sp, #88	@ 0x58
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800167a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]
 800168a:	615a      	str	r2, [r3, #20]
 800168c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2220      	movs	r2, #32
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f003 f99d 	bl	80049d4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800169a:	4b3f      	ldr	r3, [pc, #252]	@ (8001798 <MX_TIM8_Init+0x13c>)
 800169c:	4a3f      	ldr	r2, [pc, #252]	@ (800179c <MX_TIM8_Init+0x140>)
 800169e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4;
 80016a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001798 <MX_TIM8_Init+0x13c>)
 80016a2:	2204      	movs	r2, #4
 80016a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001798 <MX_TIM8_Init+0x13c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80016ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001798 <MX_TIM8_Init+0x13c>)
 80016ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b4:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <MX_TIM8_Init+0x13c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016ba:	4b37      	ldr	r3, [pc, #220]	@ (8001798 <MX_TIM8_Init+0x13c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016c0:	4b35      	ldr	r3, [pc, #212]	@ (8001798 <MX_TIM8_Init+0x13c>)
 80016c2:	2280      	movs	r2, #128	@ 0x80
 80016c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016c6:	4834      	ldr	r0, [pc, #208]	@ (8001798 <MX_TIM8_Init+0x13c>)
 80016c8:	f001 fc6a 	bl	8002fa0 <HAL_TIM_Base_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80016d2:	f7ff fb27 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016e0:	4619      	mov	r1, r3
 80016e2:	482d      	ldr	r0, [pc, #180]	@ (8001798 <MX_TIM8_Init+0x13c>)
 80016e4:	f002 f8fc 	bl	80038e0 <HAL_TIM_ConfigClockSource>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016ee:	f7ff fb19 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016f2:	4829      	ldr	r0, [pc, #164]	@ (8001798 <MX_TIM8_Init+0x13c>)
 80016f4:	f001 fd14 	bl	8003120 <HAL_TIM_PWM_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016fe:	f7ff fb11 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001702:	2320      	movs	r3, #32
 8001704:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001706:	2380      	movs	r3, #128	@ 0x80
 8001708:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800170a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800170e:	4619      	mov	r1, r3
 8001710:	4821      	ldr	r0, [pc, #132]	@ (8001798 <MX_TIM8_Init+0x13c>)
 8001712:	f002 fdb9 	bl	8004288 <HAL_TIMEx_MasterConfigSynchronization>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800171c:	f7ff fb02 	bl	8000d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001720:	2360      	movs	r3, #96	@ 0x60
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 8001724:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001728:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800172e:	2300      	movs	r3, #0
 8001730:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001732:	2304      	movs	r3, #4
 8001734:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001742:	2200      	movs	r2, #0
 8001744:	4619      	mov	r1, r3
 8001746:	4814      	ldr	r0, [pc, #80]	@ (8001798 <MX_TIM8_Init+0x13c>)
 8001748:	f002 f808 	bl	800375c <HAL_TIM_PWM_ConfigChannel>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001752:	f7ff fae7 	bl	8000d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800176a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800176e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4619      	mov	r1, r3
 8001778:	4807      	ldr	r0, [pc, #28]	@ (8001798 <MX_TIM8_Init+0x13c>)
 800177a:	f002 fe01 	bl	8004380 <HAL_TIMEx_ConfigBreakDeadTime>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001784:	f7ff face 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001788:	4803      	ldr	r0, [pc, #12]	@ (8001798 <MX_TIM8_Init+0x13c>)
 800178a:	f000 f979 	bl	8001a80 <HAL_TIM_MspPostInit>

}
 800178e:	bf00      	nop
 8001790:	3758      	adds	r7, #88	@ 0x58
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000270 	.word	0x20000270
 800179c:	40010400 	.word	0x40010400

080017a0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80017a4:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <MX_TIM10_Init+0x40>)
 80017a6:	4a0f      	ldr	r2, [pc, #60]	@ (80017e4 <MX_TIM10_Init+0x44>)
 80017a8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <MX_TIM10_Init+0x40>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b0:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <MX_TIM10_Init+0x40>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80017b6:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <MX_TIM10_Init+0x40>)
 80017b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017bc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017be:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <MX_TIM10_Init+0x40>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <MX_TIM10_Init+0x40>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <MX_TIM10_Init+0x40>)
 80017cc:	f001 fbe8 	bl	8002fa0 <HAL_TIM_Base_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80017d6:	f7ff faa5 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200002b8 	.word	0x200002b8
 80017e4:	40014400 	.word	0x40014400

080017e8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <MX_TIM11_Init+0x40>)
 80017ee:	4a0f      	ldr	r2, [pc, #60]	@ (800182c <MX_TIM11_Init+0x44>)
 80017f0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <MX_TIM11_Init+0x40>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <MX_TIM11_Init+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <MX_TIM11_Init+0x40>)
 8001800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001804:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001806:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <MX_TIM11_Init+0x40>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <MX_TIM11_Init+0x40>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_TIM11_Init+0x40>)
 8001814:	f001 fbc4 	bl	8002fa0 <HAL_TIM_Base_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800181e:	f7ff fa81 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000300 	.word	0x20000300
 800182c:	40014800 	.word	0x40014800

08001830 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	@ 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a88      	ldr	r2, [pc, #544]	@ (8001a60 <HAL_TIM_Base_MspInit+0x230>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d12e      	bne.n	80018a0 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
 8001846:	4b87      	ldr	r3, [pc, #540]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184a:	4a86      	ldr	r2, [pc, #536]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6453      	str	r3, [r2, #68]	@ 0x44
 8001852:	4b84      	ldr	r3, [pc, #528]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
 800185c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2101      	movs	r1, #1
 8001862:	2018      	movs	r0, #24
 8001864:	f000 fbb7 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001868:	2018      	movs	r0, #24
 800186a:	f000 fbd0 	bl	800200e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2101      	movs	r1, #1
 8001872:	2019      	movs	r0, #25
 8001874:	f000 fbaf 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001878:	2019      	movs	r0, #25
 800187a:	f000 fbc8 	bl	800200e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2101      	movs	r1, #1
 8001882:	201a      	movs	r0, #26
 8001884:	f000 fba7 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001888:	201a      	movs	r0, #26
 800188a:	f000 fbc0 	bl	800200e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2101      	movs	r1, #1
 8001892:	201b      	movs	r0, #27
 8001894:	f000 fb9f 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001898:	201b      	movs	r0, #27
 800189a:	f000 fbb8 	bl	800200e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800189e:	e0da      	b.n	8001a56 <HAL_TIM_Base_MspInit+0x226>
  else if(tim_baseHandle->Instance==TIM2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018a8:	d116      	bne.n	80018d8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
 80018ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	4a6c      	ldr	r2, [pc, #432]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	623b      	str	r3, [r7, #32]
 80018c4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2101      	movs	r1, #1
 80018ca:	201c      	movs	r0, #28
 80018cc:	f000 fb83 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018d0:	201c      	movs	r0, #28
 80018d2:	f000 fb9c 	bl	800200e <HAL_NVIC_EnableIRQ>
}
 80018d6:	e0be      	b.n	8001a56 <HAL_TIM_Base_MspInit+0x226>
  else if(tim_baseHandle->Instance==TIM3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a62      	ldr	r2, [pc, #392]	@ (8001a68 <HAL_TIM_Base_MspInit+0x238>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d116      	bne.n	8001910 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2101      	movs	r1, #1
 8001902:	201d      	movs	r0, #29
 8001904:	f000 fb67 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001908:	201d      	movs	r0, #29
 800190a:	f000 fb80 	bl	800200e <HAL_NVIC_EnableIRQ>
}
 800190e:	e0a2      	b.n	8001a56 <HAL_TIM_Base_MspInit+0x226>
  else if(tim_baseHandle->Instance==TIM4)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a55      	ldr	r2, [pc, #340]	@ (8001a6c <HAL_TIM_Base_MspInit+0x23c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d116      	bne.n	8001948 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	4b51      	ldr	r3, [pc, #324]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	4a50      	ldr	r2, [pc, #320]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6413      	str	r3, [r2, #64]	@ 0x40
 800192a:	4b4e      	ldr	r3, [pc, #312]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2101      	movs	r1, #1
 800193a:	201e      	movs	r0, #30
 800193c:	f000 fb4b 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001940:	201e      	movs	r0, #30
 8001942:	f000 fb64 	bl	800200e <HAL_NVIC_EnableIRQ>
}
 8001946:	e086      	b.n	8001a56 <HAL_TIM_Base_MspInit+0x226>
  else if(tim_baseHandle->Instance==TIM5)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a48      	ldr	r2, [pc, #288]	@ (8001a70 <HAL_TIM_Base_MspInit+0x240>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d116      	bne.n	8001980 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	4b43      	ldr	r3, [pc, #268]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	4a42      	ldr	r2, [pc, #264]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	6413      	str	r3, [r2, #64]	@ 0x40
 8001962:	4b40      	ldr	r3, [pc, #256]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2101      	movs	r1, #1
 8001972:	2032      	movs	r0, #50	@ 0x32
 8001974:	f000 fb2f 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001978:	2032      	movs	r0, #50	@ 0x32
 800197a:	f000 fb48 	bl	800200e <HAL_NVIC_EnableIRQ>
}
 800197e:	e06a      	b.n	8001a56 <HAL_TIM_Base_MspInit+0x226>
  else if(tim_baseHandle->Instance==TIM8)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a3b      	ldr	r2, [pc, #236]	@ (8001a74 <HAL_TIM_Base_MspInit+0x244>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d12e      	bne.n	80019e8 <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b35      	ldr	r3, [pc, #212]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	4a34      	ldr	r2, [pc, #208]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6453      	str	r3, [r2, #68]	@ 0x44
 800199a:	4b32      	ldr	r3, [pc, #200]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	202b      	movs	r0, #43	@ 0x2b
 80019ac:	f000 fb13 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80019b0:	202b      	movs	r0, #43	@ 0x2b
 80019b2:	f000 fb2c 	bl	800200e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	202c      	movs	r0, #44	@ 0x2c
 80019bc:	f000 fb0b 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80019c0:	202c      	movs	r0, #44	@ 0x2c
 80019c2:	f000 fb24 	bl	800200e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	202d      	movs	r0, #45	@ 0x2d
 80019cc:	f000 fb03 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80019d0:	202d      	movs	r0, #45	@ 0x2d
 80019d2:	f000 fb1c 	bl	800200e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	202e      	movs	r0, #46	@ 0x2e
 80019dc:	f000 fafb 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80019e0:	202e      	movs	r0, #46	@ 0x2e
 80019e2:	f000 fb14 	bl	800200e <HAL_NVIC_EnableIRQ>
}
 80019e6:	e036      	b.n	8001a56 <HAL_TIM_Base_MspInit+0x226>
  else if(tim_baseHandle->Instance==TIM10)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a22      	ldr	r2, [pc, #136]	@ (8001a78 <HAL_TIM_Base_MspInit+0x248>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d116      	bne.n	8001a20 <HAL_TIM_Base_MspInit+0x1f0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a02:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2101      	movs	r1, #1
 8001a12:	2019      	movs	r0, #25
 8001a14:	f000 fadf 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a18:	2019      	movs	r0, #25
 8001a1a:	f000 faf8 	bl	800200e <HAL_NVIC_EnableIRQ>
}
 8001a1e:	e01a      	b.n	8001a56 <HAL_TIM_Base_MspInit+0x226>
  else if(tim_baseHandle->Instance==TIM11)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a15      	ldr	r2, [pc, #84]	@ (8001a7c <HAL_TIM_Base_MspInit+0x24c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d115      	bne.n	8001a56 <HAL_TIM_Base_MspInit+0x226>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	4a0c      	ldr	r2, [pc, #48]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 8001a34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <HAL_TIM_Base_MspInit+0x234>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2101      	movs	r1, #1
 8001a4a:	201a      	movs	r0, #26
 8001a4c:	f000 fac3 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a50:	201a      	movs	r0, #26
 8001a52:	f000 fadc 	bl	800200e <HAL_NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3728      	adds	r7, #40	@ 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40010000 	.word	0x40010000
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40000800 	.word	0x40000800
 8001a70:	40000c00 	.word	0x40000c00
 8001a74:	40010400 	.word	0x40010400
 8001a78:	40014400 	.word	0x40014400
 8001a7c:	40014800 	.word	0x40014800

08001a80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	@ 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a36      	ldr	r2, [pc, #216]	@ (8001b78 <HAL_TIM_MspPostInit+0xf8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d11f      	bne.n	8001ae2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b35      	ldr	r3, [pc, #212]	@ (8001b7c <HAL_TIM_MspPostInit+0xfc>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a34      	ldr	r2, [pc, #208]	@ (8001b7c <HAL_TIM_MspPostInit+0xfc>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b32      	ldr	r3, [pc, #200]	@ (8001b7c <HAL_TIM_MspPostInit+0xfc>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 8001abe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4829      	ldr	r0, [pc, #164]	@ (8001b80 <HAL_TIM_MspPostInit+0x100>)
 8001adc:	f000 fab2 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001ae0:	e046      	b.n	8001b70 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aea:	d11e      	bne.n	8001b2a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	4b22      	ldr	r3, [pc, #136]	@ (8001b7c <HAL_TIM_MspPostInit+0xfc>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af4:	4a21      	ldr	r2, [pc, #132]	@ (8001b7c <HAL_TIM_MspPostInit+0xfc>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b7c <HAL_TIM_MspPostInit+0xfc>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	4817      	ldr	r0, [pc, #92]	@ (8001b80 <HAL_TIM_MspPostInit+0x100>)
 8001b24:	f000 fa8e 	bl	8002044 <HAL_GPIO_Init>
}
 8001b28:	e022      	b.n	8001b70 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM8)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a15      	ldr	r2, [pc, #84]	@ (8001b84 <HAL_TIM_MspPostInit+0x104>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d11d      	bne.n	8001b70 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_TIM_MspPostInit+0xfc>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b7c <HAL_TIM_MspPostInit+0xfc>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b44:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <HAL_TIM_MspPostInit+0xfc>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_Pin;
 8001b50:	2340      	movs	r3, #64	@ 0x40
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b60:	2303      	movs	r3, #3
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM4_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4807      	ldr	r0, [pc, #28]	@ (8001b88 <HAL_TIM_MspPostInit+0x108>)
 8001b6c:	f000 fa6a 	bl	8002044 <HAL_GPIO_Init>
}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	@ 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40010000 	.word	0x40010000
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40010400 	.word	0x40010400
 8001b88:	40020800 	.word	0x40020800

08001b8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */


//emergency stop button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DISABLE_button_Pin) {
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b9c:	d108      	bne.n	8001bb0 <HAL_GPIO_EXTI_Callback+0x24>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET); //ENABLE
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	2120      	movs	r1, #32
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001ba4:	f000 fbe2 	bl	800236c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba8:	b672      	cpsid	i
}
 8001baa:	bf00      	nop
		__disable_irq();

		while (1) {
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <HAL_GPIO_EXTI_Callback+0x20>

		}
	}
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40020800 	.word	0x40020800

08001bbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	@ (8001c0c <MX_USART2_UART_Init+0x50>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bf2:	4805      	ldr	r0, [pc, #20]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	f002 fc2a 	bl	800444c <HAL_UART_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bfe:	f7ff f891 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000348 	.word	0x20000348
 8001c0c:	40004400 	.word	0x40004400

08001c10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	@ 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a19      	ldr	r2, [pc, #100]	@ (8001c94 <HAL_UART_MspInit+0x84>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d12b      	bne.n	8001c8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	4b18      	ldr	r3, [pc, #96]	@ (8001c98 <HAL_UART_MspInit+0x88>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	4a17      	ldr	r2, [pc, #92]	@ (8001c98 <HAL_UART_MspInit+0x88>)
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <HAL_UART_MspInit+0x88>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HAL_UART_MspInit+0x88>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	4a10      	ldr	r2, [pc, #64]	@ (8001c98 <HAL_UART_MspInit+0x88>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <HAL_UART_MspInit+0x88>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c6a:	230c      	movs	r3, #12
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <HAL_UART_MspInit+0x8c>)
 8001c86:	f000 f9dd 	bl	8002044 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	@ 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40004400 	.word	0x40004400
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ca0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ca4:	f7ff fa78 	bl	8001198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001caa:	490d      	ldr	r1, [pc, #52]	@ (8001ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cce:	f002 fe89 	bl	80049e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd2:	f7fe ff33 	bl	8000b3c <main>
  bx  lr    
 8001cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce0:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001ce4:	08004a6c 	.word	0x08004a6c
  ldr r2, =_sbss
 8001ce8:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001cec:	20000394 	.word	0x20000394

08001cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <ADC_IRQHandler>
	...

08001cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_Init+0x40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d34 <HAL_Init+0x40>)
 8001cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <HAL_Init+0x40>)
 8001d0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d10:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a07      	ldr	r2, [pc, #28]	@ (8001d34 <HAL_Init+0x40>)
 8001d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	f000 f94f 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d22:	2000      	movs	r0, #0
 8001d24:	f000 f808 	bl	8001d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d28:	f7ff f956 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023c00 	.word	0x40023c00

08001d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <HAL_InitTick+0x54>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <HAL_InitTick+0x58>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f967 	bl	800202a <HAL_SYSTICK_Config>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00e      	b.n	8001d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b0f      	cmp	r3, #15
 8001d6a:	d80a      	bhi.n	8001d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f000 f92f 	bl	8001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d78:	4a06      	ldr	r2, [pc, #24]	@ (8001d94 <HAL_InitTick+0x5c>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e000      	b.n	8001d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000028 	.word	0x20000028
 8001d90:	20000030 	.word	0x20000030
 8001d94:	2000002c 	.word	0x2000002c

08001d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_IncTick+0x20>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_IncTick+0x24>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	4a04      	ldr	r2, [pc, #16]	@ (8001dbc <HAL_IncTick+0x24>)
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000030 	.word	0x20000030
 8001dbc:	20000390 	.word	0x20000390

08001dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <HAL_GetTick+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000390 	.word	0x20000390

08001dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff ffee 	bl	8001dc0 <HAL_GetTick>
 8001de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d005      	beq.n	8001dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <HAL_Delay+0x44>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dfe:	bf00      	nop
 8001e00:	f7ff ffde 	bl	8001dc0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d8f7      	bhi.n	8001e00 <HAL_Delay+0x28>
  {
  }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000030 	.word	0x20000030

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	@ (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	@ (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	@ (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	@ 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	@ (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff29 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff3e 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff8e 	bl	8001f14 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5d 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff31 	bl	8001e84 <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa2 	bl	8001f7c <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	@ 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e165      	b.n	800232c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 8154 	bne.w	8002326 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d005      	beq.n	8002096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002092:	2b02      	cmp	r3, #2
 8002094:	d130      	bne.n	80020f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0201 	and.w	r2, r3, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b03      	cmp	r3, #3
 8002102:	d017      	beq.n	8002134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d123      	bne.n	8002188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80ae 	beq.w	8002326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002344 <HAL_GPIO_Init+0x300>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002344 <HAL_GPIO_Init+0x300>)
 80021d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021da:	4b5a      	ldr	r3, [pc, #360]	@ (8002344 <HAL_GPIO_Init+0x300>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e6:	4a58      	ldr	r2, [pc, #352]	@ (8002348 <HAL_GPIO_Init+0x304>)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	3302      	adds	r3, #2
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4f      	ldr	r2, [pc, #316]	@ (800234c <HAL_GPIO_Init+0x308>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d025      	beq.n	800225e <HAL_GPIO_Init+0x21a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4e      	ldr	r2, [pc, #312]	@ (8002350 <HAL_GPIO_Init+0x30c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d01f      	beq.n	800225a <HAL_GPIO_Init+0x216>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4d      	ldr	r2, [pc, #308]	@ (8002354 <HAL_GPIO_Init+0x310>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d019      	beq.n	8002256 <HAL_GPIO_Init+0x212>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4c      	ldr	r2, [pc, #304]	@ (8002358 <HAL_GPIO_Init+0x314>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_GPIO_Init+0x20e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4b      	ldr	r2, [pc, #300]	@ (800235c <HAL_GPIO_Init+0x318>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00d      	beq.n	800224e <HAL_GPIO_Init+0x20a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4a      	ldr	r2, [pc, #296]	@ (8002360 <HAL_GPIO_Init+0x31c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <HAL_GPIO_Init+0x206>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a49      	ldr	r2, [pc, #292]	@ (8002364 <HAL_GPIO_Init+0x320>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_GPIO_Init+0x202>
 8002242:	2306      	movs	r3, #6
 8002244:	e00c      	b.n	8002260 <HAL_GPIO_Init+0x21c>
 8002246:	2307      	movs	r3, #7
 8002248:	e00a      	b.n	8002260 <HAL_GPIO_Init+0x21c>
 800224a:	2305      	movs	r3, #5
 800224c:	e008      	b.n	8002260 <HAL_GPIO_Init+0x21c>
 800224e:	2304      	movs	r3, #4
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x21c>
 8002252:	2303      	movs	r3, #3
 8002254:	e004      	b.n	8002260 <HAL_GPIO_Init+0x21c>
 8002256:	2302      	movs	r3, #2
 8002258:	e002      	b.n	8002260 <HAL_GPIO_Init+0x21c>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_GPIO_Init+0x21c>
 800225e:	2300      	movs	r3, #0
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	f002 0203 	and.w	r2, r2, #3
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	4093      	lsls	r3, r2
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002270:	4935      	ldr	r1, [pc, #212]	@ (8002348 <HAL_GPIO_Init+0x304>)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227e:	4b3a      	ldr	r3, [pc, #232]	@ (8002368 <HAL_GPIO_Init+0x324>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022a2:	4a31      	ldr	r2, [pc, #196]	@ (8002368 <HAL_GPIO_Init+0x324>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002368 <HAL_GPIO_Init+0x324>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022cc:	4a26      	ldr	r2, [pc, #152]	@ (8002368 <HAL_GPIO_Init+0x324>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022d2:	4b25      	ldr	r3, [pc, #148]	@ (8002368 <HAL_GPIO_Init+0x324>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002368 <HAL_GPIO_Init+0x324>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002368 <HAL_GPIO_Init+0x324>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002320:	4a11      	ldr	r2, [pc, #68]	@ (8002368 <HAL_GPIO_Init+0x324>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3301      	adds	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b0f      	cmp	r3, #15
 8002330:	f67f ae96 	bls.w	8002060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3724      	adds	r7, #36	@ 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40013800 	.word	0x40013800
 800234c:	40020000 	.word	0x40020000
 8002350:	40020400 	.word	0x40020400
 8002354:	40020800 	.word	0x40020800
 8002358:	40020c00 	.word	0x40020c00
 800235c:	40021000 	.word	0x40021000
 8002360:	40021400 	.word	0x40021400
 8002364:	40021800 	.word	0x40021800
 8002368:	40013c00 	.word	0x40013c00

0800236c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002388:	e003      	b.n	8002392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800238a:	887b      	ldrh	r3, [r7, #2]
 800238c:	041a      	lsls	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	619a      	str	r2, [r3, #24]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023aa:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023b6:	4a05      	ldr	r2, [pc, #20]	@ (80023cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fbe4 	bl	8001b8c <HAL_GPIO_EXTI_Callback>
  }
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40013c00 	.word	0x40013c00

080023d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0cc      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b68      	ldr	r3, [pc, #416]	@ (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d90c      	bls.n	800240c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b65      	ldr	r3, [pc, #404]	@ (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b63      	ldr	r3, [pc, #396]	@ (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0b8      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d020      	beq.n	800245a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002424:	4b59      	ldr	r3, [pc, #356]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4a58      	ldr	r2, [pc, #352]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800242e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800243c:	4b53      	ldr	r3, [pc, #332]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a52      	ldr	r2, [pc, #328]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002448:	4b50      	ldr	r3, [pc, #320]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	494d      	ldr	r1, [pc, #308]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d044      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	4b47      	ldr	r3, [pc, #284]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d119      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e07f      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d003      	beq.n	800248e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248a:	2b03      	cmp	r3, #3
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	4b3f      	ldr	r3, [pc, #252]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e06f      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249e:	4b3b      	ldr	r3, [pc, #236]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e067      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ae:	4b37      	ldr	r3, [pc, #220]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4934      	ldr	r1, [pc, #208]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c0:	f7ff fc7e 	bl	8001dc0 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7ff fc7a 	bl	8001dc0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e04f      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	4b2b      	ldr	r3, [pc, #172]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 020c 	and.w	r2, r3, #12
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1eb      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f0:	4b25      	ldr	r3, [pc, #148]	@ (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d20c      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b22      	ldr	r3, [pc, #136]	@ (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e032      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002524:	4b19      	ldr	r3, [pc, #100]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4916      	ldr	r1, [pc, #88]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002542:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	490e      	ldr	r1, [pc, #56]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002556:	f000 f855 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 800255a:	4602      	mov	r2, r0
 800255c:	4b0b      	ldr	r3, [pc, #44]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	490a      	ldr	r1, [pc, #40]	@ (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	5ccb      	ldrb	r3, [r1, r3]
 800256a:	fa22 f303 	lsr.w	r3, r2, r3
 800256e:	4a09      	ldr	r2, [pc, #36]	@ (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002572:	4b09      	ldr	r3, [pc, #36]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fbde 	bl	8001d38 <HAL_InitTick>

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023c00 	.word	0x40023c00
 800258c:	40023800 	.word	0x40023800
 8002590:	08004a44 	.word	0x08004a44
 8002594:	20000028 	.word	0x20000028
 8002598:	2000002c 	.word	0x2000002c

0800259c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000028 	.word	0x20000028

080025b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025b8:	f7ff fff0 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b05      	ldr	r3, [pc, #20]	@ (80025d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	0a9b      	lsrs	r3, r3, #10
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	4903      	ldr	r1, [pc, #12]	@ (80025d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40023800 	.word	0x40023800
 80025d8:	08004a54 	.word	0x08004a54

080025dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e0:	f7ff ffdc 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0b5b      	lsrs	r3, r3, #13
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4903      	ldr	r1, [pc, #12]	@ (8002600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	08004a54 	.word	0x08004a54

08002604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002608:	b0ae      	sub	sp, #184	@ 0xb8
 800260a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800262a:	4bcb      	ldr	r3, [pc, #812]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b0c      	cmp	r3, #12
 8002634:	f200 8206 	bhi.w	8002a44 <HAL_RCC_GetSysClockFreq+0x440>
 8002638:	a201      	add	r2, pc, #4	@ (adr r2, 8002640 <HAL_RCC_GetSysClockFreq+0x3c>)
 800263a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263e:	bf00      	nop
 8002640:	08002675 	.word	0x08002675
 8002644:	08002a45 	.word	0x08002a45
 8002648:	08002a45 	.word	0x08002a45
 800264c:	08002a45 	.word	0x08002a45
 8002650:	0800267d 	.word	0x0800267d
 8002654:	08002a45 	.word	0x08002a45
 8002658:	08002a45 	.word	0x08002a45
 800265c:	08002a45 	.word	0x08002a45
 8002660:	08002685 	.word	0x08002685
 8002664:	08002a45 	.word	0x08002a45
 8002668:	08002a45 	.word	0x08002a45
 800266c:	08002a45 	.word	0x08002a45
 8002670:	08002875 	.word	0x08002875
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4bb9      	ldr	r3, [pc, #740]	@ (800295c <HAL_RCC_GetSysClockFreq+0x358>)
 8002676:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800267a:	e1e7      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800267c:	4bb8      	ldr	r3, [pc, #736]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x35c>)
 800267e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002682:	e1e3      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002684:	4bb4      	ldr	r3, [pc, #720]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800268c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002690:	4bb1      	ldr	r3, [pc, #708]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d071      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269c:	4bae      	ldr	r3, [pc, #696]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	099b      	lsrs	r3, r3, #6
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80026ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80026be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80026c2:	4622      	mov	r2, r4
 80026c4:	462b      	mov	r3, r5
 80026c6:	f04f 0000 	mov.w	r0, #0
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	0159      	lsls	r1, r3, #5
 80026d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d4:	0150      	lsls	r0, r2, #5
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4621      	mov	r1, r4
 80026dc:	1a51      	subs	r1, r2, r1
 80026de:	6439      	str	r1, [r7, #64]	@ 0x40
 80026e0:	4629      	mov	r1, r5
 80026e2:	eb63 0301 	sbc.w	r3, r3, r1
 80026e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80026f4:	4649      	mov	r1, r9
 80026f6:	018b      	lsls	r3, r1, #6
 80026f8:	4641      	mov	r1, r8
 80026fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026fe:	4641      	mov	r1, r8
 8002700:	018a      	lsls	r2, r1, #6
 8002702:	4641      	mov	r1, r8
 8002704:	1a51      	subs	r1, r2, r1
 8002706:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002708:	4649      	mov	r1, r9
 800270a:	eb63 0301 	sbc.w	r3, r3, r1
 800270e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800271c:	4649      	mov	r1, r9
 800271e:	00cb      	lsls	r3, r1, #3
 8002720:	4641      	mov	r1, r8
 8002722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002726:	4641      	mov	r1, r8
 8002728:	00ca      	lsls	r2, r1, #3
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	4603      	mov	r3, r0
 8002730:	4622      	mov	r2, r4
 8002732:	189b      	adds	r3, r3, r2
 8002734:	633b      	str	r3, [r7, #48]	@ 0x30
 8002736:	462b      	mov	r3, r5
 8002738:	460a      	mov	r2, r1
 800273a:	eb42 0303 	adc.w	r3, r2, r3
 800273e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800274c:	4629      	mov	r1, r5
 800274e:	024b      	lsls	r3, r1, #9
 8002750:	4621      	mov	r1, r4
 8002752:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002756:	4621      	mov	r1, r4
 8002758:	024a      	lsls	r2, r1, #9
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002762:	2200      	movs	r2, #0
 8002764:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002768:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800276c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002770:	f7fd fd48 	bl	8000204 <__aeabi_uldivmod>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4613      	mov	r3, r2
 800277a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800277e:	e067      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002780:	4b75      	ldr	r3, [pc, #468]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	2200      	movs	r2, #0
 8002788:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800278c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002790:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002798:	67bb      	str	r3, [r7, #120]	@ 0x78
 800279a:	2300      	movs	r3, #0
 800279c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800279e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80027a2:	4622      	mov	r2, r4
 80027a4:	462b      	mov	r3, r5
 80027a6:	f04f 0000 	mov.w	r0, #0
 80027aa:	f04f 0100 	mov.w	r1, #0
 80027ae:	0159      	lsls	r1, r3, #5
 80027b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b4:	0150      	lsls	r0, r2, #5
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4621      	mov	r1, r4
 80027bc:	1a51      	subs	r1, r2, r1
 80027be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80027c0:	4629      	mov	r1, r5
 80027c2:	eb63 0301 	sbc.w	r3, r3, r1
 80027c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80027d4:	4649      	mov	r1, r9
 80027d6:	018b      	lsls	r3, r1, #6
 80027d8:	4641      	mov	r1, r8
 80027da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027de:	4641      	mov	r1, r8
 80027e0:	018a      	lsls	r2, r1, #6
 80027e2:	4641      	mov	r1, r8
 80027e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80027e8:	4649      	mov	r1, r9
 80027ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002802:	4692      	mov	sl, r2
 8002804:	469b      	mov	fp, r3
 8002806:	4623      	mov	r3, r4
 8002808:	eb1a 0303 	adds.w	r3, sl, r3
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	462b      	mov	r3, r5
 8002810:	eb4b 0303 	adc.w	r3, fp, r3
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002822:	4629      	mov	r1, r5
 8002824:	028b      	lsls	r3, r1, #10
 8002826:	4621      	mov	r1, r4
 8002828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800282c:	4621      	mov	r1, r4
 800282e:	028a      	lsls	r2, r1, #10
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002838:	2200      	movs	r2, #0
 800283a:	673b      	str	r3, [r7, #112]	@ 0x70
 800283c:	677a      	str	r2, [r7, #116]	@ 0x74
 800283e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002842:	f7fd fcdf 	bl	8000204 <__aeabi_uldivmod>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4613      	mov	r3, r2
 800284c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002850:	4b41      	ldr	r3, [pc, #260]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	3301      	adds	r3, #1
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002862:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002872:	e0eb      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002874:	4b38      	ldr	r3, [pc, #224]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800287c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002880:	4b35      	ldr	r3, [pc, #212]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d06b      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288c:	4b32      	ldr	r3, [pc, #200]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	099b      	lsrs	r3, r3, #6
 8002892:	2200      	movs	r2, #0
 8002894:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002896:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002898:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800289a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800289e:	663b      	str	r3, [r7, #96]	@ 0x60
 80028a0:	2300      	movs	r3, #0
 80028a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80028a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80028a8:	4622      	mov	r2, r4
 80028aa:	462b      	mov	r3, r5
 80028ac:	f04f 0000 	mov.w	r0, #0
 80028b0:	f04f 0100 	mov.w	r1, #0
 80028b4:	0159      	lsls	r1, r3, #5
 80028b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ba:	0150      	lsls	r0, r2, #5
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4621      	mov	r1, r4
 80028c2:	1a51      	subs	r1, r2, r1
 80028c4:	61b9      	str	r1, [r7, #24]
 80028c6:	4629      	mov	r1, r5
 80028c8:	eb63 0301 	sbc.w	r3, r3, r1
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80028da:	4659      	mov	r1, fp
 80028dc:	018b      	lsls	r3, r1, #6
 80028de:	4651      	mov	r1, sl
 80028e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028e4:	4651      	mov	r1, sl
 80028e6:	018a      	lsls	r2, r1, #6
 80028e8:	4651      	mov	r1, sl
 80028ea:	ebb2 0801 	subs.w	r8, r2, r1
 80028ee:	4659      	mov	r1, fp
 80028f0:	eb63 0901 	sbc.w	r9, r3, r1
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002900:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002904:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002908:	4690      	mov	r8, r2
 800290a:	4699      	mov	r9, r3
 800290c:	4623      	mov	r3, r4
 800290e:	eb18 0303 	adds.w	r3, r8, r3
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	462b      	mov	r3, r5
 8002916:	eb49 0303 	adc.w	r3, r9, r3
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002928:	4629      	mov	r1, r5
 800292a:	024b      	lsls	r3, r1, #9
 800292c:	4621      	mov	r1, r4
 800292e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002932:	4621      	mov	r1, r4
 8002934:	024a      	lsls	r2, r1, #9
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800293e:	2200      	movs	r2, #0
 8002940:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002942:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002944:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002948:	f7fd fc5c 	bl	8000204 <__aeabi_uldivmod>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4613      	mov	r3, r2
 8002952:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002956:	e065      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x420>
 8002958:	40023800 	.word	0x40023800
 800295c:	00f42400 	.word	0x00f42400
 8002960:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002964:	4b3d      	ldr	r3, [pc, #244]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x458>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	099b      	lsrs	r3, r3, #6
 800296a:	2200      	movs	r2, #0
 800296c:	4618      	mov	r0, r3
 800296e:	4611      	mov	r1, r2
 8002970:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002974:	653b      	str	r3, [r7, #80]	@ 0x50
 8002976:	2300      	movs	r3, #0
 8002978:	657b      	str	r3, [r7, #84]	@ 0x54
 800297a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800297e:	4642      	mov	r2, r8
 8002980:	464b      	mov	r3, r9
 8002982:	f04f 0000 	mov.w	r0, #0
 8002986:	f04f 0100 	mov.w	r1, #0
 800298a:	0159      	lsls	r1, r3, #5
 800298c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002990:	0150      	lsls	r0, r2, #5
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4641      	mov	r1, r8
 8002998:	1a51      	subs	r1, r2, r1
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	4649      	mov	r1, r9
 800299e:	eb63 0301 	sbc.w	r3, r3, r1
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80029b0:	4659      	mov	r1, fp
 80029b2:	018b      	lsls	r3, r1, #6
 80029b4:	4651      	mov	r1, sl
 80029b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ba:	4651      	mov	r1, sl
 80029bc:	018a      	lsls	r2, r1, #6
 80029be:	4651      	mov	r1, sl
 80029c0:	1a54      	subs	r4, r2, r1
 80029c2:	4659      	mov	r1, fp
 80029c4:	eb63 0501 	sbc.w	r5, r3, r1
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	00eb      	lsls	r3, r5, #3
 80029d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d6:	00e2      	lsls	r2, r4, #3
 80029d8:	4614      	mov	r4, r2
 80029da:	461d      	mov	r5, r3
 80029dc:	4643      	mov	r3, r8
 80029de:	18e3      	adds	r3, r4, r3
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	464b      	mov	r3, r9
 80029e4:	eb45 0303 	adc.w	r3, r5, r3
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029f6:	4629      	mov	r1, r5
 80029f8:	028b      	lsls	r3, r1, #10
 80029fa:	4621      	mov	r1, r4
 80029fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a00:	4621      	mov	r1, r4
 8002a02:	028a      	lsls	r2, r1, #10
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a10:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002a12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a16:	f7fd fbf5 	bl	8000204 <__aeabi_uldivmod>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4613      	mov	r3, r2
 8002a20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a24:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x458>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	0f1b      	lsrs	r3, r3, #28
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002a32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a42:	e003      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a44:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	37b8      	adds	r7, #184	@ 0xb8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	00f42400 	.word	0x00f42400

08002a64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e28d      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8083 	beq.w	8002b8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a84:	4b94      	ldr	r3, [pc, #592]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d019      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a90:	4b91      	ldr	r3, [pc, #580]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a9c:	4b8e      	ldr	r3, [pc, #568]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aa8:	d00c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aaa:	4b8b      	ldr	r3, [pc, #556]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d112      	bne.n	8002adc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ab6:	4b88      	ldr	r3, [pc, #544]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002abe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ac2:	d10b      	bne.n	8002adc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	4b84      	ldr	r3, [pc, #528]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d05b      	beq.n	8002b88 <HAL_RCC_OscConfig+0x124>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d157      	bne.n	8002b88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e25a      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae4:	d106      	bne.n	8002af4 <HAL_RCC_OscConfig+0x90>
 8002ae6:	4b7c      	ldr	r3, [pc, #496]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a7b      	ldr	r2, [pc, #492]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e01d      	b.n	8002b30 <HAL_RCC_OscConfig+0xcc>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0xb4>
 8002afe:	4b76      	ldr	r3, [pc, #472]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a75      	ldr	r2, [pc, #468]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b73      	ldr	r3, [pc, #460]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a72      	ldr	r2, [pc, #456]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0xcc>
 8002b18:	4b6f      	ldr	r3, [pc, #444]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b6c      	ldr	r3, [pc, #432]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a6b      	ldr	r2, [pc, #428]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d013      	beq.n	8002b60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7ff f942 	bl	8001dc0 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b40:	f7ff f93e 	bl	8001dc0 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	@ 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e21f      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b61      	ldr	r3, [pc, #388]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0xdc>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7ff f92e 	bl	8001dc0 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7ff f92a 	bl	8001dc0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	@ 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e20b      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	4b57      	ldr	r3, [pc, #348]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x104>
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d06f      	beq.n	8002c76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b96:	4b50      	ldr	r3, [pc, #320]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d017      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ba2:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d105      	bne.n	8002bba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bae:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bba:	4b47      	ldr	r3, [pc, #284]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bc2:	2b0c      	cmp	r3, #12
 8002bc4:	d11c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc6:	4b44      	ldr	r3, [pc, #272]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d116      	bne.n	8002c00 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	4b41      	ldr	r3, [pc, #260]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_RCC_OscConfig+0x186>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e1d3      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bea:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4937      	ldr	r1, [pc, #220]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	e03a      	b.n	8002c76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c08:	4b34      	ldr	r3, [pc, #208]	@ (8002cdc <HAL_RCC_OscConfig+0x278>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7ff f8d7 	bl	8001dc0 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c16:	f7ff f8d3 	bl	8001dc0 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e1b4      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c28:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b28      	ldr	r3, [pc, #160]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4925      	ldr	r1, [pc, #148]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	600b      	str	r3, [r1, #0]
 8002c48:	e015      	b.n	8002c76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4a:	4b24      	ldr	r3, [pc, #144]	@ (8002cdc <HAL_RCC_OscConfig+0x278>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7ff f8b6 	bl	8001dc0 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c58:	f7ff f8b2 	bl	8001dc0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e193      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d036      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ce0 <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7ff f896 	bl	8001dc0 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c98:	f7ff f892 	bl	8001dc0 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e173      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x234>
 8002cb6:	e01b      	b.n	8002cf0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <HAL_RCC_OscConfig+0x27c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbe:	f7ff f87f 	bl	8001dc0 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc4:	e00e      	b.n	8002ce4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc6:	f7ff f87b 	bl	8001dc0 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d907      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e15c      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	42470000 	.word	0x42470000
 8002ce0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce4:	4b8a      	ldr	r3, [pc, #552]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ea      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8097 	beq.w	8002e2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d02:	4b83      	ldr	r3, [pc, #524]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	4b7f      	ldr	r3, [pc, #508]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	4a7e      	ldr	r2, [pc, #504]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d1e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2e:	4b79      	ldr	r3, [pc, #484]	@ (8002f14 <HAL_RCC_OscConfig+0x4b0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d118      	bne.n	8002d6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3a:	4b76      	ldr	r3, [pc, #472]	@ (8002f14 <HAL_RCC_OscConfig+0x4b0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a75      	ldr	r2, [pc, #468]	@ (8002f14 <HAL_RCC_OscConfig+0x4b0>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d46:	f7ff f83b 	bl	8001dc0 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4e:	f7ff f837 	bl	8001dc0 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e118      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	4b6c      	ldr	r3, [pc, #432]	@ (8002f14 <HAL_RCC_OscConfig+0x4b0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x31e>
 8002d74:	4b66      	ldr	r3, [pc, #408]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d78:	4a65      	ldr	r2, [pc, #404]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d80:	e01c      	b.n	8002dbc <HAL_RCC_OscConfig+0x358>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x340>
 8002d8a:	4b61      	ldr	r3, [pc, #388]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8e:	4a60      	ldr	r2, [pc, #384]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d96:	4b5e      	ldr	r3, [pc, #376]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9a:	4a5d      	ldr	r2, [pc, #372]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da2:	e00b      	b.n	8002dbc <HAL_RCC_OscConfig+0x358>
 8002da4:	4b5a      	ldr	r3, [pc, #360]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da8:	4a59      	ldr	r2, [pc, #356]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db0:	4b57      	ldr	r3, [pc, #348]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db4:	4a56      	ldr	r2, [pc, #344]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002db6:	f023 0304 	bic.w	r3, r3, #4
 8002dba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d015      	beq.n	8002df0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc4:	f7fe fffc 	bl	8001dc0 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dcc:	f7fe fff8 	bl	8001dc0 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0d7      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de2:	4b4b      	ldr	r3, [pc, #300]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0ee      	beq.n	8002dcc <HAL_RCC_OscConfig+0x368>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7fe ffe6 	bl	8001dc0 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df6:	e00a      	b.n	8002e0e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7fe ffe2 	bl	8001dc0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e0c1      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0e:	4b40      	ldr	r3, [pc, #256]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1ee      	bne.n	8002df8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d105      	bne.n	8002e2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e20:	4b3b      	ldr	r3, [pc, #236]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	4a3a      	ldr	r2, [pc, #232]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002e26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80ad 	beq.w	8002f90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e36:	4b36      	ldr	r3, [pc, #216]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d060      	beq.n	8002f04 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d145      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b33      	ldr	r3, [pc, #204]	@ (8002f18 <HAL_RCC_OscConfig+0x4b4>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe ffb6 	bl	8001dc0 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe ffb2 	bl	8001dc0 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e093      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	4b29      	ldr	r3, [pc, #164]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69da      	ldr	r2, [r3, #28]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	019b      	lsls	r3, r3, #6
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	041b      	lsls	r3, r3, #16
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	061b      	lsls	r3, r3, #24
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	071b      	lsls	r3, r3, #28
 8002ea2:	491b      	ldr	r1, [pc, #108]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f18 <HAL_RCC_OscConfig+0x4b4>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fe ff87 	bl	8001dc0 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fe ff83 	bl	8001dc0 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e064      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec8:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x452>
 8002ed4:	e05c      	b.n	8002f90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed6:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <HAL_RCC_OscConfig+0x4b4>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe ff70 	bl	8001dc0 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7fe ff6c 	bl	8001dc0 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e04d      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef6:	4b06      	ldr	r3, [pc, #24]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x480>
 8002f02:	e045      	b.n	8002f90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d107      	bne.n	8002f1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e040      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40007000 	.word	0x40007000
 8002f18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f9c <HAL_RCC_OscConfig+0x538>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d030      	beq.n	8002f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d129      	bne.n	8002f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d122      	bne.n	8002f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d119      	bne.n	8002f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	3b01      	subs	r3, #1
 8002f66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d10f      	bne.n	8002f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800

08002fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e041      	b.n	8003036 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fe fc32 	bl	8001830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	f000 fda6 	bl	8003b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d001      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e04e      	b.n	80030f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a23      	ldr	r2, [pc, #140]	@ (8003104 <HAL_TIM_Base_Start_IT+0xc4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d022      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x80>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003082:	d01d      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x80>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1f      	ldr	r2, [pc, #124]	@ (8003108 <HAL_TIM_Base_Start_IT+0xc8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d018      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x80>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1e      	ldr	r2, [pc, #120]	@ (800310c <HAL_TIM_Base_Start_IT+0xcc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x80>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1c      	ldr	r2, [pc, #112]	@ (8003110 <HAL_TIM_Base_Start_IT+0xd0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00e      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x80>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003114 <HAL_TIM_Base_Start_IT+0xd4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d009      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x80>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a19      	ldr	r2, [pc, #100]	@ (8003118 <HAL_TIM_Base_Start_IT+0xd8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x80>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a18      	ldr	r2, [pc, #96]	@ (800311c <HAL_TIM_Base_Start_IT+0xdc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d111      	bne.n	80030e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d010      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e2:	e007      	b.n	80030f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40010000 	.word	0x40010000
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800
 8003110:	40000c00 	.word	0x40000c00
 8003114:	40010400 	.word	0x40010400
 8003118:	40014000 	.word	0x40014000
 800311c:	40001800 	.word	0x40001800

08003120 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e041      	b.n	80031b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f839 	bl	80031be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3304      	adds	r3, #4
 800315c:	4619      	mov	r1, r3
 800315e:	4610      	mov	r0, r2
 8003160:	f000 fce6 	bl	8003b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d109      	bne.n	80031fc <HAL_TIM_PWM_Start_IT+0x28>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e022      	b.n	8003242 <HAL_TIM_PWM_Start_IT+0x6e>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d109      	bne.n	8003216 <HAL_TIM_PWM_Start_IT+0x42>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	bf14      	ite	ne
 800320e:	2301      	movne	r3, #1
 8003210:	2300      	moveq	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	e015      	b.n	8003242 <HAL_TIM_PWM_Start_IT+0x6e>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b08      	cmp	r3, #8
 800321a:	d109      	bne.n	8003230 <HAL_TIM_PWM_Start_IT+0x5c>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	e008      	b.n	8003242 <HAL_TIM_PWM_Start_IT+0x6e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	bf14      	ite	ne
 800323c:	2301      	movne	r3, #1
 800323e:	2300      	moveq	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e0c7      	b.n	80033da <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d104      	bne.n	800325a <HAL_TIM_PWM_Start_IT+0x86>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003258:	e013      	b.n	8003282 <HAL_TIM_PWM_Start_IT+0xae>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d104      	bne.n	800326a <HAL_TIM_PWM_Start_IT+0x96>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003268:	e00b      	b.n	8003282 <HAL_TIM_PWM_Start_IT+0xae>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d104      	bne.n	800327a <HAL_TIM_PWM_Start_IT+0xa6>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003278:	e003      	b.n	8003282 <HAL_TIM_PWM_Start_IT+0xae>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2202      	movs	r2, #2
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d841      	bhi.n	800330c <HAL_TIM_PWM_Start_IT+0x138>
 8003288:	a201      	add	r2, pc, #4	@ (adr r2, 8003290 <HAL_TIM_PWM_Start_IT+0xbc>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032c5 	.word	0x080032c5
 8003294:	0800330d 	.word	0x0800330d
 8003298:	0800330d 	.word	0x0800330d
 800329c:	0800330d 	.word	0x0800330d
 80032a0:	080032d7 	.word	0x080032d7
 80032a4:	0800330d 	.word	0x0800330d
 80032a8:	0800330d 	.word	0x0800330d
 80032ac:	0800330d 	.word	0x0800330d
 80032b0:	080032e9 	.word	0x080032e9
 80032b4:	0800330d 	.word	0x0800330d
 80032b8:	0800330d 	.word	0x0800330d
 80032bc:	0800330d 	.word	0x0800330d
 80032c0:	080032fb 	.word	0x080032fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0202 	orr.w	r2, r2, #2
 80032d2:	60da      	str	r2, [r3, #12]
      break;
 80032d4:	e01d      	b.n	8003312 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0204 	orr.w	r2, r2, #4
 80032e4:	60da      	str	r2, [r3, #12]
      break;
 80032e6:	e014      	b.n	8003312 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0208 	orr.w	r2, r2, #8
 80032f6:	60da      	str	r2, [r3, #12]
      break;
 80032f8:	e00b      	b.n	8003312 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0210 	orr.w	r2, r2, #16
 8003308:	60da      	str	r2, [r3, #12]
      break;
 800330a:	e002      	b.n	8003312 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      break;
 8003310:	bf00      	nop
  }

  if (status == HAL_OK)
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d15f      	bne.n	80033d8 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2201      	movs	r2, #1
 800331e:	6839      	ldr	r1, [r7, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f000 ff8c 	bl	800423e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2e      	ldr	r2, [pc, #184]	@ (80033e4 <HAL_TIM_PWM_Start_IT+0x210>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d004      	beq.n	800333a <HAL_TIM_PWM_Start_IT+0x166>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2c      	ldr	r2, [pc, #176]	@ (80033e8 <HAL_TIM_PWM_Start_IT+0x214>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d101      	bne.n	800333e <HAL_TIM_PWM_Start_IT+0x16a>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <HAL_TIM_PWM_Start_IT+0x16c>
 800333e:	2300      	movs	r3, #0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003352:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a22      	ldr	r2, [pc, #136]	@ (80033e4 <HAL_TIM_PWM_Start_IT+0x210>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d022      	beq.n	80033a4 <HAL_TIM_PWM_Start_IT+0x1d0>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003366:	d01d      	beq.n	80033a4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1f      	ldr	r2, [pc, #124]	@ (80033ec <HAL_TIM_PWM_Start_IT+0x218>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d018      	beq.n	80033a4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1e      	ldr	r2, [pc, #120]	@ (80033f0 <HAL_TIM_PWM_Start_IT+0x21c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d013      	beq.n	80033a4 <HAL_TIM_PWM_Start_IT+0x1d0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1c      	ldr	r2, [pc, #112]	@ (80033f4 <HAL_TIM_PWM_Start_IT+0x220>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00e      	beq.n	80033a4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a17      	ldr	r2, [pc, #92]	@ (80033e8 <HAL_TIM_PWM_Start_IT+0x214>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a18      	ldr	r2, [pc, #96]	@ (80033f8 <HAL_TIM_PWM_Start_IT+0x224>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_TIM_PWM_Start_IT+0x1d0>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a17      	ldr	r2, [pc, #92]	@ (80033fc <HAL_TIM_PWM_Start_IT+0x228>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d111      	bne.n	80033c8 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d010      	beq.n	80033d8 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0201 	orr.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c6:	e007      	b.n	80033d8 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40010000 	.word	0x40010000
 80033e8:	40010400 	.word	0x40010400
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800
 80033f4:	40000c00 	.word	0x40000c00
 80033f8:	40014000 	.word	0x40014000
 80033fc:	40001800 	.word	0x40001800

08003400 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b0c      	cmp	r3, #12
 8003412:	d841      	bhi.n	8003498 <HAL_TIM_PWM_Stop_IT+0x98>
 8003414:	a201      	add	r2, pc, #4	@ (adr r2, 800341c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	08003451 	.word	0x08003451
 8003420:	08003499 	.word	0x08003499
 8003424:	08003499 	.word	0x08003499
 8003428:	08003499 	.word	0x08003499
 800342c:	08003463 	.word	0x08003463
 8003430:	08003499 	.word	0x08003499
 8003434:	08003499 	.word	0x08003499
 8003438:	08003499 	.word	0x08003499
 800343c:	08003475 	.word	0x08003475
 8003440:	08003499 	.word	0x08003499
 8003444:	08003499 	.word	0x08003499
 8003448:	08003499 	.word	0x08003499
 800344c:	08003487 	.word	0x08003487
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0202 	bic.w	r2, r2, #2
 800345e:	60da      	str	r2, [r3, #12]
      break;
 8003460:	e01d      	b.n	800349e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0204 	bic.w	r2, r2, #4
 8003470:	60da      	str	r2, [r3, #12]
      break;
 8003472:	e014      	b.n	800349e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0208 	bic.w	r2, r2, #8
 8003482:	60da      	str	r2, [r3, #12]
      break;
 8003484:	e00b      	b.n	800349e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0210 	bic.w	r2, r2, #16
 8003494:	60da      	str	r2, [r3, #12]
      break;
 8003496:	e002      	b.n	800349e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	bf00      	nop
  }

  if (status == HAL_OK)
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d161      	bne.n	8003568 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2200      	movs	r2, #0
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fec6 	bl	800423e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003574 <HAL_TIM_PWM_Stop_IT+0x174>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d004      	beq.n	80034c6 <HAL_TIM_PWM_Stop_IT+0xc6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003578 <HAL_TIM_PWM_Stop_IT+0x178>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <HAL_TIM_PWM_Stop_IT+0xca>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_TIM_PWM_Stop_IT+0xcc>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d017      	beq.n	8003500 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6a1a      	ldr	r2, [r3, #32]
 80034d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10f      	bne.n	8003500 <HAL_TIM_PWM_Stop_IT+0x100>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6a1a      	ldr	r2, [r3, #32]
 80034e6:	f240 4344 	movw	r3, #1092	@ 0x444
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d107      	bne.n	8003500 <HAL_TIM_PWM_Stop_IT+0x100>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6a1a      	ldr	r2, [r3, #32]
 8003506:	f241 1311 	movw	r3, #4369	@ 0x1111
 800350a:	4013      	ands	r3, r2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10f      	bne.n	8003530 <HAL_TIM_PWM_Stop_IT+0x130>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6a1a      	ldr	r2, [r3, #32]
 8003516:	f240 4344 	movw	r3, #1092	@ 0x444
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d107      	bne.n	8003530 <HAL_TIM_PWM_Stop_IT+0x130>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0201 	bic.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d104      	bne.n	8003540 <HAL_TIM_PWM_Stop_IT+0x140>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800353e:	e013      	b.n	8003568 <HAL_TIM_PWM_Stop_IT+0x168>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b04      	cmp	r3, #4
 8003544:	d104      	bne.n	8003550 <HAL_TIM_PWM_Stop_IT+0x150>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800354e:	e00b      	b.n	8003568 <HAL_TIM_PWM_Stop_IT+0x168>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b08      	cmp	r3, #8
 8003554:	d104      	bne.n	8003560 <HAL_TIM_PWM_Stop_IT+0x160>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800355e:	e003      	b.n	8003568 <HAL_TIM_PWM_Stop_IT+0x168>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40010000 	.word	0x40010000
 8003578:	40010400 	.word	0x40010400

0800357c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d020      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01b      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0202 	mvn.w	r2, #2
 80035b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fa9d 	bl	8003b06 <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fa8f 	bl	8003af2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7fd fa65 	bl	8000aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d020      	beq.n	800362c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0204 	mvn.w	r2, #4
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fa77 	bl	8003b06 <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fa69 	bl	8003af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fd fa3f 	bl	8000aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d020      	beq.n	8003678 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01b      	beq.n	8003678 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0208 	mvn.w	r2, #8
 8003648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2204      	movs	r2, #4
 800364e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fa51 	bl	8003b06 <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fa43 	bl	8003af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7fd fa19 	bl	8000aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	d020      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01b      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0210 	mvn.w	r2, #16
 8003694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2208      	movs	r2, #8
 800369a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fa2b 	bl	8003b06 <HAL_TIM_IC_CaptureCallback>
 80036b0:	e005      	b.n	80036be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fa1d 	bl	8003af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fd f9f3 	bl	8000aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00c      	beq.n	80036e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0201 	mvn.w	r2, #1
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd f940 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00c      	beq.n	800370c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fe96 	bl	8004438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00c      	beq.n	8003730 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f9f5 	bl	8003b1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00c      	beq.n	8003754 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0220 	mvn.w	r2, #32
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fe68 	bl	8004424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003776:	2302      	movs	r3, #2
 8003778:	e0ae      	b.n	80038d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b0c      	cmp	r3, #12
 8003786:	f200 809f 	bhi.w	80038c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800378a:	a201      	add	r2, pc, #4	@ (adr r2, 8003790 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	080037c5 	.word	0x080037c5
 8003794:	080038c9 	.word	0x080038c9
 8003798:	080038c9 	.word	0x080038c9
 800379c:	080038c9 	.word	0x080038c9
 80037a0:	08003805 	.word	0x08003805
 80037a4:	080038c9 	.word	0x080038c9
 80037a8:	080038c9 	.word	0x080038c9
 80037ac:	080038c9 	.word	0x080038c9
 80037b0:	08003847 	.word	0x08003847
 80037b4:	080038c9 	.word	0x080038c9
 80037b8:	080038c9 	.word	0x080038c9
 80037bc:	080038c9 	.word	0x080038c9
 80037c0:	08003887 	.word	0x08003887
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fa5c 	bl	8003c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0208 	orr.w	r2, r2, #8
 80037de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0204 	bic.w	r2, r2, #4
 80037ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6999      	ldr	r1, [r3, #24]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	619a      	str	r2, [r3, #24]
      break;
 8003802:	e064      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 faac 	bl	8003d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800381e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800382e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6999      	ldr	r1, [r3, #24]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	021a      	lsls	r2, r3, #8
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	619a      	str	r2, [r3, #24]
      break;
 8003844:	e043      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fb01 	bl	8003e54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0208 	orr.w	r2, r2, #8
 8003860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0204 	bic.w	r2, r2, #4
 8003870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69d9      	ldr	r1, [r3, #28]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	61da      	str	r2, [r3, #28]
      break;
 8003884:	e023      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fb55 	bl	8003f3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69da      	ldr	r2, [r3, #28]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69d9      	ldr	r1, [r3, #28]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	021a      	lsls	r2, r3, #8
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	61da      	str	r2, [r3, #28]
      break;
 80038c6:	e002      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	75fb      	strb	r3, [r7, #23]
      break;
 80038cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_TIM_ConfigClockSource+0x1c>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e0b4      	b.n	8003a66 <HAL_TIM_ConfigClockSource+0x186>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800391a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003934:	d03e      	beq.n	80039b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800393a:	f200 8087 	bhi.w	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800393e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003942:	f000 8086 	beq.w	8003a52 <HAL_TIM_ConfigClockSource+0x172>
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394a:	d87f      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800394c:	2b70      	cmp	r3, #112	@ 0x70
 800394e:	d01a      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0xa6>
 8003950:	2b70      	cmp	r3, #112	@ 0x70
 8003952:	d87b      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	2b60      	cmp	r3, #96	@ 0x60
 8003956:	d050      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0x11a>
 8003958:	2b60      	cmp	r3, #96	@ 0x60
 800395a:	d877      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800395c:	2b50      	cmp	r3, #80	@ 0x50
 800395e:	d03c      	beq.n	80039da <HAL_TIM_ConfigClockSource+0xfa>
 8003960:	2b50      	cmp	r3, #80	@ 0x50
 8003962:	d873      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b40      	cmp	r3, #64	@ 0x40
 8003966:	d058      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x13a>
 8003968:	2b40      	cmp	r3, #64	@ 0x40
 800396a:	d86f      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b30      	cmp	r3, #48	@ 0x30
 800396e:	d064      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003970:	2b30      	cmp	r3, #48	@ 0x30
 8003972:	d86b      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b20      	cmp	r3, #32
 8003976:	d060      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003978:	2b20      	cmp	r3, #32
 800397a:	d867      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d05c      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003980:	2b10      	cmp	r3, #16
 8003982:	d05a      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003984:	e062      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003996:	f000 fc32 	bl	80041fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	609a      	str	r2, [r3, #8]
      break;
 80039b2:	e04f      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039c4:	f000 fc1b 	bl	80041fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039d6:	609a      	str	r2, [r3, #8]
      break;
 80039d8:	e03c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e6:	461a      	mov	r2, r3
 80039e8:	f000 fb8f 	bl	800410a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2150      	movs	r1, #80	@ 0x50
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fbe8 	bl	80041c8 <TIM_ITRx_SetConfig>
      break;
 80039f8:	e02c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a06:	461a      	mov	r2, r3
 8003a08:	f000 fbae 	bl	8004168 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2160      	movs	r1, #96	@ 0x60
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fbd8 	bl	80041c8 <TIM_ITRx_SetConfig>
      break;
 8003a18:	e01c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a26:	461a      	mov	r2, r3
 8003a28:	f000 fb6f 	bl	800410a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2140      	movs	r1, #64	@ 0x40
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fbc8 	bl	80041c8 <TIM_ITRx_SetConfig>
      break;
 8003a38:	e00c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f000 fbbf 	bl	80041c8 <TIM_ITRx_SetConfig>
      break;
 8003a4a:	e003      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a50:	e000      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e031      	b.n	8003aea <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003a96:	6839      	ldr	r1, [r7, #0]
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 faa5 	bl	8003fe8 <TIM_SlaveTimer_SetConfig>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d009      	beq.n	8003ab8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e018      	b.n	8003aea <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ac6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ad6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a46      	ldr	r2, [pc, #280]	@ (8003c5c <TIM_Base_SetConfig+0x12c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d013      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b4e:	d00f      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a43      	ldr	r2, [pc, #268]	@ (8003c60 <TIM_Base_SetConfig+0x130>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00b      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a42      	ldr	r2, [pc, #264]	@ (8003c64 <TIM_Base_SetConfig+0x134>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d007      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a41      	ldr	r2, [pc, #260]	@ (8003c68 <TIM_Base_SetConfig+0x138>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d003      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a40      	ldr	r2, [pc, #256]	@ (8003c6c <TIM_Base_SetConfig+0x13c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d108      	bne.n	8003b82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a35      	ldr	r2, [pc, #212]	@ (8003c5c <TIM_Base_SetConfig+0x12c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d02b      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b90:	d027      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a32      	ldr	r2, [pc, #200]	@ (8003c60 <TIM_Base_SetConfig+0x130>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d023      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a31      	ldr	r2, [pc, #196]	@ (8003c64 <TIM_Base_SetConfig+0x134>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01f      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a30      	ldr	r2, [pc, #192]	@ (8003c68 <TIM_Base_SetConfig+0x138>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d01b      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a2f      	ldr	r2, [pc, #188]	@ (8003c6c <TIM_Base_SetConfig+0x13c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d017      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a2e      	ldr	r2, [pc, #184]	@ (8003c70 <TIM_Base_SetConfig+0x140>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8003c74 <TIM_Base_SetConfig+0x144>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00f      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8003c78 <TIM_Base_SetConfig+0x148>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8003c7c <TIM_Base_SetConfig+0x14c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a2a      	ldr	r2, [pc, #168]	@ (8003c80 <TIM_Base_SetConfig+0x150>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a29      	ldr	r2, [pc, #164]	@ (8003c84 <TIM_Base_SetConfig+0x154>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d108      	bne.n	8003bf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a10      	ldr	r2, [pc, #64]	@ (8003c5c <TIM_Base_SetConfig+0x12c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_Base_SetConfig+0xf8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a12      	ldr	r2, [pc, #72]	@ (8003c6c <TIM_Base_SetConfig+0x13c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d103      	bne.n	8003c30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d105      	bne.n	8003c4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f023 0201 	bic.w	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	611a      	str	r2, [r3, #16]
  }
}
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40010000 	.word	0x40010000
 8003c60:	40000400 	.word	0x40000400
 8003c64:	40000800 	.word	0x40000800
 8003c68:	40000c00 	.word	0x40000c00
 8003c6c:	40010400 	.word	0x40010400
 8003c70:	40014000 	.word	0x40014000
 8003c74:	40014400 	.word	0x40014400
 8003c78:	40014800 	.word	0x40014800
 8003c7c:	40001800 	.word	0x40001800
 8003c80:	40001c00 	.word	0x40001c00
 8003c84:	40002000 	.word	0x40002000

08003c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f023 0201 	bic.w	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f023 0302 	bic.w	r3, r3, #2
 8003cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a20      	ldr	r2, [pc, #128]	@ (8003d60 <TIM_OC1_SetConfig+0xd8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_OC1_SetConfig+0x64>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d64 <TIM_OC1_SetConfig+0xdc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d10c      	bne.n	8003d06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 0308 	bic.w	r3, r3, #8
 8003cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f023 0304 	bic.w	r3, r3, #4
 8003d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a15      	ldr	r2, [pc, #84]	@ (8003d60 <TIM_OC1_SetConfig+0xd8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d003      	beq.n	8003d16 <TIM_OC1_SetConfig+0x8e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a14      	ldr	r2, [pc, #80]	@ (8003d64 <TIM_OC1_SetConfig+0xdc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d111      	bne.n	8003d3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	621a      	str	r2, [r3, #32]
}
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40010000 	.word	0x40010000
 8003d64:	40010400 	.word	0x40010400

08003d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f023 0210 	bic.w	r2, r3, #16
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f023 0320 	bic.w	r3, r3, #32
 8003db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a22      	ldr	r2, [pc, #136]	@ (8003e4c <TIM_OC2_SetConfig+0xe4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_OC2_SetConfig+0x68>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a21      	ldr	r2, [pc, #132]	@ (8003e50 <TIM_OC2_SetConfig+0xe8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10d      	bne.n	8003dec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a17      	ldr	r2, [pc, #92]	@ (8003e4c <TIM_OC2_SetConfig+0xe4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_OC2_SetConfig+0x94>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a16      	ldr	r2, [pc, #88]	@ (8003e50 <TIM_OC2_SetConfig+0xe8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d113      	bne.n	8003e24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	621a      	str	r2, [r3, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	40010400 	.word	0x40010400

08003e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0303 	bic.w	r3, r3, #3
 8003e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a21      	ldr	r2, [pc, #132]	@ (8003f34 <TIM_OC3_SetConfig+0xe0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_OC3_SetConfig+0x66>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a20      	ldr	r2, [pc, #128]	@ (8003f38 <TIM_OC3_SetConfig+0xe4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d10d      	bne.n	8003ed6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a16      	ldr	r2, [pc, #88]	@ (8003f34 <TIM_OC3_SetConfig+0xe0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d003      	beq.n	8003ee6 <TIM_OC3_SetConfig+0x92>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a15      	ldr	r2, [pc, #84]	@ (8003f38 <TIM_OC3_SetConfig+0xe4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d113      	bne.n	8003f0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	621a      	str	r2, [r3, #32]
}
 8003f28:	bf00      	nop
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40010400 	.word	0x40010400

08003f3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	031b      	lsls	r3, r3, #12
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a12      	ldr	r2, [pc, #72]	@ (8003fe0 <TIM_OC4_SetConfig+0xa4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_OC4_SetConfig+0x68>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a11      	ldr	r2, [pc, #68]	@ (8003fe4 <TIM_OC4_SetConfig+0xa8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d109      	bne.n	8003fb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003faa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	019b      	lsls	r3, r3, #6
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	621a      	str	r2, [r3, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40010000 	.word	0x40010000
 8003fe4:	40010400 	.word	0x40010400

08003fe8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004004:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f023 0307 	bic.w	r3, r3, #7
 8004016:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b70      	cmp	r3, #112	@ 0x70
 8004030:	d01a      	beq.n	8004068 <TIM_SlaveTimer_SetConfig+0x80>
 8004032:	2b70      	cmp	r3, #112	@ 0x70
 8004034:	d860      	bhi.n	80040f8 <TIM_SlaveTimer_SetConfig+0x110>
 8004036:	2b60      	cmp	r3, #96	@ 0x60
 8004038:	d054      	beq.n	80040e4 <TIM_SlaveTimer_SetConfig+0xfc>
 800403a:	2b60      	cmp	r3, #96	@ 0x60
 800403c:	d85c      	bhi.n	80040f8 <TIM_SlaveTimer_SetConfig+0x110>
 800403e:	2b50      	cmp	r3, #80	@ 0x50
 8004040:	d046      	beq.n	80040d0 <TIM_SlaveTimer_SetConfig+0xe8>
 8004042:	2b50      	cmp	r3, #80	@ 0x50
 8004044:	d858      	bhi.n	80040f8 <TIM_SlaveTimer_SetConfig+0x110>
 8004046:	2b40      	cmp	r3, #64	@ 0x40
 8004048:	d019      	beq.n	800407e <TIM_SlaveTimer_SetConfig+0x96>
 800404a:	2b40      	cmp	r3, #64	@ 0x40
 800404c:	d854      	bhi.n	80040f8 <TIM_SlaveTimer_SetConfig+0x110>
 800404e:	2b30      	cmp	r3, #48	@ 0x30
 8004050:	d055      	beq.n	80040fe <TIM_SlaveTimer_SetConfig+0x116>
 8004052:	2b30      	cmp	r3, #48	@ 0x30
 8004054:	d850      	bhi.n	80040f8 <TIM_SlaveTimer_SetConfig+0x110>
 8004056:	2b20      	cmp	r3, #32
 8004058:	d051      	beq.n	80040fe <TIM_SlaveTimer_SetConfig+0x116>
 800405a:	2b20      	cmp	r3, #32
 800405c:	d84c      	bhi.n	80040f8 <TIM_SlaveTimer_SetConfig+0x110>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d04d      	beq.n	80040fe <TIM_SlaveTimer_SetConfig+0x116>
 8004062:	2b10      	cmp	r3, #16
 8004064:	d04b      	beq.n	80040fe <TIM_SlaveTimer_SetConfig+0x116>
 8004066:	e047      	b.n	80040f8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004078:	f000 f8c1 	bl	80041fe <TIM_ETR_SetConfig>
      break;
 800407c:	e040      	b.n	8004100 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b05      	cmp	r3, #5
 8004084:	d101      	bne.n	800408a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e03b      	b.n	8004102 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a1a      	ldr	r2, [r3, #32]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040b0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	621a      	str	r2, [r3, #32]
      break;
 80040ce:	e017      	b.n	8004100 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040dc:	461a      	mov	r2, r3
 80040de:	f000 f814 	bl	800410a <TIM_TI1_ConfigInputStage>
      break;
 80040e2:	e00d      	b.n	8004100 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040f0:	461a      	mov	r2, r3
 80040f2:	f000 f839 	bl	8004168 <TIM_TI2_ConfigInputStage>
      break;
 80040f6:	e003      	b.n	8004100 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	75fb      	strb	r3, [r7, #23]
      break;
 80040fc:	e000      	b.n	8004100 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80040fe:	bf00      	nop
  }

  return status;
 8004100:	7dfb      	ldrb	r3, [r7, #23]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410a:	b480      	push	{r7}
 800410c:	b087      	sub	sp, #28
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f023 0201 	bic.w	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004134:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f023 030a 	bic.w	r3, r3, #10
 8004146:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	621a      	str	r2, [r3, #32]
}
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0210 	bic.w	r2, r3, #16
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	031b      	lsls	r3, r3, #12
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	621a      	str	r2, [r3, #32]
}
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f043 0307 	orr.w	r3, r3, #7
 80041ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	609a      	str	r2, [r3, #8]
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041fe:	b480      	push	{r7}
 8004200:	b087      	sub	sp, #28
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004218:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	021a      	lsls	r2, r3, #8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	431a      	orrs	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4313      	orrs	r3, r2
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	609a      	str	r2, [r3, #8]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800423e:	b480      	push	{r7}
 8004240:	b087      	sub	sp, #28
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	2201      	movs	r2, #1
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1a      	ldr	r2, [r3, #32]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	43db      	mvns	r3, r3
 8004260:	401a      	ands	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1a      	ldr	r2, [r3, #32]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	431a      	orrs	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	621a      	str	r2, [r3, #32]
}
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800429c:	2302      	movs	r3, #2
 800429e:	e05a      	b.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a21      	ldr	r2, [pc, #132]	@ (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d022      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ec:	d01d      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d018      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1b      	ldr	r2, [pc, #108]	@ (800436c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1a      	ldr	r2, [pc, #104]	@ (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00e      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a18      	ldr	r2, [pc, #96]	@ (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d009      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a17      	ldr	r2, [pc, #92]	@ (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a15      	ldr	r2, [pc, #84]	@ (800437c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d10c      	bne.n	8004344 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	4313      	orrs	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40010000 	.word	0x40010000
 8004368:	40000400 	.word	0x40000400
 800436c:	40000800 	.word	0x40000800
 8004370:	40000c00 	.word	0x40000c00
 8004374:	40010400 	.word	0x40010400
 8004378:	40014000 	.word	0x40014000
 800437c:	40001800 	.word	0x40001800

08004380 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004398:	2302      	movs	r3, #2
 800439a:	e03d      	b.n	8004418 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e042      	b.n	80044e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fd fbcc 	bl	8001c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2224      	movs	r2, #36	@ 0x24
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800448e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f82b 	bl	80044ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695a      	ldr	r2, [r3, #20]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f0:	b0c0      	sub	sp, #256	@ 0x100
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004508:	68d9      	ldr	r1, [r3, #12]
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	ea40 0301 	orr.w	r3, r0, r1
 8004514:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	431a      	orrs	r2, r3
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	431a      	orrs	r2, r3
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004544:	f021 010c 	bic.w	r1, r1, #12
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004552:	430b      	orrs	r3, r1
 8004554:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004566:	6999      	ldr	r1, [r3, #24]
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	ea40 0301 	orr.w	r3, r0, r1
 8004572:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b8f      	ldr	r3, [pc, #572]	@ (80047b8 <UART_SetConfig+0x2cc>)
 800457c:	429a      	cmp	r2, r3
 800457e:	d005      	beq.n	800458c <UART_SetConfig+0xa0>
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4b8d      	ldr	r3, [pc, #564]	@ (80047bc <UART_SetConfig+0x2d0>)
 8004588:	429a      	cmp	r2, r3
 800458a:	d104      	bne.n	8004596 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800458c:	f7fe f826 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 8004590:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004594:	e003      	b.n	800459e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004596:	f7fe f80d 	bl	80025b4 <HAL_RCC_GetPCLK1Freq>
 800459a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045a8:	f040 810c 	bne.w	80047c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045be:	4622      	mov	r2, r4
 80045c0:	462b      	mov	r3, r5
 80045c2:	1891      	adds	r1, r2, r2
 80045c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045c6:	415b      	adcs	r3, r3
 80045c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045ce:	4621      	mov	r1, r4
 80045d0:	eb12 0801 	adds.w	r8, r2, r1
 80045d4:	4629      	mov	r1, r5
 80045d6:	eb43 0901 	adc.w	r9, r3, r1
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ee:	4690      	mov	r8, r2
 80045f0:	4699      	mov	r9, r3
 80045f2:	4623      	mov	r3, r4
 80045f4:	eb18 0303 	adds.w	r3, r8, r3
 80045f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045fc:	462b      	mov	r3, r5
 80045fe:	eb49 0303 	adc.w	r3, r9, r3
 8004602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004612:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004616:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800461a:	460b      	mov	r3, r1
 800461c:	18db      	adds	r3, r3, r3
 800461e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004620:	4613      	mov	r3, r2
 8004622:	eb42 0303 	adc.w	r3, r2, r3
 8004626:	657b      	str	r3, [r7, #84]	@ 0x54
 8004628:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800462c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004630:	f7fb fde8 	bl	8000204 <__aeabi_uldivmod>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4b61      	ldr	r3, [pc, #388]	@ (80047c0 <UART_SetConfig+0x2d4>)
 800463a:	fba3 2302 	umull	r2, r3, r3, r2
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	011c      	lsls	r4, r3, #4
 8004642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004646:	2200      	movs	r2, #0
 8004648:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800464c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004650:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004654:	4642      	mov	r2, r8
 8004656:	464b      	mov	r3, r9
 8004658:	1891      	adds	r1, r2, r2
 800465a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800465c:	415b      	adcs	r3, r3
 800465e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004660:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004664:	4641      	mov	r1, r8
 8004666:	eb12 0a01 	adds.w	sl, r2, r1
 800466a:	4649      	mov	r1, r9
 800466c:	eb43 0b01 	adc.w	fp, r3, r1
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800467c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004684:	4692      	mov	sl, r2
 8004686:	469b      	mov	fp, r3
 8004688:	4643      	mov	r3, r8
 800468a:	eb1a 0303 	adds.w	r3, sl, r3
 800468e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004692:	464b      	mov	r3, r9
 8004694:	eb4b 0303 	adc.w	r3, fp, r3
 8004698:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046b0:	460b      	mov	r3, r1
 80046b2:	18db      	adds	r3, r3, r3
 80046b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80046b6:	4613      	mov	r3, r2
 80046b8:	eb42 0303 	adc.w	r3, r2, r3
 80046bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80046be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046c6:	f7fb fd9d 	bl	8000204 <__aeabi_uldivmod>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4611      	mov	r1, r2
 80046d0:	4b3b      	ldr	r3, [pc, #236]	@ (80047c0 <UART_SetConfig+0x2d4>)
 80046d2:	fba3 2301 	umull	r2, r3, r3, r1
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2264      	movs	r2, #100	@ 0x64
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	1acb      	subs	r3, r1, r3
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046e6:	4b36      	ldr	r3, [pc, #216]	@ (80047c0 <UART_SetConfig+0x2d4>)
 80046e8:	fba3 2302 	umull	r2, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046f4:	441c      	add	r4, r3
 80046f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004700:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004704:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004708:	4642      	mov	r2, r8
 800470a:	464b      	mov	r3, r9
 800470c:	1891      	adds	r1, r2, r2
 800470e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004710:	415b      	adcs	r3, r3
 8004712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004714:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004718:	4641      	mov	r1, r8
 800471a:	1851      	adds	r1, r2, r1
 800471c:	6339      	str	r1, [r7, #48]	@ 0x30
 800471e:	4649      	mov	r1, r9
 8004720:	414b      	adcs	r3, r1
 8004722:	637b      	str	r3, [r7, #52]	@ 0x34
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004730:	4659      	mov	r1, fp
 8004732:	00cb      	lsls	r3, r1, #3
 8004734:	4651      	mov	r1, sl
 8004736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800473a:	4651      	mov	r1, sl
 800473c:	00ca      	lsls	r2, r1, #3
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	4603      	mov	r3, r0
 8004744:	4642      	mov	r2, r8
 8004746:	189b      	adds	r3, r3, r2
 8004748:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800474c:	464b      	mov	r3, r9
 800474e:	460a      	mov	r2, r1
 8004750:	eb42 0303 	adc.w	r3, r2, r3
 8004754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004764:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004768:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800476c:	460b      	mov	r3, r1
 800476e:	18db      	adds	r3, r3, r3
 8004770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004772:	4613      	mov	r3, r2
 8004774:	eb42 0303 	adc.w	r3, r2, r3
 8004778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800477a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800477e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004782:	f7fb fd3f 	bl	8000204 <__aeabi_uldivmod>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4b0d      	ldr	r3, [pc, #52]	@ (80047c0 <UART_SetConfig+0x2d4>)
 800478c:	fba3 1302 	umull	r1, r3, r3, r2
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	2164      	movs	r1, #100	@ 0x64
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	3332      	adds	r3, #50	@ 0x32
 800479e:	4a08      	ldr	r2, [pc, #32]	@ (80047c0 <UART_SetConfig+0x2d4>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	f003 0207 	and.w	r2, r3, #7
 80047aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4422      	add	r2, r4
 80047b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047b4:	e106      	b.n	80049c4 <UART_SetConfig+0x4d8>
 80047b6:	bf00      	nop
 80047b8:	40011000 	.word	0x40011000
 80047bc:	40011400 	.word	0x40011400
 80047c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047d6:	4642      	mov	r2, r8
 80047d8:	464b      	mov	r3, r9
 80047da:	1891      	adds	r1, r2, r2
 80047dc:	6239      	str	r1, [r7, #32]
 80047de:	415b      	adcs	r3, r3
 80047e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047e6:	4641      	mov	r1, r8
 80047e8:	1854      	adds	r4, r2, r1
 80047ea:	4649      	mov	r1, r9
 80047ec:	eb43 0501 	adc.w	r5, r3, r1
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	00eb      	lsls	r3, r5, #3
 80047fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047fe:	00e2      	lsls	r2, r4, #3
 8004800:	4614      	mov	r4, r2
 8004802:	461d      	mov	r5, r3
 8004804:	4643      	mov	r3, r8
 8004806:	18e3      	adds	r3, r4, r3
 8004808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800480c:	464b      	mov	r3, r9
 800480e:	eb45 0303 	adc.w	r3, r5, r3
 8004812:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004822:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004832:	4629      	mov	r1, r5
 8004834:	008b      	lsls	r3, r1, #2
 8004836:	4621      	mov	r1, r4
 8004838:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800483c:	4621      	mov	r1, r4
 800483e:	008a      	lsls	r2, r1, #2
 8004840:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004844:	f7fb fcde 	bl	8000204 <__aeabi_uldivmod>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4b60      	ldr	r3, [pc, #384]	@ (80049d0 <UART_SetConfig+0x4e4>)
 800484e:	fba3 2302 	umull	r2, r3, r3, r2
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	011c      	lsls	r4, r3, #4
 8004856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800485a:	2200      	movs	r2, #0
 800485c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004860:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004864:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004868:	4642      	mov	r2, r8
 800486a:	464b      	mov	r3, r9
 800486c:	1891      	adds	r1, r2, r2
 800486e:	61b9      	str	r1, [r7, #24]
 8004870:	415b      	adcs	r3, r3
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004878:	4641      	mov	r1, r8
 800487a:	1851      	adds	r1, r2, r1
 800487c:	6139      	str	r1, [r7, #16]
 800487e:	4649      	mov	r1, r9
 8004880:	414b      	adcs	r3, r1
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004890:	4659      	mov	r1, fp
 8004892:	00cb      	lsls	r3, r1, #3
 8004894:	4651      	mov	r1, sl
 8004896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800489a:	4651      	mov	r1, sl
 800489c:	00ca      	lsls	r2, r1, #3
 800489e:	4610      	mov	r0, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	4603      	mov	r3, r0
 80048a4:	4642      	mov	r2, r8
 80048a6:	189b      	adds	r3, r3, r2
 80048a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048ac:	464b      	mov	r3, r9
 80048ae:	460a      	mov	r2, r1
 80048b0:	eb42 0303 	adc.w	r3, r2, r3
 80048b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048d0:	4649      	mov	r1, r9
 80048d2:	008b      	lsls	r3, r1, #2
 80048d4:	4641      	mov	r1, r8
 80048d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048da:	4641      	mov	r1, r8
 80048dc:	008a      	lsls	r2, r1, #2
 80048de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048e2:	f7fb fc8f 	bl	8000204 <__aeabi_uldivmod>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	4b38      	ldr	r3, [pc, #224]	@ (80049d0 <UART_SetConfig+0x4e4>)
 80048ee:	fba3 2301 	umull	r2, r3, r3, r1
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	2264      	movs	r2, #100	@ 0x64
 80048f6:	fb02 f303 	mul.w	r3, r2, r3
 80048fa:	1acb      	subs	r3, r1, r3
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	3332      	adds	r3, #50	@ 0x32
 8004900:	4a33      	ldr	r2, [pc, #204]	@ (80049d0 <UART_SetConfig+0x4e4>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800490c:	441c      	add	r4, r3
 800490e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004912:	2200      	movs	r2, #0
 8004914:	673b      	str	r3, [r7, #112]	@ 0x70
 8004916:	677a      	str	r2, [r7, #116]	@ 0x74
 8004918:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800491c:	4642      	mov	r2, r8
 800491e:	464b      	mov	r3, r9
 8004920:	1891      	adds	r1, r2, r2
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	415b      	adcs	r3, r3
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800492c:	4641      	mov	r1, r8
 800492e:	1851      	adds	r1, r2, r1
 8004930:	6039      	str	r1, [r7, #0]
 8004932:	4649      	mov	r1, r9
 8004934:	414b      	adcs	r3, r1
 8004936:	607b      	str	r3, [r7, #4]
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004944:	4659      	mov	r1, fp
 8004946:	00cb      	lsls	r3, r1, #3
 8004948:	4651      	mov	r1, sl
 800494a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800494e:	4651      	mov	r1, sl
 8004950:	00ca      	lsls	r2, r1, #3
 8004952:	4610      	mov	r0, r2
 8004954:	4619      	mov	r1, r3
 8004956:	4603      	mov	r3, r0
 8004958:	4642      	mov	r2, r8
 800495a:	189b      	adds	r3, r3, r2
 800495c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800495e:	464b      	mov	r3, r9
 8004960:	460a      	mov	r2, r1
 8004962:	eb42 0303 	adc.w	r3, r2, r3
 8004966:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	663b      	str	r3, [r7, #96]	@ 0x60
 8004972:	667a      	str	r2, [r7, #100]	@ 0x64
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004980:	4649      	mov	r1, r9
 8004982:	008b      	lsls	r3, r1, #2
 8004984:	4641      	mov	r1, r8
 8004986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800498a:	4641      	mov	r1, r8
 800498c:	008a      	lsls	r2, r1, #2
 800498e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004992:	f7fb fc37 	bl	8000204 <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4b0d      	ldr	r3, [pc, #52]	@ (80049d0 <UART_SetConfig+0x4e4>)
 800499c:	fba3 1302 	umull	r1, r3, r3, r2
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	2164      	movs	r1, #100	@ 0x64
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	3332      	adds	r3, #50	@ 0x32
 80049ae:	4a08      	ldr	r2, [pc, #32]	@ (80049d0 <UART_SetConfig+0x4e4>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	f003 020f 	and.w	r2, r3, #15
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4422      	add	r2, r4
 80049c2:	609a      	str	r2, [r3, #8]
}
 80049c4:	bf00      	nop
 80049c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049ca:	46bd      	mov	sp, r7
 80049cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d0:	51eb851f 	.word	0x51eb851f

080049d4 <memset>:
 80049d4:	4402      	add	r2, r0
 80049d6:	4603      	mov	r3, r0
 80049d8:	4293      	cmp	r3, r2
 80049da:	d100      	bne.n	80049de <memset+0xa>
 80049dc:	4770      	bx	lr
 80049de:	f803 1b01 	strb.w	r1, [r3], #1
 80049e2:	e7f9      	b.n	80049d8 <memset+0x4>

080049e4 <__libc_init_array>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	4d0d      	ldr	r5, [pc, #52]	@ (8004a1c <__libc_init_array+0x38>)
 80049e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004a20 <__libc_init_array+0x3c>)
 80049ea:	1b64      	subs	r4, r4, r5
 80049ec:	10a4      	asrs	r4, r4, #2
 80049ee:	2600      	movs	r6, #0
 80049f0:	42a6      	cmp	r6, r4
 80049f2:	d109      	bne.n	8004a08 <__libc_init_array+0x24>
 80049f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004a24 <__libc_init_array+0x40>)
 80049f6:	4c0c      	ldr	r4, [pc, #48]	@ (8004a28 <__libc_init_array+0x44>)
 80049f8:	f000 f818 	bl	8004a2c <_init>
 80049fc:	1b64      	subs	r4, r4, r5
 80049fe:	10a4      	asrs	r4, r4, #2
 8004a00:	2600      	movs	r6, #0
 8004a02:	42a6      	cmp	r6, r4
 8004a04:	d105      	bne.n	8004a12 <__libc_init_array+0x2e>
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0c:	4798      	blx	r3
 8004a0e:	3601      	adds	r6, #1
 8004a10:	e7ee      	b.n	80049f0 <__libc_init_array+0xc>
 8004a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a16:	4798      	blx	r3
 8004a18:	3601      	adds	r6, #1
 8004a1a:	e7f2      	b.n	8004a02 <__libc_init_array+0x1e>
 8004a1c:	08004a64 	.word	0x08004a64
 8004a20:	08004a64 	.word	0x08004a64
 8004a24:	08004a64 	.word	0x08004a64
 8004a28:	08004a68 	.word	0x08004a68

08004a2c <_init>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	bf00      	nop
 8004a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a32:	bc08      	pop	{r3}
 8004a34:	469e      	mov	lr, r3
 8004a36:	4770      	bx	lr

08004a38 <_fini>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	bf00      	nop
 8004a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3e:	bc08      	pop	{r3}
 8004a40:	469e      	mov	lr, r3
 8004a42:	4770      	bx	lr
