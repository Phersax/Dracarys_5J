
robotic_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080041dc  080041dc  000051dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041ec  080041ec  0000603c  2**0
                  CONTENTS
  4 .ARM          00000008  080041ec  080041ec  000051ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041f4  080041f4  0000603c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f4  080041f4  000051f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041f8  080041f8  000051f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  080041fc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000003c  08004238  0000603c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08004238  000063a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b99d  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ecf  00000000  00000000  00011a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  000138d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000873  00000000  00000000  000143d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c3b  00000000  00000000  00014c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd35  00000000  00000000  00016886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb0f5  00000000  00000000  000245bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef6b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c8c  00000000  00000000  000ef6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f2380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000003c 	.word	0x2000003c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080041c4 	.word	0x080041c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000040 	.word	0x20000040
 8000200:	080041c4 	.word	0x080041c4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	4b5f      	ldr	r3, [pc, #380]	@ (800068c <MX_GPIO_Init+0x198>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a5e      	ldr	r2, [pc, #376]	@ (800068c <MX_GPIO_Init+0x198>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b5c      	ldr	r3, [pc, #368]	@ (800068c <MX_GPIO_Init+0x198>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	4b58      	ldr	r3, [pc, #352]	@ (800068c <MX_GPIO_Init+0x198>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a57      	ldr	r2, [pc, #348]	@ (800068c <MX_GPIO_Init+0x198>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b55      	ldr	r3, [pc, #340]	@ (800068c <MX_GPIO_Init+0x198>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4b51      	ldr	r3, [pc, #324]	@ (800068c <MX_GPIO_Init+0x198>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a50      	ldr	r2, [pc, #320]	@ (800068c <MX_GPIO_Init+0x198>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b4e      	ldr	r3, [pc, #312]	@ (800068c <MX_GPIO_Init+0x198>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b4a      	ldr	r3, [pc, #296]	@ (800068c <MX_GPIO_Init+0x198>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a49      	ldr	r2, [pc, #292]	@ (800068c <MX_GPIO_Init+0x198>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b47      	ldr	r3, [pc, #284]	@ (800068c <MX_GPIO_Init+0x198>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIRECTION4_Pin|DIRECTION3_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	21e0      	movs	r1, #224	@ 0xe0
 800057e:	4844      	ldr	r0, [pc, #272]	@ (8000690 <MX_GPIO_Init+0x19c>)
 8000580:	f001 fde0 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION2_GPIO_Port, DIRECTION2_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2110      	movs	r1, #16
 8000588:	4842      	ldr	r0, [pc, #264]	@ (8000694 <MX_GPIO_Init+0x1a0>)
 800058a:	f001 fddb 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2120      	movs	r1, #32
 8000592:	4840      	ldr	r0, [pc, #256]	@ (8000694 <MX_GPIO_Init+0x1a0>)
 8000594:	f001 fdd6 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIRECTION1_Pin|SERVO_en_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2103      	movs	r1, #3
 800059c:	483e      	ldr	r0, [pc, #248]	@ (8000698 <MX_GPIO_Init+0x1a4>)
 800059e:	f001 fdd1 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENDEFF1_en_Pin|ENDEFF2_en_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f240 4104 	movw	r1, #1028	@ 0x404
 80005a8:	483b      	ldr	r0, [pc, #236]	@ (8000698 <MX_GPIO_Init+0x1a4>)
 80005aa:	f001 fdcb 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISABLE_button_Pin;
 80005ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISABLE_button_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	4833      	ldr	r0, [pc, #204]	@ (8000694 <MX_GPIO_Init+0x1a0>)
 80005c6:	f001 fc29 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005ca:	2320      	movs	r3, #32
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4619      	mov	r1, r3
 80005e0:	482b      	ldr	r0, [pc, #172]	@ (8000690 <MX_GPIO_Init+0x19c>)
 80005e2:	f001 fc1b 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIRECTION4_Pin|DIRECTION3_Pin;
 80005e6:	23c0      	movs	r3, #192	@ 0xc0
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005ee:	2302      	movs	r3, #2
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	4824      	ldr	r0, [pc, #144]	@ (8000690 <MX_GPIO_Init+0x19c>)
 80005fe:	f001 fc0d 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRECTION2_Pin;
 8000602:	2310      	movs	r3, #16
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	2301      	movs	r3, #1
 8000608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800060a:	2302      	movs	r3, #2
 800060c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2300      	movs	r3, #0
 8000610:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION2_GPIO_Port, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	481e      	ldr	r0, [pc, #120]	@ (8000694 <MX_GPIO_Init+0x1a0>)
 800061a:	f001 fbff 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800061e:	2320      	movs	r3, #32
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000626:	2301      	movs	r3, #1
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062a:	2302      	movs	r3, #2
 800062c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	4817      	ldr	r0, [pc, #92]	@ (8000694 <MX_GPIO_Init+0x1a0>)
 8000636:	f001 fbf1 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIRECTION1_Pin|SERVO_en_Pin;
 800063a:	2303      	movs	r3, #3
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000642:	2302      	movs	r3, #2
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	4811      	ldr	r0, [pc, #68]	@ (8000698 <MX_GPIO_Init+0x1a4>)
 8000652:	f001 fbe3 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENDEFF1_en_Pin|ENDEFF2_en_Pin;
 8000656:	f240 4304 	movw	r3, #1028	@ 0x404
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000660:	2301      	movs	r3, #1
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	480a      	ldr	r0, [pc, #40]	@ (8000698 <MX_GPIO_Init+0x1a4>)
 8000670:	f001 fbd4 	bl	8001e1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2028      	movs	r0, #40	@ 0x28
 800067a:	f001 fb98 	bl	8001dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800067e:	2028      	movs	r0, #40	@ 0x28
 8000680:	f001 fbb1 	bl	8001de6 <HAL_NVIC_EnableIRQ>

}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	@ 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40020000 	.word	0x40020000
 8000694:	40020800 	.word	0x40020800
 8000698:	40020400 	.word	0x40020400

0800069c <trapezoidal_func>:
 TIMx->CR1 &= (uint16_t) (~((uint16_t) TIM_CR1_CEN));
 }
 }*/

/*The trapezoidal profile applied on the steppers*/
void trapezoidal_func(int k, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *hslave) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]

	int cnt = __HAL_TIM_GET_COUNTER(hslave);  //retrieve the N_steps done by the slave
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ae:	617b      	str	r3, [r7, #20]
	if (cnt >= hslave->Instance->ARR) { //verify if arr has been reached
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d827      	bhi.n	800070c <trapezoidal_func+0x70>
		if (hslave->Instance == TIM3) { //for the timers 2 the second pwm must be stopped too
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a92      	ldr	r2, [pc, #584]	@ (800090c <trapezoidal_func+0x270>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d103      	bne.n	80006ce <trapezoidal_func+0x32>
			HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	68b8      	ldr	r0, [r7, #8]
 80006ca:	f002 fd29 	bl	8003120 <HAL_TIM_PWM_Stop_IT>
		}

		HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1); //stop the pwm
 80006ce:	2100      	movs	r1, #0
 80006d0:	68b8      	ldr	r0, [r7, #8]
 80006d2:	f002 fd25 	bl	8003120 <HAL_TIM_PWM_Stop_IT>

		count_rising_edge[k] = 0;	//reset the counter
 80006d6:	4a8e      	ldr	r2, [pc, #568]	@ (8000910 <trapezoidal_func+0x274>)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2100      	movs	r1, #0
 80006dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		acc_count[k] = 0;           //reset the acceleration steps counter
 80006e0:	4a8c      	ldr	r2, [pc, #560]	@ (8000914 <trapezoidal_func+0x278>)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2100      	movs	r1, #0
 80006e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//dec_count[k] = 0; //debug

		htim->Instance->EGR |= TIM_EGR_UG; //reset the timer master
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	695a      	ldr	r2, [r3, #20]
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f042 0201 	orr.w	r2, r2, #1
 80006f8:	615a      	str	r2, [r3, #20]
		hslave->Instance->EGR |= TIM_EGR_UG; //reset the timer slave
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f042 0201 	orr.w	r2, r2, #1
 8000708:	615a      	str	r2, [r3, #20]
			}

		}
	}

}
 800070a:	e172      	b.n	80009f2 <trapezoidal_func+0x356>
		if (arr_des_a[k] > arr_start[k]) { //subroutine to set the starting minimum acceleration
 800070c:	4a82      	ldr	r2, [pc, #520]	@ (8000918 <trapezoidal_func+0x27c>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000714:	4619      	mov	r1, r3
 8000716:	4a81      	ldr	r2, [pc, #516]	@ (800091c <trapezoidal_func+0x280>)
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071e:	4299      	cmp	r1, r3
 8000720:	d929      	bls.n	8000776 <trapezoidal_func+0xda>
			__HAL_TIM_SET_AUTORELOAD(htim, arr_start[k]);
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	497d      	ldr	r1, [pc, #500]	@ (800091c <trapezoidal_func+0x280>)
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000730:	4a7a      	ldr	r2, [pc, #488]	@ (800091c <trapezoidal_func+0x280>)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	60da      	str	r2, [r3, #12]
			hslave->Instance->PSC = arr_start[k];
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4976      	ldr	r1, [pc, #472]	@ (800091c <trapezoidal_func+0x280>)
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	0852      	lsrs	r2, r2, #1
 8000756:	635a      	str	r2, [r3, #52]	@ 0x34
			hslave->Instance->EGR |= TIM_EGR_UG;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	695a      	ldr	r2, [r3, #20]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f042 0201 	orr.w	r2, r2, #1
 8000766:	615a      	str	r2, [r3, #20]
			hslave->Instance->CNT = count_rising_edge[k];
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4968      	ldr	r1, [pc, #416]	@ (8000910 <trapezoidal_func+0x274>)
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000774:	625a      	str	r2, [r3, #36]	@ 0x24
		if (arr_des_a[k] < (arr_current[k] - acc_rate_a[k])
 8000776:	4a68      	ldr	r2, [pc, #416]	@ (8000918 <trapezoidal_func+0x27c>)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800077e:	4619      	mov	r1, r3
 8000780:	4a67      	ldr	r2, [pc, #412]	@ (8000920 <trapezoidal_func+0x284>)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000788:	4618      	mov	r0, r3
 800078a:	4a66      	ldr	r2, [pc, #408]	@ (8000924 <trapezoidal_func+0x288>)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000792:	1ac3      	subs	r3, r0, r3
 8000794:	4299      	cmp	r1, r3
 8000796:	d266      	bcs.n	8000866 <trapezoidal_func+0x1ca>
				&& cnt <= (int) (n_steps_a[k] * 1 / 2)) { //acceleration phase
 8000798:	4a63      	ldr	r2, [pc, #396]	@ (8000928 <trapezoidal_func+0x28c>)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a0:	0fda      	lsrs	r2, r3, #31
 80007a2:	4413      	add	r3, r2
 80007a4:	105b      	asrs	r3, r3, #1
 80007a6:	461a      	mov	r2, r3
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	4293      	cmp	r3, r2
 80007ac:	dc5b      	bgt.n	8000866 <trapezoidal_func+0x1ca>
			arr_current[k] -= acc_rate_a[k];
 80007ae:	4a5c      	ldr	r2, [pc, #368]	@ (8000920 <trapezoidal_func+0x284>)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4a5a      	ldr	r2, [pc, #360]	@ (8000924 <trapezoidal_func+0x288>)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c0:	1acb      	subs	r3, r1, r3
 80007c2:	4619      	mov	r1, r3
 80007c4:	4a56      	ldr	r2, [pc, #344]	@ (8000920 <trapezoidal_func+0x284>)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (arr_current[k] <= arr_max[k]) //max velocity saturation
 80007cc:	4a54      	ldr	r2, [pc, #336]	@ (8000920 <trapezoidal_func+0x284>)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d4:	4619      	mov	r1, r3
 80007d6:	4a55      	ldr	r2, [pc, #340]	@ (800092c <trapezoidal_func+0x290>)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007de:	4299      	cmp	r1, r3
 80007e0:	d808      	bhi.n	80007f4 <trapezoidal_func+0x158>
				arr_current[k] = arr_max[k];
 80007e2:	4a52      	ldr	r2, [pc, #328]	@ (800092c <trapezoidal_func+0x290>)
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ea:	4619      	mov	r1, r3
 80007ec:	4a4c      	ldr	r2, [pc, #304]	@ (8000920 <trapezoidal_func+0x284>)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			__HAL_TIM_SET_AUTORELOAD(htim, arr_current[k]);
 80007f4:	4a4a      	ldr	r2, [pc, #296]	@ (8000920 <trapezoidal_func+0x284>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000802:	4a47      	ldr	r2, [pc, #284]	@ (8000920 <trapezoidal_func+0x284>)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	60da      	str	r2, [r3, #12]
			hslave->Instance->PSC = arr_current[k];
 8000810:	4a43      	ldr	r2, [pc, #268]	@ (8000920 <trapezoidal_func+0x284>)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	629a      	str	r2, [r3, #40]	@ 0x28
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	0852      	lsrs	r2, r2, #1
 800082a:	635a      	str	r2, [r3, #52]	@ 0x34
			hslave->Instance->EGR |= TIM_EGR_UG;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	695a      	ldr	r2, [r3, #20]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f042 0201 	orr.w	r2, r2, #1
 800083a:	615a      	str	r2, [r3, #20]
			hslave->Instance->CNT = count_rising_edge[k];
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4933      	ldr	r1, [pc, #204]	@ (8000910 <trapezoidal_func+0x274>)
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000848:	625a      	str	r2, [r3, #36]	@ 0x24
			acc_count[k] += (htim->Instance->PSC + 1); //increase the acc_count
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000850:	1c5a      	adds	r2, r3, #1
 8000852:	4930      	ldr	r1, [pc, #192]	@ (8000914 <trapezoidal_func+0x278>)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800085a:	441a      	add	r2, r3
 800085c:	492d      	ldr	r1, [pc, #180]	@ (8000914 <trapezoidal_func+0x278>)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000864:	e0c5      	b.n	80009f2 <trapezoidal_func+0x356>
			if (arr_des_a[k] >= (arr_current[k] - acc_rate_a[k])
 8000866:	4a2c      	ldr	r2, [pc, #176]	@ (8000918 <trapezoidal_func+0x27c>)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086e:	4619      	mov	r1, r3
 8000870:	4a2b      	ldr	r2, [pc, #172]	@ (8000920 <trapezoidal_func+0x284>)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000878:	4618      	mov	r0, r3
 800087a:	4a2a      	ldr	r2, [pc, #168]	@ (8000924 <trapezoidal_func+0x288>)
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000882:	1ac3      	subs	r3, r0, r3
 8000884:	4299      	cmp	r1, r3
 8000886:	d353      	bcc.n	8000930 <trapezoidal_func+0x294>
					&& arr_current[k] > arr_des_a[k]
 8000888:	4a25      	ldr	r2, [pc, #148]	@ (8000920 <trapezoidal_func+0x284>)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000890:	4921      	ldr	r1, [pc, #132]	@ (8000918 <trapezoidal_func+0x27c>)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000898:	429a      	cmp	r2, r3
 800089a:	dd49      	ble.n	8000930 <trapezoidal_func+0x294>
					&& cnt <= (int) (n_steps_a[k] * 1 / 2)) { //constant phase
 800089c:	4a22      	ldr	r2, [pc, #136]	@ (8000928 <trapezoidal_func+0x28c>)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a4:	0fda      	lsrs	r2, r3, #31
 80008a6:	4413      	add	r3, r2
 80008a8:	105b      	asrs	r3, r3, #1
 80008aa:	461a      	mov	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	4293      	cmp	r3, r2
 80008b0:	dc3e      	bgt.n	8000930 <trapezoidal_func+0x294>
				__HAL_TIM_SET_AUTORELOAD(htim, arr_des_a[k]);
 80008b2:	4a19      	ldr	r2, [pc, #100]	@ (8000918 <trapezoidal_func+0x27c>)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008c0:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <trapezoidal_func+0x27c>)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c8:	461a      	mov	r2, r3
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	60da      	str	r2, [r3, #12]
				hslave->Instance->PSC = arr_des_a[k];
 80008ce:	4a12      	ldr	r2, [pc, #72]	@ (8000918 <trapezoidal_func+0x27c>)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	629a      	str	r2, [r3, #40]	@ 0x28
				__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	0852      	lsrs	r2, r2, #1
 80008e8:	635a      	str	r2, [r3, #52]	@ 0x34
				hslave->Instance->EGR |= TIM_EGR_UG;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	695a      	ldr	r2, [r3, #20]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f042 0201 	orr.w	r2, r2, #1
 80008f8:	615a      	str	r2, [r3, #20]
				hslave->Instance->CNT = count_rising_edge[k];
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4904      	ldr	r1, [pc, #16]	@ (8000910 <trapezoidal_func+0x274>)
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000906:	625a      	str	r2, [r3, #36]	@ 0x24
 8000908:	e073      	b.n	80009f2 <trapezoidal_func+0x356>
 800090a:	bf00      	nop
 800090c:	40000400 	.word	0x40000400
 8000910:	20000058 	.word	0x20000058
 8000914:	20000064 	.word	0x20000064
 8000918:	2000010c 	.word	0x2000010c
 800091c:	20000000 	.word	0x20000000
 8000920:	20000024 	.word	0x20000024
 8000924:	20000018 	.word	0x20000018
 8000928:	20000100 	.word	0x20000100
 800092c:	2000000c 	.word	0x2000000c
				if (cnt >= (n_steps_a[k] - acc_count[k])) { //deceleration phase
 8000930:	4a32      	ldr	r2, [pc, #200]	@ (80009fc <trapezoidal_func+0x360>)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000938:	4619      	mov	r1, r3
 800093a:	4a31      	ldr	r2, [pc, #196]	@ (8000a00 <trapezoidal_func+0x364>)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000942:	1aca      	subs	r2, r1, r3
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	429a      	cmp	r2, r3
 8000948:	d853      	bhi.n	80009f2 <trapezoidal_func+0x356>
					arr_current[k] += acc_rate_a[k];
 800094a:	4a2e      	ldr	r2, [pc, #184]	@ (8000a04 <trapezoidal_func+0x368>)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000952:	4619      	mov	r1, r3
 8000954:	4a2c      	ldr	r2, [pc, #176]	@ (8000a08 <trapezoidal_func+0x36c>)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095c:	440b      	add	r3, r1
 800095e:	4619      	mov	r1, r3
 8000960:	4a28      	ldr	r2, [pc, #160]	@ (8000a04 <trapezoidal_func+0x368>)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (arr_current[k] >= (arr_start[k] - acc_rate_a[k])) //min velocity saturation
 8000968:	4a26      	ldr	r2, [pc, #152]	@ (8000a04 <trapezoidal_func+0x368>)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000970:	4618      	mov	r0, r3
 8000972:	4a26      	ldr	r2, [pc, #152]	@ (8000a0c <trapezoidal_func+0x370>)
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800097a:	4923      	ldr	r1, [pc, #140]	@ (8000a08 <trapezoidal_func+0x36c>)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	4298      	cmp	r0, r3
 8000986:	d308      	bcc.n	800099a <trapezoidal_func+0x2fe>
						arr_current[k] = arr_start[k];
 8000988:	4a20      	ldr	r2, [pc, #128]	@ (8000a0c <trapezoidal_func+0x370>)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	4619      	mov	r1, r3
 8000992:	4a1c      	ldr	r2, [pc, #112]	@ (8000a04 <trapezoidal_func+0x368>)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					__HAL_TIM_SET_AUTORELOAD(htim, arr_current[k]);
 800099a:	4a1a      	ldr	r2, [pc, #104]	@ (8000a04 <trapezoidal_func+0x368>)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009a8:	4a16      	ldr	r2, [pc, #88]	@ (8000a04 <trapezoidal_func+0x368>)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	461a      	mov	r2, r3
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	60da      	str	r2, [r3, #12]
					hslave->Instance->PSC = arr_current[k];
 80009b6:	4a13      	ldr	r2, [pc, #76]	@ (8000a04 <trapezoidal_func+0x368>)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	629a      	str	r2, [r3, #40]	@ 0x28
					__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	0852      	lsrs	r2, r2, #1
 80009d0:	635a      	str	r2, [r3, #52]	@ 0x34
					hslave->Instance->EGR |= TIM_EGR_UG;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	695a      	ldr	r2, [r3, #20]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f042 0201 	orr.w	r2, r2, #1
 80009e0:	615a      	str	r2, [r3, #20]
					hslave->Instance->CNT = count_rising_edge[k];
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	490a      	ldr	r1, [pc, #40]	@ (8000a10 <trapezoidal_func+0x374>)
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009ee:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80009f0:	e7ff      	b.n	80009f2 <trapezoidal_func+0x356>
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000100 	.word	0x20000100
 8000a00:	20000064 	.word	0x20000064
 8000a04:	20000024 	.word	0x20000024
 8000a08:	20000018 	.word	0x20000018
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000058 	.word	0x20000058

08000a14 <HAL_TIM_PeriodElapsedCallback>:

//the following function is useful if you have specific needs
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM6) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0e      	ldr	r2, [pc, #56]	@ (8000a5c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d115      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x3e>

			HAL_GPIO_WritePin(ENDEFF1_en_GPIO_Port, ENDEFF1_en_Pin, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2104      	movs	r1, #4
 8000a2a:	480d      	ldr	r0, [pc, #52]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a2c:	f001 fb8a 	bl	8002144 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENDEFF2_en_GPIO_Port, ENDEFF2_en_Pin, GPIO_PIN_SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a36:	480a      	ldr	r0, [pc, #40]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a38:	f001 fb84 	bl	8002144 <HAL_GPIO_WritePin>

			HAL_TIM_Base_Stop_IT(htim);
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f002 fa1f 	bl	8002e80 <HAL_TIM_Base_Stop_IT>
			htim->Instance->EGR |= TIM_EGR_UG;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	695a      	ldr	r2, [r3, #20]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f042 0201 	orr.w	r2, r2, #1
 8000a50:	615a      	str	r2, [r3, #20]

		}

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40001000 	.word	0x40001000
 8000a60:	40020400 	.word	0x40020400

08000a64 <HAL_TIM_PWM_PulseFinishedCallback>:


//the following functions is called for each interrupt of the master (pwm timer)
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {//joint1
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae8 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d10d      	bne.n	8000a92 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>

		count_rising_edge[0] += (htim->Instance->PSC + 1);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000a86:	6013      	str	r3, [r2, #0]
		//arr[0] = -(__HAL_TIM_GET_AUTORELOAD(&htim1));  //debug graph
		trapezoidal_func(0, htim, &htim4); //0 = the joint1 timer
 8000a88:	4a19      	ldr	r2, [pc, #100]	@ (8000af0 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f7ff fe05 	bl	800069c <trapezoidal_func>

	}

	if (htim->Instance == TIM2) {//joint2
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a9a:	d10d      	bne.n	8000ab8 <HAL_TIM_PWM_PulseFinishedCallback+0x54>

		count_rising_edge[1] += (htim->Instance->PSC + 1);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a10      	ldr	r2, [pc, #64]	@ (8000aec <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000aac:	6053      	str	r3, [r2, #4]
		//arr[1] = -(__HAL_TIM_GET_AUTORELOAD(htim));  //debug graph
		trapezoidal_func(1, htim, &htim3); //1 = the joint2 timer
 8000aae:	4a11      	ldr	r2, [pc, #68]	@ (8000af4 <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fdf2 	bl	800069c <trapezoidal_func>

	}

	if (htim->Instance == TIM8) {//joint3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0e      	ldr	r2, [pc, #56]	@ (8000af8 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d10d      	bne.n	8000ade <HAL_TIM_PWM_PulseFinishedCallback+0x7a>

		count_rising_edge[2] += (htim->Instance->PSC + 1);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ac8:	1c5a      	adds	r2, r3, #1
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a06      	ldr	r2, [pc, #24]	@ (8000aec <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000ad2:	6093      	str	r3, [r2, #8]
		//arr[2] = -(__HAL_TIM_GET_AUTORELOAD(htim));  //debug graph
		trapezoidal_func(2, htim, &htim5); //2= the joint3 timer
 8000ad4:	4a09      	ldr	r2, [pc, #36]	@ (8000afc <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	2002      	movs	r0, #2
 8000ada:	f7ff fddf 	bl	800069c <trapezoidal_func>

	}
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010000 	.word	0x40010000
 8000aec:	20000058 	.word	0x20000058
 8000af0:	200001f0 	.word	0x200001f0
 8000af4:	200001a8 	.word	0x200001a8
 8000af8:	40010400 	.word	0x40010400
 8000afc:	20000238 	.word	0x20000238

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b06:	f001 f805 	bl	8001b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0a:	f000 f881 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0e:	f7ff fcf1 	bl	80004f4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b12:	f000 fb2f 	bl	8001174 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000b16:	f000 fbf5 	bl	8001304 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000b1a:	f000 fa07 	bl	8000f2c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b1e:	f000 faa7 	bl	8001070 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000b22:	f000 fb8b 	bl	800123c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000b26:	f000 fc87 	bl	8001438 <MX_TIM8_Init>
  MX_TIM10_Init();
 8000b2a:	f000 fd27 	bl	800157c <MX_TIM10_Init>
  MX_TIM11_Init();
 8000b2e:	f000 fd73 	bl	8001618 <MX_TIM11_Init>
  MX_TIM6_Init();
 8000b32:	f000 fc4b 	bl	80013cc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	/*IF YOU'RE NOT USING THE TRAPEZOIDAL PROFILE USE THE HAL_TIM_BASE_START_IT*/
	HAL_TIM_Base_Start(&htim4); //start timer 1st joint
 8000b36:	4824      	ldr	r0, [pc, #144]	@ (8000bc8 <main+0xc8>)
 8000b38:	f002 f93a 	bl	8002db0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3); //start timer 2nd joint
 8000b3c:	4823      	ldr	r0, [pc, #140]	@ (8000bcc <main+0xcc>)
 8000b3e:	f002 f937 	bl	8002db0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5); //start timer 3rd joint
 8000b42:	4823      	ldr	r0, [pc, #140]	@ (8000bd0 <main+0xd0>)
 8000b44:	f002 f934 	bl	8002db0 <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET); //ENABLE stepper motors
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2120      	movs	r1, #32
 8000b4c:	4821      	ldr	r0, [pc, #132]	@ (8000bd4 <main+0xd4>)
 8000b4e:	f001 faf9 	bl	8002144 <HAL_GPIO_WritePin>

	/* stepper_init(obj, timer pwm, timer slave, resol, microstep, enable_port, direction_port */
	stepper_init(&stp1, &htim1, &htim4, 1.8, 4 * 4.27, DIRECTION1_GPIO_Port,
 8000b52:	2301      	movs	r3, #1
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <main+0xd8>)
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2311      	movs	r3, #17
 8000b5c:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8000bdc <main+0xdc>
 8000b60:	4a19      	ldr	r2, [pc, #100]	@ (8000bc8 <main+0xc8>)
 8000b62:	491f      	ldr	r1, [pc, #124]	@ (8000be0 <main+0xe0>)
 8000b64:	481f      	ldr	r0, [pc, #124]	@ (8000be4 <main+0xe4>)
 8000b66:	f000 f8ef 	bl	8000d48 <stepper_init>
	DIRECTION1_Pin);
	stepper_init(&stp2, &htim2, &htim3, 1.8, 4 * 6, DIRECTION2_GPIO_Port,
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <main+0xd4>)
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2318      	movs	r3, #24
 8000b74:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8000bdc <main+0xdc>
 8000b78:	4a14      	ldr	r2, [pc, #80]	@ (8000bcc <main+0xcc>)
 8000b7a:	491b      	ldr	r1, [pc, #108]	@ (8000be8 <main+0xe8>)
 8000b7c:	481b      	ldr	r0, [pc, #108]	@ (8000bec <main+0xec>)
 8000b7e:	f000 f8e3 	bl	8000d48 <stepper_init>
	DIRECTION2_Pin);
	stepper_init(&stp3, &htim2, &htim3, 1.8, 4 * 6, DIRECTION3_GPIO_Port,
 8000b82:	2380      	movs	r3, #128	@ 0x80
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <main+0xf0>)
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2318      	movs	r3, #24
 8000b8c:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000bdc <main+0xdc>
 8000b90:	4a0e      	ldr	r2, [pc, #56]	@ (8000bcc <main+0xcc>)
 8000b92:	4915      	ldr	r1, [pc, #84]	@ (8000be8 <main+0xe8>)
 8000b94:	4817      	ldr	r0, [pc, #92]	@ (8000bf4 <main+0xf4>)
 8000b96:	f000 f8d7 	bl	8000d48 <stepper_init>
	DIRECTION3_Pin);
	stepper_init(&stp4, &htim8, &htim5, 1.8, 8 * 4.9, DIRECTION4_GPIO_Port,
 8000b9a:	2340      	movs	r3, #64	@ 0x40
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <main+0xf0>)
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2327      	movs	r3, #39	@ 0x27
 8000ba4:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8000bdc <main+0xdc>
 8000ba8:	4a09      	ldr	r2, [pc, #36]	@ (8000bd0 <main+0xd0>)
 8000baa:	4913      	ldr	r1, [pc, #76]	@ (8000bf8 <main+0xf8>)
 8000bac:	4813      	ldr	r0, [pc, #76]	@ (8000bfc <main+0xfc>)
 8000bae:	f000 f8cb 	bl	8000d48 <stepper_init>
	DIRECTION4_Pin);

	//servo: default position 0° in the range {-90,+90}
	/*servo_init(obj, timer pwm)*/
	servo_init(&srv1, &htim10);
 8000bb2:	4913      	ldr	r1, [pc, #76]	@ (8000c00 <main+0x100>)
 8000bb4:	4813      	ldr	r0, [pc, #76]	@ (8000c04 <main+0x104>)
 8000bb6:	f000 f89f 	bl	8000cf8 <servo_init>
	servo_init(&srv2, &htim11);
 8000bba:	4913      	ldr	r1, [pc, #76]	@ (8000c08 <main+0x108>)
 8000bbc:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <main+0x10c>)
 8000bbe:	f000 f89b 	bl	8000cf8 <servo_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8000bc2:	bf00      	nop
 8000bc4:	e7fd      	b.n	8000bc2 <main+0xc2>
 8000bc6:	bf00      	nop
 8000bc8:	200001f0 	.word	0x200001f0
 8000bcc:	200001a8 	.word	0x200001a8
 8000bd0:	20000238 	.word	0x20000238
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020400 	.word	0x40020400
 8000bdc:	3fe66666 	.word	0x3fe66666
 8000be0:	20000118 	.word	0x20000118
 8000be4:	20000070 	.word	0x20000070
 8000be8:	20000160 	.word	0x20000160
 8000bec:	20000090 	.word	0x20000090
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	200000b0 	.word	0x200000b0
 8000bf8:	200002c8 	.word	0x200002c8
 8000bfc:	200000d0 	.word	0x200000d0
 8000c00:	20000310 	.word	0x20000310
 8000c04:	200000f0 	.word	0x200000f0
 8000c08:	20000358 	.word	0x20000358
 8000c0c:	200000f8 	.word	0x200000f8

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b094      	sub	sp, #80	@ 0x50
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	2234      	movs	r2, #52	@ 0x34
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 faa4 	bl	800416c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce4 <SystemClock_Config+0xd4>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3c:	4a29      	ldr	r2, [pc, #164]	@ (8000ce4 <SystemClock_Config+0xd4>)
 8000c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c44:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <SystemClock_Config+0xd4>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c50:	2300      	movs	r3, #0
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <SystemClock_Config+0xd8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c5c:	4a22      	ldr	r2, [pc, #136]	@ (8000ce8 <SystemClock_Config+0xd8>)
 8000c5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <SystemClock_Config+0xd8>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c78:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c82:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c84:	2304      	movs	r3, #4
 8000c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000c88:	2354      	movs	r3, #84	@ 0x54
 8000c8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f001 fd99 	bl	80027d4 <HAL_RCC_OscConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ca8:	f000 f820 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cac:	230f      	movs	r3, #15
 8000cae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	2102      	movs	r1, #2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 fa6c 	bl	80021a8 <HAL_RCC_ClockConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cd6:	f000 f809 	bl	8000cec <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3750      	adds	r7, #80	@ 0x50
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40007000 	.word	0x40007000

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <Error_Handler+0x8>

08000cf8 <servo_init>:
 *  Created on: Mar 2, 2025
 *      Author: david
 */
#include <servo.h>

void servo_init(servo_obj *srv, TIM_HandleTypeDef *pwm_timer) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
	srv->pwm_timer = pwm_timer;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	601a      	str	r2, [r3, #0]
	srv->unit = (CCR_MAX - CCR_MIN) / (2 * ANGLE_MAX);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d44 <servo_init+0x4c>)
 8000d0c:	605a      	str	r2, [r3, #4]
	//pwm=50hz
	srv->pwm_timer->Instance->PSC = 27;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	221b      	movs	r2, #27
 8000d16:	629a      	str	r2, [r3, #40]	@ 0x28
	srv->pwm_timer->Instance->ARR = 60000 - 1;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000d22:	62da      	str	r2, [r3, #44]	@ 0x2c
	__HAL_TIM_SET_COMPARE(srv->pwm_timer, TIM_CHANNEL_1,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f241 1293 	movw	r2, #4499	@ 0x1193
 8000d2e:	635a      	str	r2, [r3, #52]	@ 0x34
			(int) ((CCR_MAX + CCR_MIN) / 2));
	HAL_TIM_PWM_Start(srv->pwm_timer, TIM_CHANNEL_1); //START PWM)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 f92a 	bl	8002f90 <HAL_TIM_PWM_Start>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	42055555 	.word	0x42055555

08000d48 <stepper_init>:

//stepper struct
void stepper_init(stepper_obj *stp, TIM_HandleTypeDef *pwm_timer,
		TIM_HandleTypeDef *position_timer, float stepper_resolution,
		uint16_t microstep, GPIO_TypeDef *direction_port,
		uint16_t direction_pin) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6178      	str	r0, [r7, #20]
 8000d50:	6139      	str	r1, [r7, #16]
 8000d52:	60fa      	str	r2, [r7, #12]
 8000d54:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d58:	80fb      	strh	r3, [r7, #6]

	stp->position_timer = position_timer;
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	605a      	str	r2, [r3, #4]
	stp->pwm_timer = pwm_timer;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	601a      	str	r2, [r3, #0]

	stp->direction_port = direction_port;
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	6a3a      	ldr	r2, [r7, #32]
 8000d6a:	609a      	str	r2, [r3, #8]
	stp->direction_pin = direction_pin;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000d70:	819a      	strh	r2, [r3, #12]

	stp->stepper_resolution = stepper_resolution;
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	611a      	str	r2, [r3, #16]
	stp->microstep = microstep;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	88fa      	ldrh	r2, [r7, #6]
 8000d7c:	831a      	strh	r2, [r3, #24]
	stp->step_per_rev = 360.0f / stepper_resolution; // 360°/resolution
 8000d7e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000db8 <stepper_init+0x70>
 8000d82:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	edc3 7a05 	vstr	s15, [r3, #20]
	stp->step_scale = stp->step_per_rev * microstep;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	ed93 7a05 	vldr	s14, [r3, #20]
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8000daa:	bf00      	nop
 8000dac:	371c      	adds	r7, #28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	43b40000 	.word	0x43b40000

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	4a0f      	ldr	r2, [pc, #60]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	4a08      	ldr	r2, [pc, #32]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000dfa:	2006      	movs	r0, #6
 8000dfc:	f000 ffcc 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <NMI_Handler+0x4>

08000e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <MemManage_Handler+0x4>

08000e24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e62:	f000 fea9 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <TIM1_CC_IRQHandler+0x10>)
 8000e72:	f002 fa13 	bl	800329c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000118 	.word	0x20000118

08000e80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e84:	4802      	ldr	r0, [pc, #8]	@ (8000e90 <TIM2_IRQHandler+0x10>)
 8000e86:	f002 fa09 	bl	800329c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000160 	.word	0x20000160

08000e94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DISABLE_button_Pin);
 8000e98:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e9c:	f001 f96c 	bl	8002178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8000eaa:	f002 f9f7 	bl	800329c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200002c8 	.word	0x200002c8

08000eb8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000ebe:	f002 f9ed 	bl	800329c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200002c8 	.word	0x200002c8

08000ecc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000ed2:	f002 f9e3 	bl	800329c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200002c8 	.word	0x200002c8

08000ee0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <TIM8_CC_IRQHandler+0x10>)
 8000ee6:	f002 f9d9 	bl	800329c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200002c8 	.word	0x200002c8

08000ef4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <TIM6_DAC_IRQHandler+0x10>)
 8000efa:	f002 f9cf 	bl	800329c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000280 	.word	0x20000280

08000f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <SystemInit+0x20>)
 8000f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f12:	4a05      	ldr	r2, [pc, #20]	@ (8000f28 <SystemInit+0x20>)
 8000f14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b096      	sub	sp, #88	@ 0x58
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f32:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
 8000f5a:	615a      	str	r2, [r3, #20]
 8000f5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2220      	movs	r2, #32
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 f901 	bl	800416c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8001068 <MX_TIM1_Init+0x13c>)
 8000f6c:	4a3f      	ldr	r2, [pc, #252]	@ (800106c <MX_TIM1_Init+0x140>)
 8000f6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8000f70:	4b3d      	ldr	r3, [pc, #244]	@ (8001068 <MX_TIM1_Init+0x13c>)
 8000f72:	2204      	movs	r2, #4
 8000f74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f76:	4b3c      	ldr	r3, [pc, #240]	@ (8001068 <MX_TIM1_Init+0x13c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8001068 <MX_TIM1_Init+0x13c>)
 8000f7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f84:	4b38      	ldr	r3, [pc, #224]	@ (8001068 <MX_TIM1_Init+0x13c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f8a:	4b37      	ldr	r3, [pc, #220]	@ (8001068 <MX_TIM1_Init+0x13c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f90:	4b35      	ldr	r3, [pc, #212]	@ (8001068 <MX_TIM1_Init+0x13c>)
 8000f92:	2280      	movs	r2, #128	@ 0x80
 8000f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f96:	4834      	ldr	r0, [pc, #208]	@ (8001068 <MX_TIM1_Init+0x13c>)
 8000f98:	f001 feba 	bl	8002d10 <HAL_TIM_Base_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fa2:	f7ff fea3 	bl	8000cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000faa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	482d      	ldr	r0, [pc, #180]	@ (8001068 <MX_TIM1_Init+0x13c>)
 8000fb4:	f002 fb24 	bl	8003600 <HAL_TIM_ConfigClockSource>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fbe:	f7ff fe95 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fc2:	4829      	ldr	r0, [pc, #164]	@ (8001068 <MX_TIM1_Init+0x13c>)
 8000fc4:	f001 ff8b 	bl	8002ede <HAL_TIM_PWM_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000fce:	f7ff fe8d 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fd2:	2320      	movs	r3, #32
 8000fd4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000fd6:	2380      	movs	r3, #128	@ 0x80
 8000fd8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fda:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4821      	ldr	r0, [pc, #132]	@ (8001068 <MX_TIM1_Init+0x13c>)
 8000fe2:	f002 ffe1 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fec:	f7ff fe7e 	bl	8000cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff0:	2360      	movs	r3, #96	@ 0x60
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 8000ff4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ffe:	2300      	movs	r3, #0
 8001000:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001002:	2304      	movs	r3, #4
 8001004:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800100e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	4814      	ldr	r0, [pc, #80]	@ (8001068 <MX_TIM1_Init+0x13c>)
 8001018:	f002 fa30 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001022:	f7ff fe63 	bl	8000cec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800103a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800103e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4619      	mov	r1, r3
 8001048:	4807      	ldr	r0, [pc, #28]	@ (8001068 <MX_TIM1_Init+0x13c>)
 800104a:	f003 f829 	bl	80040a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001054:	f7ff fe4a 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001058:	4803      	ldr	r0, [pc, #12]	@ (8001068 <MX_TIM1_Init+0x13c>)
 800105a:	f000 fc31 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 800105e:	bf00      	nop
 8001060:	3758      	adds	r7, #88	@ 0x58
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000118 	.word	0x20000118
 800106c:	40010000 	.word	0x40010000

08001070 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	@ 0x38
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001076:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	f107 0320 	add.w	r3, r7, #32
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
 800109c:	615a      	str	r2, [r3, #20]
 800109e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010a0:	4b33      	ldr	r3, [pc, #204]	@ (8001170 <MX_TIM2_Init+0x100>)
 80010a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 80010a8:	4b31      	ldr	r3, [pc, #196]	@ (8001170 <MX_TIM2_Init+0x100>)
 80010aa:	2204      	movs	r2, #4
 80010ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ae:	4b30      	ldr	r3, [pc, #192]	@ (8001170 <MX_TIM2_Init+0x100>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001170 <MX_TIM2_Init+0x100>)
 80010b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001170 <MX_TIM2_Init+0x100>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001170 <MX_TIM2_Init+0x100>)
 80010c4:	2280      	movs	r2, #128	@ 0x80
 80010c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c8:	4829      	ldr	r0, [pc, #164]	@ (8001170 <MX_TIM2_Init+0x100>)
 80010ca:	f001 fe21 	bl	8002d10 <HAL_TIM_Base_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010d4:	f7ff fe0a 	bl	8000cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e2:	4619      	mov	r1, r3
 80010e4:	4822      	ldr	r0, [pc, #136]	@ (8001170 <MX_TIM2_Init+0x100>)
 80010e6:	f002 fa8b 	bl	8003600 <HAL_TIM_ConfigClockSource>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010f0:	f7ff fdfc 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010f4:	481e      	ldr	r0, [pc, #120]	@ (8001170 <MX_TIM2_Init+0x100>)
 80010f6:	f001 fef2 	bl	8002ede <HAL_TIM_PWM_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001100:	f7ff fdf4 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001104:	2320      	movs	r3, #32
 8001106:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001108:	2380      	movs	r3, #128	@ 0x80
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	4619      	mov	r1, r3
 8001112:	4817      	ldr	r0, [pc, #92]	@ (8001170 <MX_TIM2_Init+0x100>)
 8001114:	f002 ff48 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800111e:	f7ff fde5 	bl	8000cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001122:	2360      	movs	r3, #96	@ 0x60
 8001124:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32768;
 8001126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800112a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001130:	2304      	movs	r3, #4
 8001132:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2200      	movs	r2, #0
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	@ (8001170 <MX_TIM2_Init+0x100>)
 800113c:	f002 f99e 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001146:	f7ff fdd1 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2204      	movs	r2, #4
 800114e:	4619      	mov	r1, r3
 8001150:	4807      	ldr	r0, [pc, #28]	@ (8001170 <MX_TIM2_Init+0x100>)
 8001152:	f002 f993 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800115c:	f7ff fdc6 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001160:	4803      	ldr	r0, [pc, #12]	@ (8001170 <MX_TIM2_Init+0x100>)
 8001162:	f000 fbad 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 8001166:	bf00      	nop
 8001168:	3738      	adds	r7, #56	@ 0x38
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000160 	.word	0x20000160

08001174 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	@ 0x30
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a0:	4b24      	ldr	r3, [pc, #144]	@ (8001234 <MX_TIM3_Init+0xc0>)
 80011a2:	4a25      	ldr	r2, [pc, #148]	@ (8001238 <MX_TIM3_Init+0xc4>)
 80011a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 80011a6:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <MX_TIM3_Init+0xc0>)
 80011a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <MX_TIM3_Init+0xc0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <MX_TIM3_Init+0xc0>)
 80011b6:	22c7      	movs	r2, #199	@ 0xc7
 80011b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <MX_TIM3_Init+0xc0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <MX_TIM3_Init+0xc0>)
 80011c2:	2280      	movs	r2, #128	@ 0x80
 80011c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c6:	481b      	ldr	r0, [pc, #108]	@ (8001234 <MX_TIM3_Init+0xc0>)
 80011c8:	f001 fda2 	bl	8002d10 <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80011d2:	f7ff fd8b 	bl	8000cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011da:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4619      	mov	r1, r3
 80011e2:	4814      	ldr	r0, [pc, #80]	@ (8001234 <MX_TIM3_Init+0xc0>)
 80011e4:	f002 fa0c 	bl	8003600 <HAL_TIM_ConfigClockSource>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80011ee:	f7ff fd7d 	bl	8000cec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80011f2:	2306      	movs	r3, #6
 80011f4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80011f6:	2310      	movs	r3, #16
 80011f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	@ (8001234 <MX_TIM3_Init+0xc0>)
 8001202:	f002 fac4 	bl	800378e <HAL_TIM_SlaveConfigSynchro>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800120c:	f7ff fd6e 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	@ (8001234 <MX_TIM3_Init+0xc0>)
 800121e:	f002 fec3 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001228:	f7ff fd60 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3730      	adds	r7, #48	@ 0x30
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200001a8 	.word	0x200001a8
 8001238:	40000400 	.word	0x40000400

0800123c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	@ 0x30
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0320 	add.w	r3, r7, #32
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001268:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <MX_TIM4_Init+0xc0>)
 800126a:	4a25      	ldr	r2, [pc, #148]	@ (8001300 <MX_TIM4_Init+0xc4>)
 800126c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 65535;
 800126e:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <MX_TIM4_Init+0xc0>)
 8001270:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001274:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b21      	ldr	r3, [pc, #132]	@ (80012fc <MX_TIM4_Init+0xc0>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 800127c:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <MX_TIM4_Init+0xc0>)
 800127e:	22c7      	movs	r2, #199	@ 0xc7
 8001280:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <MX_TIM4_Init+0xc0>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001288:	4b1c      	ldr	r3, [pc, #112]	@ (80012fc <MX_TIM4_Init+0xc0>)
 800128a:	2280      	movs	r2, #128	@ 0x80
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800128e:	481b      	ldr	r0, [pc, #108]	@ (80012fc <MX_TIM4_Init+0xc0>)
 8001290:	f001 fd3e 	bl	8002d10 <HAL_TIM_Base_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800129a:	f7ff fd27 	bl	8000cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	4619      	mov	r1, r3
 80012aa:	4814      	ldr	r0, [pc, #80]	@ (80012fc <MX_TIM4_Init+0xc0>)
 80012ac:	f002 f9a8 	bl	8003600 <HAL_TIM_ConfigClockSource>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80012b6:	f7ff fd19 	bl	8000cec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80012ba:	2306      	movs	r3, #6
 80012bc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4619      	mov	r1, r3
 80012c8:	480c      	ldr	r0, [pc, #48]	@ (80012fc <MX_TIM4_Init+0xc0>)
 80012ca:	f002 fa60 	bl	800378e <HAL_TIM_SlaveConfigSynchro>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80012d4:	f7ff fd0a 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	@ (80012fc <MX_TIM4_Init+0xc0>)
 80012e6:	f002 fe5f 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 80012f0:	f7ff fcfc 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3730      	adds	r7, #48	@ 0x30
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200001f0 	.word	0x200001f0
 8001300:	40000800 	.word	0x40000800

08001304 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	@ 0x30
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0320 	add.w	r3, r7, #32
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001330:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <MX_TIM5_Init+0xc0>)
 8001332:	4a25      	ldr	r2, [pc, #148]	@ (80013c8 <MX_TIM5_Init+0xc4>)
 8001334:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8001336:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <MX_TIM5_Init+0xc0>)
 8001338:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800133c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <MX_TIM5_Init+0xc0>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 199;
 8001344:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <MX_TIM5_Init+0xc0>)
 8001346:	22c7      	movs	r2, #199	@ 0xc7
 8001348:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134a:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <MX_TIM5_Init+0xc0>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001350:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <MX_TIM5_Init+0xc0>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001356:	481b      	ldr	r0, [pc, #108]	@ (80013c4 <MX_TIM5_Init+0xc0>)
 8001358:	f001 fcda 	bl	8002d10 <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8001362:	f7ff fcc3 	bl	8000cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001366:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	4619      	mov	r1, r3
 8001372:	4814      	ldr	r0, [pc, #80]	@ (80013c4 <MX_TIM5_Init+0xc0>)
 8001374:	f002 f944 	bl	8003600 <HAL_TIM_ConfigClockSource>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800137e:	f7ff fcb5 	bl	8000cec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001382:	2306      	movs	r3, #6
 8001384:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001386:	2330      	movs	r3, #48	@ 0x30
 8001388:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <MX_TIM5_Init+0xc0>)
 8001392:	f002 f9fc 	bl	800378e <HAL_TIM_SlaveConfigSynchro>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800139c:	f7ff fca6 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_TIM5_Init+0xc0>)
 80013ae:	f002 fdfb 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 80013b8:	f7ff fc98 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3730      	adds	r7, #48	@ 0x30
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000238 	.word	0x20000238
 80013c8:	40000c00 	.word	0x40000c00

080013cc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	463b      	mov	r3, r7
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <MX_TIM6_Init+0x64>)
 80013dc:	4a15      	ldr	r2, [pc, #84]	@ (8001434 <MX_TIM6_Init+0x68>)
 80013de:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 80013e0:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <MX_TIM6_Init+0x64>)
 80013e2:	221b      	movs	r2, #27
 80013e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_TIM6_Init+0x64>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1400;
 80013ec:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <MX_TIM6_Init+0x64>)
 80013ee:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 80013f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_TIM6_Init+0x64>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013fa:	480d      	ldr	r0, [pc, #52]	@ (8001430 <MX_TIM6_Init+0x64>)
 80013fc:	f001 fc88 	bl	8002d10 <HAL_TIM_Base_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001406:	f7ff fc71 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	@ (8001430 <MX_TIM6_Init+0x64>)
 8001418:	f002 fdc6 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001422:	f7ff fc63 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000280 	.word	0x20000280
 8001434:	40001000 	.word	0x40001000

08001438 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b096      	sub	sp, #88	@ 0x58
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2220      	movs	r2, #32
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f002 fe7b 	bl	800416c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001476:	4b3f      	ldr	r3, [pc, #252]	@ (8001574 <MX_TIM8_Init+0x13c>)
 8001478:	4a3f      	ldr	r2, [pc, #252]	@ (8001578 <MX_TIM8_Init+0x140>)
 800147a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4;
 800147c:	4b3d      	ldr	r3, [pc, #244]	@ (8001574 <MX_TIM8_Init+0x13c>)
 800147e:	2204      	movs	r2, #4
 8001480:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	4b3c      	ldr	r3, [pc, #240]	@ (8001574 <MX_TIM8_Init+0x13c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001488:	4b3a      	ldr	r3, [pc, #232]	@ (8001574 <MX_TIM8_Init+0x13c>)
 800148a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800148e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001490:	4b38      	ldr	r3, [pc, #224]	@ (8001574 <MX_TIM8_Init+0x13c>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001496:	4b37      	ldr	r3, [pc, #220]	@ (8001574 <MX_TIM8_Init+0x13c>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800149c:	4b35      	ldr	r3, [pc, #212]	@ (8001574 <MX_TIM8_Init+0x13c>)
 800149e:	2280      	movs	r2, #128	@ 0x80
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014a2:	4834      	ldr	r0, [pc, #208]	@ (8001574 <MX_TIM8_Init+0x13c>)
 80014a4:	f001 fc34 	bl	8002d10 <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80014ae:	f7ff fc1d 	bl	8000cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014b8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014bc:	4619      	mov	r1, r3
 80014be:	482d      	ldr	r0, [pc, #180]	@ (8001574 <MX_TIM8_Init+0x13c>)
 80014c0:	f002 f89e 	bl	8003600 <HAL_TIM_ConfigClockSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014ca:	f7ff fc0f 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014ce:	4829      	ldr	r0, [pc, #164]	@ (8001574 <MX_TIM8_Init+0x13c>)
 80014d0:	f001 fd05 	bl	8002ede <HAL_TIM_PWM_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80014da:	f7ff fc07 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014de:	2320      	movs	r3, #32
 80014e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80014e2:	2380      	movs	r3, #128	@ 0x80
 80014e4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014ea:	4619      	mov	r1, r3
 80014ec:	4821      	ldr	r0, [pc, #132]	@ (8001574 <MX_TIM8_Init+0x13c>)
 80014ee:	f002 fd5b 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80014f8:	f7ff fbf8 	bl	8000cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fc:	2360      	movs	r3, #96	@ 0x60
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 8001500:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800150e:	2304      	movs	r3, #4
 8001510:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151e:	2200      	movs	r2, #0
 8001520:	4619      	mov	r1, r3
 8001522:	4814      	ldr	r0, [pc, #80]	@ (8001574 <MX_TIM8_Init+0x13c>)
 8001524:	f001 ffaa 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800152e:	f7ff fbdd 	bl	8000cec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001546:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800154a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4619      	mov	r1, r3
 8001554:	4807      	ldr	r0, [pc, #28]	@ (8001574 <MX_TIM8_Init+0x13c>)
 8001556:	f002 fda3 	bl	80040a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001560:	f7ff fbc4 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001564:	4803      	ldr	r0, [pc, #12]	@ (8001574 <MX_TIM8_Init+0x13c>)
 8001566:	f000 f9ab 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 800156a:	bf00      	nop
 800156c:	3758      	adds	r7, #88	@ 0x58
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002c8 	.word	0x200002c8
 8001578:	40010400 	.word	0x40010400

0800157c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
 8001590:	615a      	str	r2, [r3, #20]
 8001592:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001594:	4b1e      	ldr	r3, [pc, #120]	@ (8001610 <MX_TIM10_Init+0x94>)
 8001596:	4a1f      	ldr	r2, [pc, #124]	@ (8001614 <MX_TIM10_Init+0x98>)
 8001598:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800159a:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <MX_TIM10_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <MX_TIM10_Init+0x94>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <MX_TIM10_Init+0x94>)
 80015a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ac:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <MX_TIM10_Init+0x94>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b4:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <MX_TIM10_Init+0x94>)
 80015b6:	2280      	movs	r2, #128	@ 0x80
 80015b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80015ba:	4815      	ldr	r0, [pc, #84]	@ (8001610 <MX_TIM10_Init+0x94>)
 80015bc:	f001 fba8 	bl	8002d10 <HAL_TIM_Base_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80015c6:	f7ff fb91 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80015ca:	4811      	ldr	r0, [pc, #68]	@ (8001610 <MX_TIM10_Init+0x94>)
 80015cc:	f001 fc87 	bl	8002ede <HAL_TIM_PWM_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80015d6:	f7ff fb89 	bl	8000cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015da:	2360      	movs	r3, #96	@ 0x60
 80015dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80015de:	2301      	movs	r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015e6:	2304      	movs	r3, #4
 80015e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	4619      	mov	r1, r3
 80015f0:	4807      	ldr	r0, [pc, #28]	@ (8001610 <MX_TIM10_Init+0x94>)
 80015f2:	f001 ff43 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80015fc:	f7ff fb76 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001600:	4803      	ldr	r0, [pc, #12]	@ (8001610 <MX_TIM10_Init+0x94>)
 8001602:	f000 f95d 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 8001606:	bf00      	nop
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000310 	.word	0x20000310
 8001614:	40014400 	.word	0x40014400

08001618 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
 800162c:	615a      	str	r2, [r3, #20]
 800162e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001630:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <MX_TIM11_Init+0x94>)
 8001632:	4a1f      	ldr	r2, [pc, #124]	@ (80016b0 <MX_TIM11_Init+0x98>)
 8001634:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001636:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <MX_TIM11_Init+0x94>)
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <MX_TIM11_Init+0x94>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <MX_TIM11_Init+0x94>)
 8001644:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001648:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164a:	4b18      	ldr	r3, [pc, #96]	@ (80016ac <MX_TIM11_Init+0x94>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001650:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <MX_TIM11_Init+0x94>)
 8001652:	2280      	movs	r2, #128	@ 0x80
 8001654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001656:	4815      	ldr	r0, [pc, #84]	@ (80016ac <MX_TIM11_Init+0x94>)
 8001658:	f001 fb5a 	bl	8002d10 <HAL_TIM_Base_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001662:	f7ff fb43 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001666:	4811      	ldr	r0, [pc, #68]	@ (80016ac <MX_TIM11_Init+0x94>)
 8001668:	f001 fc39 	bl	8002ede <HAL_TIM_PWM_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001672:	f7ff fb3b 	bl	8000cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001676:	2360      	movs	r3, #96	@ 0x60
 8001678:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 800167a:	2301      	movs	r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001682:	2304      	movs	r3, #4
 8001684:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	4807      	ldr	r0, [pc, #28]	@ (80016ac <MX_TIM11_Init+0x94>)
 800168e:	f001 fef5 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001698:	f7ff fb28 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800169c:	4803      	ldr	r0, [pc, #12]	@ (80016ac <MX_TIM11_Init+0x94>)
 800169e:	f000 f90f 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 80016a2:	bf00      	nop
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000358 	.word	0x20000358
 80016b0:	40014800 	.word	0x40014800

080016b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	@ 0x30
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a76      	ldr	r2, [pc, #472]	@ (800189c <HAL_TIM_Base_MspInit+0x1e8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d116      	bne.n	80016f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ca:	4b75      	ldr	r3, [pc, #468]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	4a74      	ldr	r2, [pc, #464]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016d6:	4b72      	ldr	r3, [pc, #456]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2101      	movs	r1, #1
 80016e6:	201b      	movs	r0, #27
 80016e8:	f000 fb61 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016ec:	201b      	movs	r0, #27
 80016ee:	f000 fb7a 	bl	8001de6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80016f2:	e0ce      	b.n	8001892 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016fc:	d116      	bne.n	800172c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001702:	4b67      	ldr	r3, [pc, #412]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	4a66      	ldr	r2, [pc, #408]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6413      	str	r3, [r2, #64]	@ 0x40
 800170e:	4b64      	ldr	r3, [pc, #400]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2101      	movs	r1, #1
 800171e:	201c      	movs	r0, #28
 8001720:	f000 fb45 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001724:	201c      	movs	r0, #28
 8001726:	f000 fb5e 	bl	8001de6 <HAL_NVIC_EnableIRQ>
}
 800172a:	e0b2      	b.n	8001892 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM3)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a5c      	ldr	r2, [pc, #368]	@ (80018a4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d10e      	bne.n	8001754 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
 800173a:	4b59      	ldr	r3, [pc, #356]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	4a58      	ldr	r2, [pc, #352]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6413      	str	r3, [r2, #64]	@ 0x40
 8001746:	4b56      	ldr	r3, [pc, #344]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001752:	e09e      	b.n	8001892 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM4)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a53      	ldr	r2, [pc, #332]	@ (80018a8 <HAL_TIM_Base_MspInit+0x1f4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d10e      	bne.n	800177c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	4b4f      	ldr	r3, [pc, #316]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	4a4e      	ldr	r2, [pc, #312]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6413      	str	r3, [r2, #64]	@ 0x40
 800176e:	4b4c      	ldr	r3, [pc, #304]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	623b      	str	r3, [r7, #32]
 8001778:	6a3b      	ldr	r3, [r7, #32]
}
 800177a:	e08a      	b.n	8001892 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM5)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a4a      	ldr	r2, [pc, #296]	@ (80018ac <HAL_TIM_Base_MspInit+0x1f8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10e      	bne.n	80017a4 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
 800178a:	4b45      	ldr	r3, [pc, #276]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	4a44      	ldr	r2, [pc, #272]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	6413      	str	r3, [r2, #64]	@ 0x40
 8001796:	4b42      	ldr	r3, [pc, #264]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	69fb      	ldr	r3, [r7, #28]
}
 80017a2:	e076      	b.n	8001892 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM6)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a41      	ldr	r2, [pc, #260]	@ (80018b0 <HAL_TIM_Base_MspInit+0x1fc>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d116      	bne.n	80017dc <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	4b3b      	ldr	r3, [pc, #236]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	4a3a      	ldr	r2, [pc, #232]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 80017b8:	f043 0310 	orr.w	r3, r3, #16
 80017bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017be:	4b38      	ldr	r3, [pc, #224]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	61bb      	str	r3, [r7, #24]
 80017c8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2036      	movs	r0, #54	@ 0x36
 80017d0:	f000 faed 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017d4:	2036      	movs	r0, #54	@ 0x36
 80017d6:	f000 fb06 	bl	8001de6 <HAL_NVIC_EnableIRQ>
}
 80017da:	e05a      	b.n	8001892 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM8)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a34      	ldr	r2, [pc, #208]	@ (80018b4 <HAL_TIM_Base_MspInit+0x200>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d12e      	bne.n	8001844 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	4b2d      	ldr	r3, [pc, #180]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	4a2c      	ldr	r2, [pc, #176]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f6:	4b2a      	ldr	r3, [pc, #168]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 1, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2101      	movs	r1, #1
 8001806:	202b      	movs	r0, #43	@ 0x2b
 8001808:	f000 fad1 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800180c:	202b      	movs	r0, #43	@ 0x2b
 800180e:	f000 faea 	bl	8001de6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2101      	movs	r1, #1
 8001816:	202c      	movs	r0, #44	@ 0x2c
 8001818:	f000 fac9 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800181c:	202c      	movs	r0, #44	@ 0x2c
 800181e:	f000 fae2 	bl	8001de6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2101      	movs	r1, #1
 8001826:	202d      	movs	r0, #45	@ 0x2d
 8001828:	f000 fac1 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800182c:	202d      	movs	r0, #45	@ 0x2d
 800182e:	f000 fada 	bl	8001de6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2101      	movs	r1, #1
 8001836:	202e      	movs	r0, #46	@ 0x2e
 8001838:	f000 fab9 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800183c:	202e      	movs	r0, #46	@ 0x2e
 800183e:	f000 fad2 	bl	8001de6 <HAL_NVIC_EnableIRQ>
}
 8001842:	e026      	b.n	8001892 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM10)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1b      	ldr	r2, [pc, #108]	@ (80018b8 <HAL_TIM_Base_MspInit+0x204>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d10e      	bne.n	800186c <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800185c:	6453      	str	r3, [r2, #68]	@ 0x44
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
}
 800186a:	e012      	b.n	8001892 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM11)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a12      	ldr	r2, [pc, #72]	@ (80018bc <HAL_TIM_Base_MspInit+0x208>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10d      	bne.n	8001892 <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	4a08      	ldr	r2, [pc, #32]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001884:	6453      	str	r3, [r2, #68]	@ 0x44
 8001886:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
}
 8001892:	bf00      	nop
 8001894:	3730      	adds	r7, #48	@ 0x30
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40010000 	.word	0x40010000
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40000400 	.word	0x40000400
 80018a8:	40000800 	.word	0x40000800
 80018ac:	40000c00 	.word	0x40000c00
 80018b0:	40001000 	.word	0x40001000
 80018b4:	40010400 	.word	0x40010400
 80018b8:	40014400 	.word	0x40014400
 80018bc:	40014800 	.word	0x40014800

080018c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	@ 0x30
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a5b      	ldr	r2, [pc, #364]	@ (8001a4c <HAL_TIM_MspPostInit+0x18c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d11f      	bne.n	8001922 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a59      	ldr	r2, [pc, #356]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b57      	ldr	r3, [pc, #348]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 80018fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001910:	2301      	movs	r3, #1
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	484e      	ldr	r0, [pc, #312]	@ (8001a54 <HAL_TIM_MspPostInit+0x194>)
 800191c:	f000 fa7e 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001920:	e090      	b.n	8001a44 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800192a:	d11e      	bne.n	800196a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	4b47      	ldr	r3, [pc, #284]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001934:	4a46      	ldr	r2, [pc, #280]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6313      	str	r3, [r2, #48]	@ 0x30
 800193c:	4b44      	ldr	r3, [pc, #272]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin;
 8001948:	2303      	movs	r3, #3
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001958:	2301      	movs	r3, #1
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	483c      	ldr	r0, [pc, #240]	@ (8001a54 <HAL_TIM_MspPostInit+0x194>)
 8001964:	f000 fa5a 	bl	8001e1c <HAL_GPIO_Init>
}
 8001968:	e06c      	b.n	8001a44 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM8)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a58 <HAL_TIM_MspPostInit+0x198>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d11e      	bne.n	80019b2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	4b35      	ldr	r3, [pc, #212]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197c:	4a34      	ldr	r2, [pc, #208]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	6313      	str	r3, [r2, #48]	@ 0x30
 8001984:	4b32      	ldr	r3, [pc, #200]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM4_Pin;
 8001990:	2340      	movs	r3, #64	@ 0x40
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80019a0:	2303      	movs	r3, #3
 80019a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM4_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	482c      	ldr	r0, [pc, #176]	@ (8001a5c <HAL_TIM_MspPostInit+0x19c>)
 80019ac:	f000 fa36 	bl	8001e1c <HAL_GPIO_Init>
}
 80019b0:	e048      	b.n	8001a44 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM10)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001a60 <HAL_TIM_MspPostInit+0x1a0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d11f      	bne.n	80019fc <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c4:	4a22      	ldr	r2, [pc, #136]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 80019c6:	f043 0302 	orr.w	r3, r3, #2
 80019ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80019cc:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_1_Pin;
 80019d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80019ea:	2303      	movs	r3, #3
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SERVO_1_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	481b      	ldr	r0, [pc, #108]	@ (8001a64 <HAL_TIM_MspPostInit+0x1a4>)
 80019f6:	f000 fa11 	bl	8001e1c <HAL_GPIO_Init>
}
 80019fa:	e023      	b.n	8001a44 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM11)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	@ (8001a68 <HAL_TIM_MspPostInit+0x1a8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d11e      	bne.n	8001a44 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a10      	ldr	r2, [pc, #64]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_TIM_MspPostInit+0x190>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8001a22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001a34:	2303      	movs	r3, #3
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4809      	ldr	r0, [pc, #36]	@ (8001a64 <HAL_TIM_MspPostInit+0x1a4>)
 8001a40:	f000 f9ec 	bl	8001e1c <HAL_GPIO_Init>
}
 8001a44:	bf00      	nop
 8001a46:	3730      	adds	r7, #48	@ 0x30
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40010400 	.word	0x40010400
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	40014400 	.word	0x40014400
 8001a64:	40020400 	.word	0x40020400
 8001a68:	40014800 	.word	0x40014800

08001a6c <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN 1 */

//emergency stop button, negative enable logic
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DISABLE_button_Pin) {
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a7c:	d118      	bne.n	8001ab0 <HAL_GPIO_EXTI_Callback+0x44>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET); //disable the servo the stepper motors
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2120      	movs	r1, #32
 8001a82:	480d      	ldr	r0, [pc, #52]	@ (8001ab8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a84:	f000 fb5e 	bl	8002144 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SERVO_en_GPIO_Port, SERVO_en_Pin, GPIO_PIN_SET); //disable the servo
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	480b      	ldr	r0, [pc, #44]	@ (8001abc <HAL_GPIO_EXTI_Callback+0x50>)
 8001a8e:	f000 fb59 	bl	8002144 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENDEFF1_en_GPIO_Port, ENDEFF1_en_Pin, GPIO_PIN_SET);
 8001a92:	2201      	movs	r2, #1
 8001a94:	2104      	movs	r1, #4
 8001a96:	4809      	ldr	r0, [pc, #36]	@ (8001abc <HAL_GPIO_EXTI_Callback+0x50>)
 8001a98:	f000 fb54 	bl	8002144 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ENDEFF2_en_GPIO_Port, ENDEFF2_en_Pin, GPIO_PIN_SET); //disable the end_eff
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001aa2:	4806      	ldr	r0, [pc, #24]	@ (8001abc <HAL_GPIO_EXTI_Callback+0x50>)
 8001aa4:	f000 fb4e 	bl	8002144 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	bf00      	nop
		__disable_irq();

		while (1) {
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <HAL_GPIO_EXTI_Callback+0x40>

		}
	}
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020400 	.word	0x40020400

08001ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ac4:	f7ff fa20 	bl	8000f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac8:	480c      	ldr	r0, [pc, #48]	@ (8001afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aca:	490d      	ldr	r1, [pc, #52]	@ (8001b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001acc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8001b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001aee:	f002 fb45 	bl	800417c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af2:	f7ff f805 	bl	8000b00 <main>
  bx  lr    
 8001af6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b00:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001b04:	080041fc 	.word	0x080041fc
  ldr r2, =_sbss
 8001b08:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001b0c:	200003a4 	.word	0x200003a4

08001b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b18:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <HAL_Init+0x40>)
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b24:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <HAL_Init+0x40>)
 8001b2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <HAL_Init+0x40>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f92b 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff f938 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f943 	bl	8001e02 <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f90b 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	@ (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000030 	.word	0x20000030
 8001bb0:	20000038 	.word	0x20000038
 8001bb4:	20000034 	.word	0x20000034

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000038 	.word	0x20000038
 8001bdc:	200003a0 	.word	0x200003a0

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	200003a0 	.word	0x200003a0

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	@ (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4907      	ldr	r1, [pc, #28]	@ (8001c94 <__NVIC_EnableIRQ+0x38>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	@ (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	@ (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	@ 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	@ 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f7ff ff8e 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff29 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff3e 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff8e 	bl	8001cec <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5d 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff31 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffa2 	bl	8001d54 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	@ 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e165      	b.n	8002104 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	f040 8154 	bne.w	80020fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d005      	beq.n	8001e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d130      	bne.n	8001ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 0201 	and.w	r2, r3, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d017      	beq.n	8001f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d123      	bne.n	8001f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	220f      	movs	r2, #15
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	08da      	lsrs	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3208      	adds	r2, #8
 8001f5a:	69b9      	ldr	r1, [r7, #24]
 8001f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0203 	and.w	r2, r3, #3
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80ae 	beq.w	80020fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800211c <HAL_GPIO_Init+0x300>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	4a5c      	ldr	r2, [pc, #368]	@ (800211c <HAL_GPIO_Init+0x300>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb2:	4b5a      	ldr	r3, [pc, #360]	@ (800211c <HAL_GPIO_Init+0x300>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fbe:	4a58      	ldr	r2, [pc, #352]	@ (8002120 <HAL_GPIO_Init+0x304>)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4f      	ldr	r2, [pc, #316]	@ (8002124 <HAL_GPIO_Init+0x308>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d025      	beq.n	8002036 <HAL_GPIO_Init+0x21a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4e      	ldr	r2, [pc, #312]	@ (8002128 <HAL_GPIO_Init+0x30c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01f      	beq.n	8002032 <HAL_GPIO_Init+0x216>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4d      	ldr	r2, [pc, #308]	@ (800212c <HAL_GPIO_Init+0x310>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x212>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4c      	ldr	r2, [pc, #304]	@ (8002130 <HAL_GPIO_Init+0x314>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x20e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4b      	ldr	r2, [pc, #300]	@ (8002134 <HAL_GPIO_Init+0x318>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x20a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4a      	ldr	r2, [pc, #296]	@ (8002138 <HAL_GPIO_Init+0x31c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x206>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a49      	ldr	r2, [pc, #292]	@ (800213c <HAL_GPIO_Init+0x320>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x202>
 800201a:	2306      	movs	r3, #6
 800201c:	e00c      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800201e:	2307      	movs	r3, #7
 8002020:	e00a      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002022:	2305      	movs	r3, #5
 8002024:	e008      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002026:	2304      	movs	r3, #4
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800202a:	2303      	movs	r3, #3
 800202c:	e004      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800202e:	2302      	movs	r3, #2
 8002030:	e002      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002036:	2300      	movs	r3, #0
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	0092      	lsls	r2, r2, #2
 8002040:	4093      	lsls	r3, r2
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002048:	4935      	ldr	r1, [pc, #212]	@ (8002120 <HAL_GPIO_Init+0x304>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002056:	4b3a      	ldr	r3, [pc, #232]	@ (8002140 <HAL_GPIO_Init+0x324>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207a:	4a31      	ldr	r2, [pc, #196]	@ (8002140 <HAL_GPIO_Init+0x324>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002080:	4b2f      	ldr	r3, [pc, #188]	@ (8002140 <HAL_GPIO_Init+0x324>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a4:	4a26      	ldr	r2, [pc, #152]	@ (8002140 <HAL_GPIO_Init+0x324>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020aa:	4b25      	ldr	r3, [pc, #148]	@ (8002140 <HAL_GPIO_Init+0x324>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002140 <HAL_GPIO_Init+0x324>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <HAL_GPIO_Init+0x324>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f8:	4a11      	ldr	r2, [pc, #68]	@ (8002140 <HAL_GPIO_Init+0x324>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	f67f ae96 	bls.w	8001e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3724      	adds	r7, #36	@ 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40013800 	.word	0x40013800
 8002124:	40020000 	.word	0x40020000
 8002128:	40020400 	.word	0x40020400
 800212c:	40020800 	.word	0x40020800
 8002130:	40020c00 	.word	0x40020c00
 8002134:	40021000 	.word	0x40021000
 8002138:	40021400 	.word	0x40021400
 800213c:	40021800 	.word	0x40021800
 8002140:	40013c00 	.word	0x40013c00

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002160:	e003      	b.n	800216a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	619a      	str	r2, [r3, #24]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002182:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d006      	beq.n	800219c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800218e:	4a05      	ldr	r2, [pc, #20]	@ (80021a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fc68 	bl	8001a6c <HAL_GPIO_EXTI_Callback>
  }
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40013c00 	.word	0x40013c00

080021a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0cc      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021bc:	4b68      	ldr	r3, [pc, #416]	@ (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d90c      	bls.n	80021e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b65      	ldr	r3, [pc, #404]	@ (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b63      	ldr	r3, [pc, #396]	@ (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0b8      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021fc:	4b59      	ldr	r3, [pc, #356]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	4a58      	ldr	r2, [pc, #352]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002206:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002214:	4b53      	ldr	r3, [pc, #332]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4a52      	ldr	r2, [pc, #328]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800221e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002220:	4b50      	ldr	r3, [pc, #320]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	494d      	ldr	r1, [pc, #308]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	4313      	orrs	r3, r2
 8002230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d044      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	4b47      	ldr	r3, [pc, #284]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d119      	bne.n	8002286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e07f      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d003      	beq.n	8002266 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002262:	2b03      	cmp	r3, #3
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002266:	4b3f      	ldr	r3, [pc, #252]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e06f      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002276:	4b3b      	ldr	r3, [pc, #236]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e067      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002286:	4b37      	ldr	r3, [pc, #220]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f023 0203 	bic.w	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4934      	ldr	r1, [pc, #208]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	4313      	orrs	r3, r2
 8002296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002298:	f7ff fca2 	bl	8001be0 <HAL_GetTick>
 800229c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a0:	f7ff fc9e 	bl	8001be0 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e04f      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 020c 	and.w	r2, r3, #12
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d1eb      	bne.n	80022a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c8:	4b25      	ldr	r3, [pc, #148]	@ (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d20c      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e032      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022fc:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4916      	ldr	r1, [pc, #88]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800231a:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	490e      	ldr	r1, [pc, #56]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800232e:	f000 f821 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 8002332:	4602      	mov	r2, r0
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	490a      	ldr	r1, [pc, #40]	@ (8002368 <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	5ccb      	ldrb	r3, [r1, r3]
 8002342:	fa22 f303 	lsr.w	r3, r2, r3
 8002346:	4a09      	ldr	r2, [pc, #36]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800234a:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fc02 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023c00 	.word	0x40023c00
 8002364:	40023800 	.word	0x40023800
 8002368:	080041dc 	.word	0x080041dc
 800236c:	20000030 	.word	0x20000030
 8002370:	20000034 	.word	0x20000034

08002374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002378:	b0ae      	sub	sp, #184	@ 0xb8
 800237a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800239a:	4bcb      	ldr	r3, [pc, #812]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	f200 8206 	bhi.w	80027b4 <HAL_RCC_GetSysClockFreq+0x440>
 80023a8:	a201      	add	r2, pc, #4	@ (adr r2, 80023b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023e5 	.word	0x080023e5
 80023b4:	080027b5 	.word	0x080027b5
 80023b8:	080027b5 	.word	0x080027b5
 80023bc:	080027b5 	.word	0x080027b5
 80023c0:	080023ed 	.word	0x080023ed
 80023c4:	080027b5 	.word	0x080027b5
 80023c8:	080027b5 	.word	0x080027b5
 80023cc:	080027b5 	.word	0x080027b5
 80023d0:	080023f5 	.word	0x080023f5
 80023d4:	080027b5 	.word	0x080027b5
 80023d8:	080027b5 	.word	0x080027b5
 80023dc:	080027b5 	.word	0x080027b5
 80023e0:	080025e5 	.word	0x080025e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e4:	4bb9      	ldr	r3, [pc, #740]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x358>)
 80023e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023ea:	e1e7      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ec:	4bb8      	ldr	r3, [pc, #736]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023f2:	e1e3      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f4:	4bb4      	ldr	r3, [pc, #720]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002400:	4bb1      	ldr	r3, [pc, #708]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d071      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240c:	4bae      	ldr	r3, [pc, #696]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	099b      	lsrs	r3, r3, #6
 8002412:	2200      	movs	r2, #0
 8002414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002418:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800241c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002424:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800242e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002432:	4622      	mov	r2, r4
 8002434:	462b      	mov	r3, r5
 8002436:	f04f 0000 	mov.w	r0, #0
 800243a:	f04f 0100 	mov.w	r1, #0
 800243e:	0159      	lsls	r1, r3, #5
 8002440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002444:	0150      	lsls	r0, r2, #5
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4621      	mov	r1, r4
 800244c:	1a51      	subs	r1, r2, r1
 800244e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002450:	4629      	mov	r1, r5
 8002452:	eb63 0301 	sbc.w	r3, r3, r1
 8002456:	647b      	str	r3, [r7, #68]	@ 0x44
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002464:	4649      	mov	r1, r9
 8002466:	018b      	lsls	r3, r1, #6
 8002468:	4641      	mov	r1, r8
 800246a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800246e:	4641      	mov	r1, r8
 8002470:	018a      	lsls	r2, r1, #6
 8002472:	4641      	mov	r1, r8
 8002474:	1a51      	subs	r1, r2, r1
 8002476:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002478:	4649      	mov	r1, r9
 800247a:	eb63 0301 	sbc.w	r3, r3, r1
 800247e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800248c:	4649      	mov	r1, r9
 800248e:	00cb      	lsls	r3, r1, #3
 8002490:	4641      	mov	r1, r8
 8002492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002496:	4641      	mov	r1, r8
 8002498:	00ca      	lsls	r2, r1, #3
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	4603      	mov	r3, r0
 80024a0:	4622      	mov	r2, r4
 80024a2:	189b      	adds	r3, r3, r2
 80024a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80024a6:	462b      	mov	r3, r5
 80024a8:	460a      	mov	r2, r1
 80024aa:	eb42 0303 	adc.w	r3, r2, r3
 80024ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024bc:	4629      	mov	r1, r5
 80024be:	024b      	lsls	r3, r1, #9
 80024c0:	4621      	mov	r1, r4
 80024c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024c6:	4621      	mov	r1, r4
 80024c8:	024a      	lsls	r2, r1, #9
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024d2:	2200      	movs	r2, #0
 80024d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80024d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80024dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80024e0:	f7fd fe90 	bl	8000204 <__aeabi_uldivmod>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4613      	mov	r3, r2
 80024ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024ee:	e067      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f0:	4b75      	ldr	r3, [pc, #468]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	099b      	lsrs	r3, r3, #6
 80024f6:	2200      	movs	r2, #0
 80024f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002500:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002508:	67bb      	str	r3, [r7, #120]	@ 0x78
 800250a:	2300      	movs	r3, #0
 800250c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800250e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002512:	4622      	mov	r2, r4
 8002514:	462b      	mov	r3, r5
 8002516:	f04f 0000 	mov.w	r0, #0
 800251a:	f04f 0100 	mov.w	r1, #0
 800251e:	0159      	lsls	r1, r3, #5
 8002520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002524:	0150      	lsls	r0, r2, #5
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4621      	mov	r1, r4
 800252c:	1a51      	subs	r1, r2, r1
 800252e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002530:	4629      	mov	r1, r5
 8002532:	eb63 0301 	sbc.w	r3, r3, r1
 8002536:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002544:	4649      	mov	r1, r9
 8002546:	018b      	lsls	r3, r1, #6
 8002548:	4641      	mov	r1, r8
 800254a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800254e:	4641      	mov	r1, r8
 8002550:	018a      	lsls	r2, r1, #6
 8002552:	4641      	mov	r1, r8
 8002554:	ebb2 0a01 	subs.w	sl, r2, r1
 8002558:	4649      	mov	r1, r9
 800255a:	eb63 0b01 	sbc.w	fp, r3, r1
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800256a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800256e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002572:	4692      	mov	sl, r2
 8002574:	469b      	mov	fp, r3
 8002576:	4623      	mov	r3, r4
 8002578:	eb1a 0303 	adds.w	r3, sl, r3
 800257c:	623b      	str	r3, [r7, #32]
 800257e:	462b      	mov	r3, r5
 8002580:	eb4b 0303 	adc.w	r3, fp, r3
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002592:	4629      	mov	r1, r5
 8002594:	028b      	lsls	r3, r1, #10
 8002596:	4621      	mov	r1, r4
 8002598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800259c:	4621      	mov	r1, r4
 800259e:	028a      	lsls	r2, r1, #10
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025a8:	2200      	movs	r2, #0
 80025aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80025ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80025ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80025b2:	f7fd fe27 	bl	8000204 <__aeabi_uldivmod>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4613      	mov	r3, r2
 80025bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025c0:	4b41      	ldr	r3, [pc, #260]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	0c1b      	lsrs	r3, r3, #16
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	3301      	adds	r3, #1
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80025d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80025d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025e2:	e0eb      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e4:	4b38      	ldr	r3, [pc, #224]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025f0:	4b35      	ldr	r3, [pc, #212]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d06b      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025fc:	4b32      	ldr	r3, [pc, #200]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	2200      	movs	r2, #0
 8002604:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002606:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002608:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800260a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002610:	2300      	movs	r3, #0
 8002612:	667b      	str	r3, [r7, #100]	@ 0x64
 8002614:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002618:	4622      	mov	r2, r4
 800261a:	462b      	mov	r3, r5
 800261c:	f04f 0000 	mov.w	r0, #0
 8002620:	f04f 0100 	mov.w	r1, #0
 8002624:	0159      	lsls	r1, r3, #5
 8002626:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800262a:	0150      	lsls	r0, r2, #5
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4621      	mov	r1, r4
 8002632:	1a51      	subs	r1, r2, r1
 8002634:	61b9      	str	r1, [r7, #24]
 8002636:	4629      	mov	r1, r5
 8002638:	eb63 0301 	sbc.w	r3, r3, r1
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800264a:	4659      	mov	r1, fp
 800264c:	018b      	lsls	r3, r1, #6
 800264e:	4651      	mov	r1, sl
 8002650:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002654:	4651      	mov	r1, sl
 8002656:	018a      	lsls	r2, r1, #6
 8002658:	4651      	mov	r1, sl
 800265a:	ebb2 0801 	subs.w	r8, r2, r1
 800265e:	4659      	mov	r1, fp
 8002660:	eb63 0901 	sbc.w	r9, r3, r1
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002670:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002674:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002678:	4690      	mov	r8, r2
 800267a:	4699      	mov	r9, r3
 800267c:	4623      	mov	r3, r4
 800267e:	eb18 0303 	adds.w	r3, r8, r3
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	462b      	mov	r3, r5
 8002686:	eb49 0303 	adc.w	r3, r9, r3
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002698:	4629      	mov	r1, r5
 800269a:	024b      	lsls	r3, r1, #9
 800269c:	4621      	mov	r1, r4
 800269e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026a2:	4621      	mov	r1, r4
 80026a4:	024a      	lsls	r2, r1, #9
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026ae:	2200      	movs	r2, #0
 80026b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026b8:	f7fd fda4 	bl	8000204 <__aeabi_uldivmod>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4613      	mov	r3, r2
 80026c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026c6:	e065      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x420>
 80026c8:	40023800 	.word	0x40023800
 80026cc:	00f42400 	.word	0x00f42400
 80026d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d4:	4b3d      	ldr	r3, [pc, #244]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x458>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	2200      	movs	r2, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	4611      	mov	r1, r2
 80026e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80026e6:	2300      	movs	r3, #0
 80026e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80026ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80026ee:	4642      	mov	r2, r8
 80026f0:	464b      	mov	r3, r9
 80026f2:	f04f 0000 	mov.w	r0, #0
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	0159      	lsls	r1, r3, #5
 80026fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002700:	0150      	lsls	r0, r2, #5
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4641      	mov	r1, r8
 8002708:	1a51      	subs	r1, r2, r1
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	4649      	mov	r1, r9
 800270e:	eb63 0301 	sbc.w	r3, r3, r1
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002720:	4659      	mov	r1, fp
 8002722:	018b      	lsls	r3, r1, #6
 8002724:	4651      	mov	r1, sl
 8002726:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800272a:	4651      	mov	r1, sl
 800272c:	018a      	lsls	r2, r1, #6
 800272e:	4651      	mov	r1, sl
 8002730:	1a54      	subs	r4, r2, r1
 8002732:	4659      	mov	r1, fp
 8002734:	eb63 0501 	sbc.w	r5, r3, r1
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	00eb      	lsls	r3, r5, #3
 8002742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002746:	00e2      	lsls	r2, r4, #3
 8002748:	4614      	mov	r4, r2
 800274a:	461d      	mov	r5, r3
 800274c:	4643      	mov	r3, r8
 800274e:	18e3      	adds	r3, r4, r3
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	464b      	mov	r3, r9
 8002754:	eb45 0303 	adc.w	r3, r5, r3
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002766:	4629      	mov	r1, r5
 8002768:	028b      	lsls	r3, r1, #10
 800276a:	4621      	mov	r1, r4
 800276c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002770:	4621      	mov	r1, r4
 8002772:	028a      	lsls	r2, r1, #10
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800277c:	2200      	movs	r2, #0
 800277e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002780:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002782:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002786:	f7fd fd3d 	bl	8000204 <__aeabi_uldivmod>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4613      	mov	r3, r2
 8002790:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002794:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x458>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	0f1b      	lsrs	r3, r3, #28
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80027a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027b2:	e003      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80027b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	37b8      	adds	r7, #184	@ 0xb8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	00f42400 	.word	0x00f42400

080027d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e28d      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8083 	beq.w	80028fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027f4:	4b94      	ldr	r3, [pc, #592]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d019      	beq.n	8002834 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002800:	4b91      	ldr	r3, [pc, #580]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
        || \
 8002808:	2b08      	cmp	r3, #8
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800280c:	4b8e      	ldr	r3, [pc, #568]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002814:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002818:	d00c      	beq.n	8002834 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d112      	bne.n	800284c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002826:	4b88      	ldr	r3, [pc, #544]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800282e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002832:	d10b      	bne.n	800284c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	4b84      	ldr	r3, [pc, #528]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d05b      	beq.n	80028f8 <HAL_RCC_OscConfig+0x124>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d157      	bne.n	80028f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e25a      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002854:	d106      	bne.n	8002864 <HAL_RCC_OscConfig+0x90>
 8002856:	4b7c      	ldr	r3, [pc, #496]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a7b      	ldr	r2, [pc, #492]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e01d      	b.n	80028a0 <HAL_RCC_OscConfig+0xcc>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0xb4>
 800286e:	4b76      	ldr	r3, [pc, #472]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a75      	ldr	r2, [pc, #468]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b73      	ldr	r3, [pc, #460]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a72      	ldr	r2, [pc, #456]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e00b      	b.n	80028a0 <HAL_RCC_OscConfig+0xcc>
 8002888:	4b6f      	ldr	r3, [pc, #444]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 800288e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b6c      	ldr	r3, [pc, #432]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a6b      	ldr	r2, [pc, #428]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 800289a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800289e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7ff f99a 	bl	8001be0 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b0:	f7ff f996 	bl	8001be0 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	@ 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e21f      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b61      	ldr	r3, [pc, #388]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0xdc>
 80028ce:	e014      	b.n	80028fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7ff f986 	bl	8001be0 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d8:	f7ff f982 	bl	8001be0 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	@ 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e20b      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	4b57      	ldr	r3, [pc, #348]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x104>
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d06f      	beq.n	80029e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002906:	4b50      	ldr	r3, [pc, #320]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b00      	cmp	r3, #0
 8002910:	d017      	beq.n	8002942 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002912:	4b4d      	ldr	r3, [pc, #308]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
        || \
 800291a:	2b08      	cmp	r3, #8
 800291c:	d105      	bne.n	800292a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800291e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292a:	4b47      	ldr	r3, [pc, #284]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d11c      	bne.n	8002970 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002936:	4b44      	ldr	r3, [pc, #272]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d116      	bne.n	8002970 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	4b41      	ldr	r3, [pc, #260]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_RCC_OscConfig+0x186>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e1d3      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4937      	ldr	r1, [pc, #220]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296e:	e03a      	b.n	80029e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002978:	4b34      	ldr	r3, [pc, #208]	@ (8002a4c <HAL_RCC_OscConfig+0x278>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7ff f92f 	bl	8001be0 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002986:	f7ff f92b 	bl	8001be0 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e1b4      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002998:	4b2b      	ldr	r3, [pc, #172]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b28      	ldr	r3, [pc, #160]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4925      	ldr	r1, [pc, #148]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
 80029b8:	e015      	b.n	80029e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ba:	4b24      	ldr	r3, [pc, #144]	@ (8002a4c <HAL_RCC_OscConfig+0x278>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7ff f90e 	bl	8001be0 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c8:	f7ff f90a 	bl	8001be0 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e193      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d036      	beq.n	8002a60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d016      	beq.n	8002a28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fa:	4b15      	ldr	r3, [pc, #84]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7ff f8ee 	bl	8001be0 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a08:	f7ff f8ea 	bl	8001be0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e173      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x234>
 8002a26:	e01b      	b.n	8002a60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a28:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2e:	f7ff f8d7 	bl	8001be0 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	e00e      	b.n	8002a54 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a36:	f7ff f8d3 	bl	8001be0 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d907      	bls.n	8002a54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e15c      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	42470000 	.word	0x42470000
 8002a50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	4b8a      	ldr	r3, [pc, #552]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1ea      	bne.n	8002a36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8097 	beq.w	8002b9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a72:	4b83      	ldr	r3, [pc, #524]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10f      	bne.n	8002a9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	4b7f      	ldr	r3, [pc, #508]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	4a7e      	ldr	r2, [pc, #504]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a8e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b79      	ldr	r3, [pc, #484]	@ (8002c84 <HAL_RCC_OscConfig+0x4b0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d118      	bne.n	8002adc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aaa:	4b76      	ldr	r3, [pc, #472]	@ (8002c84 <HAL_RCC_OscConfig+0x4b0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a75      	ldr	r2, [pc, #468]	@ (8002c84 <HAL_RCC_OscConfig+0x4b0>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab6:	f7ff f893 	bl	8001be0 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7ff f88f 	bl	8001be0 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e118      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8002c84 <HAL_RCC_OscConfig+0x4b0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x31e>
 8002ae4:	4b66      	ldr	r3, [pc, #408]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae8:	4a65      	ldr	r2, [pc, #404]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af0:	e01c      	b.n	8002b2c <HAL_RCC_OscConfig+0x358>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x340>
 8002afa:	4b61      	ldr	r3, [pc, #388]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afe:	4a60      	ldr	r2, [pc, #384]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b06:	4b5e      	ldr	r3, [pc, #376]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0a:	4a5d      	ldr	r2, [pc, #372]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0x358>
 8002b14:	4b5a      	ldr	r3, [pc, #360]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b18:	4a59      	ldr	r2, [pc, #356]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b20:	4b57      	ldr	r3, [pc, #348]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b24:	4a56      	ldr	r2, [pc, #344]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002b26:	f023 0304 	bic.w	r3, r3, #4
 8002b2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7ff f854 	bl	8001be0 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7ff f850 	bl	8001be0 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0d7      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	4b4b      	ldr	r3, [pc, #300]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ee      	beq.n	8002b3c <HAL_RCC_OscConfig+0x368>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7ff f83e 	bl	8001be0 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7ff f83a 	bl	8001be0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0c1      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7e:	4b40      	ldr	r3, [pc, #256]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ee      	bne.n	8002b68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4b3b      	ldr	r3, [pc, #236]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	4a3a      	ldr	r2, [pc, #232]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80ad 	beq.w	8002d00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ba6:	4b36      	ldr	r3, [pc, #216]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d060      	beq.n	8002c74 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d145      	bne.n	8002c46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b33      	ldr	r3, [pc, #204]	@ (8002c88 <HAL_RCC_OscConfig+0x4b4>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7ff f80e 	bl	8001be0 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7ff f80a 	bl	8001be0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e093      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	4b29      	ldr	r3, [pc, #164]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	019b      	lsls	r3, r3, #6
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	041b      	lsls	r3, r3, #16
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	071b      	lsls	r3, r3, #28
 8002c12:	491b      	ldr	r1, [pc, #108]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c18:	4b1b      	ldr	r3, [pc, #108]	@ (8002c88 <HAL_RCC_OscConfig+0x4b4>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7fe ffdf 	bl	8001be0 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c26:	f7fe ffdb 	bl	8001be0 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e064      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c38:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x452>
 8002c44:	e05c      	b.n	8002d00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c46:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <HAL_RCC_OscConfig+0x4b4>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe ffc8 	bl	8001be0 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fe ffc4 	bl	8001be0 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e04d      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <HAL_RCC_OscConfig+0x4ac>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x480>
 8002c72:	e045      	b.n	8002d00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d107      	bne.n	8002c8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e040      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40007000 	.word	0x40007000
 8002c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002d0c <HAL_RCC_OscConfig+0x538>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d030      	beq.n	8002cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d129      	bne.n	8002cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d122      	bne.n	8002cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d119      	bne.n	8002cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd2:	085b      	lsrs	r3, r3, #1
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d10f      	bne.n	8002cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800

08002d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e041      	b.n	8002da6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe fcbc 	bl	80016b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 fd7e 	bl	8003850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d001      	beq.n	8002dc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e046      	b.n	8002e56 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a23      	ldr	r2, [pc, #140]	@ (8002e64 <HAL_TIM_Base_Start+0xb4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d022      	beq.n	8002e20 <HAL_TIM_Base_Start+0x70>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002de2:	d01d      	beq.n	8002e20 <HAL_TIM_Base_Start+0x70>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e68 <HAL_TIM_Base_Start+0xb8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d018      	beq.n	8002e20 <HAL_TIM_Base_Start+0x70>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e6c <HAL_TIM_Base_Start+0xbc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d013      	beq.n	8002e20 <HAL_TIM_Base_Start+0x70>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e70 <HAL_TIM_Base_Start+0xc0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00e      	beq.n	8002e20 <HAL_TIM_Base_Start+0x70>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1b      	ldr	r2, [pc, #108]	@ (8002e74 <HAL_TIM_Base_Start+0xc4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d009      	beq.n	8002e20 <HAL_TIM_Base_Start+0x70>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a19      	ldr	r2, [pc, #100]	@ (8002e78 <HAL_TIM_Base_Start+0xc8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_TIM_Base_Start+0x70>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a18      	ldr	r2, [pc, #96]	@ (8002e7c <HAL_TIM_Base_Start+0xcc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d111      	bne.n	8002e44 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d010      	beq.n	8002e54 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e42:	e007      	b.n	8002e54 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40000800 	.word	0x40000800
 8002e70:	40000c00 	.word	0x40000c00
 8002e74:	40010400 	.word	0x40010400
 8002e78:	40014000 	.word	0x40014000
 8002e7c:	40001800 	.word	0x40001800

08002e80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0201 	bic.w	r2, r2, #1
 8002e96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6a1a      	ldr	r2, [r3, #32]
 8002e9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10f      	bne.n	8002ec8 <HAL_TIM_Base_Stop_IT+0x48>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	f240 4344 	movw	r3, #1092	@ 0x444
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d107      	bne.n	8002ec8 <HAL_TIM_Base_Stop_IT+0x48>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e041      	b.n	8002f74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d106      	bne.n	8002f0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f839 	bl	8002f7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f000 fc97 	bl	8003850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <HAL_TIM_PWM_Start+0x24>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	e022      	b.n	8002ffa <HAL_TIM_PWM_Start+0x6a>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d109      	bne.n	8002fce <HAL_TIM_PWM_Start+0x3e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	bf14      	ite	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	2300      	moveq	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	e015      	b.n	8002ffa <HAL_TIM_PWM_Start+0x6a>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d109      	bne.n	8002fe8 <HAL_TIM_PWM_Start+0x58>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e008      	b.n	8002ffa <HAL_TIM_PWM_Start+0x6a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	bf14      	ite	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2300      	moveq	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e07c      	b.n	80030fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d104      	bne.n	8003012 <HAL_TIM_PWM_Start+0x82>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003010:	e013      	b.n	800303a <HAL_TIM_PWM_Start+0xaa>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b04      	cmp	r3, #4
 8003016:	d104      	bne.n	8003022 <HAL_TIM_PWM_Start+0x92>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003020:	e00b      	b.n	800303a <HAL_TIM_PWM_Start+0xaa>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d104      	bne.n	8003032 <HAL_TIM_PWM_Start+0xa2>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003030:	e003      	b.n	800303a <HAL_TIM_PWM_Start+0xaa>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2202      	movs	r2, #2
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2201      	movs	r2, #1
 8003040:	6839      	ldr	r1, [r7, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f000 ff8b 	bl	8003f5e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a2d      	ldr	r2, [pc, #180]	@ (8003104 <HAL_TIM_PWM_Start+0x174>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d004      	beq.n	800305c <HAL_TIM_PWM_Start+0xcc>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2c      	ldr	r2, [pc, #176]	@ (8003108 <HAL_TIM_PWM_Start+0x178>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d101      	bne.n	8003060 <HAL_TIM_PWM_Start+0xd0>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_TIM_PWM_Start+0xd2>
 8003060:	2300      	movs	r3, #0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003074:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a22      	ldr	r2, [pc, #136]	@ (8003104 <HAL_TIM_PWM_Start+0x174>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d022      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x136>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003088:	d01d      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x136>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1f      	ldr	r2, [pc, #124]	@ (800310c <HAL_TIM_PWM_Start+0x17c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d018      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x136>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1d      	ldr	r2, [pc, #116]	@ (8003110 <HAL_TIM_PWM_Start+0x180>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d013      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x136>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003114 <HAL_TIM_PWM_Start+0x184>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00e      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x136>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a16      	ldr	r2, [pc, #88]	@ (8003108 <HAL_TIM_PWM_Start+0x178>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d009      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x136>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a18      	ldr	r2, [pc, #96]	@ (8003118 <HAL_TIM_PWM_Start+0x188>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x136>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a16      	ldr	r2, [pc, #88]	@ (800311c <HAL_TIM_PWM_Start+0x18c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d111      	bne.n	80030ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b06      	cmp	r3, #6
 80030d6:	d010      	beq.n	80030fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e8:	e007      	b.n	80030fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40010000 	.word	0x40010000
 8003108:	40010400 	.word	0x40010400
 800310c:	40000400 	.word	0x40000400
 8003110:	40000800 	.word	0x40000800
 8003114:	40000c00 	.word	0x40000c00
 8003118:	40014000 	.word	0x40014000
 800311c:	40001800 	.word	0x40001800

08003120 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d841      	bhi.n	80031b8 <HAL_TIM_PWM_Stop_IT+0x98>
 8003134:	a201      	add	r2, pc, #4	@ (adr r2, 800313c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	08003171 	.word	0x08003171
 8003140:	080031b9 	.word	0x080031b9
 8003144:	080031b9 	.word	0x080031b9
 8003148:	080031b9 	.word	0x080031b9
 800314c:	08003183 	.word	0x08003183
 8003150:	080031b9 	.word	0x080031b9
 8003154:	080031b9 	.word	0x080031b9
 8003158:	080031b9 	.word	0x080031b9
 800315c:	08003195 	.word	0x08003195
 8003160:	080031b9 	.word	0x080031b9
 8003164:	080031b9 	.word	0x080031b9
 8003168:	080031b9 	.word	0x080031b9
 800316c:	080031a7 	.word	0x080031a7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0202 	bic.w	r2, r2, #2
 800317e:	60da      	str	r2, [r3, #12]
      break;
 8003180:	e01d      	b.n	80031be <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0204 	bic.w	r2, r2, #4
 8003190:	60da      	str	r2, [r3, #12]
      break;
 8003192:	e014      	b.n	80031be <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0208 	bic.w	r2, r2, #8
 80031a2:	60da      	str	r2, [r3, #12]
      break;
 80031a4:	e00b      	b.n	80031be <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0210 	bic.w	r2, r2, #16
 80031b4:	60da      	str	r2, [r3, #12]
      break;
 80031b6:	e002      	b.n	80031be <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
      break;
 80031bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d161      	bne.n	8003288 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2200      	movs	r2, #0
 80031ca:	6839      	ldr	r1, [r7, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fec6 	bl	8003f5e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2f      	ldr	r2, [pc, #188]	@ (8003294 <HAL_TIM_PWM_Stop_IT+0x174>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d004      	beq.n	80031e6 <HAL_TIM_PWM_Stop_IT+0xc6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a2d      	ldr	r2, [pc, #180]	@ (8003298 <HAL_TIM_PWM_Stop_IT+0x178>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_TIM_PWM_Stop_IT+0xca>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_TIM_PWM_Stop_IT+0xcc>
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d017      	beq.n	8003220 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6a1a      	ldr	r2, [r3, #32]
 80031f6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10f      	bne.n	8003220 <HAL_TIM_PWM_Stop_IT+0x100>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6a1a      	ldr	r2, [r3, #32]
 8003206:	f240 4344 	movw	r3, #1092	@ 0x444
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d107      	bne.n	8003220 <HAL_TIM_PWM_Stop_IT+0x100>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800321e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a1a      	ldr	r2, [r3, #32]
 8003226:	f241 1311 	movw	r3, #4369	@ 0x1111
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10f      	bne.n	8003250 <HAL_TIM_PWM_Stop_IT+0x130>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6a1a      	ldr	r2, [r3, #32]
 8003236:	f240 4344 	movw	r3, #1092	@ 0x444
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d107      	bne.n	8003250 <HAL_TIM_PWM_Stop_IT+0x130>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d104      	bne.n	8003260 <HAL_TIM_PWM_Stop_IT+0x140>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800325e:	e013      	b.n	8003288 <HAL_TIM_PWM_Stop_IT+0x168>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b04      	cmp	r3, #4
 8003264:	d104      	bne.n	8003270 <HAL_TIM_PWM_Stop_IT+0x150>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800326e:	e00b      	b.n	8003288 <HAL_TIM_PWM_Stop_IT+0x168>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b08      	cmp	r3, #8
 8003274:	d104      	bne.n	8003280 <HAL_TIM_PWM_Stop_IT+0x160>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800327e:	e003      	b.n	8003288 <HAL_TIM_PWM_Stop_IT+0x168>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003288:	7bfb      	ldrb	r3, [r7, #15]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40010000 	.word	0x40010000
 8003298:	40010400 	.word	0x40010400

0800329c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d020      	beq.n	8003300 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01b      	beq.n	8003300 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0202 	mvn.w	r2, #2
 80032d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fa9d 	bl	8003826 <HAL_TIM_IC_CaptureCallback>
 80032ec:	e005      	b.n	80032fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fa8f 	bl	8003812 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7fd fbb5 	bl	8000a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	d020      	beq.n	800334c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01b      	beq.n	800334c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0204 	mvn.w	r2, #4
 800331c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fa77 	bl	8003826 <HAL_TIM_IC_CaptureCallback>
 8003338:	e005      	b.n	8003346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fa69 	bl	8003812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7fd fb8f 	bl	8000a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d020      	beq.n	8003398 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0208 	mvn.w	r2, #8
 8003368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2204      	movs	r2, #4
 800336e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fa51 	bl	8003826 <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fa43 	bl	8003812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7fd fb69 	bl	8000a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d020      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01b      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0210 	mvn.w	r2, #16
 80033b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2208      	movs	r2, #8
 80033ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fa2b 	bl	8003826 <HAL_TIM_IC_CaptureCallback>
 80033d0:	e005      	b.n	80033de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fa1d 	bl	8003812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7fd fb43 	bl	8000a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0201 	mvn.w	r2, #1
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fd fb06 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00c      	beq.n	800342c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fe96 	bl	8004158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f9f5 	bl	800383a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00c      	beq.n	8003474 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0220 	mvn.w	r2, #32
 800346c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fe68 	bl	8004144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003474:	bf00      	nop
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003496:	2302      	movs	r3, #2
 8003498:	e0ae      	b.n	80035f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	f200 809f 	bhi.w	80035e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034aa:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034e5 	.word	0x080034e5
 80034b4:	080035e9 	.word	0x080035e9
 80034b8:	080035e9 	.word	0x080035e9
 80034bc:	080035e9 	.word	0x080035e9
 80034c0:	08003525 	.word	0x08003525
 80034c4:	080035e9 	.word	0x080035e9
 80034c8:	080035e9 	.word	0x080035e9
 80034cc:	080035e9 	.word	0x080035e9
 80034d0:	08003567 	.word	0x08003567
 80034d4:	080035e9 	.word	0x080035e9
 80034d8:	080035e9 	.word	0x080035e9
 80034dc:	080035e9 	.word	0x080035e9
 80034e0:	080035a7 	.word	0x080035a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fa5c 	bl	80039a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0208 	orr.w	r2, r2, #8
 80034fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0204 	bic.w	r2, r2, #4
 800350e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6999      	ldr	r1, [r3, #24]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	619a      	str	r2, [r3, #24]
      break;
 8003522:	e064      	b.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	4618      	mov	r0, r3
 800352c:	f000 faac 	bl	8003a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800353e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800354e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6999      	ldr	r1, [r3, #24]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	021a      	lsls	r2, r3, #8
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	619a      	str	r2, [r3, #24]
      break;
 8003564:	e043      	b.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fb01 	bl	8003b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0208 	orr.w	r2, r2, #8
 8003580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0204 	bic.w	r2, r2, #4
 8003590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69d9      	ldr	r1, [r3, #28]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	61da      	str	r2, [r3, #28]
      break;
 80035a4:	e023      	b.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fb55 	bl	8003c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69d9      	ldr	r1, [r3, #28]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	021a      	lsls	r2, r3, #8
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	61da      	str	r2, [r3, #28]
      break;
 80035e6:	e002      	b.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	75fb      	strb	r3, [r7, #23]
      break;
 80035ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_TIM_ConfigClockSource+0x1c>
 8003618:	2302      	movs	r3, #2
 800361a:	e0b4      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x186>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800363a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003642:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003654:	d03e      	beq.n	80036d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800365a:	f200 8087 	bhi.w	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800365e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003662:	f000 8086 	beq.w	8003772 <HAL_TIM_ConfigClockSource+0x172>
 8003666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800366a:	d87f      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800366c:	2b70      	cmp	r3, #112	@ 0x70
 800366e:	d01a      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003670:	2b70      	cmp	r3, #112	@ 0x70
 8003672:	d87b      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 8003674:	2b60      	cmp	r3, #96	@ 0x60
 8003676:	d050      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x11a>
 8003678:	2b60      	cmp	r3, #96	@ 0x60
 800367a:	d877      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b50      	cmp	r3, #80	@ 0x50
 800367e:	d03c      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0xfa>
 8003680:	2b50      	cmp	r3, #80	@ 0x50
 8003682:	d873      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 8003684:	2b40      	cmp	r3, #64	@ 0x40
 8003686:	d058      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x13a>
 8003688:	2b40      	cmp	r3, #64	@ 0x40
 800368a:	d86f      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	2b30      	cmp	r3, #48	@ 0x30
 800368e:	d064      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 8003690:	2b30      	cmp	r3, #48	@ 0x30
 8003692:	d86b      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 8003694:	2b20      	cmp	r3, #32
 8003696:	d060      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 8003698:	2b20      	cmp	r3, #32
 800369a:	d867      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d05c      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d05a      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 80036a4:	e062      	b.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036b6:	f000 fc32 	bl	8003f1e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	609a      	str	r2, [r3, #8]
      break;
 80036d2:	e04f      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036e4:	f000 fc1b 	bl	8003f1e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036f6:	609a      	str	r2, [r3, #8]
      break;
 80036f8:	e03c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003706:	461a      	mov	r2, r3
 8003708:	f000 fb8f 	bl	8003e2a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2150      	movs	r1, #80	@ 0x50
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fbe8 	bl	8003ee8 <TIM_ITRx_SetConfig>
      break;
 8003718:	e02c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003726:	461a      	mov	r2, r3
 8003728:	f000 fbae 	bl	8003e88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2160      	movs	r1, #96	@ 0x60
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fbd8 	bl	8003ee8 <TIM_ITRx_SetConfig>
      break;
 8003738:	e01c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003746:	461a      	mov	r2, r3
 8003748:	f000 fb6f 	bl	8003e2a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2140      	movs	r1, #64	@ 0x40
 8003752:	4618      	mov	r0, r3
 8003754:	f000 fbc8 	bl	8003ee8 <TIM_ITRx_SetConfig>
      break;
 8003758:	e00c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f000 fbbf 	bl	8003ee8 <TIM_ITRx_SetConfig>
      break;
 800376a:	e003      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      break;
 8003770:	e000      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e031      	b.n	800380a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 faa5 	bl	8003d08 <TIM_SlaveTimer_SetConfig>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e018      	b.n	800380a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037e6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037f6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a46      	ldr	r2, [pc, #280]	@ (800397c <TIM_Base_SetConfig+0x12c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d013      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800386e:	d00f      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a43      	ldr	r2, [pc, #268]	@ (8003980 <TIM_Base_SetConfig+0x130>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00b      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a42      	ldr	r2, [pc, #264]	@ (8003984 <TIM_Base_SetConfig+0x134>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d007      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a41      	ldr	r2, [pc, #260]	@ (8003988 <TIM_Base_SetConfig+0x138>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a40      	ldr	r2, [pc, #256]	@ (800398c <TIM_Base_SetConfig+0x13c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d108      	bne.n	80038a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a35      	ldr	r2, [pc, #212]	@ (800397c <TIM_Base_SetConfig+0x12c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d02b      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b0:	d027      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a32      	ldr	r2, [pc, #200]	@ (8003980 <TIM_Base_SetConfig+0x130>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d023      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a31      	ldr	r2, [pc, #196]	@ (8003984 <TIM_Base_SetConfig+0x134>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01f      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a30      	ldr	r2, [pc, #192]	@ (8003988 <TIM_Base_SetConfig+0x138>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01b      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2f      	ldr	r2, [pc, #188]	@ (800398c <TIM_Base_SetConfig+0x13c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d017      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003990 <TIM_Base_SetConfig+0x140>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003994 <TIM_Base_SetConfig+0x144>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00f      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003998 <TIM_Base_SetConfig+0x148>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00b      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2b      	ldr	r2, [pc, #172]	@ (800399c <TIM_Base_SetConfig+0x14c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d007      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a2a      	ldr	r2, [pc, #168]	@ (80039a0 <TIM_Base_SetConfig+0x150>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d003      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a29      	ldr	r2, [pc, #164]	@ (80039a4 <TIM_Base_SetConfig+0x154>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d108      	bne.n	8003914 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a10      	ldr	r2, [pc, #64]	@ (800397c <TIM_Base_SetConfig+0x12c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d003      	beq.n	8003948 <TIM_Base_SetConfig+0xf8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a12      	ldr	r2, [pc, #72]	@ (800398c <TIM_Base_SetConfig+0x13c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d103      	bne.n	8003950 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d105      	bne.n	800396e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f023 0201 	bic.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	611a      	str	r2, [r3, #16]
  }
}
 800396e:	bf00      	nop
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40010000 	.word	0x40010000
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800
 8003988:	40000c00 	.word	0x40000c00
 800398c:	40010400 	.word	0x40010400
 8003990:	40014000 	.word	0x40014000
 8003994:	40014400 	.word	0x40014400
 8003998:	40014800 	.word	0x40014800
 800399c:	40001800 	.word	0x40001800
 80039a0:	40001c00 	.word	0x40001c00
 80039a4:	40002000 	.word	0x40002000

080039a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f023 0201 	bic.w	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0303 	bic.w	r3, r3, #3
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f023 0302 	bic.w	r3, r3, #2
 80039f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a20      	ldr	r2, [pc, #128]	@ (8003a80 <TIM_OC1_SetConfig+0xd8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d003      	beq.n	8003a0c <TIM_OC1_SetConfig+0x64>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a1f      	ldr	r2, [pc, #124]	@ (8003a84 <TIM_OC1_SetConfig+0xdc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d10c      	bne.n	8003a26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f023 0308 	bic.w	r3, r3, #8
 8003a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a15      	ldr	r2, [pc, #84]	@ (8003a80 <TIM_OC1_SetConfig+0xd8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d003      	beq.n	8003a36 <TIM_OC1_SetConfig+0x8e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a14      	ldr	r2, [pc, #80]	@ (8003a84 <TIM_OC1_SetConfig+0xdc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d111      	bne.n	8003a5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	621a      	str	r2, [r3, #32]
}
 8003a74:	bf00      	nop
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	40010000 	.word	0x40010000
 8003a84:	40010400 	.word	0x40010400

08003a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f023 0210 	bic.w	r2, r3, #16
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f023 0320 	bic.w	r3, r3, #32
 8003ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a22      	ldr	r2, [pc, #136]	@ (8003b6c <TIM_OC2_SetConfig+0xe4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_OC2_SetConfig+0x68>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a21      	ldr	r2, [pc, #132]	@ (8003b70 <TIM_OC2_SetConfig+0xe8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10d      	bne.n	8003b0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a17      	ldr	r2, [pc, #92]	@ (8003b6c <TIM_OC2_SetConfig+0xe4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <TIM_OC2_SetConfig+0x94>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a16      	ldr	r2, [pc, #88]	@ (8003b70 <TIM_OC2_SetConfig+0xe8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d113      	bne.n	8003b44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40010400 	.word	0x40010400

08003b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0303 	bic.w	r3, r3, #3
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a21      	ldr	r2, [pc, #132]	@ (8003c54 <TIM_OC3_SetConfig+0xe0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_OC3_SetConfig+0x66>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	@ (8003c58 <TIM_OC3_SetConfig+0xe4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d10d      	bne.n	8003bf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a16      	ldr	r2, [pc, #88]	@ (8003c54 <TIM_OC3_SetConfig+0xe0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d003      	beq.n	8003c06 <TIM_OC3_SetConfig+0x92>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a15      	ldr	r2, [pc, #84]	@ (8003c58 <TIM_OC3_SetConfig+0xe4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d113      	bne.n	8003c2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	621a      	str	r2, [r3, #32]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	40010000 	.word	0x40010000
 8003c58:	40010400 	.word	0x40010400

08003c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	021b      	lsls	r3, r3, #8
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	031b      	lsls	r3, r3, #12
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a12      	ldr	r2, [pc, #72]	@ (8003d00 <TIM_OC4_SetConfig+0xa4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d003      	beq.n	8003cc4 <TIM_OC4_SetConfig+0x68>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a11      	ldr	r2, [pc, #68]	@ (8003d04 <TIM_OC4_SetConfig+0xa8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d109      	bne.n	8003cd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	019b      	lsls	r3, r3, #6
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40010000 	.word	0x40010000
 8003d04:	40010400 	.word	0x40010400

08003d08 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d24:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f023 0307 	bic.w	r3, r3, #7
 8003d36:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b70      	cmp	r3, #112	@ 0x70
 8003d50:	d01a      	beq.n	8003d88 <TIM_SlaveTimer_SetConfig+0x80>
 8003d52:	2b70      	cmp	r3, #112	@ 0x70
 8003d54:	d860      	bhi.n	8003e18 <TIM_SlaveTimer_SetConfig+0x110>
 8003d56:	2b60      	cmp	r3, #96	@ 0x60
 8003d58:	d054      	beq.n	8003e04 <TIM_SlaveTimer_SetConfig+0xfc>
 8003d5a:	2b60      	cmp	r3, #96	@ 0x60
 8003d5c:	d85c      	bhi.n	8003e18 <TIM_SlaveTimer_SetConfig+0x110>
 8003d5e:	2b50      	cmp	r3, #80	@ 0x50
 8003d60:	d046      	beq.n	8003df0 <TIM_SlaveTimer_SetConfig+0xe8>
 8003d62:	2b50      	cmp	r3, #80	@ 0x50
 8003d64:	d858      	bhi.n	8003e18 <TIM_SlaveTimer_SetConfig+0x110>
 8003d66:	2b40      	cmp	r3, #64	@ 0x40
 8003d68:	d019      	beq.n	8003d9e <TIM_SlaveTimer_SetConfig+0x96>
 8003d6a:	2b40      	cmp	r3, #64	@ 0x40
 8003d6c:	d854      	bhi.n	8003e18 <TIM_SlaveTimer_SetConfig+0x110>
 8003d6e:	2b30      	cmp	r3, #48	@ 0x30
 8003d70:	d055      	beq.n	8003e1e <TIM_SlaveTimer_SetConfig+0x116>
 8003d72:	2b30      	cmp	r3, #48	@ 0x30
 8003d74:	d850      	bhi.n	8003e18 <TIM_SlaveTimer_SetConfig+0x110>
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d051      	beq.n	8003e1e <TIM_SlaveTimer_SetConfig+0x116>
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d84c      	bhi.n	8003e18 <TIM_SlaveTimer_SetConfig+0x110>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d04d      	beq.n	8003e1e <TIM_SlaveTimer_SetConfig+0x116>
 8003d82:	2b10      	cmp	r3, #16
 8003d84:	d04b      	beq.n	8003e1e <TIM_SlaveTimer_SetConfig+0x116>
 8003d86:	e047      	b.n	8003e18 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003d98:	f000 f8c1 	bl	8003f1e <TIM_ETR_SetConfig>
      break;
 8003d9c:	e040      	b.n	8003e20 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	d101      	bne.n	8003daa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e03b      	b.n	8003e22 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dd0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	621a      	str	r2, [r3, #32]
      break;
 8003dee:	e017      	b.n	8003e20 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f000 f814 	bl	8003e2a <TIM_TI1_ConfigInputStage>
      break;
 8003e02:	e00d      	b.n	8003e20 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e10:	461a      	mov	r2, r3
 8003e12:	f000 f839 	bl	8003e88 <TIM_TI2_ConfigInputStage>
      break;
 8003e16:	e003      	b.n	8003e20 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e1c:	e000      	b.n	8003e20 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003e1e:	bf00      	nop
  }

  return status;
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b087      	sub	sp, #28
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f023 0201 	bic.w	r2, r3, #1
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f023 030a 	bic.w	r3, r3, #10
 8003e66:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	621a      	str	r2, [r3, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f023 0210 	bic.w	r2, r3, #16
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	031b      	lsls	r3, r3, #12
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	621a      	str	r2, [r3, #32]
}
 8003edc:	bf00      	nop
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f043 0307 	orr.w	r3, r3, #7
 8003f0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	609a      	str	r2, [r3, #8]
}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b087      	sub	sp, #28
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	021a      	lsls	r2, r3, #8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	609a      	str	r2, [r3, #8]
}
 8003f52:	bf00      	nop
 8003f54:	371c      	adds	r7, #28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b087      	sub	sp, #28
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	2201      	movs	r2, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a1a      	ldr	r2, [r3, #32]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	401a      	ands	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1a      	ldr	r2, [r3, #32]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	431a      	orrs	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	621a      	str	r2, [r3, #32]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e05a      	b.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a21      	ldr	r2, [pc, #132]	@ (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d022      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800400c:	d01d      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1d      	ldr	r2, [pc, #116]	@ (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d018      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1b      	ldr	r2, [pc, #108]	@ (800408c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1a      	ldr	r2, [pc, #104]	@ (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00e      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a18      	ldr	r2, [pc, #96]	@ (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d009      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a17      	ldr	r2, [pc, #92]	@ (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d004      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a15      	ldr	r2, [pc, #84]	@ (800409c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10c      	bne.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4313      	orrs	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40010000 	.word	0x40010000
 8004088:	40000400 	.word	0x40000400
 800408c:	40000800 	.word	0x40000800
 8004090:	40000c00 	.word	0x40000c00
 8004094:	40010400 	.word	0x40010400
 8004098:	40014000 	.word	0x40014000
 800409c:	40001800 	.word	0x40001800

080040a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e03d      	b.n	8004138 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <memset>:
 800416c:	4402      	add	r2, r0
 800416e:	4603      	mov	r3, r0
 8004170:	4293      	cmp	r3, r2
 8004172:	d100      	bne.n	8004176 <memset+0xa>
 8004174:	4770      	bx	lr
 8004176:	f803 1b01 	strb.w	r1, [r3], #1
 800417a:	e7f9      	b.n	8004170 <memset+0x4>

0800417c <__libc_init_array>:
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	4d0d      	ldr	r5, [pc, #52]	@ (80041b4 <__libc_init_array+0x38>)
 8004180:	4c0d      	ldr	r4, [pc, #52]	@ (80041b8 <__libc_init_array+0x3c>)
 8004182:	1b64      	subs	r4, r4, r5
 8004184:	10a4      	asrs	r4, r4, #2
 8004186:	2600      	movs	r6, #0
 8004188:	42a6      	cmp	r6, r4
 800418a:	d109      	bne.n	80041a0 <__libc_init_array+0x24>
 800418c:	4d0b      	ldr	r5, [pc, #44]	@ (80041bc <__libc_init_array+0x40>)
 800418e:	4c0c      	ldr	r4, [pc, #48]	@ (80041c0 <__libc_init_array+0x44>)
 8004190:	f000 f818 	bl	80041c4 <_init>
 8004194:	1b64      	subs	r4, r4, r5
 8004196:	10a4      	asrs	r4, r4, #2
 8004198:	2600      	movs	r6, #0
 800419a:	42a6      	cmp	r6, r4
 800419c:	d105      	bne.n	80041aa <__libc_init_array+0x2e>
 800419e:	bd70      	pop	{r4, r5, r6, pc}
 80041a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a4:	4798      	blx	r3
 80041a6:	3601      	adds	r6, #1
 80041a8:	e7ee      	b.n	8004188 <__libc_init_array+0xc>
 80041aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ae:	4798      	blx	r3
 80041b0:	3601      	adds	r6, #1
 80041b2:	e7f2      	b.n	800419a <__libc_init_array+0x1e>
 80041b4:	080041f4 	.word	0x080041f4
 80041b8:	080041f4 	.word	0x080041f4
 80041bc:	080041f4 	.word	0x080041f4
 80041c0:	080041f8 	.word	0x080041f8

080041c4 <_init>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	bf00      	nop
 80041c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ca:	bc08      	pop	{r3}
 80041cc:	469e      	mov	lr, r3
 80041ce:	4770      	bx	lr

080041d0 <_fini>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	bf00      	nop
 80041d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	469e      	mov	lr, r3
 80041da:	4770      	bx	lr
