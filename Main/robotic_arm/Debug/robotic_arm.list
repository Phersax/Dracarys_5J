
robotic_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004eb4  08004eb4  00005eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ecc  08004ecc  00006034  2**0
                  CONTENTS
  4 .ARM          00000008  08004ecc  08004ecc  00005ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ed4  08004ed4  00006034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed4  08004ed4  00005ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ed8  08004ed8  00005ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08004edc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000034  08004f10  00006034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08004f10  000063f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb62  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256d  00000000  00000000  00015bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00018138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a81  00000000  00000000  00018eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c15  00000000  00000000  00019939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117db  00000000  00000000  0003b54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd844  00000000  00000000  0004cd29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a56d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003724  00000000  00000000  0011a5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011dcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000034 	.word	0x20000034
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004e9c 	.word	0x08004e9c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000038 	.word	0x20000038
 8000200:	08004e9c 	.word	0x08004e9c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <end_eff_config>:
 */
#include "end_eff_gpio.h"



void end_eff_config(int time,TIM_HandleTypeDef *htim){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
	if(time<1){ //0
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2b00      	cmp	r3, #0
 8000502:	dc04      	bgt.n	800050e <end_eff_config+0x1a>
		HAL_GPIO_TogglePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin);
 8000504:	2104      	movs	r1, #4
 8000506:	4808      	ldr	r0, [pc, #32]	@ (8000528 <end_eff_config+0x34>)
 8000508:	f002 f939 	bl	800277e <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin, GPIO_PIN_SET);

		HAL_TIM_Base_Start_IT(htim);

	}
}
 800050c:	e007      	b.n	800051e <end_eff_config+0x2a>
		HAL_GPIO_WritePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2104      	movs	r1, #4
 8000512:	4805      	ldr	r0, [pc, #20]	@ (8000528 <end_eff_config+0x34>)
 8000514:	f002 f91a 	bl	800274c <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(htim);
 8000518:	6838      	ldr	r0, [r7, #0]
 800051a:	f002 ff9b 	bl	8003454 <HAL_TIM_Base_Start_IT>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40020400 	.word	0x40020400

0800052c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	@ 0x28
 8000530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	613b      	str	r3, [r7, #16]
 8000546:	4b5e      	ldr	r3, [pc, #376]	@ (80006c0 <MX_GPIO_Init+0x194>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a5d      	ldr	r2, [pc, #372]	@ (80006c0 <MX_GPIO_Init+0x194>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b5b      	ldr	r3, [pc, #364]	@ (80006c0 <MX_GPIO_Init+0x194>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	4b57      	ldr	r3, [pc, #348]	@ (80006c0 <MX_GPIO_Init+0x194>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a56      	ldr	r2, [pc, #344]	@ (80006c0 <MX_GPIO_Init+0x194>)
 8000568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b54      	ldr	r3, [pc, #336]	@ (80006c0 <MX_GPIO_Init+0x194>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	4b50      	ldr	r3, [pc, #320]	@ (80006c0 <MX_GPIO_Init+0x194>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	4a4f      	ldr	r2, [pc, #316]	@ (80006c0 <MX_GPIO_Init+0x194>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6313      	str	r3, [r2, #48]	@ 0x30
 800058a:	4b4d      	ldr	r3, [pc, #308]	@ (80006c0 <MX_GPIO_Init+0x194>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b49      	ldr	r3, [pc, #292]	@ (80006c0 <MX_GPIO_Init+0x194>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a48      	ldr	r2, [pc, #288]	@ (80006c0 <MX_GPIO_Init+0x194>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b46      	ldr	r3, [pc, #280]	@ (80006c0 <MX_GPIO_Init+0x194>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIRECTION4_Pin|DIRECTION3_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	21e0      	movs	r1, #224	@ 0xe0
 80005b6:	4843      	ldr	r0, [pc, #268]	@ (80006c4 <MX_GPIO_Init+0x198>)
 80005b8:	f002 f8c8 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION2_GPIO_Port, DIRECTION2_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2110      	movs	r1, #16
 80005c0:	4841      	ldr	r0, [pc, #260]	@ (80006c8 <MX_GPIO_Init+0x19c>)
 80005c2:	f002 f8c3 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2120      	movs	r1, #32
 80005ca:	483f      	ldr	r0, [pc, #252]	@ (80006c8 <MX_GPIO_Init+0x19c>)
 80005cc:	f002 f8be 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIRECTION1_Pin|SERVO_en_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2103      	movs	r1, #3
 80005d4:	483d      	ldr	r0, [pc, #244]	@ (80006cc <MX_GPIO_Init+0x1a0>)
 80005d6:	f002 f8b9 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2104      	movs	r1, #4
 80005de:	483b      	ldr	r0, [pc, #236]	@ (80006cc <MX_GPIO_Init+0x1a0>)
 80005e0:	f002 f8b4 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISABLE_button_Pin;
 80005e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISABLE_button_GPIO_Port, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	4833      	ldr	r0, [pc, #204]	@ (80006c8 <MX_GPIO_Init+0x19c>)
 80005fc:	f001 ff12 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000600:	2320      	movs	r3, #32
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	482b      	ldr	r0, [pc, #172]	@ (80006c4 <MX_GPIO_Init+0x198>)
 8000618:	f001 ff04 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIRECTION4_Pin|DIRECTION3_Pin;
 800061c:	23c0      	movs	r3, #192	@ 0xc0
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000624:	2302      	movs	r3, #2
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	4824      	ldr	r0, [pc, #144]	@ (80006c4 <MX_GPIO_Init+0x198>)
 8000634:	f001 fef6 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRECTION2_Pin;
 8000638:	2310      	movs	r3, #16
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000640:	2302      	movs	r3, #2
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION2_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	481e      	ldr	r0, [pc, #120]	@ (80006c8 <MX_GPIO_Init+0x19c>)
 8000650:	f001 fee8 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000654:	2320      	movs	r3, #32
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800065c:	2301      	movs	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_GPIO_Init+0x19c>)
 800066c:	f001 feda 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIRECTION1_Pin|SERVO_en_Pin;
 8000670:	2303      	movs	r3, #3
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000678:	2302      	movs	r3, #2
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	4811      	ldr	r0, [pc, #68]	@ (80006cc <MX_GPIO_Init+0x1a0>)
 8000688:	f001 fecc 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENDEFF_en_Pin;
 800068c:	2304      	movs	r3, #4
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000694:	2301      	movs	r3, #1
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENDEFF_en_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	480a      	ldr	r0, [pc, #40]	@ (80006cc <MX_GPIO_Init+0x1a0>)
 80006a4:	f001 febe 	bl	8002424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	2028      	movs	r0, #40	@ 0x28
 80006ae:	f001 fe82 	bl	80023b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b2:	2028      	movs	r0, #40	@ 0x28
 80006b4:	f001 fe9b 	bl	80023ee <HAL_NVIC_EnableIRQ>

}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	@ 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020400 	.word	0x40020400

080006d0 <TIM_Cmd>:
int acc_count; //debug
int dec_count; //debug

int arr; //debug

void TIM_Cmd(TIM_TypeDef *TIMx, FunctionalState NewState) { //to disable the timers
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
	/* Check the parameters */
	assert_param(IS_TIM_ALL_PERIPH(TIMx));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d006      	beq.n	80006f0 <TIM_Cmd+0x20>
		/* Enable the TIM Counter */
		TIMx->CR1 |= TIM_CR1_CEN;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f043 0201 	orr.w	r2, r3, #1
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	601a      	str	r2, [r3, #0]
	} else {
		/* Disable the TIM Counter */
		TIMx->CR1 &= (uint16_t) (~((uint16_t) TIM_CR1_CEN));
	}
}
 80006ee:	e006      	b.n	80006fe <TIM_Cmd+0x2e>
		TIMx->CR1 &= (uint16_t) (~((uint16_t) TIM_CR1_CEN));
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80006f8:	4013      	ands	r3, r2
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	6013      	str	r3, [r2, #0]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <trapezoidal_func>:

void trapezoidal_func(int k, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *hslave) {
 800070c:	b480      	push	{r7}
 800070e:	b087      	sub	sp, #28
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]

	int cnt = __HAL_TIM_GET_COUNTER(hslave);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800071e:	617b      	str	r3, [r7, #20]

	if (arr_des_a[k] > arr_start[k]) { //arr has to be greater than the arr that starts the motor
 8000720:	4a73      	ldr	r2, [pc, #460]	@ (80008f0 <trapezoidal_func+0x1e4>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000728:	4972      	ldr	r1, [pc, #456]	@ (80008f4 <trapezoidal_func+0x1e8>)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000730:	429a      	cmp	r2, r3
 8000732:	dd2a      	ble.n	800078a <trapezoidal_func+0x7e>
		__HAL_TIM_SET_AUTORELOAD(htim, arr_start[k]);
 8000734:	4a6f      	ldr	r2, [pc, #444]	@ (80008f4 <trapezoidal_func+0x1e8>)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000742:	4a6c      	ldr	r2, [pc, #432]	@ (80008f4 <trapezoidal_func+0x1e8>)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074a:	461a      	mov	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	60da      	str	r2, [r3, #12]
		hslave->Instance->PSC = arr_start[k];
 8000750:	4a68      	ldr	r2, [pc, #416]	@ (80008f4 <trapezoidal_func+0x1e8>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	0852      	lsrs	r2, r2, #1
 800076a:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_GET_AUTORELOAD(htim) / 2);

		hslave->Instance->EGR |= TIM_EGR_UG;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	695a      	ldr	r2, [r3, #20]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f042 0201 	orr.w	r2, r2, #1
 800077a:	615a      	str	r2, [r3, #20]
		hslave->Instance->CNT = count_rising_edge[k];
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	495d      	ldr	r1, [pc, #372]	@ (80008f8 <trapezoidal_func+0x1ec>)
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000788:	625a      	str	r2, [r3, #36]	@ 0x24

	}

	if (arr_des_a[k] < (arr_current[k] - ACCEL_RATE)
 800078a:	4a59      	ldr	r2, [pc, #356]	@ (80008f0 <trapezoidal_func+0x1e4>)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000792:	495a      	ldr	r1, [pc, #360]	@ (80008fc <trapezoidal_func+0x1f0>)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800079a:	3b05      	subs	r3, #5
 800079c:	429a      	cmp	r2, r3
 800079e:	da5b      	bge.n	8000858 <trapezoidal_func+0x14c>
			&& cnt <= (int) (n_steps_a[k] * 1 / 2)) { //acceleration phase
 80007a0:	4a57      	ldr	r2, [pc, #348]	@ (8000900 <trapezoidal_func+0x1f4>)
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a8:	0fda      	lsrs	r2, r3, #31
 80007aa:	4413      	add	r3, r2
 80007ac:	105b      	asrs	r3, r3, #1
 80007ae:	461a      	mov	r2, r3
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	4293      	cmp	r3, r2
 80007b4:	dc50      	bgt.n	8000858 <trapezoidal_func+0x14c>

		arr_current[k] -= ACCEL_RATE;
 80007b6:	4a51      	ldr	r2, [pc, #324]	@ (80008fc <trapezoidal_func+0x1f0>)
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007be:	1f5a      	subs	r2, r3, #5
 80007c0:	494e      	ldr	r1, [pc, #312]	@ (80008fc <trapezoidal_func+0x1f0>)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (arr_current[k] <= arr_max[k])
 80007c8:	4a4c      	ldr	r2, [pc, #304]	@ (80008fc <trapezoidal_func+0x1f0>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007d0:	494c      	ldr	r1, [pc, #304]	@ (8000904 <trapezoidal_func+0x1f8>)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d8:	429a      	cmp	r2, r3
 80007da:	dc07      	bgt.n	80007ec <trapezoidal_func+0xe0>
			arr_current[k] = arr_max[k];
 80007dc:	4a49      	ldr	r2, [pc, #292]	@ (8000904 <trapezoidal_func+0x1f8>)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e4:	4945      	ldr	r1, [pc, #276]	@ (80008fc <trapezoidal_func+0x1f0>)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		__HAL_TIM_SET_AUTORELOAD(htim, arr_current[k]);
 80007ec:	4a43      	ldr	r2, [pc, #268]	@ (80008fc <trapezoidal_func+0x1f0>)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007fa:	4a40      	ldr	r2, [pc, #256]	@ (80008fc <trapezoidal_func+0x1f0>)
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000802:	461a      	mov	r2, r3
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	60da      	str	r2, [r3, #12]
		hslave->Instance->PSC = arr_current[k];
 8000808:	4a3c      	ldr	r2, [pc, #240]	@ (80008fc <trapezoidal_func+0x1f0>)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	0852      	lsrs	r2, r2, #1
 8000822:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_GET_AUTORELOAD(htim) / 2);

		hslave->Instance->EGR |= TIM_EGR_UG;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f042 0201 	orr.w	r2, r2, #1
 8000832:	615a      	str	r2, [r3, #20]
		hslave->Instance->CNT = count_rising_edge[k];
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	492f      	ldr	r1, [pc, #188]	@ (80008f8 <trapezoidal_func+0x1ec>)
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24

		acc_count += (htim->Instance->PSC + 1); //debug
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000848:	3301      	adds	r3, #1
 800084a:	4a2f      	ldr	r2, [pc, #188]	@ (8000908 <trapezoidal_func+0x1fc>)
 800084c:	6812      	ldr	r2, [r2, #0]
 800084e:	4413      	add	r3, r2
 8000850:	461a      	mov	r2, r3
 8000852:	4b2d      	ldr	r3, [pc, #180]	@ (8000908 <trapezoidal_func+0x1fc>)
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	e0b0      	b.n	80009ba <trapezoidal_func+0x2ae>

	}

	else {
		if (arr_des_a[k] >= (arr_current[k] - ACCEL_RATE)
 8000858:	4a25      	ldr	r2, [pc, #148]	@ (80008f0 <trapezoidal_func+0x1e4>)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000860:	4926      	ldr	r1, [pc, #152]	@ (80008fc <trapezoidal_func+0x1f0>)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000868:	3b05      	subs	r3, #5
 800086a:	429a      	cmp	r2, r3
 800086c:	db4e      	blt.n	800090c <trapezoidal_func+0x200>
				&& arr_current[k] > arr_des_a[k]
 800086e:	4a23      	ldr	r2, [pc, #140]	@ (80008fc <trapezoidal_func+0x1f0>)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000876:	491e      	ldr	r1, [pc, #120]	@ (80008f0 <trapezoidal_func+0x1e4>)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800087e:	429a      	cmp	r2, r3
 8000880:	dd44      	ble.n	800090c <trapezoidal_func+0x200>
				&& cnt <= (int) (n_steps_a[k] * 1 / 2)) { //constant phase
 8000882:	4a1f      	ldr	r2, [pc, #124]	@ (8000900 <trapezoidal_func+0x1f4>)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088a:	0fda      	lsrs	r2, r3, #31
 800088c:	4413      	add	r3, r2
 800088e:	105b      	asrs	r3, r3, #1
 8000890:	461a      	mov	r2, r3
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	4293      	cmp	r3, r2
 8000896:	dc39      	bgt.n	800090c <trapezoidal_func+0x200>

			__HAL_TIM_SET_AUTORELOAD(htim, arr_des_a[k]);
 8000898:	4a15      	ldr	r2, [pc, #84]	@ (80008f0 <trapezoidal_func+0x1e4>)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008a6:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <trapezoidal_func+0x1e4>)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ae:	461a      	mov	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	60da      	str	r2, [r3, #12]
			hslave->Instance->PSC = arr_des_a[k];
 80008b4:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <trapezoidal_func+0x1e4>)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	629a      	str	r2, [r3, #40]	@ 0x28
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	0852      	lsrs	r2, r2, #1
 80008ce:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_GET_AUTORELOAD(htim) / 2);

			hslave->Instance->EGR |= TIM_EGR_UG;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	695a      	ldr	r2, [r3, #20]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f042 0201 	orr.w	r2, r2, #1
 80008de:	615a      	str	r2, [r3, #20]
			hslave->Instance->CNT = count_rising_edge[k];
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4904      	ldr	r1, [pc, #16]	@ (80008f8 <trapezoidal_func+0x1ec>)
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80008ee:	e064      	b.n	80009ba <trapezoidal_func+0x2ae>
 80008f0:	20000108 	.word	0x20000108
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000050 	.word	0x20000050
 80008fc:	20000018 	.word	0x20000018
 8000900:	200000fc 	.word	0x200000fc
 8000904:	2000000c 	.word	0x2000000c
 8000908:	2000005c 	.word	0x2000005c

		}

		else {

			if (cnt >= (n_steps_a[k] - acc_count)) { //deceleration phase
 800090c:	4a2e      	ldr	r2, [pc, #184]	@ (80009c8 <trapezoidal_func+0x2bc>)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000914:	4b2d      	ldr	r3, [pc, #180]	@ (80009cc <trapezoidal_func+0x2c0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	429a      	cmp	r2, r3
 800091e:	db4c      	blt.n	80009ba <trapezoidal_func+0x2ae>
				arr_current[k] += ACCEL_RATE;
 8000920:	4a2b      	ldr	r2, [pc, #172]	@ (80009d0 <trapezoidal_func+0x2c4>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000928:	1d5a      	adds	r2, r3, #5
 800092a:	4929      	ldr	r1, [pc, #164]	@ (80009d0 <trapezoidal_func+0x2c4>)
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (arr_current[k] >= (arr_start[k]-ACCEL_RATE))
 8000932:	4a27      	ldr	r2, [pc, #156]	@ (80009d0 <trapezoidal_func+0x2c4>)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800093a:	4926      	ldr	r1, [pc, #152]	@ (80009d4 <trapezoidal_func+0x2c8>)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000942:	3b05      	subs	r3, #5
 8000944:	429a      	cmp	r2, r3
 8000946:	db07      	blt.n	8000958 <trapezoidal_func+0x24c>
					arr_current[k] = arr_start[k];
 8000948:	4a22      	ldr	r2, [pc, #136]	@ (80009d4 <trapezoidal_func+0x2c8>)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000950:	491f      	ldr	r1, [pc, #124]	@ (80009d0 <trapezoidal_func+0x2c4>)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				__HAL_TIM_SET_AUTORELOAD(htim, arr_current[k]);
 8000958:	4a1d      	ldr	r2, [pc, #116]	@ (80009d0 <trapezoidal_func+0x2c4>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000966:	4a1a      	ldr	r2, [pc, #104]	@ (80009d0 <trapezoidal_func+0x2c4>)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096e:	461a      	mov	r2, r3
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60da      	str	r2, [r3, #12]
				hslave->Instance->PSC = arr_current[k];
 8000974:	4a16      	ldr	r2, [pc, #88]	@ (80009d0 <trapezoidal_func+0x2c4>)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	629a      	str	r2, [r3, #40]	@ 0x28
				__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	0852      	lsrs	r2, r2, #1
 800098e:	635a      	str	r2, [r3, #52]	@ 0x34
						__HAL_TIM_GET_AUTORELOAD(htim) / 2);

				hslave->Instance->EGR |= TIM_EGR_UG;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	695a      	ldr	r2, [r3, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f042 0201 	orr.w	r2, r2, #1
 800099e:	615a      	str	r2, [r3, #20]
				hslave->Instance->CNT = count_rising_edge[k];
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	490c      	ldr	r1, [pc, #48]	@ (80009d8 <trapezoidal_func+0x2cc>)
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009ac:	625a      	str	r2, [r3, #36]	@ 0x24

				dec_count += 5; //debug
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <trapezoidal_func+0x2d0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3305      	adds	r3, #5
 80009b4:	4a09      	ldr	r2, [pc, #36]	@ (80009dc <trapezoidal_func+0x2d0>)
 80009b6:	6013      	str	r3, [r2, #0]

		}

	}

}
 80009b8:	e7ff      	b.n	80009ba <trapezoidal_func+0x2ae>
 80009ba:	bf00      	nop
 80009bc:	371c      	adds	r7, #28
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	200000fc 	.word	0x200000fc
 80009cc:	2000005c 	.word	0x2000005c
 80009d0:	20000018 	.word	0x20000018
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000050 	.word	0x20000050
 80009dc:	20000060 	.word	0x20000060

080009e0 <HAL_TIM_PeriodElapsedCallback>:

//slave callback for trapezoidal profile
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a4c      	ldr	r2, [pc, #304]	@ (8000b20 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d12a      	bne.n	8000a48 <HAL_TIM_PeriodElapsedCallback+0x68>

		if (htim->Instance->CNT >= htim->Instance->ARR) {
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d322      	bcc.n	8000a48 <HAL_TIM_PeriodElapsedCallback+0x68>
			HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8000a02:	2100      	movs	r1, #0
 8000a04:	4847      	ldr	r0, [pc, #284]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a06:	f002 ff33 	bl	8003870 <HAL_TIM_PWM_Stop_IT>
			count_rising_edge[2] = 0;
 8000a0a:	4b47      	ldr	r3, [pc, #284]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
			//acc_count = 0;  //debug
			//dec_count = 0; //debug
			htim->Instance->EGR |= TIM_EGR_UG;  //reset
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	695a      	ldr	r2, [r3, #20]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f042 0201 	orr.w	r2, r2, #1
 8000a1e:	615a      	str	r2, [r3, #20]
			htim8.Instance->EGR |= TIM_EGR_UG;
 8000a20:	4b40      	ldr	r3, [pc, #256]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	695a      	ldr	r2, [r3, #20]
 8000a26:	4b3f      	ldr	r3, [pc, #252]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f042 0201 	orr.w	r2, r2, #1
 8000a2e:	615a      	str	r2, [r3, #20]

			TIM_Cmd(htim->Instance, DISABLE); //disable the slave timer
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe4a 	bl	80006d0 <TIM_Cmd>
			TIM_Cmd(htim8.Instance, DISABLE); //disable the slave timer
 8000a3c:	4b39      	ldr	r3, [pc, #228]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fe44 	bl	80006d0 <TIM_Cmd>

		}

	}

	if (htim->Instance == TIM3) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a37      	ldr	r2, [pc, #220]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d125      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0xbe>
		if (htim->Instance->CNT >= htim->Instance->ARR) {
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d31d      	bcc.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0xbe>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000a62:	2100      	movs	r1, #0
 8000a64:	4832      	ldr	r0, [pc, #200]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000a66:	f002 ff03 	bl	8003870 <HAL_TIM_PWM_Stop_IT>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	4830      	ldr	r0, [pc, #192]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000a6e:	f002 feff 	bl	8003870 <HAL_TIM_PWM_Stop_IT>
			//count_rising_edge[1] = 0;
			//acc_count = 0;  //debug
			//dec_count = 0; //debug
			htim->Instance->EGR |= TIM_EGR_UG;  //reset
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	695a      	ldr	r2, [r3, #20]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f042 0201 	orr.w	r2, r2, #1
 8000a80:	615a      	str	r2, [r3, #20]
			htim2.Instance->EGR |= TIM_EGR_UG;
 8000a82:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	695a      	ldr	r2, [r3, #20]
 8000a88:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f042 0201 	orr.w	r2, r2, #1
 8000a90:	615a      	str	r2, [r3, #20]

			TIM_Cmd(htim->Instance, DISABLE); //disable the slave timer
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fe19 	bl	80006d0 <TIM_Cmd>

		}

	}

	if (htim->Instance == TIM4) {
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a24      	ldr	r2, [pc, #144]	@ (8000b34 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d12a      	bne.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x11e>

		if (htim->Instance->CNT >= htim->Instance->ARR) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d322      	bcc.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x11e>
			HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	481f      	ldr	r0, [pc, #124]	@ (8000b38 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000abc:	f002 fed8 	bl	8003870 <HAL_TIM_PWM_Stop_IT>

			count_rising_edge[0] = 0;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
			acc_count = 0;  //debug
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
			dec_count = 0; //debug
 8000acc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
			htim->Instance->EGR |= TIM_EGR_UG;  //reset
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	695a      	ldr	r2, [r3, #20]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f042 0201 	orr.w	r2, r2, #1
 8000ae0:	615a      	str	r2, [r3, #20]
			htim1.Instance->EGR |= TIM_EGR_UG;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	695a      	ldr	r2, [r3, #20]
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f042 0201 	orr.w	r2, r2, #1
 8000af0:	615a      	str	r2, [r3, #20]
			//__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);

			TIM_Cmd(htim->Instance, DISABLE); //disable the slave timer
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fde9 	bl	80006d0 <TIM_Cmd>

		}

	}

	if (htim->Instance == TIM6) {
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a10      	ldr	r2, [pc, #64]	@ (8000b44 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d107      	bne.n	8000b18 <HAL_TIM_PeriodElapsedCallback+0x138>

		HAL_GPIO_WritePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin, GPIO_PIN_RESET); //disable the end_eff
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	480e      	ldr	r0, [pc, #56]	@ (8000b48 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000b0e:	f001 fe1d 	bl	800274c <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(htim);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f002 fd0e 	bl	8003534 <HAL_TIM_Base_Stop_IT>

	}

}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40000c00 	.word	0x40000c00
 8000b24:	200002cc 	.word	0x200002cc
 8000b28:	20000050 	.word	0x20000050
 8000b2c:	40000400 	.word	0x40000400
 8000b30:	20000164 	.word	0x20000164
 8000b34:	40000800 	.word	0x40000800
 8000b38:	2000011c 	.word	0x2000011c
 8000b3c:	2000005c 	.word	0x2000005c
 8000b40:	20000060 	.word	0x20000060
 8000b44:	40001000 	.word	0x40001000
 8000b48:	40020400 	.word	0x40020400

08000b4c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a20      	ldr	r2, [pc, #128]	@ (8000bdc <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d114      	bne.n	8000b88 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>

		count_rising_edge[0] += (htim->Instance->PSC + 1);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000be0 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000b6e:	6013      	str	r3, [r2, #0]
		arr = -(__HAL_TIM_GET_AUTORELOAD(&htim1));  //debug graph
 8000b70:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b76:	425b      	negs	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8000b7c:	601a      	str	r2, [r3, #0]
		trapezoidal_func(0, htim, &htim4); //0,1,2 for the tipology of the timer
 8000b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bec <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff fdc2 	bl	800070c <trapezoidal_func>

	}

	if (htim->Instance == TIM2) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b90:	d10d      	bne.n	8000bae <HAL_TIM_PWM_PulseFinishedCallback+0x62>

		count_rising_edge[1] += (htim->Instance->PSC + 1);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b98:	1c5a      	adds	r2, r3, #1
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8000be0 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000ba2:	6053      	str	r3, [r2, #4]
		//arr = -(__HAL_TIM_GET_AUTORELOAD(&htim1));  //debug graph
		trapezoidal_func(1, htim, &htim3); //0,1,2 for the tipology of the timer
 8000ba4:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff fdaf 	bl	800070c <trapezoidal_func>

	}

	if (htim->Instance == TIM8) {
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a10      	ldr	r2, [pc, #64]	@ (8000bf4 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d10d      	bne.n	8000bd4 <HAL_TIM_PWM_PulseFinishedCallback+0x88>

		count_rising_edge[2] += (htim->Instance->PSC + 1);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a06      	ldr	r2, [pc, #24]	@ (8000be0 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000bc8:	6093      	str	r3, [r2, #8]
		//arr = -(__HAL_TIM_GET_AUTORELOAD(&htim1));  //debug graph
		trapezoidal_func(2, htim, &htim5); //0,1,2 for the tipology of the timer
 8000bca:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf8 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f7ff fd9c 	bl	800070c <trapezoidal_func>

	}
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	20000050 	.word	0x20000050
 8000be4:	2000011c 	.word	0x2000011c
 8000be8:	20000064 	.word	0x20000064
 8000bec:	200001f4 	.word	0x200001f4
 8000bf0:	200001ac 	.word	0x200001ac
 8000bf4:	40010400 	.word	0x40010400
 8000bf8:	2000023c 	.word	0x2000023c

08000bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c02:	f001 fa67 	bl	80020d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c06:	f000 f8c5 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0a:	f7ff fc8f 	bl	800052c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c0e:	f001 f9c5 	bl	8001f9c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000c12:	f000 fcf3 	bl	80015fc <MX_TIM3_Init>
  MX_TIM5_Init();
 8000c16:	f000 fdb9 	bl	800178c <MX_TIM5_Init>
  MX_TIM1_Init();
 8000c1a:	f000 fbcb 	bl	80013b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c1e:	f000 fc6b 	bl	80014f8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000c22:	f000 fd4f 	bl	80016c4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000c26:	f000 fe4b 	bl	80018c0 <MX_TIM8_Init>
  MX_TIM10_Init();
 8000c2a:	f000 feeb 	bl	8001a04 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000c2e:	f000 ff37 	bl	8001aa0 <MX_TIM11_Init>
  MX_TIM6_Init();
 8000c32:	f000 fe0f 	bl	8001854 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 8000c36:	4842      	ldr	r0, [pc, #264]	@ (8000d40 <main+0x144>)
 8000c38:	f002 fc0c 	bl	8003454 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000c3c:	4841      	ldr	r0, [pc, #260]	@ (8000d44 <main+0x148>)
 8000c3e:	f002 fc09 	bl	8003454 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8000c42:	4841      	ldr	r0, [pc, #260]	@ (8000d48 <main+0x14c>)
 8000c44:	f002 fc06 	bl	8003454 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET); //ENABLE
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2120      	movs	r1, #32
 8000c4c:	483f      	ldr	r0, [pc, #252]	@ (8000d4c <main+0x150>)
 8000c4e:	f001 fd7d 	bl	800274c <HAL_GPIO_WritePin>
	/*
	 stepper_init(obj, resol, microstep, enable_port, direction_port, timer slave, timerpwm*/
	stepper_init(&stp1, &htim1, &htim4, 1.8, 4 * 4.27, DIRECTION1_GPIO_Port,
 8000c52:	2301      	movs	r3, #1
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	4b3e      	ldr	r3, [pc, #248]	@ (8000d50 <main+0x154>)
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2311      	movs	r3, #17
 8000c5c:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8000d54 <main+0x158>
 8000c60:	4a37      	ldr	r2, [pc, #220]	@ (8000d40 <main+0x144>)
 8000c62:	493d      	ldr	r1, [pc, #244]	@ (8000d58 <main+0x15c>)
 8000c64:	483d      	ldr	r0, [pc, #244]	@ (8000d5c <main+0x160>)
 8000c66:	f000 f985 	bl	8000f74 <stepper_init>
	DIRECTION1_Pin);
	stepper_init(&stp2, &htim2, &htim3, 1.8, 4 * 6, DIRECTION2_GPIO_Port,
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	4b37      	ldr	r3, [pc, #220]	@ (8000d4c <main+0x150>)
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2318      	movs	r3, #24
 8000c74:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8000d54 <main+0x158>
 8000c78:	4a32      	ldr	r2, [pc, #200]	@ (8000d44 <main+0x148>)
 8000c7a:	4939      	ldr	r1, [pc, #228]	@ (8000d60 <main+0x164>)
 8000c7c:	4839      	ldr	r0, [pc, #228]	@ (8000d64 <main+0x168>)
 8000c7e:	f000 f979 	bl	8000f74 <stepper_init>
	DIRECTION2_Pin);
	stepper_init(&stp3, &htim2, &htim3, 1.8, 4 * 6, DIRECTION3_GPIO_Port,
 8000c82:	2380      	movs	r3, #128	@ 0x80
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	4b38      	ldr	r3, [pc, #224]	@ (8000d68 <main+0x16c>)
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2318      	movs	r3, #24
 8000c8c:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8000d54 <main+0x158>
 8000c90:	4a2c      	ldr	r2, [pc, #176]	@ (8000d44 <main+0x148>)
 8000c92:	4933      	ldr	r1, [pc, #204]	@ (8000d60 <main+0x164>)
 8000c94:	4835      	ldr	r0, [pc, #212]	@ (8000d6c <main+0x170>)
 8000c96:	f000 f96d 	bl	8000f74 <stepper_init>
	DIRECTION3_Pin);
	stepper_init(&stp4, &htim8, &htim5, 1.8, 8 * 4.9, DIRECTION4_GPIO_Port,
 8000c9a:	2340      	movs	r3, #64	@ 0x40
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	4b32      	ldr	r3, [pc, #200]	@ (8000d68 <main+0x16c>)
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2327      	movs	r3, #39	@ 0x27
 8000ca4:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8000d54 <main+0x158>
 8000ca8:	4a27      	ldr	r2, [pc, #156]	@ (8000d48 <main+0x14c>)
 8000caa:	4931      	ldr	r1, [pc, #196]	@ (8000d70 <main+0x174>)
 8000cac:	4831      	ldr	r0, [pc, #196]	@ (8000d74 <main+0x178>)
 8000cae:	f000 f961 	bl	8000f74 <stepper_init>
	DIRECTION4_Pin);
	servo_init(&srv1, &htim10); //default position
 8000cb2:	4931      	ldr	r1, [pc, #196]	@ (8000d78 <main+0x17c>)
 8000cb4:	4831      	ldr	r0, [pc, #196]	@ (8000d7c <main+0x180>)
 8000cb6:	f000 f8e1 	bl	8000e7c <servo_init>
	servo_init(&srv2, &htim11); //default position
 8000cba:	4931      	ldr	r1, [pc, #196]	@ (8000d80 <main+0x184>)
 8000cbc:	4831      	ldr	r0, [pc, #196]	@ (8000d84 <main+0x188>)
 8000cbe:	f000 f8dd 	bl	8000e7c <servo_init>
	//j2/j3 orario 75
	//j4 antiorario 15
	//servo2 -10


	stepper_move(&stp1, CLOCKWISE, 30, 30);
 8000cc2:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000cc6:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4823      	ldr	r0, [pc, #140]	@ (8000d5c <main+0x160>)
 8000cce:	f000 f98b 	bl	8000fe8 <stepper_move>

	stepper_move(&stp2, CLOCKWISE, 84, 30);
 8000cd2:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000cd6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8000d88 <main+0x18c>
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4821      	ldr	r0, [pc, #132]	@ (8000d64 <main+0x168>)
 8000cde:	f000 f983 	bl	8000fe8 <stepper_move>
	stepper_move(&stp3, COUNTERCLOCKWISE, 84, 30);
 8000ce2:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000ce6:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8000d88 <main+0x18c>
 8000cea:	2100      	movs	r1, #0
 8000cec:	481f      	ldr	r0, [pc, #124]	@ (8000d6c <main+0x170>)
 8000cee:	f000 f97b 	bl	8000fe8 <stepper_move>

	stepper_move(&stp4, CLOCKWISE, 50, 50);
 8000cf2:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8000d8c <main+0x190>
 8000cf6:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8000d8c <main+0x190>
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	481d      	ldr	r0, [pc, #116]	@ (8000d74 <main+0x178>)
 8000cfe:	f000 f973 	bl	8000fe8 <stepper_move>
	servo_move(&srv2, -10);
 8000d02:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8000d06:	481f      	ldr	r0, [pc, #124]	@ (8000d84 <main+0x188>)
 8000d08:	f000 f8e0 	bl	8000ecc <servo_move>

	end_eff_config(0, &htim6);
 8000d0c:	4920      	ldr	r1, [pc, #128]	@ (8000d90 <main+0x194>)
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff fbf0 	bl	80004f4 <end_eff_config>

	HAL_Delay(20000);
 8000d14:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000d18:	f001 fa4e 	bl	80021b8 <HAL_Delay>


	stepper_move(&stp2, COUNTERCLOCKWISE, 84, 10);
 8000d1c:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000d20:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8000d88 <main+0x18c>
 8000d24:	2100      	movs	r1, #0
 8000d26:	480f      	ldr	r0, [pc, #60]	@ (8000d64 <main+0x168>)
 8000d28:	f000 f95e 	bl	8000fe8 <stepper_move>
	stepper_move(&stp3, CLOCKWISE, 84, 10);
 8000d2c:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000d30:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8000d88 <main+0x18c>
 8000d34:	2101      	movs	r1, #1
 8000d36:	480d      	ldr	r0, [pc, #52]	@ (8000d6c <main+0x170>)
 8000d38:	f000 f956 	bl	8000fe8 <stepper_move>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <main+0x140>
 8000d40:	200001f4 	.word	0x200001f4
 8000d44:	200001ac 	.word	0x200001ac
 8000d48:	2000023c 	.word	0x2000023c
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	40020400 	.word	0x40020400
 8000d54:	3fe66666 	.word	0x3fe66666
 8000d58:	2000011c 	.word	0x2000011c
 8000d5c:	20000068 	.word	0x20000068
 8000d60:	20000164 	.word	0x20000164
 8000d64:	20000088 	.word	0x20000088
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	200000a8 	.word	0x200000a8
 8000d70:	200002cc 	.word	0x200002cc
 8000d74:	200000c8 	.word	0x200000c8
 8000d78:	20000314 	.word	0x20000314
 8000d7c:	200000e8 	.word	0x200000e8
 8000d80:	2000035c 	.word	0x2000035c
 8000d84:	200000f0 	.word	0x200000f0
 8000d88:	42a80000 	.word	0x42a80000
 8000d8c:	42480000 	.word	0x42480000
 8000d90:	20000284 	.word	0x20000284

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	@ 0x50
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	2234      	movs	r2, #52	@ 0x34
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f004 f84e 	bl	8004e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8000e68 <SystemClock_Config+0xd4>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	4a29      	ldr	r2, [pc, #164]	@ (8000e68 <SystemClock_Config+0xd4>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc8:	4b27      	ldr	r3, [pc, #156]	@ (8000e68 <SystemClock_Config+0xd4>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	4b24      	ldr	r3, [pc, #144]	@ (8000e6c <SystemClock_Config+0xd8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000de0:	4a22      	ldr	r2, [pc, #136]	@ (8000e6c <SystemClock_Config+0xd8>)
 8000de2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	4b20      	ldr	r3, [pc, #128]	@ (8000e6c <SystemClock_Config+0xd8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dfc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000e0c:	2354      	movs	r3, #84	@ 0x54
 8000e0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 f829 	bl	8002e78 <HAL_RCC_OscConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e2c:	f000 f820 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e30:	230f      	movs	r3, #15
 8000e32:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e34:	2302      	movs	r3, #2
 8000e36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e46:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e48:	f107 0308 	add.w	r3, r7, #8
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 fcc8 	bl	80027e4 <HAL_RCC_ClockConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e5a:	f000 f809 	bl	8000e70 <Error_Handler>
  }
}
 8000e5e:	bf00      	nop
 8000e60:	3750      	adds	r7, #80	@ 0x50
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40007000 	.word	0x40007000

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Error_Handler+0x8>

08000e7c <servo_init>:
 *  Created on: Mar 2, 2025
 *      Author: david
 */
#include <servo.h>

void servo_init(servo_obj *srv, TIM_HandleTypeDef *pwm_timer) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
	srv->pwm_timer = pwm_timer;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	601a      	str	r2, [r3, #0]
	srv->unit = (CCR_MAX - CCR_MIN) / (2 * ANGLE_MAX);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec8 <servo_init+0x4c>)
 8000e90:	605a      	str	r2, [r3, #4]
	//pwm=50hz
	srv->pwm_timer->Instance->PSC = 27;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	221b      	movs	r2, #27
 8000e9a:	629a      	str	r2, [r3, #40]	@ 0x28
	srv->pwm_timer->Instance->ARR = 60000 - 1;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
	__HAL_TIM_SET_COMPARE(srv->pwm_timer, TIM_CHANNEL_1,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f241 1293 	movw	r2, #4499	@ 0x1193
 8000eb2:	635a      	str	r2, [r3, #52]	@ 0x34
			(int) ((CCR_MAX + CCR_MIN) / 2));
	HAL_TIM_PWM_Start_IT(srv->pwm_timer, TIM_CHANNEL_1); //START PWM)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 fbc2 	bl	8003644 <HAL_TIM_PWM_Start_IT>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	42055555 	.word	0x42055555

08000ecc <servo_move>:
int ccr; //debug

void servo_move(servo_obj *srv, float position) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	ed87 0a00 	vstr	s0, [r7]

	//saturation
	if (position > ANGLE_MAX)
 8000ed8:	edd7 7a00 	vldr	s15, [r7]
 8000edc:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000f60 <servo_move+0x94>
 8000ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee8:	dd01      	ble.n	8000eee <servo_move+0x22>
		position = ANGLE_MAX; //max angle position available
 8000eea:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <servo_move+0x98>)
 8000eec:	603b      	str	r3, [r7, #0]
	if (position < -ANGLE_MAX)
 8000eee:	edd7 7a00 	vldr	s15, [r7]
 8000ef2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000f68 <servo_move+0x9c>
 8000ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efe:	d501      	bpl.n	8000f04 <servo_move+0x38>
		position = -ANGLE_MAX; //min angle position available
 8000f00:	4b1a      	ldr	r3, [pc, #104]	@ (8000f6c <servo_move+0xa0>)
 8000f02:	603b      	str	r3, [r7, #0]

	//compute ccr value
	if (position != 0)
 8000f04:	edd7 7a00 	vldr	s15, [r7]
 8000f08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f10:	d010      	beq.n	8000f34 <servo_move+0x68>
		ccr = (int) ((CCR_MAX + CCR_MIN) / 2) + (int) (srv->unit * position);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f18:	edd7 7a00 	vldr	s15, [r7]
 8000f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f24:	ee17 3a90 	vmov	r3, s15
 8000f28:	f503 538c 	add.w	r3, r3, #4480	@ 0x1180
 8000f2c:	3313      	adds	r3, #19
 8000f2e:	4a10      	ldr	r2, [pc, #64]	@ (8000f70 <servo_move+0xa4>)
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e003      	b.n	8000f3c <servo_move+0x70>

	else {  //position==0
		ccr = (int) ((CCR_MAX + CCR_MIN) / 2);
 8000f34:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <servo_move+0xa4>)
 8000f36:	f241 1293 	movw	r2, #4499	@ 0x1193
 8000f3a:	601a      	str	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(srv->pwm_timer, TIM_CHANNEL_1, ccr); //deg=0
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <servo_move+0xa4>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34
	srv->pwm_timer->Instance->EGR = TIM_EGR_UG; //not relevant in this case
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	615a      	str	r2, [r3, #20]

}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	42b40000 	.word	0x42b40000
 8000f64:	42b40000 	.word	0x42b40000
 8000f68:	c2b40000 	.word	0xc2b40000
 8000f6c:	c2b40000 	.word	0xc2b40000
 8000f70:	200000f8 	.word	0x200000f8

08000f74 <stepper_init>:

//definisco la struct stepper con i seguenti parametri
void stepper_init(stepper_obj *stp, TIM_HandleTypeDef *pwm_timer,
		TIM_HandleTypeDef *position_timer, float stepper_resolution,
		uint16_t microstep, GPIO_TypeDef *direction_port,
		uint16_t direction_pin) {
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6178      	str	r0, [r7, #20]
 8000f7c:	6139      	str	r1, [r7, #16]
 8000f7e:	60fa      	str	r2, [r7, #12]
 8000f80:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f84:	80fb      	strh	r3, [r7, #6]

	stp->position_timer = position_timer;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	605a      	str	r2, [r3, #4]
	stp->pwm_timer = pwm_timer;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	601a      	str	r2, [r3, #0]

	stp->direction_port = direction_port;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	6a3a      	ldr	r2, [r7, #32]
 8000f96:	609a      	str	r2, [r3, #8]
	stp->direction_pin = direction_pin;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f9c:	819a      	strh	r2, [r3, #12]

	stp->stepper_resolution = stepper_resolution;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	611a      	str	r2, [r3, #16]
	stp->microstep = microstep;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	88fa      	ldrh	r2, [r7, #6]
 8000fa8:	831a      	strh	r2, [r3, #24]
	stp->step_per_rev = 360.0f / stepper_resolution; // 360°/resolution
 8000faa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000fe4 <stepper_init+0x70>
 8000fae:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	edc3 7a05 	vstr	s15, [r3, #20]
	stp->step_scale = stp->step_per_rev * microstep;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	ed93 7a05 	vldr	s14, [r3, #20]
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8000fd6:	bf00      	nop
 8000fd8:	371c      	adds	r7, #28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	43b40000 	.word	0x43b40000

08000fe8 <stepper_move>:

float freq_des_steps; //DEBUG
static int arr_des = 20000;  //random value

void stepper_move(stepper_obj *stp, direction_str direction, float position,
		float freq_desired) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ff6:	edc7 0a00 	vstr	s1, [r7]
 8000ffa:	72fb      	strb	r3, [r7, #11]

	int i = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
	int n_steps = stp->step_scale * position / 360.0f; //[n_steps]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	ed93 7a07 	vldr	s14, [r3, #28]
 8001006:	edd7 7a01 	vldr	s15, [r7, #4]
 800100a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800100e:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80011c8 <stepper_move+0x1e0>
 8001012:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800101a:	ee17 3a90 	vmov	r3, s15
 800101e:	613b      	str	r3, [r7, #16]

	freq_des_steps = stp->step_scale * freq_desired / 360.0f; //[n_steps/s]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	ed93 7a07 	vldr	s14, [r3, #28]
 8001026:	edd7 7a00 	vldr	s15, [r7]
 800102a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800102e:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80011c8 <stepper_move+0x1e0>
 8001032:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001036:	4b65      	ldr	r3, [pc, #404]	@ (80011cc <stepper_move+0x1e4>)
 8001038:	edc3 7a00 	vstr	s15, [r3]

	arr_des = (HAL_RCC_GetPCLK2Freq() * 2 / freq_des_steps)
 800103c:	f001 fcd8 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 8001040:	4603      	mov	r3, r0
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800104c:	4b5f      	ldr	r3, [pc, #380]	@ (80011cc <stepper_move+0x1e4>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	eec7 6a27 	vdiv.f32	s13, s14, s15
			/ (stp->pwm_timer->Instance->PSC + 1) - 1;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800105e:	3301      	adds	r3, #1
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800106c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001070:	ee77 7ac7 	vsub.f32	s15, s15, s14
	arr_des = (HAL_RCC_GetPCLK2Freq() * 2 / freq_des_steps)
 8001074:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001078:	ee17 2a90 	vmov	r2, s15
 800107c:	4b54      	ldr	r3, [pc, #336]	@ (80011d0 <stepper_move+0x1e8>)
 800107e:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(stp->direction_port, stp->direction_pin, direction); //DIRECTION
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6898      	ldr	r0, [r3, #8]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	899b      	ldrh	r3, [r3, #12]
 8001088:	7afa      	ldrb	r2, [r7, #11]
 800108a:	4619      	mov	r1, r3
 800108c:	f001 fb5e 	bl	800274c <HAL_GPIO_WritePin>

	if (stp->pwm_timer->Instance != TIM2) {
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800109a:	d028      	beq.n	80010ee <stepper_move+0x106>

		//reset_timers(stp);

		__HAL_TIM_SET_AUTORELOAD(stp->position_timer,
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a4:	3301      	adds	r3, #1
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	fb03 f202 	mul.w	r2, r3, r2
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3a01      	subs	r2, #1
 80010b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010be:	3301      	adds	r3, #1
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	fb03 f202 	mul.w	r2, r3, r2
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	3a01      	subs	r2, #1
 80010cc:	60da      	str	r2, [r3, #12]
				(n_steps * (stp->pwm_timer->Instance->PSC + 1)) - 1);
		__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_1,
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	0852      	lsrs	r2, r2, #1
 80010de:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);

		HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_1); //START PWM
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 faac 	bl	8003644 <HAL_TIM_PWM_Start_IT>
 80010ec:	e040      	b.n	8001170 <stepper_move+0x188>

	} else { //set parameters for the timer2 separately cause it has 2 channel
		if (flag_configured_timer2 != 1) { //this cause the second stepper must be equal to the first one
 80010ee:	4b39      	ldr	r3, [pc, #228]	@ (80011d4 <stepper_move+0x1ec>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d036      	beq.n	8001164 <stepper_move+0x17c>

			//reset_timers(stp);
			__HAL_TIM_SET_AUTORELOAD(stp->position_timer,
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fe:	3301      	adds	r3, #1
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	fb03 f202 	mul.w	r2, r3, r2
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3a01      	subs	r2, #1
 800110e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001118:	3301      	adds	r3, #1
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	fb03 f202 	mul.w	r2, r3, r2
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	3a01      	subs	r2, #1
 8001126:	60da      	str	r2, [r3, #12]
					(n_steps * (stp->pwm_timer->Instance->PSC + 1)) - 1);
			__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_1,
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	0852      	lsrs	r2, r2, #1
 8001138:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);

			__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_2,
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	0852      	lsrs	r2, r2, #1
 800114a:	639a      	str	r2, [r3, #56]	@ 0x38
					__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);
			HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_1); //START PWM
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fa76 	bl	8003644 <HAL_TIM_PWM_Start_IT>
						HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_2); //START PWM)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2104      	movs	r1, #4
 800115e:	4618      	mov	r0, r3
 8001160:	f002 fa70 	bl	8003644 <HAL_TIM_PWM_Start_IT>

		} else {


		}
		flag_configured_timer2 ^= 1;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <stepper_move+0x1ec>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f083 0301 	eor.w	r3, r3, #1
 800116c:	4a19      	ldr	r2, [pc, #100]	@ (80011d4 <stepper_move+0x1ec>)
 800116e:	6013      	str	r3, [r2, #0]

	}
	n_steps = n_steps * (stp->pwm_timer->Instance->PSC + 1);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001178:	3301      	adds	r3, #1
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	fb02 f303 	mul.w	r3, r2, r3
 8001180:	613b      	str	r3, [r7, #16]

	if (stp->pwm_timer->Instance == TIM1) {
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a13      	ldr	r2, [pc, #76]	@ (80011d8 <stepper_move+0x1f0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d102      	bne.n	8001194 <stepper_move+0x1ac>
		i = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	e00a      	b.n	80011aa <stepper_move+0x1c2>
	} else {
		if (stp->pwm_timer->Instance == TIM2) {
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800119e:	d102      	bne.n	80011a6 <stepper_move+0x1be>
			i = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e001      	b.n	80011aa <stepper_move+0x1c2>
		} else
			i = 2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	617b      	str	r3, [r7, #20]
	}
	n_steps_a[i] = n_steps;
 80011aa:	490c      	ldr	r1, [pc, #48]	@ (80011dc <stepper_move+0x1f4>)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	arr_des_a[i] = arr_des;
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <stepper_move+0x1e8>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4909      	ldr	r1, [pc, #36]	@ (80011e0 <stepper_move+0x1f8>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 80011c0:	bf00      	nop
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	43b40000 	.word	0x43b40000
 80011cc:	20000118 	.word	0x20000118
 80011d0:	20000024 	.word	0x20000024
 80011d4:	20000114 	.word	0x20000114
 80011d8:	40010000 	.word	0x40010000
 80011dc:	200000fc 	.word	0x200000fc
 80011e0:	20000108 	.word	0x20000108

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001230 <HAL_MspInit+0x4c>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001230 <HAL_MspInit+0x4c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	4a08      	ldr	r2, [pc, #32]	@ (8001230 <HAL_MspInit+0x4c>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001214:	6413      	str	r3, [r2, #64]	@ 0x40
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001222:	2006      	movs	r0, #6
 8001224:	f001 f8bc 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <NMI_Handler+0x4>

0800123c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <MemManage_Handler+0x4>

0800124c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <UsageFault_Handler+0x4>

0800125c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128a:	f000 ff75 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001298:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800129a:	f002 fba7 	bl	80039ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800129e:	4803      	ldr	r0, [pc, #12]	@ (80012ac <TIM1_UP_TIM10_IRQHandler+0x18>)
 80012a0:	f002 fba4 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000011c 	.word	0x2000011c
 80012ac:	20000314 	.word	0x20000314

080012b0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012b4:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80012b6:	f002 fb99 	bl	80039ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80012ba:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80012bc:	f002 fb96 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000011c 	.word	0x2000011c
 80012c8:	2000035c 	.word	0x2000035c

080012cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012d0:	4802      	ldr	r0, [pc, #8]	@ (80012dc <TIM2_IRQHandler+0x10>)
 80012d2:	f002 fb8b 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000164 	.word	0x20000164

080012e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012e4:	4802      	ldr	r0, [pc, #8]	@ (80012f0 <TIM3_IRQHandler+0x10>)
 80012e6:	f002 fb81 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200001ac 	.word	0x200001ac

080012f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012f8:	4802      	ldr	r0, [pc, #8]	@ (8001304 <TIM4_IRQHandler+0x10>)
 80012fa:	f002 fb77 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200001f4 	.word	0x200001f4

08001308 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DISABLE_button_Pin);
 800130c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001310:	f001 fa50 	bl	80027b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800131e:	f002 fb65 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200002cc 	.word	0x200002cc

0800132c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001332:	f002 fb5b 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200002cc 	.word	0x200002cc

08001340 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001346:	f002 fb51 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200002cc 	.word	0x200002cc

08001354 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <TIM8_CC_IRQHandler+0x10>)
 800135a:	f002 fb47 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200002cc 	.word	0x200002cc

08001368 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <TIM5_IRQHandler+0x10>)
 800136e:	f002 fb3d 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000023c 	.word	0x2000023c

0800137c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <TIM6_DAC_IRQHandler+0x10>)
 8001382:	f002 fb33 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000284 	.word	0x20000284

08001390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b096      	sub	sp, #88	@ 0x58
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
 80013e2:	615a      	str	r2, [r3, #20]
 80013e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2220      	movs	r2, #32
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 fd29 	bl	8004e44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013f2:	4b3f      	ldr	r3, [pc, #252]	@ (80014f0 <MX_TIM1_Init+0x13c>)
 80013f4:	4a3f      	ldr	r2, [pc, #252]	@ (80014f4 <MX_TIM1_Init+0x140>)
 80013f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80013f8:	4b3d      	ldr	r3, [pc, #244]	@ (80014f0 <MX_TIM1_Init+0x13c>)
 80013fa:	2204      	movs	r2, #4
 80013fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b3c      	ldr	r3, [pc, #240]	@ (80014f0 <MX_TIM1_Init+0x13c>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001404:	4b3a      	ldr	r3, [pc, #232]	@ (80014f0 <MX_TIM1_Init+0x13c>)
 8001406:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800140a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140c:	4b38      	ldr	r3, [pc, #224]	@ (80014f0 <MX_TIM1_Init+0x13c>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001412:	4b37      	ldr	r3, [pc, #220]	@ (80014f0 <MX_TIM1_Init+0x13c>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001418:	4b35      	ldr	r3, [pc, #212]	@ (80014f0 <MX_TIM1_Init+0x13c>)
 800141a:	2280      	movs	r2, #128	@ 0x80
 800141c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800141e:	4834      	ldr	r0, [pc, #208]	@ (80014f0 <MX_TIM1_Init+0x13c>)
 8001420:	f001 ffc8 	bl	80033b4 <HAL_TIM_Base_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800142a:	f7ff fd21 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001432:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001434:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001438:	4619      	mov	r1, r3
 800143a:	482d      	ldr	r0, [pc, #180]	@ (80014f0 <MX_TIM1_Init+0x13c>)
 800143c:	f002 fc88 	bl	8003d50 <HAL_TIM_ConfigClockSource>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001446:	f7ff fd13 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800144a:	4829      	ldr	r0, [pc, #164]	@ (80014f0 <MX_TIM1_Init+0x13c>)
 800144c:	f002 f8a1 	bl	8003592 <HAL_TIM_PWM_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001456:	f7ff fd0b 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800145a:	2320      	movs	r3, #32
 800145c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800145e:	2380      	movs	r3, #128	@ 0x80
 8001460:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001462:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001466:	4619      	mov	r1, r3
 8001468:	4821      	ldr	r0, [pc, #132]	@ (80014f0 <MX_TIM1_Init+0x13c>)
 800146a:	f003 f945 	bl	80046f8 <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001474:	f7ff fcfc 	bl	8000e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001478:	2360      	movs	r3, #96	@ 0x60
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 800147c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001480:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001482:	2300      	movs	r3, #0
 8001484:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001486:	2300      	movs	r3, #0
 8001488:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800148a:	2304      	movs	r3, #4
 800148c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	4814      	ldr	r0, [pc, #80]	@ (80014f0 <MX_TIM1_Init+0x13c>)
 80014a0:	f002 fb94 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80014aa:	f7ff fce1 	bl	8000e70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4807      	ldr	r0, [pc, #28]	@ (80014f0 <MX_TIM1_Init+0x13c>)
 80014d2:	f003 f98d 	bl	80047f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80014dc:	f7ff fcc8 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014e0:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <MX_TIM1_Init+0x13c>)
 80014e2:	f000 fc61 	bl	8001da8 <HAL_TIM_MspPostInit>

}
 80014e6:	bf00      	nop
 80014e8:	3758      	adds	r7, #88	@ 0x58
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000011c 	.word	0x2000011c
 80014f4:	40010000 	.word	0x40010000

080014f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	@ 0x38
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	f107 0320 	add.w	r3, r7, #32
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001528:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <MX_TIM2_Init+0x100>)
 800152a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800152e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8001530:	4b31      	ldr	r3, [pc, #196]	@ (80015f8 <MX_TIM2_Init+0x100>)
 8001532:	2204      	movs	r2, #4
 8001534:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001536:	4b30      	ldr	r3, [pc, #192]	@ (80015f8 <MX_TIM2_Init+0x100>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800153c:	4b2e      	ldr	r3, [pc, #184]	@ (80015f8 <MX_TIM2_Init+0x100>)
 800153e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001542:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001544:	4b2c      	ldr	r3, [pc, #176]	@ (80015f8 <MX_TIM2_Init+0x100>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800154a:	4b2b      	ldr	r3, [pc, #172]	@ (80015f8 <MX_TIM2_Init+0x100>)
 800154c:	2280      	movs	r2, #128	@ 0x80
 800154e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001550:	4829      	ldr	r0, [pc, #164]	@ (80015f8 <MX_TIM2_Init+0x100>)
 8001552:	f001 ff2f 	bl	80033b4 <HAL_TIM_Base_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800155c:	f7ff fc88 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001560:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001564:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001566:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800156a:	4619      	mov	r1, r3
 800156c:	4822      	ldr	r0, [pc, #136]	@ (80015f8 <MX_TIM2_Init+0x100>)
 800156e:	f002 fbef 	bl	8003d50 <HAL_TIM_ConfigClockSource>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001578:	f7ff fc7a 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800157c:	481e      	ldr	r0, [pc, #120]	@ (80015f8 <MX_TIM2_Init+0x100>)
 800157e:	f002 f808 	bl	8003592 <HAL_TIM_PWM_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001588:	f7ff fc72 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800158c:	2320      	movs	r3, #32
 800158e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001590:	2380      	movs	r3, #128	@ 0x80
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	4619      	mov	r1, r3
 800159a:	4817      	ldr	r0, [pc, #92]	@ (80015f8 <MX_TIM2_Init+0x100>)
 800159c:	f003 f8ac 	bl	80046f8 <HAL_TIMEx_MasterConfigSynchronization>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80015a6:	f7ff fc63 	bl	8000e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015aa:	2360      	movs	r3, #96	@ 0x60
 80015ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32768;
 80015ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015b8:	2304      	movs	r3, #4
 80015ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <MX_TIM2_Init+0x100>)
 80015c4:	f002 fb02 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80015ce:	f7ff fc4f 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2204      	movs	r2, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	4807      	ldr	r0, [pc, #28]	@ (80015f8 <MX_TIM2_Init+0x100>)
 80015da:	f002 faf7 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80015e4:	f7ff fc44 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015e8:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <MX_TIM2_Init+0x100>)
 80015ea:	f000 fbdd 	bl	8001da8 <HAL_TIM_MspPostInit>

}
 80015ee:	bf00      	nop
 80015f0:	3738      	adds	r7, #56	@ 0x38
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000164 	.word	0x20000164

080015fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08c      	sub	sp, #48	@ 0x30
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0320 	add.w	r3, r7, #32
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001628:	4b24      	ldr	r3, [pc, #144]	@ (80016bc <MX_TIM3_Init+0xc0>)
 800162a:	4a25      	ldr	r2, [pc, #148]	@ (80016c0 <MX_TIM3_Init+0xc4>)
 800162c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 800162e:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <MX_TIM3_Init+0xc0>)
 8001630:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001634:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <MX_TIM3_Init+0xc0>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 800163c:	4b1f      	ldr	r3, [pc, #124]	@ (80016bc <MX_TIM3_Init+0xc0>)
 800163e:	22c7      	movs	r2, #199	@ 0xc7
 8001640:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <MX_TIM3_Init+0xc0>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <MX_TIM3_Init+0xc0>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800164e:	481b      	ldr	r0, [pc, #108]	@ (80016bc <MX_TIM3_Init+0xc0>)
 8001650:	f001 feb0 	bl	80033b4 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800165a:	f7ff fc09 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001662:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001664:	f107 0320 	add.w	r3, r7, #32
 8001668:	4619      	mov	r1, r3
 800166a:	4814      	ldr	r0, [pc, #80]	@ (80016bc <MX_TIM3_Init+0xc0>)
 800166c:	f002 fb70 	bl	8003d50 <HAL_TIM_ConfigClockSource>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001676:	f7ff fbfb 	bl	8000e70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800167a:	2306      	movs	r3, #6
 800167c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800167e:	2310      	movs	r3, #16
 8001680:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	4619      	mov	r1, r3
 8001688:	480c      	ldr	r0, [pc, #48]	@ (80016bc <MX_TIM3_Init+0xc0>)
 800168a:	f002 fc28 	bl	8003ede <HAL_TIM_SlaveConfigSynchro>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001694:	f7ff fbec 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	4805      	ldr	r0, [pc, #20]	@ (80016bc <MX_TIM3_Init+0xc0>)
 80016a6:	f003 f827 	bl	80046f8 <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80016b0:	f7ff fbde 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	3730      	adds	r7, #48	@ 0x30
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200001ac 	.word	0x200001ac
 80016c0:	40000400 	.word	0x40000400

080016c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	@ 0x30
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016f0:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <MX_TIM4_Init+0xc0>)
 80016f2:	4a25      	ldr	r2, [pc, #148]	@ (8001788 <MX_TIM4_Init+0xc4>)
 80016f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 65535;
 80016f6:	4b23      	ldr	r3, [pc, #140]	@ (8001784 <MX_TIM4_Init+0xc0>)
 80016f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <MX_TIM4_Init+0xc0>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8001704:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <MX_TIM4_Init+0xc0>)
 8001706:	22c7      	movs	r2, #199	@ 0xc7
 8001708:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <MX_TIM4_Init+0xc0>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <MX_TIM4_Init+0xc0>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001716:	481b      	ldr	r0, [pc, #108]	@ (8001784 <MX_TIM4_Init+0xc0>)
 8001718:	f001 fe4c 	bl	80033b4 <HAL_TIM_Base_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001722:	f7ff fba5 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800172a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	4619      	mov	r1, r3
 8001732:	4814      	ldr	r0, [pc, #80]	@ (8001784 <MX_TIM4_Init+0xc0>)
 8001734:	f002 fb0c 	bl	8003d50 <HAL_TIM_ConfigClockSource>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800173e:	f7ff fb97 	bl	8000e70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001742:	2306      	movs	r3, #6
 8001744:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	4619      	mov	r1, r3
 8001750:	480c      	ldr	r0, [pc, #48]	@ (8001784 <MX_TIM4_Init+0xc0>)
 8001752:	f002 fbc4 	bl	8003ede <HAL_TIM_SlaveConfigSynchro>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800175c:	f7ff fb88 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	@ (8001784 <MX_TIM4_Init+0xc0>)
 800176e:	f002 ffc3 	bl	80046f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8001778:	f7ff fb7a 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	3730      	adds	r7, #48	@ 0x30
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200001f4 	.word	0x200001f4
 8001788:	40000800 	.word	0x40000800

0800178c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	@ 0x30
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017b8:	4b24      	ldr	r3, [pc, #144]	@ (800184c <MX_TIM5_Init+0xc0>)
 80017ba:	4a25      	ldr	r2, [pc, #148]	@ (8001850 <MX_TIM5_Init+0xc4>)
 80017bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 80017be:	4b23      	ldr	r3, [pc, #140]	@ (800184c <MX_TIM5_Init+0xc0>)
 80017c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c6:	4b21      	ldr	r3, [pc, #132]	@ (800184c <MX_TIM5_Init+0xc0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 199;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <MX_TIM5_Init+0xc0>)
 80017ce:	22c7      	movs	r2, #199	@ 0xc7
 80017d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <MX_TIM5_Init+0xc0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <MX_TIM5_Init+0xc0>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017de:	481b      	ldr	r0, [pc, #108]	@ (800184c <MX_TIM5_Init+0xc0>)
 80017e0:	f001 fde8 	bl	80033b4 <HAL_TIM_Base_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 80017ea:	f7ff fb41 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017f4:	f107 0320 	add.w	r3, r7, #32
 80017f8:	4619      	mov	r1, r3
 80017fa:	4814      	ldr	r0, [pc, #80]	@ (800184c <MX_TIM5_Init+0xc0>)
 80017fc:	f002 faa8 	bl	8003d50 <HAL_TIM_ConfigClockSource>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001806:	f7ff fb33 	bl	8000e70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800180a:	2306      	movs	r3, #6
 800180c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800180e:	2330      	movs	r3, #48	@ 0x30
 8001810:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	4619      	mov	r1, r3
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <MX_TIM5_Init+0xc0>)
 800181a:	f002 fb60 	bl	8003ede <HAL_TIM_SlaveConfigSynchro>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001824:	f7ff fb24 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_TIM5_Init+0xc0>)
 8001836:	f002 ff5f 	bl	80046f8 <HAL_TIMEx_MasterConfigSynchronization>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 8001840:	f7ff fb16 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3730      	adds	r7, #48	@ 0x30
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2000023c 	.word	0x2000023c
 8001850:	40000c00 	.word	0x40000c00

08001854 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185a:	463b      	mov	r3, r7
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <MX_TIM6_Init+0x64>)
 8001864:	4a15      	ldr	r2, [pc, #84]	@ (80018bc <MX_TIM6_Init+0x68>)
 8001866:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1400*3;
 8001868:	4b13      	ldr	r3, [pc, #76]	@ (80018b8 <MX_TIM6_Init+0x64>)
 800186a:	f241 0268 	movw	r2, #4200	@ 0x1068
 800186e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <MX_TIM6_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 59999;
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <MX_TIM6_Init+0x64>)
 8001878:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800187c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <MX_TIM6_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001884:	480c      	ldr	r0, [pc, #48]	@ (80018b8 <MX_TIM6_Init+0x64>)
 8001886:	f001 fd95 	bl	80033b4 <HAL_TIM_Base_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001890:	f7ff faee 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800189c:	463b      	mov	r3, r7
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_TIM6_Init+0x64>)
 80018a2:	f002 ff29 	bl	80046f8 <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018ac:	f7ff fae0 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000284 	.word	0x20000284
 80018bc:	40001000 	.word	0x40001000

080018c0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b096      	sub	sp, #88	@ 0x58
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	615a      	str	r2, [r3, #20]
 80018f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2220      	movs	r2, #32
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 faa3 	bl	8004e44 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018fe:	4b3f      	ldr	r3, [pc, #252]	@ (80019fc <MX_TIM8_Init+0x13c>)
 8001900:	4a3f      	ldr	r2, [pc, #252]	@ (8001a00 <MX_TIM8_Init+0x140>)
 8001902:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4;
 8001904:	4b3d      	ldr	r3, [pc, #244]	@ (80019fc <MX_TIM8_Init+0x13c>)
 8001906:	2204      	movs	r2, #4
 8001908:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b3c      	ldr	r3, [pc, #240]	@ (80019fc <MX_TIM8_Init+0x13c>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001910:	4b3a      	ldr	r3, [pc, #232]	@ (80019fc <MX_TIM8_Init+0x13c>)
 8001912:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001916:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b38      	ldr	r3, [pc, #224]	@ (80019fc <MX_TIM8_Init+0x13c>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800191e:	4b37      	ldr	r3, [pc, #220]	@ (80019fc <MX_TIM8_Init+0x13c>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001924:	4b35      	ldr	r3, [pc, #212]	@ (80019fc <MX_TIM8_Init+0x13c>)
 8001926:	2280      	movs	r2, #128	@ 0x80
 8001928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800192a:	4834      	ldr	r0, [pc, #208]	@ (80019fc <MX_TIM8_Init+0x13c>)
 800192c:	f001 fd42 	bl	80033b4 <HAL_TIM_Base_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001936:	f7ff fa9b 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001940:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001944:	4619      	mov	r1, r3
 8001946:	482d      	ldr	r0, [pc, #180]	@ (80019fc <MX_TIM8_Init+0x13c>)
 8001948:	f002 fa02 	bl	8003d50 <HAL_TIM_ConfigClockSource>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001952:	f7ff fa8d 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001956:	4829      	ldr	r0, [pc, #164]	@ (80019fc <MX_TIM8_Init+0x13c>)
 8001958:	f001 fe1b 	bl	8003592 <HAL_TIM_PWM_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001962:	f7ff fa85 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001966:	2320      	movs	r3, #32
 8001968:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800196a:	2380      	movs	r3, #128	@ 0x80
 800196c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800196e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001972:	4619      	mov	r1, r3
 8001974:	4821      	ldr	r0, [pc, #132]	@ (80019fc <MX_TIM8_Init+0x13c>)
 8001976:	f002 febf 	bl	80046f8 <HAL_TIMEx_MasterConfigSynchronization>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001980:	f7ff fa76 	bl	8000e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001984:	2360      	movs	r3, #96	@ 0x60
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 8001988:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800198c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198e:	2300      	movs	r3, #0
 8001990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001992:	2300      	movs	r3, #0
 8001994:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001996:	2304      	movs	r3, #4
 8001998:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a6:	2200      	movs	r2, #0
 80019a8:	4619      	mov	r1, r3
 80019aa:	4814      	ldr	r0, [pc, #80]	@ (80019fc <MX_TIM8_Init+0x13c>)
 80019ac:	f002 f90e 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80019b6:	f7ff fa5b 	bl	8000e70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4619      	mov	r1, r3
 80019dc:	4807      	ldr	r0, [pc, #28]	@ (80019fc <MX_TIM8_Init+0x13c>)
 80019de:	f002 ff07 	bl	80047f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 80019e8:	f7ff fa42 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80019ec:	4803      	ldr	r0, [pc, #12]	@ (80019fc <MX_TIM8_Init+0x13c>)
 80019ee:	f000 f9db 	bl	8001da8 <HAL_TIM_MspPostInit>

}
 80019f2:	bf00      	nop
 80019f4:	3758      	adds	r7, #88	@ 0x58
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200002cc 	.word	0x200002cc
 8001a00:	40010400 	.word	0x40010400

08001a04 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
 8001a18:	615a      	str	r2, [r3, #20]
 8001a1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <MX_TIM10_Init+0x94>)
 8001a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001a9c <MX_TIM10_Init+0x98>)
 8001a20:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001a22:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <MX_TIM10_Init+0x94>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <MX_TIM10_Init+0x94>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <MX_TIM10_Init+0x94>)
 8001a30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a34:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a36:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <MX_TIM10_Init+0x94>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <MX_TIM10_Init+0x94>)
 8001a3e:	2280      	movs	r2, #128	@ 0x80
 8001a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001a42:	4815      	ldr	r0, [pc, #84]	@ (8001a98 <MX_TIM10_Init+0x94>)
 8001a44:	f001 fcb6 	bl	80033b4 <HAL_TIM_Base_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001a4e:	f7ff fa0f 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001a52:	4811      	ldr	r0, [pc, #68]	@ (8001a98 <MX_TIM10_Init+0x94>)
 8001a54:	f001 fd9d 	bl	8003592 <HAL_TIM_PWM_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001a5e:	f7ff fa07 	bl	8000e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a62:	2360      	movs	r3, #96	@ 0x60
 8001a64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001a66:	2301      	movs	r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	4619      	mov	r1, r3
 8001a78:	4807      	ldr	r0, [pc, #28]	@ (8001a98 <MX_TIM10_Init+0x94>)
 8001a7a:	f002 f8a7 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001a84:	f7ff f9f4 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001a88:	4803      	ldr	r0, [pc, #12]	@ (8001a98 <MX_TIM10_Init+0x94>)
 8001a8a:	f000 f98d 	bl	8001da8 <HAL_TIM_MspPostInit>

}
 8001a8e:	bf00      	nop
 8001a90:	3720      	adds	r7, #32
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000314 	.word	0x20000314
 8001a9c:	40014400 	.word	0x40014400

08001aa0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
 8001ab4:	615a      	str	r2, [r3, #20]
 8001ab6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b34 <MX_TIM11_Init+0x94>)
 8001aba:	4a1f      	ldr	r2, [pc, #124]	@ (8001b38 <MX_TIM11_Init+0x98>)
 8001abc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001abe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <MX_TIM11_Init+0x94>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b34 <MX_TIM11_Init+0x94>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001aca:	4b1a      	ldr	r3, [pc, #104]	@ (8001b34 <MX_TIM11_Init+0x94>)
 8001acc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ad0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad2:	4b18      	ldr	r3, [pc, #96]	@ (8001b34 <MX_TIM11_Init+0x94>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ad8:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <MX_TIM11_Init+0x94>)
 8001ada:	2280      	movs	r2, #128	@ 0x80
 8001adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001ade:	4815      	ldr	r0, [pc, #84]	@ (8001b34 <MX_TIM11_Init+0x94>)
 8001ae0:	f001 fc68 	bl	80033b4 <HAL_TIM_Base_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001aea:	f7ff f9c1 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001aee:	4811      	ldr	r0, [pc, #68]	@ (8001b34 <MX_TIM11_Init+0x94>)
 8001af0:	f001 fd4f 	bl	8003592 <HAL_TIM_PWM_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001afa:	f7ff f9b9 	bl	8000e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001afe:	2360      	movs	r3, #96	@ 0x60
 8001b00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	4619      	mov	r1, r3
 8001b14:	4807      	ldr	r0, [pc, #28]	@ (8001b34 <MX_TIM11_Init+0x94>)
 8001b16:	f002 f859 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001b20:	f7ff f9a6 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001b24:	4803      	ldr	r0, [pc, #12]	@ (8001b34 <MX_TIM11_Init+0x94>)
 8001b26:	f000 f93f 	bl	8001da8 <HAL_TIM_MspPostInit>

}
 8001b2a:	bf00      	nop
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000035c 	.word	0x2000035c
 8001b38:	40014800 	.word	0x40014800

08001b3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	@ 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a8e      	ldr	r2, [pc, #568]	@ (8001d84 <HAL_TIM_Base_MspInit+0x248>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d11e      	bne.n	8001b8c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b52:	4b8d      	ldr	r3, [pc, #564]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	4a8c      	ldr	r2, [pc, #560]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5e:	4b8a      	ldr	r3, [pc, #552]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	2019      	movs	r0, #25
 8001b70:	f000 fc21 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b74:	2019      	movs	r0, #25
 8001b76:	f000 fc3a 	bl	80023ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	201a      	movs	r0, #26
 8001b80:	f000 fc19 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b84:	201a      	movs	r0, #26
 8001b86:	f000 fc32 	bl	80023ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001b8a:	e0f6      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x23e>
  else if(tim_baseHandle->Instance==TIM2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b94:	d116      	bne.n	8001bc4 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b9a:	4b7b      	ldr	r3, [pc, #492]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	4a7a      	ldr	r2, [pc, #488]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba6:	4b78      	ldr	r3, [pc, #480]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	201c      	movs	r0, #28
 8001bb8:	f000 fbfd 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bbc:	201c      	movs	r0, #28
 8001bbe:	f000 fc16 	bl	80023ee <HAL_NVIC_EnableIRQ>
}
 8001bc2:	e0da      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x23e>
  else if(tim_baseHandle->Instance==TIM3)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a70      	ldr	r2, [pc, #448]	@ (8001d8c <HAL_TIM_Base_MspInit+0x250>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d116      	bne.n	8001bfc <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a6c      	ldr	r2, [pc, #432]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bde:	4b6a      	ldr	r3, [pc, #424]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2101      	movs	r1, #1
 8001bee:	201d      	movs	r0, #29
 8001bf0:	f000 fbe1 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bf4:	201d      	movs	r0, #29
 8001bf6:	f000 fbfa 	bl	80023ee <HAL_NVIC_EnableIRQ>
}
 8001bfa:	e0be      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x23e>
  else if(tim_baseHandle->Instance==TIM4)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a63      	ldr	r2, [pc, #396]	@ (8001d90 <HAL_TIM_Base_MspInit+0x254>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d116      	bne.n	8001c34 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
 8001c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	4a5e      	ldr	r2, [pc, #376]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c16:	4b5c      	ldr	r3, [pc, #368]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2101      	movs	r1, #1
 8001c26:	201e      	movs	r0, #30
 8001c28:	f000 fbc5 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c2c:	201e      	movs	r0, #30
 8001c2e:	f000 fbde 	bl	80023ee <HAL_NVIC_EnableIRQ>
}
 8001c32:	e0a2      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x23e>
  else if(tim_baseHandle->Instance==TIM5)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a56      	ldr	r2, [pc, #344]	@ (8001d94 <HAL_TIM_Base_MspInit+0x258>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d116      	bne.n	8001c6c <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	4b51      	ldr	r3, [pc, #324]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	4a50      	ldr	r2, [pc, #320]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	2032      	movs	r0, #50	@ 0x32
 8001c60:	f000 fba9 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c64:	2032      	movs	r0, #50	@ 0x32
 8001c66:	f000 fbc2 	bl	80023ee <HAL_NVIC_EnableIRQ>
}
 8001c6a:	e086      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x23e>
  else if(tim_baseHandle->Instance==TIM6)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a49      	ldr	r2, [pc, #292]	@ (8001d98 <HAL_TIM_Base_MspInit+0x25c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d116      	bne.n	8001ca4 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	4b43      	ldr	r3, [pc, #268]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	4a42      	ldr	r2, [pc, #264]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001c80:	f043 0310 	orr.w	r3, r3, #16
 8001c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c86:	4b40      	ldr	r3, [pc, #256]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	2036      	movs	r0, #54	@ 0x36
 8001c98:	f000 fb8d 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c9c:	2036      	movs	r0, #54	@ 0x36
 8001c9e:	f000 fba6 	bl	80023ee <HAL_NVIC_EnableIRQ>
}
 8001ca2:	e06a      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x23e>
  else if(tim_baseHandle->Instance==TIM8)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a3c      	ldr	r2, [pc, #240]	@ (8001d9c <HAL_TIM_Base_MspInit+0x260>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d12e      	bne.n	8001d0c <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	4b35      	ldr	r3, [pc, #212]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	4a34      	ldr	r2, [pc, #208]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cbe:	4b32      	ldr	r3, [pc, #200]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 1, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2101      	movs	r1, #1
 8001cce:	202b      	movs	r0, #43	@ 0x2b
 8001cd0:	f000 fb71 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001cd4:	202b      	movs	r0, #43	@ 0x2b
 8001cd6:	f000 fb8a 	bl	80023ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2101      	movs	r1, #1
 8001cde:	202c      	movs	r0, #44	@ 0x2c
 8001ce0:	f000 fb69 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001ce4:	202c      	movs	r0, #44	@ 0x2c
 8001ce6:	f000 fb82 	bl	80023ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2101      	movs	r1, #1
 8001cee:	202d      	movs	r0, #45	@ 0x2d
 8001cf0:	f000 fb61 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001cf4:	202d      	movs	r0, #45	@ 0x2d
 8001cf6:	f000 fb7a 	bl	80023ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	202e      	movs	r0, #46	@ 0x2e
 8001d00:	f000 fb59 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001d04:	202e      	movs	r0, #46	@ 0x2e
 8001d06:	f000 fb72 	bl	80023ee <HAL_NVIC_EnableIRQ>
}
 8001d0a:	e036      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x23e>
  else if(tim_baseHandle->Instance==TIM10)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a23      	ldr	r2, [pc, #140]	@ (8001da0 <HAL_TIM_Base_MspInit+0x264>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d116      	bne.n	8001d44 <HAL_TIM_Base_MspInit+0x208>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d26:	4b18      	ldr	r3, [pc, #96]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2101      	movs	r1, #1
 8001d36:	2019      	movs	r0, #25
 8001d38:	f000 fb3d 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d3c:	2019      	movs	r0, #25
 8001d3e:	f000 fb56 	bl	80023ee <HAL_NVIC_EnableIRQ>
}
 8001d42:	e01a      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x23e>
  else if(tim_baseHandle->Instance==TIM11)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a16      	ldr	r2, [pc, #88]	@ (8001da4 <HAL_TIM_Base_MspInit+0x268>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d115      	bne.n	8001d7a <HAL_TIM_Base_MspInit+0x23e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	4a0c      	ldr	r2, [pc, #48]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <HAL_TIM_Base_MspInit+0x24c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	201a      	movs	r0, #26
 8001d70:	f000 fb21 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001d74:	201a      	movs	r0, #26
 8001d76:	f000 fb3a 	bl	80023ee <HAL_NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3730      	adds	r7, #48	@ 0x30
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40010000 	.word	0x40010000
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	40000800 	.word	0x40000800
 8001d94:	40000c00 	.word	0x40000c00
 8001d98:	40001000 	.word	0x40001000
 8001d9c:	40010400 	.word	0x40010400
 8001da0:	40014400 	.word	0x40014400
 8001da4:	40014800 	.word	0x40014800

08001da8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	@ 0x30
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a5b      	ldr	r2, [pc, #364]	@ (8001f34 <HAL_TIM_MspPostInit+0x18c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d11f      	bne.n	8001e0a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	4b5a      	ldr	r3, [pc, #360]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a59      	ldr	r2, [pc, #356]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b57      	ldr	r3, [pc, #348]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 8001de6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4619      	mov	r1, r3
 8001e02:	484e      	ldr	r0, [pc, #312]	@ (8001f3c <HAL_TIM_MspPostInit+0x194>)
 8001e04:	f000 fb0e 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001e08:	e090      	b.n	8001f2c <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM2)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e12:	d11e      	bne.n	8001e52 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	4b47      	ldr	r3, [pc, #284]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1c:	4a46      	ldr	r2, [pc, #280]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e24:	4b44      	ldr	r3, [pc, #272]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin;
 8001e30:	2303      	movs	r3, #3
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	483c      	ldr	r0, [pc, #240]	@ (8001f3c <HAL_TIM_MspPostInit+0x194>)
 8001e4c:	f000 faea 	bl	8002424 <HAL_GPIO_Init>
}
 8001e50:	e06c      	b.n	8001f2c <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM8)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a3a      	ldr	r2, [pc, #232]	@ (8001f40 <HAL_TIM_MspPostInit+0x198>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d11e      	bne.n	8001e9a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	4b35      	ldr	r3, [pc, #212]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e64:	4a34      	ldr	r2, [pc, #208]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6c:	4b32      	ldr	r3, [pc, #200]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM4_Pin;
 8001e78:	2340      	movs	r3, #64	@ 0x40
 8001e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM4_GPIO_Port, &GPIO_InitStruct);
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	4619      	mov	r1, r3
 8001e92:	482c      	ldr	r0, [pc, #176]	@ (8001f44 <HAL_TIM_MspPostInit+0x19c>)
 8001e94:	f000 fac6 	bl	8002424 <HAL_GPIO_Init>
}
 8001e98:	e048      	b.n	8001f2c <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM10)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f48 <HAL_TIM_MspPostInit+0x1a0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d11f      	bne.n	8001ee4 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eac:	4a22      	ldr	r2, [pc, #136]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb4:	4b20      	ldr	r3, [pc, #128]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_1_Pin;
 8001ec0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SERVO_1_GPIO_Port, &GPIO_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	481b      	ldr	r0, [pc, #108]	@ (8001f4c <HAL_TIM_MspPostInit+0x1a4>)
 8001ede:	f000 faa1 	bl	8002424 <HAL_GPIO_Init>
}
 8001ee2:	e023      	b.n	8001f2c <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM11)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a19      	ldr	r2, [pc, #100]	@ (8001f50 <HAL_TIM_MspPostInit+0x1a8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d11e      	bne.n	8001f2c <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a10      	ldr	r2, [pc, #64]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <HAL_TIM_MspPostInit+0x190>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8001f0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	4619      	mov	r1, r3
 8001f26:	4809      	ldr	r0, [pc, #36]	@ (8001f4c <HAL_TIM_MspPostInit+0x1a4>)
 8001f28:	f000 fa7c 	bl	8002424 <HAL_GPIO_Init>
}
 8001f2c:	bf00      	nop
 8001f2e:	3730      	adds	r7, #48	@ 0x30
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40010000 	.word	0x40010000
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40010400 	.word	0x40010400
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40014400 	.word	0x40014400
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	40014800 	.word	0x40014800

08001f54 <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN 1 */

//emergency stop button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==DISABLE_button_Pin){
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f64:	d112      	bne.n	8001f8c <HAL_GPIO_EXTI_Callback+0x38>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET); //the stepper motors have a negative enable logic
 8001f66:	2201      	movs	r2, #1
 8001f68:	2120      	movs	r1, #32
 8001f6a:	480a      	ldr	r0, [pc, #40]	@ (8001f94 <HAL_GPIO_EXTI_Callback+0x40>)
 8001f6c:	f000 fbee 	bl	800274c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SERVO_en_GPIO_Port, SERVO_en_Pin, GPIO_PIN_SET); //disable the servp
 8001f70:	2201      	movs	r2, #1
 8001f72:	2102      	movs	r1, #2
 8001f74:	4808      	ldr	r0, [pc, #32]	@ (8001f98 <HAL_GPIO_EXTI_Callback+0x44>)
 8001f76:	f000 fbe9 	bl	800274c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENDEFF_en_GPIO_Port, ENDEFF_en_Pin, GPIO_PIN_SET); //disable the end_eff
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	4806      	ldr	r0, [pc, #24]	@ (8001f98 <HAL_GPIO_EXTI_Callback+0x44>)
 8001f80:	f000 fbe4 	bl	800274c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f84:	b672      	cpsid	i
}
 8001f86:	bf00      	nop
		__disable_irq();

		while(1){
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <HAL_GPIO_EXTI_Callback+0x34>

		}
	}
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020400 	.word	0x40020400

08001f9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	@ (8001fec <MX_USART2_UART_Init+0x50>)
 8001fa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fd2:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fd4:	f002 fc72 	bl	80048bc <HAL_UART_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fde:	f7fe ff47 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200003a4 	.word	0x200003a4
 8001fec:	40004400 	.word	0x40004400

08001ff0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	@ 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a19      	ldr	r2, [pc, #100]	@ (8002074 <HAL_UART_MspInit+0x84>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12b      	bne.n	800206a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <HAL_UART_MspInit+0x88>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4a17      	ldr	r2, [pc, #92]	@ (8002078 <HAL_UART_MspInit+0x88>)
 800201c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002020:	6413      	str	r3, [r2, #64]	@ 0x40
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <HAL_UART_MspInit+0x88>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_UART_MspInit+0x88>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a10      	ldr	r2, [pc, #64]	@ (8002078 <HAL_UART_MspInit+0x88>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <HAL_UART_MspInit+0x88>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800204a:	230c      	movs	r3, #12
 800204c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800205a:	2307      	movs	r3, #7
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	@ (800207c <HAL_UART_MspInit+0x8c>)
 8002066:	f000 f9dd 	bl	8002424 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	@ 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40004400 	.word	0x40004400
 8002078:	40023800 	.word	0x40023800
 800207c:	40020000 	.word	0x40020000

08002080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002080:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002084:	f7ff f984 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002088:	480c      	ldr	r0, [pc, #48]	@ (80020bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800208a:	490d      	ldr	r1, [pc, #52]	@ (80020c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800208c:	4a0d      	ldr	r2, [pc, #52]	@ (80020c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002090:	e002      	b.n	8002098 <LoopCopyDataInit>

08002092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002096:	3304      	adds	r3, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800209c:	d3f9      	bcc.n	8002092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209e:	4a0a      	ldr	r2, [pc, #40]	@ (80020c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020a0:	4c0a      	ldr	r4, [pc, #40]	@ (80020cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a4:	e001      	b.n	80020aa <LoopFillZerobss>

080020a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a8:	3204      	adds	r2, #4

080020aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ac:	d3fb      	bcc.n	80020a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020ae:	f002 fed1 	bl	8004e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020b2:	f7fe fda3 	bl	8000bfc <main>
  bx  lr    
 80020b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c0:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80020c4:	08004edc 	.word	0x08004edc
  ldr r2, =_sbss
 80020c8:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80020cc:	200003f0 	.word	0x200003f0

080020d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC_IRQHandler>
	...

080020d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002114 <HAL_Init+0x40>)
 80020de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <HAL_Init+0x40>)
 80020ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a07      	ldr	r2, [pc, #28]	@ (8002114 <HAL_Init+0x40>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fc:	2003      	movs	r0, #3
 80020fe:	f000 f94f 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002102:	2000      	movs	r0, #0
 8002104:	f000 f808 	bl	8002118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002108:	f7ff f86c 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023c00 	.word	0x40023c00

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_InitTick+0x54>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <HAL_InitTick+0x58>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f967 	bl	800240a <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00e      	b.n	8002164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0f      	cmp	r3, #15
 800214a:	d80a      	bhi.n	8002162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f000 f92f 	bl	80023b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4a06      	ldr	r2, [pc, #24]	@ (8002174 <HAL_InitTick+0x5c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000028 	.word	0x20000028
 8002170:	20000030 	.word	0x20000030
 8002174:	2000002c 	.word	0x2000002c

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	@ (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000030 	.word	0x20000030
 800219c:	200003ec 	.word	0x200003ec

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	200003ec 	.word	0x200003ec

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff ffee 	bl	80021a0 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000030 	.word	0x20000030

08002200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002210:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800221c:	4013      	ands	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002228:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800222c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002232:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800224c:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <__NVIC_GetPriorityGrouping+0x18>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	f003 0307 	and.w	r3, r3, #7
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	2b00      	cmp	r3, #0
 8002274:	db0b      	blt.n	800228e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4907      	ldr	r1, [pc, #28]	@ (800229c <__NVIC_EnableIRQ+0x38>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2001      	movs	r0, #1
 8002286:	fa00 f202 	lsl.w	r2, r0, r2
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000e100 	.word	0xe000e100

080022a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	db0a      	blt.n	80022ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	490c      	ldr	r1, [pc, #48]	@ (80022ec <__NVIC_SetPriority+0x4c>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	0112      	lsls	r2, r2, #4
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	440b      	add	r3, r1
 80022c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c8:	e00a      	b.n	80022e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4908      	ldr	r1, [pc, #32]	@ (80022f0 <__NVIC_SetPriority+0x50>)
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	3b04      	subs	r3, #4
 80022d8:	0112      	lsls	r2, r2, #4
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	440b      	add	r3, r1
 80022de:	761a      	strb	r2, [r3, #24]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000e100 	.word	0xe000e100
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	@ 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f1c3 0307 	rsb	r3, r3, #7
 800230e:	2b04      	cmp	r3, #4
 8002310:	bf28      	it	cs
 8002312:	2304      	movcs	r3, #4
 8002314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3304      	adds	r3, #4
 800231a:	2b06      	cmp	r3, #6
 800231c:	d902      	bls.n	8002324 <NVIC_EncodePriority+0x30>
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3b03      	subs	r3, #3
 8002322:	e000      	b.n	8002326 <NVIC_EncodePriority+0x32>
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	f04f 32ff 	mov.w	r2, #4294967295
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	401a      	ands	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800233c:	f04f 31ff 	mov.w	r1, #4294967295
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	43d9      	mvns	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	4313      	orrs	r3, r2
         );
}
 800234e:	4618      	mov	r0, r3
 8002350:	3724      	adds	r7, #36	@ 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800236c:	d301      	bcc.n	8002372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236e:	2301      	movs	r3, #1
 8002370:	e00f      	b.n	8002392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002372:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <SysTick_Config+0x40>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237a:	210f      	movs	r1, #15
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f7ff ff8e 	bl	80022a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <SysTick_Config+0x40>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238a:	4b04      	ldr	r3, [pc, #16]	@ (800239c <SysTick_Config+0x40>)
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	e000e010 	.word	0xe000e010

080023a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff29 	bl	8002200 <__NVIC_SetPriorityGrouping>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c8:	f7ff ff3e 	bl	8002248 <__NVIC_GetPriorityGrouping>
 80023cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7ff ff8e 	bl	80022f4 <NVIC_EncodePriority>
 80023d8:	4602      	mov	r2, r0
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff5d 	bl	80022a0 <__NVIC_SetPriority>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff31 	bl	8002264 <__NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffa2 	bl	800235c <SysTick_Config>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	@ 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	e165      	b.n	800270c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	429a      	cmp	r2, r3
 800245a:	f040 8154 	bne.w	8002706 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d005      	beq.n	8002476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002472:	2b02      	cmp	r3, #2
 8002474:	d130      	bne.n	80024d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	2203      	movs	r2, #3
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 0201 	and.w	r2, r3, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d017      	beq.n	8002514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d123      	bne.n	8002568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	220f      	movs	r2, #15
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	08da      	lsrs	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3208      	adds	r2, #8
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0203 	and.w	r2, r3, #3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80ae 	beq.w	8002706 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002724 <HAL_GPIO_Init+0x300>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002724 <HAL_GPIO_Init+0x300>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002724 <HAL_GPIO_Init+0x300>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025c6:	4a58      	ldr	r2, [pc, #352]	@ (8002728 <HAL_GPIO_Init+0x304>)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	220f      	movs	r2, #15
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4f      	ldr	r2, [pc, #316]	@ (800272c <HAL_GPIO_Init+0x308>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d025      	beq.n	800263e <HAL_GPIO_Init+0x21a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002730 <HAL_GPIO_Init+0x30c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01f      	beq.n	800263a <HAL_GPIO_Init+0x216>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002734 <HAL_GPIO_Init+0x310>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d019      	beq.n	8002636 <HAL_GPIO_Init+0x212>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4c      	ldr	r2, [pc, #304]	@ (8002738 <HAL_GPIO_Init+0x314>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x20e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4b      	ldr	r2, [pc, #300]	@ (800273c <HAL_GPIO_Init+0x318>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x20a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4a      	ldr	r2, [pc, #296]	@ (8002740 <HAL_GPIO_Init+0x31c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x206>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a49      	ldr	r2, [pc, #292]	@ (8002744 <HAL_GPIO_Init+0x320>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x202>
 8002622:	2306      	movs	r3, #6
 8002624:	e00c      	b.n	8002640 <HAL_GPIO_Init+0x21c>
 8002626:	2307      	movs	r3, #7
 8002628:	e00a      	b.n	8002640 <HAL_GPIO_Init+0x21c>
 800262a:	2305      	movs	r3, #5
 800262c:	e008      	b.n	8002640 <HAL_GPIO_Init+0x21c>
 800262e:	2304      	movs	r3, #4
 8002630:	e006      	b.n	8002640 <HAL_GPIO_Init+0x21c>
 8002632:	2303      	movs	r3, #3
 8002634:	e004      	b.n	8002640 <HAL_GPIO_Init+0x21c>
 8002636:	2302      	movs	r3, #2
 8002638:	e002      	b.n	8002640 <HAL_GPIO_Init+0x21c>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_GPIO_Init+0x21c>
 800263e:	2300      	movs	r3, #0
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	f002 0203 	and.w	r2, r2, #3
 8002646:	0092      	lsls	r2, r2, #2
 8002648:	4093      	lsls	r3, r2
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002650:	4935      	ldr	r1, [pc, #212]	@ (8002728 <HAL_GPIO_Init+0x304>)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265e:	4b3a      	ldr	r3, [pc, #232]	@ (8002748 <HAL_GPIO_Init+0x324>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002682:	4a31      	ldr	r2, [pc, #196]	@ (8002748 <HAL_GPIO_Init+0x324>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002688:	4b2f      	ldr	r3, [pc, #188]	@ (8002748 <HAL_GPIO_Init+0x324>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ac:	4a26      	ldr	r2, [pc, #152]	@ (8002748 <HAL_GPIO_Init+0x324>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026b2:	4b25      	ldr	r3, [pc, #148]	@ (8002748 <HAL_GPIO_Init+0x324>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002748 <HAL_GPIO_Init+0x324>)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002748 <HAL_GPIO_Init+0x324>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002700:	4a11      	ldr	r2, [pc, #68]	@ (8002748 <HAL_GPIO_Init+0x324>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3301      	adds	r3, #1
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b0f      	cmp	r3, #15
 8002710:	f67f ae96 	bls.w	8002440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3724      	adds	r7, #36	@ 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	40013800 	.word	0x40013800
 800272c:	40020000 	.word	0x40020000
 8002730:	40020400 	.word	0x40020400
 8002734:	40020800 	.word	0x40020800
 8002738:	40020c00 	.word	0x40020c00
 800273c:	40021000 	.word	0x40021000
 8002740:	40021400 	.word	0x40021400
 8002744:	40021800 	.word	0x40021800
 8002748:	40013c00 	.word	0x40013c00

0800274c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
 8002758:	4613      	mov	r3, r2
 800275a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002768:	e003      	b.n	8002772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	041a      	lsls	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	619a      	str	r2, [r3, #24]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002790:	887a      	ldrh	r2, [r7, #2]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4013      	ands	r3, r2
 8002796:	041a      	lsls	r2, r3, #16
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	43d9      	mvns	r1, r3
 800279c:	887b      	ldrh	r3, [r7, #2]
 800279e:	400b      	ands	r3, r1
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	619a      	str	r2, [r3, #24]
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027be:	4b08      	ldr	r3, [pc, #32]	@ (80027e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d006      	beq.n	80027d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027ca:	4a05      	ldr	r2, [pc, #20]	@ (80027e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fbbe 	bl	8001f54 <HAL_GPIO_EXTI_Callback>
  }
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40013c00 	.word	0x40013c00

080027e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0cc      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b68      	ldr	r3, [pc, #416]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d90c      	bls.n	8002820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b65      	ldr	r3, [pc, #404]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b63      	ldr	r3, [pc, #396]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0b8      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002838:	4b59      	ldr	r3, [pc, #356]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a58      	ldr	r2, [pc, #352]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002842:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002850:	4b53      	ldr	r3, [pc, #332]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a52      	ldr	r2, [pc, #328]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800285a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b50      	ldr	r3, [pc, #320]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	494d      	ldr	r1, [pc, #308]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d044      	beq.n	8002904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b47      	ldr	r3, [pc, #284]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d119      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e07f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a2:	4b3f      	ldr	r3, [pc, #252]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e06f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b2:	4b3b      	ldr	r3, [pc, #236]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e067      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b37      	ldr	r3, [pc, #220]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4934      	ldr	r1, [pc, #208]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7ff fc64 	bl	80021a0 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7ff fc60 	bl	80021a0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e04f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b2b      	ldr	r3, [pc, #172]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b25      	ldr	r3, [pc, #148]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d20c      	bcs.n	800292c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b22      	ldr	r3, [pc, #136]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b20      	ldr	r3, [pc, #128]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e032      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002938:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4916      	ldr	r1, [pc, #88]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002956:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	490e      	ldr	r1, [pc, #56]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800296a:	f000 f855 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 800296e:	4602      	mov	r2, r0
 8002970:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	490a      	ldr	r1, [pc, #40]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	5ccb      	ldrb	r3, [r1, r3]
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	4a09      	ldr	r2, [pc, #36]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002986:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fbc4 	bl	8002118 <HAL_InitTick>

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023c00 	.word	0x40023c00
 80029a0:	40023800 	.word	0x40023800
 80029a4:	08004eb4 	.word	0x08004eb4
 80029a8:	20000028 	.word	0x20000028
 80029ac:	2000002c 	.word	0x2000002c

080029b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000028 	.word	0x20000028

080029c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029cc:	f7ff fff0 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0a9b      	lsrs	r3, r3, #10
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	@ (80029ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	08004ec4 	.word	0x08004ec4

080029f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029f4:	f7ff ffdc 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	0b5b      	lsrs	r3, r3, #13
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4903      	ldr	r1, [pc, #12]	@ (8002a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40023800 	.word	0x40023800
 8002a14:	08004ec4 	.word	0x08004ec4

08002a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a1c:	b0ae      	sub	sp, #184	@ 0xb8
 8002a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a3e:	4bcb      	ldr	r3, [pc, #812]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	f200 8206 	bhi.w	8002e58 <HAL_RCC_GetSysClockFreq+0x440>
 8002a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a54 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a52:	bf00      	nop
 8002a54:	08002a89 	.word	0x08002a89
 8002a58:	08002e59 	.word	0x08002e59
 8002a5c:	08002e59 	.word	0x08002e59
 8002a60:	08002e59 	.word	0x08002e59
 8002a64:	08002a91 	.word	0x08002a91
 8002a68:	08002e59 	.word	0x08002e59
 8002a6c:	08002e59 	.word	0x08002e59
 8002a70:	08002e59 	.word	0x08002e59
 8002a74:	08002a99 	.word	0x08002a99
 8002a78:	08002e59 	.word	0x08002e59
 8002a7c:	08002e59 	.word	0x08002e59
 8002a80:	08002e59 	.word	0x08002e59
 8002a84:	08002c89 	.word	0x08002c89
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4bb9      	ldr	r3, [pc, #740]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a8e:	e1e7      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a90:	4bb8      	ldr	r3, [pc, #736]	@ (8002d74 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a96:	e1e3      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a98:	4bb4      	ldr	r3, [pc, #720]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aa4:	4bb1      	ldr	r3, [pc, #708]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d071      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab0:	4bae      	ldr	r3, [pc, #696]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002abc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ad2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	462b      	mov	r3, r5
 8002ada:	f04f 0000 	mov.w	r0, #0
 8002ade:	f04f 0100 	mov.w	r1, #0
 8002ae2:	0159      	lsls	r1, r3, #5
 8002ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae8:	0150      	lsls	r0, r2, #5
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4621      	mov	r1, r4
 8002af0:	1a51      	subs	r1, r2, r1
 8002af2:	6439      	str	r1, [r7, #64]	@ 0x40
 8002af4:	4629      	mov	r1, r5
 8002af6:	eb63 0301 	sbc.w	r3, r3, r1
 8002afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b08:	4649      	mov	r1, r9
 8002b0a:	018b      	lsls	r3, r1, #6
 8002b0c:	4641      	mov	r1, r8
 8002b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b12:	4641      	mov	r1, r8
 8002b14:	018a      	lsls	r2, r1, #6
 8002b16:	4641      	mov	r1, r8
 8002b18:	1a51      	subs	r1, r2, r1
 8002b1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b1c:	4649      	mov	r1, r9
 8002b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b30:	4649      	mov	r1, r9
 8002b32:	00cb      	lsls	r3, r1, #3
 8002b34:	4641      	mov	r1, r8
 8002b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b3a:	4641      	mov	r1, r8
 8002b3c:	00ca      	lsls	r2, r1, #3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	4622      	mov	r2, r4
 8002b46:	189b      	adds	r3, r3, r2
 8002b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b4a:	462b      	mov	r3, r5
 8002b4c:	460a      	mov	r2, r1
 8002b4e:	eb42 0303 	adc.w	r3, r2, r3
 8002b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b60:	4629      	mov	r1, r5
 8002b62:	024b      	lsls	r3, r1, #9
 8002b64:	4621      	mov	r1, r4
 8002b66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	024a      	lsls	r2, r1, #9
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b80:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b84:	f7fd fb3e 	bl	8000204 <__aeabi_uldivmod>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b92:	e067      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b94:	4b75      	ldr	r3, [pc, #468]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ba0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002ba4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bae:	2300      	movs	r3, #0
 8002bb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002bb2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	462b      	mov	r3, r5
 8002bba:	f04f 0000 	mov.w	r0, #0
 8002bbe:	f04f 0100 	mov.w	r1, #0
 8002bc2:	0159      	lsls	r1, r3, #5
 8002bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc8:	0150      	lsls	r0, r2, #5
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4621      	mov	r1, r4
 8002bd0:	1a51      	subs	r1, r2, r1
 8002bd2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002be8:	4649      	mov	r1, r9
 8002bea:	018b      	lsls	r3, r1, #6
 8002bec:	4641      	mov	r1, r8
 8002bee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bf2:	4641      	mov	r1, r8
 8002bf4:	018a      	lsls	r2, r1, #6
 8002bf6:	4641      	mov	r1, r8
 8002bf8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c0e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c16:	4692      	mov	sl, r2
 8002c18:	469b      	mov	fp, r3
 8002c1a:	4623      	mov	r3, r4
 8002c1c:	eb1a 0303 	adds.w	r3, sl, r3
 8002c20:	623b      	str	r3, [r7, #32]
 8002c22:	462b      	mov	r3, r5
 8002c24:	eb4b 0303 	adc.w	r3, fp, r3
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c36:	4629      	mov	r1, r5
 8002c38:	028b      	lsls	r3, r1, #10
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c40:	4621      	mov	r1, r4
 8002c42:	028a      	lsls	r2, r1, #10
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c50:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c56:	f7fd fad5 	bl	8000204 <__aeabi_uldivmod>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4613      	mov	r3, r2
 8002c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c64:	4b41      	ldr	r3, [pc, #260]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002c76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c86:	e0eb      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c88:	4b38      	ldr	r3, [pc, #224]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c94:	4b35      	ldr	r3, [pc, #212]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d06b      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca0:	4b32      	ldr	r3, [pc, #200]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	099b      	lsrs	r3, r3, #6
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002caa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cb8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002cbc:	4622      	mov	r2, r4
 8002cbe:	462b      	mov	r3, r5
 8002cc0:	f04f 0000 	mov.w	r0, #0
 8002cc4:	f04f 0100 	mov.w	r1, #0
 8002cc8:	0159      	lsls	r1, r3, #5
 8002cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cce:	0150      	lsls	r0, r2, #5
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	1a51      	subs	r1, r2, r1
 8002cd8:	61b9      	str	r1, [r7, #24]
 8002cda:	4629      	mov	r1, r5
 8002cdc:	eb63 0301 	sbc.w	r3, r3, r1
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002cee:	4659      	mov	r1, fp
 8002cf0:	018b      	lsls	r3, r1, #6
 8002cf2:	4651      	mov	r1, sl
 8002cf4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cf8:	4651      	mov	r1, sl
 8002cfa:	018a      	lsls	r2, r1, #6
 8002cfc:	4651      	mov	r1, sl
 8002cfe:	ebb2 0801 	subs.w	r8, r2, r1
 8002d02:	4659      	mov	r1, fp
 8002d04:	eb63 0901 	sbc.w	r9, r3, r1
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d1c:	4690      	mov	r8, r2
 8002d1e:	4699      	mov	r9, r3
 8002d20:	4623      	mov	r3, r4
 8002d22:	eb18 0303 	adds.w	r3, r8, r3
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	462b      	mov	r3, r5
 8002d2a:	eb49 0303 	adc.w	r3, r9, r3
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	024b      	lsls	r3, r1, #9
 8002d40:	4621      	mov	r1, r4
 8002d42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d46:	4621      	mov	r1, r4
 8002d48:	024a      	lsls	r2, r1, #9
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d52:	2200      	movs	r2, #0
 8002d54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d56:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d5c:	f7fd fa52 	bl	8000204 <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4613      	mov	r3, r2
 8002d66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d6a:	e065      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x420>
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	00f42400 	.word	0x00f42400
 8002d74:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d78:	4b3d      	ldr	r3, [pc, #244]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	099b      	lsrs	r3, r3, #6
 8002d7e:	2200      	movs	r2, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	4611      	mov	r1, r2
 8002d84:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d88:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d8e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002d92:	4642      	mov	r2, r8
 8002d94:	464b      	mov	r3, r9
 8002d96:	f04f 0000 	mov.w	r0, #0
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	0159      	lsls	r1, r3, #5
 8002da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da4:	0150      	lsls	r0, r2, #5
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4641      	mov	r1, r8
 8002dac:	1a51      	subs	r1, r2, r1
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	4649      	mov	r1, r9
 8002db2:	eb63 0301 	sbc.w	r3, r3, r1
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002dc4:	4659      	mov	r1, fp
 8002dc6:	018b      	lsls	r3, r1, #6
 8002dc8:	4651      	mov	r1, sl
 8002dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dce:	4651      	mov	r1, sl
 8002dd0:	018a      	lsls	r2, r1, #6
 8002dd2:	4651      	mov	r1, sl
 8002dd4:	1a54      	subs	r4, r2, r1
 8002dd6:	4659      	mov	r1, fp
 8002dd8:	eb63 0501 	sbc.w	r5, r3, r1
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	00eb      	lsls	r3, r5, #3
 8002de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dea:	00e2      	lsls	r2, r4, #3
 8002dec:	4614      	mov	r4, r2
 8002dee:	461d      	mov	r5, r3
 8002df0:	4643      	mov	r3, r8
 8002df2:	18e3      	adds	r3, r4, r3
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	464b      	mov	r3, r9
 8002df8:	eb45 0303 	adc.w	r3, r5, r3
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	028b      	lsls	r3, r1, #10
 8002e0e:	4621      	mov	r1, r4
 8002e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e14:	4621      	mov	r1, r4
 8002e16:	028a      	lsls	r2, r1, #10
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e20:	2200      	movs	r2, #0
 8002e22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e24:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e2a:	f7fd f9eb 	bl	8000204 <__aeabi_uldivmod>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4613      	mov	r3, r2
 8002e34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e38:	4b0d      	ldr	r3, [pc, #52]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	0f1b      	lsrs	r3, r3, #28
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002e46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e56:	e003      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	37b8      	adds	r7, #184	@ 0xb8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	00f42400 	.word	0x00f42400

08002e78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e28d      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8083 	beq.w	8002f9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e98:	4b94      	ldr	r3, [pc, #592]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d019      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ea4:	4b91      	ldr	r3, [pc, #580]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
        || \
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002eb0:	4b8e      	ldr	r3, [pc, #568]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ebe:	4b8b      	ldr	r3, [pc, #556]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ec6:	2b0c      	cmp	r3, #12
 8002ec8:	d112      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eca:	4b88      	ldr	r3, [pc, #544]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ed2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	4b84      	ldr	r3, [pc, #528]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d05b      	beq.n	8002f9c <HAL_RCC_OscConfig+0x124>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d157      	bne.n	8002f9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e25a      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_OscConfig+0x90>
 8002efa:	4b7c      	ldr	r3, [pc, #496]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a7b      	ldr	r2, [pc, #492]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e01d      	b.n	8002f44 <HAL_RCC_OscConfig+0xcc>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0xb4>
 8002f12:	4b76      	ldr	r3, [pc, #472]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a75      	ldr	r2, [pc, #468]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b73      	ldr	r3, [pc, #460]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a72      	ldr	r2, [pc, #456]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0xcc>
 8002f2c:	4b6f      	ldr	r3, [pc, #444]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6e      	ldr	r2, [pc, #440]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b6c      	ldr	r3, [pc, #432]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a6b      	ldr	r2, [pc, #428]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7ff f928 	bl	80021a0 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f54:	f7ff f924 	bl	80021a0 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	@ 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e21f      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	4b61      	ldr	r3, [pc, #388]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0xdc>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7ff f914 	bl	80021a0 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7ff f910 	bl	80021a0 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	@ 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e20b      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	4b57      	ldr	r3, [pc, #348]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x104>
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d06f      	beq.n	800308a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002faa:	4b50      	ldr	r3, [pc, #320]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d017      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002fb6:	4b4d      	ldr	r3, [pc, #308]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
        || \
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d105      	bne.n	8002fce <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fce:	4b47      	ldr	r3, [pc, #284]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d11c      	bne.n	8003014 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fda:	4b44      	ldr	r3, [pc, #272]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d116      	bne.n	8003014 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	4b41      	ldr	r3, [pc, #260]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x186>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e1d3      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4937      	ldr	r1, [pc, #220]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	e03a      	b.n	800308a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301c:	4b34      	ldr	r3, [pc, #208]	@ (80030f0 <HAL_RCC_OscConfig+0x278>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7ff f8bd 	bl	80021a0 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302a:	f7ff f8b9 	bl	80021a0 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1b4      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	4b2b      	ldr	r3, [pc, #172]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b28      	ldr	r3, [pc, #160]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4925      	ldr	r1, [pc, #148]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
 800305c:	e015      	b.n	800308a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305e:	4b24      	ldr	r3, [pc, #144]	@ (80030f0 <HAL_RCC_OscConfig+0x278>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7ff f89c 	bl	80021a0 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306c:	f7ff f898 	bl	80021a0 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e193      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d036      	beq.n	8003104 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d016      	beq.n	80030cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309e:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <HAL_RCC_OscConfig+0x27c>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7ff f87c 	bl	80021a0 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ac:	f7ff f878 	bl	80021a0 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e173      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_RCC_OscConfig+0x274>)
 80030c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x234>
 80030ca:	e01b      	b.n	8003104 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030cc:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <HAL_RCC_OscConfig+0x27c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7ff f865 	bl	80021a0 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	e00e      	b.n	80030f8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030da:	f7ff f861 	bl	80021a0 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d907      	bls.n	80030f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e15c      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
 80030ec:	40023800 	.word	0x40023800
 80030f0:	42470000 	.word	0x42470000
 80030f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f8:	4b8a      	ldr	r3, [pc, #552]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80030fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ea      	bne.n	80030da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8097 	beq.w	8003240 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003116:	4b83      	ldr	r3, [pc, #524]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	4b7f      	ldr	r3, [pc, #508]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	4a7e      	ldr	r2, [pc, #504]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 800312c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	@ 0x40
 8003132:	4b7c      	ldr	r3, [pc, #496]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003142:	4b79      	ldr	r3, [pc, #484]	@ (8003328 <HAL_RCC_OscConfig+0x4b0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d118      	bne.n	8003180 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314e:	4b76      	ldr	r3, [pc, #472]	@ (8003328 <HAL_RCC_OscConfig+0x4b0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a75      	ldr	r2, [pc, #468]	@ (8003328 <HAL_RCC_OscConfig+0x4b0>)
 8003154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315a:	f7ff f821 	bl	80021a0 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003162:	f7ff f81d 	bl	80021a0 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e118      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	4b6c      	ldr	r3, [pc, #432]	@ (8003328 <HAL_RCC_OscConfig+0x4b0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x31e>
 8003188:	4b66      	ldr	r3, [pc, #408]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	4a65      	ldr	r2, [pc, #404]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	@ 0x70
 8003194:	e01c      	b.n	80031d0 <HAL_RCC_OscConfig+0x358>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b05      	cmp	r3, #5
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x340>
 800319e:	4b61      	ldr	r3, [pc, #388]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a2:	4a60      	ldr	r2, [pc, #384]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031aa:	4b5e      	ldr	r3, [pc, #376]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	4a5d      	ldr	r2, [pc, #372]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b6:	e00b      	b.n	80031d0 <HAL_RCC_OscConfig+0x358>
 80031b8:	4b5a      	ldr	r3, [pc, #360]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031bc:	4a59      	ldr	r2, [pc, #356]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031be:	f023 0301 	bic.w	r3, r3, #1
 80031c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c4:	4b57      	ldr	r3, [pc, #348]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c8:	4a56      	ldr	r2, [pc, #344]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031ca:	f023 0304 	bic.w	r3, r3, #4
 80031ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fe ffe2 	bl	80021a0 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fe ffde 	bl	80021a0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e0d7      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0ee      	beq.n	80031e0 <HAL_RCC_OscConfig+0x368>
 8003202:	e014      	b.n	800322e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fe ffcc 	bl	80021a0 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7fe ffc8 	bl	80021a0 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e0c1      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003222:	4b40      	ldr	r3, [pc, #256]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1ee      	bne.n	800320c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d105      	bne.n	8003240 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003234:	4b3b      	ldr	r3, [pc, #236]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	4a3a      	ldr	r2, [pc, #232]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 800323a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800323e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80ad 	beq.w	80033a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800324a:	4b36      	ldr	r3, [pc, #216]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b08      	cmp	r3, #8
 8003254:	d060      	beq.n	8003318 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d145      	bne.n	80032ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325e:	4b33      	ldr	r3, [pc, #204]	@ (800332c <HAL_RCC_OscConfig+0x4b4>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe ff9c 	bl	80021a0 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326c:	f7fe ff98 	bl	80021a0 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e093      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	4b29      	ldr	r3, [pc, #164]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	019b      	lsls	r3, r3, #6
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	3b01      	subs	r3, #1
 80032a4:	041b      	lsls	r3, r3, #16
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	071b      	lsls	r3, r3, #28
 80032b6:	491b      	ldr	r1, [pc, #108]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032bc:	4b1b      	ldr	r3, [pc, #108]	@ (800332c <HAL_RCC_OscConfig+0x4b4>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fe ff6d 	bl	80021a0 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe ff69 	bl	80021a0 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e064      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032dc:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x452>
 80032e8:	e05c      	b.n	80033a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b10      	ldr	r3, [pc, #64]	@ (800332c <HAL_RCC_OscConfig+0x4b4>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe ff56 	bl	80021a0 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fe ff52 	bl	80021a0 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e04d      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <HAL_RCC_OscConfig+0x4ac>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x480>
 8003316:	e045      	b.n	80033a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d107      	bne.n	8003330 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e040      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
 8003324:	40023800 	.word	0x40023800
 8003328:	40007000 	.word	0x40007000
 800332c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003330:	4b1f      	ldr	r3, [pc, #124]	@ (80033b0 <HAL_RCC_OscConfig+0x538>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d030      	beq.n	80033a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d129      	bne.n	80033a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d122      	bne.n	80033a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003360:	4013      	ands	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003366:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003368:	4293      	cmp	r3, r2
 800336a:	d119      	bne.n	80033a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	3b01      	subs	r3, #1
 800337a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d10f      	bne.n	80033a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800

080033b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e041      	b.n	800344a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fe fbae 	bl	8001b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f000 fdd4 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d001      	beq.n	800346c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e04e      	b.n	800350a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a23      	ldr	r2, [pc, #140]	@ (8003518 <HAL_TIM_Base_Start_IT+0xc4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d022      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x80>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003496:	d01d      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x80>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1f      	ldr	r2, [pc, #124]	@ (800351c <HAL_TIM_Base_Start_IT+0xc8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d018      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x80>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003520 <HAL_TIM_Base_Start_IT+0xcc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x80>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003524 <HAL_TIM_Base_Start_IT+0xd0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00e      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x80>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003528 <HAL_TIM_Base_Start_IT+0xd4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x80>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a19      	ldr	r2, [pc, #100]	@ (800352c <HAL_TIM_Base_Start_IT+0xd8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x80>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a18      	ldr	r2, [pc, #96]	@ (8003530 <HAL_TIM_Base_Start_IT+0xdc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d111      	bne.n	80034f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b06      	cmp	r3, #6
 80034e4:	d010      	beq.n	8003508 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f6:	e007      	b.n	8003508 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40010000 	.word	0x40010000
 800351c:	40000400 	.word	0x40000400
 8003520:	40000800 	.word	0x40000800
 8003524:	40000c00 	.word	0x40000c00
 8003528:	40010400 	.word	0x40010400
 800352c:	40014000 	.word	0x40014000
 8003530:	40001800 	.word	0x40001800

08003534 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a1a      	ldr	r2, [r3, #32]
 8003552:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10f      	bne.n	800357c <HAL_TIM_Base_Stop_IT+0x48>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6a1a      	ldr	r2, [r3, #32]
 8003562:	f240 4344 	movw	r3, #1092	@ 0x444
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d107      	bne.n	800357c <HAL_TIM_Base_Stop_IT+0x48>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e041      	b.n	8003628 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d106      	bne.n	80035be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f839 	bl	8003630 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3304      	adds	r3, #4
 80035ce:	4619      	mov	r1, r3
 80035d0:	4610      	mov	r0, r2
 80035d2:	f000 fce5 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <HAL_TIM_PWM_Start_IT+0x28>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e022      	b.n	80036b2 <HAL_TIM_PWM_Start_IT+0x6e>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b04      	cmp	r3, #4
 8003670:	d109      	bne.n	8003686 <HAL_TIM_PWM_Start_IT+0x42>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b01      	cmp	r3, #1
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	e015      	b.n	80036b2 <HAL_TIM_PWM_Start_IT+0x6e>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b08      	cmp	r3, #8
 800368a:	d109      	bne.n	80036a0 <HAL_TIM_PWM_Start_IT+0x5c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e008      	b.n	80036b2 <HAL_TIM_PWM_Start_IT+0x6e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e0c7      	b.n	800384a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <HAL_TIM_PWM_Start_IT+0x86>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036c8:	e013      	b.n	80036f2 <HAL_TIM_PWM_Start_IT+0xae>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d104      	bne.n	80036da <HAL_TIM_PWM_Start_IT+0x96>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036d8:	e00b      	b.n	80036f2 <HAL_TIM_PWM_Start_IT+0xae>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d104      	bne.n	80036ea <HAL_TIM_PWM_Start_IT+0xa6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036e8:	e003      	b.n	80036f2 <HAL_TIM_PWM_Start_IT+0xae>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	d841      	bhi.n	800377c <HAL_TIM_PWM_Start_IT+0x138>
 80036f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003700 <HAL_TIM_PWM_Start_IT+0xbc>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003735 	.word	0x08003735
 8003704:	0800377d 	.word	0x0800377d
 8003708:	0800377d 	.word	0x0800377d
 800370c:	0800377d 	.word	0x0800377d
 8003710:	08003747 	.word	0x08003747
 8003714:	0800377d 	.word	0x0800377d
 8003718:	0800377d 	.word	0x0800377d
 800371c:	0800377d 	.word	0x0800377d
 8003720:	08003759 	.word	0x08003759
 8003724:	0800377d 	.word	0x0800377d
 8003728:	0800377d 	.word	0x0800377d
 800372c:	0800377d 	.word	0x0800377d
 8003730:	0800376b 	.word	0x0800376b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0202 	orr.w	r2, r2, #2
 8003742:	60da      	str	r2, [r3, #12]
      break;
 8003744:	e01d      	b.n	8003782 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0204 	orr.w	r2, r2, #4
 8003754:	60da      	str	r2, [r3, #12]
      break;
 8003756:	e014      	b.n	8003782 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0208 	orr.w	r2, r2, #8
 8003766:	60da      	str	r2, [r3, #12]
      break;
 8003768:	e00b      	b.n	8003782 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0210 	orr.w	r2, r2, #16
 8003778:	60da      	str	r2, [r3, #12]
      break;
 800377a:	e002      	b.n	8003782 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      break;
 8003780:	bf00      	nop
  }

  if (status == HAL_OK)
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d15f      	bne.n	8003848 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2201      	movs	r2, #1
 800378e:	6839      	ldr	r1, [r7, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f000 ff8c 	bl	80046ae <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2e      	ldr	r2, [pc, #184]	@ (8003854 <HAL_TIM_PWM_Start_IT+0x210>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_TIM_PWM_Start_IT+0x166>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003858 <HAL_TIM_PWM_Start_IT+0x214>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_TIM_PWM_Start_IT+0x16a>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_TIM_PWM_Start_IT+0x16c>
 80037ae:	2300      	movs	r3, #0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a22      	ldr	r2, [pc, #136]	@ (8003854 <HAL_TIM_PWM_Start_IT+0x210>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d022      	beq.n	8003814 <HAL_TIM_PWM_Start_IT+0x1d0>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d6:	d01d      	beq.n	8003814 <HAL_TIM_PWM_Start_IT+0x1d0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1f      	ldr	r2, [pc, #124]	@ (800385c <HAL_TIM_PWM_Start_IT+0x218>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d018      	beq.n	8003814 <HAL_TIM_PWM_Start_IT+0x1d0>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003860 <HAL_TIM_PWM_Start_IT+0x21c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <HAL_TIM_PWM_Start_IT+0x1d0>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003864 <HAL_TIM_PWM_Start_IT+0x220>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00e      	beq.n	8003814 <HAL_TIM_PWM_Start_IT+0x1d0>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a17      	ldr	r2, [pc, #92]	@ (8003858 <HAL_TIM_PWM_Start_IT+0x214>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d009      	beq.n	8003814 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a18      	ldr	r2, [pc, #96]	@ (8003868 <HAL_TIM_PWM_Start_IT+0x224>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_TIM_PWM_Start_IT+0x1d0>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a17      	ldr	r2, [pc, #92]	@ (800386c <HAL_TIM_PWM_Start_IT+0x228>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d111      	bne.n	8003838 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b06      	cmp	r3, #6
 8003824:	d010      	beq.n	8003848 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003836:	e007      	b.n	8003848 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40010000 	.word	0x40010000
 8003858:	40010400 	.word	0x40010400
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800
 8003864:	40000c00 	.word	0x40000c00
 8003868:	40014000 	.word	0x40014000
 800386c:	40001800 	.word	0x40001800

08003870 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b0c      	cmp	r3, #12
 8003882:	d841      	bhi.n	8003908 <HAL_TIM_PWM_Stop_IT+0x98>
 8003884:	a201      	add	r2, pc, #4	@ (adr r2, 800388c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038c1 	.word	0x080038c1
 8003890:	08003909 	.word	0x08003909
 8003894:	08003909 	.word	0x08003909
 8003898:	08003909 	.word	0x08003909
 800389c:	080038d3 	.word	0x080038d3
 80038a0:	08003909 	.word	0x08003909
 80038a4:	08003909 	.word	0x08003909
 80038a8:	08003909 	.word	0x08003909
 80038ac:	080038e5 	.word	0x080038e5
 80038b0:	08003909 	.word	0x08003909
 80038b4:	08003909 	.word	0x08003909
 80038b8:	08003909 	.word	0x08003909
 80038bc:	080038f7 	.word	0x080038f7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0202 	bic.w	r2, r2, #2
 80038ce:	60da      	str	r2, [r3, #12]
      break;
 80038d0:	e01d      	b.n	800390e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0204 	bic.w	r2, r2, #4
 80038e0:	60da      	str	r2, [r3, #12]
      break;
 80038e2:	e014      	b.n	800390e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0208 	bic.w	r2, r2, #8
 80038f2:	60da      	str	r2, [r3, #12]
      break;
 80038f4:	e00b      	b.n	800390e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0210 	bic.w	r2, r2, #16
 8003904:	60da      	str	r2, [r3, #12]
      break;
 8003906:	e002      	b.n	800390e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      break;
 800390c:	bf00      	nop
  }

  if (status == HAL_OK)
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d161      	bne.n	80039d8 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2200      	movs	r2, #0
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fec6 	bl	80046ae <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2f      	ldr	r2, [pc, #188]	@ (80039e4 <HAL_TIM_PWM_Stop_IT+0x174>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d004      	beq.n	8003936 <HAL_TIM_PWM_Stop_IT+0xc6>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2d      	ldr	r2, [pc, #180]	@ (80039e8 <HAL_TIM_PWM_Stop_IT+0x178>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <HAL_TIM_PWM_Stop_IT+0xca>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_TIM_PWM_Stop_IT+0xcc>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d017      	beq.n	8003970 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6a1a      	ldr	r2, [r3, #32]
 8003946:	f241 1311 	movw	r3, #4369	@ 0x1111
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10f      	bne.n	8003970 <HAL_TIM_PWM_Stop_IT+0x100>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6a1a      	ldr	r2, [r3, #32]
 8003956:	f240 4344 	movw	r3, #1092	@ 0x444
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d107      	bne.n	8003970 <HAL_TIM_PWM_Stop_IT+0x100>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800396e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6a1a      	ldr	r2, [r3, #32]
 8003976:	f241 1311 	movw	r3, #4369	@ 0x1111
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10f      	bne.n	80039a0 <HAL_TIM_PWM_Stop_IT+0x130>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6a1a      	ldr	r2, [r3, #32]
 8003986:	f240 4344 	movw	r3, #1092	@ 0x444
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d107      	bne.n	80039a0 <HAL_TIM_PWM_Stop_IT+0x130>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d104      	bne.n	80039b0 <HAL_TIM_PWM_Stop_IT+0x140>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039ae:	e013      	b.n	80039d8 <HAL_TIM_PWM_Stop_IT+0x168>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d104      	bne.n	80039c0 <HAL_TIM_PWM_Stop_IT+0x150>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039be:	e00b      	b.n	80039d8 <HAL_TIM_PWM_Stop_IT+0x168>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d104      	bne.n	80039d0 <HAL_TIM_PWM_Stop_IT+0x160>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039ce:	e003      	b.n	80039d8 <HAL_TIM_PWM_Stop_IT+0x168>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40010000 	.word	0x40010000
 80039e8:	40010400 	.word	0x40010400

080039ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d020      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01b      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0202 	mvn.w	r2, #2
 8003a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa9d 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003a3c:	e005      	b.n	8003a4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa8f 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fd f881 	bl	8000b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d020      	beq.n	8003a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01b      	beq.n	8003a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0204 	mvn.w	r2, #4
 8003a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fa77 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003a88:	e005      	b.n	8003a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fa69 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7fd f85b 	bl	8000b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d020      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01b      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0208 	mvn.w	r2, #8
 8003ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2204      	movs	r2, #4
 8003abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa51 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003ad4:	e005      	b.n	8003ae2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fa43 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7fd f835 	bl	8000b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d020      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01b      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0210 	mvn.w	r2, #16
 8003b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2208      	movs	r2, #8
 8003b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa2b 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003b20:	e005      	b.n	8003b2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fa1d 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7fd f80f 	bl	8000b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00c      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0201 	mvn.w	r2, #1
 8003b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fc ff44 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00c      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fe96 	bl	80048a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00c      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f9f5 	bl	8003f8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0220 	mvn.w	r2, #32
 8003bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fe68 	bl	8004894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e0ae      	b.n	8003d48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b0c      	cmp	r3, #12
 8003bf6:	f200 809f 	bhi.w	8003d38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8003c00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c35 	.word	0x08003c35
 8003c04:	08003d39 	.word	0x08003d39
 8003c08:	08003d39 	.word	0x08003d39
 8003c0c:	08003d39 	.word	0x08003d39
 8003c10:	08003c75 	.word	0x08003c75
 8003c14:	08003d39 	.word	0x08003d39
 8003c18:	08003d39 	.word	0x08003d39
 8003c1c:	08003d39 	.word	0x08003d39
 8003c20:	08003cb7 	.word	0x08003cb7
 8003c24:	08003d39 	.word	0x08003d39
 8003c28:	08003d39 	.word	0x08003d39
 8003c2c:	08003d39 	.word	0x08003d39
 8003c30:	08003cf7 	.word	0x08003cf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fa5c 	bl	80040f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0208 	orr.w	r2, r2, #8
 8003c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0204 	bic.w	r2, r2, #4
 8003c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6999      	ldr	r1, [r3, #24]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	619a      	str	r2, [r3, #24]
      break;
 8003c72:	e064      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 faac 	bl	80041d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6999      	ldr	r1, [r3, #24]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	021a      	lsls	r2, r3, #8
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	619a      	str	r2, [r3, #24]
      break;
 8003cb4:	e043      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fb01 	bl	80042c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0208 	orr.w	r2, r2, #8
 8003cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0204 	bic.w	r2, r2, #4
 8003ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69d9      	ldr	r1, [r3, #28]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	61da      	str	r2, [r3, #28]
      break;
 8003cf4:	e023      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fb55 	bl	80043ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69d9      	ldr	r1, [r3, #28]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	021a      	lsls	r2, r3, #8
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	61da      	str	r2, [r3, #28]
      break;
 8003d36:	e002      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_TIM_ConfigClockSource+0x1c>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e0b4      	b.n	8003ed6 <HAL_TIM_ConfigClockSource+0x186>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da4:	d03e      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0xd4>
 8003da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003daa:	f200 8087 	bhi.w	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db2:	f000 8086 	beq.w	8003ec2 <HAL_TIM_ConfigClockSource+0x172>
 8003db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dba:	d87f      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dbc:	2b70      	cmp	r3, #112	@ 0x70
 8003dbe:	d01a      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0xa6>
 8003dc0:	2b70      	cmp	r3, #112	@ 0x70
 8003dc2:	d87b      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dc4:	2b60      	cmp	r3, #96	@ 0x60
 8003dc6:	d050      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x11a>
 8003dc8:	2b60      	cmp	r3, #96	@ 0x60
 8003dca:	d877      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dcc:	2b50      	cmp	r3, #80	@ 0x50
 8003dce:	d03c      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0xfa>
 8003dd0:	2b50      	cmp	r3, #80	@ 0x50
 8003dd2:	d873      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dd4:	2b40      	cmp	r3, #64	@ 0x40
 8003dd6:	d058      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x13a>
 8003dd8:	2b40      	cmp	r3, #64	@ 0x40
 8003dda:	d86f      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003ddc:	2b30      	cmp	r3, #48	@ 0x30
 8003dde:	d064      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x15a>
 8003de0:	2b30      	cmp	r3, #48	@ 0x30
 8003de2:	d86b      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d060      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x15a>
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d867      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d05c      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x15a>
 8003df0:	2b10      	cmp	r3, #16
 8003df2:	d05a      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x15a>
 8003df4:	e062      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e06:	f000 fc32 	bl	800466e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	609a      	str	r2, [r3, #8]
      break;
 8003e22:	e04f      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e34:	f000 fc1b 	bl	800466e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e46:	609a      	str	r2, [r3, #8]
      break;
 8003e48:	e03c      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e56:	461a      	mov	r2, r3
 8003e58:	f000 fb8f 	bl	800457a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2150      	movs	r1, #80	@ 0x50
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fbe8 	bl	8004638 <TIM_ITRx_SetConfig>
      break;
 8003e68:	e02c      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e76:	461a      	mov	r2, r3
 8003e78:	f000 fbae 	bl	80045d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2160      	movs	r1, #96	@ 0x60
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fbd8 	bl	8004638 <TIM_ITRx_SetConfig>
      break;
 8003e88:	e01c      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e96:	461a      	mov	r2, r3
 8003e98:	f000 fb6f 	bl	800457a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2140      	movs	r1, #64	@ 0x40
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fbc8 	bl	8004638 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e00c      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	f000 fbbf 	bl	8004638 <TIM_ITRx_SetConfig>
      break;
 8003eba:	e003      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec0:	e000      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e031      	b.n	8003f5a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003f06:	6839      	ldr	r1, [r7, #0]
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 faa5 	bl	8004458 <TIM_SlaveTimer_SetConfig>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d009      	beq.n	8003f28 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e018      	b.n	8003f5a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f36:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f46:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a46      	ldr	r2, [pc, #280]	@ (80040cc <TIM_Base_SetConfig+0x12c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fbe:	d00f      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a43      	ldr	r2, [pc, #268]	@ (80040d0 <TIM_Base_SetConfig+0x130>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a42      	ldr	r2, [pc, #264]	@ (80040d4 <TIM_Base_SetConfig+0x134>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d007      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a41      	ldr	r2, [pc, #260]	@ (80040d8 <TIM_Base_SetConfig+0x138>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a40      	ldr	r2, [pc, #256]	@ (80040dc <TIM_Base_SetConfig+0x13c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a35      	ldr	r2, [pc, #212]	@ (80040cc <TIM_Base_SetConfig+0x12c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d02b      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004000:	d027      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a32      	ldr	r2, [pc, #200]	@ (80040d0 <TIM_Base_SetConfig+0x130>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d023      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a31      	ldr	r2, [pc, #196]	@ (80040d4 <TIM_Base_SetConfig+0x134>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d01f      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a30      	ldr	r2, [pc, #192]	@ (80040d8 <TIM_Base_SetConfig+0x138>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01b      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2f      	ldr	r2, [pc, #188]	@ (80040dc <TIM_Base_SetConfig+0x13c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d017      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2e      	ldr	r2, [pc, #184]	@ (80040e0 <TIM_Base_SetConfig+0x140>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2d      	ldr	r2, [pc, #180]	@ (80040e4 <TIM_Base_SetConfig+0x144>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00f      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2c      	ldr	r2, [pc, #176]	@ (80040e8 <TIM_Base_SetConfig+0x148>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00b      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2b      	ldr	r2, [pc, #172]	@ (80040ec <TIM_Base_SetConfig+0x14c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2a      	ldr	r2, [pc, #168]	@ (80040f0 <TIM_Base_SetConfig+0x150>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a29      	ldr	r2, [pc, #164]	@ (80040f4 <TIM_Base_SetConfig+0x154>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d108      	bne.n	8004064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a10      	ldr	r2, [pc, #64]	@ (80040cc <TIM_Base_SetConfig+0x12c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_Base_SetConfig+0xf8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a12      	ldr	r2, [pc, #72]	@ (80040dc <TIM_Base_SetConfig+0x13c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d103      	bne.n	80040a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d105      	bne.n	80040be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f023 0201 	bic.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	611a      	str	r2, [r3, #16]
  }
}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40010400 	.word	0x40010400
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800
 80040ec:	40001800 	.word	0x40001800
 80040f0:	40001c00 	.word	0x40001c00
 80040f4:	40002000 	.word	0x40002000

080040f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	f023 0201 	bic.w	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0303 	bic.w	r3, r3, #3
 800412e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f023 0302 	bic.w	r3, r3, #2
 8004140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a20      	ldr	r2, [pc, #128]	@ (80041d0 <TIM_OC1_SetConfig+0xd8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_OC1_SetConfig+0x64>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a1f      	ldr	r2, [pc, #124]	@ (80041d4 <TIM_OC1_SetConfig+0xdc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d10c      	bne.n	8004176 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0308 	bic.w	r3, r3, #8
 8004162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f023 0304 	bic.w	r3, r3, #4
 8004174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a15      	ldr	r2, [pc, #84]	@ (80041d0 <TIM_OC1_SetConfig+0xd8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_OC1_SetConfig+0x8e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a14      	ldr	r2, [pc, #80]	@ (80041d4 <TIM_OC1_SetConfig+0xdc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d111      	bne.n	80041aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800418c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	621a      	str	r2, [r3, #32]
}
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40010400 	.word	0x40010400

080041d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f023 0210 	bic.w	r2, r3, #16
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800420e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0320 	bic.w	r3, r3, #32
 8004222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a22      	ldr	r2, [pc, #136]	@ (80042bc <TIM_OC2_SetConfig+0xe4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_OC2_SetConfig+0x68>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a21      	ldr	r2, [pc, #132]	@ (80042c0 <TIM_OC2_SetConfig+0xe8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d10d      	bne.n	800425c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800425a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a17      	ldr	r2, [pc, #92]	@ (80042bc <TIM_OC2_SetConfig+0xe4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_OC2_SetConfig+0x94>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a16      	ldr	r2, [pc, #88]	@ (80042c0 <TIM_OC2_SetConfig+0xe8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d113      	bne.n	8004294 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800427a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40010000 	.word	0x40010000
 80042c0:	40010400 	.word	0x40010400

080042c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800430c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a21      	ldr	r2, [pc, #132]	@ (80043a4 <TIM_OC3_SetConfig+0xe0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d003      	beq.n	800432a <TIM_OC3_SetConfig+0x66>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a20      	ldr	r2, [pc, #128]	@ (80043a8 <TIM_OC3_SetConfig+0xe4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d10d      	bne.n	8004346 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004330:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a16      	ldr	r2, [pc, #88]	@ (80043a4 <TIM_OC3_SetConfig+0xe0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d003      	beq.n	8004356 <TIM_OC3_SetConfig+0x92>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a15      	ldr	r2, [pc, #84]	@ (80043a8 <TIM_OC3_SetConfig+0xe4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d113      	bne.n	800437e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800435c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	621a      	str	r2, [r3, #32]
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40010000 	.word	0x40010000
 80043a8:	40010400 	.word	0x40010400

080043ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	031b      	lsls	r3, r3, #12
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a12      	ldr	r2, [pc, #72]	@ (8004450 <TIM_OC4_SetConfig+0xa4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d003      	beq.n	8004414 <TIM_OC4_SetConfig+0x68>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a11      	ldr	r2, [pc, #68]	@ (8004454 <TIM_OC4_SetConfig+0xa8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d109      	bne.n	8004428 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800441a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	019b      	lsls	r3, r3, #6
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40010000 	.word	0x40010000
 8004454:	40010400 	.word	0x40010400

08004458 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004474:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f023 0307 	bic.w	r3, r3, #7
 8004486:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b70      	cmp	r3, #112	@ 0x70
 80044a0:	d01a      	beq.n	80044d8 <TIM_SlaveTimer_SetConfig+0x80>
 80044a2:	2b70      	cmp	r3, #112	@ 0x70
 80044a4:	d860      	bhi.n	8004568 <TIM_SlaveTimer_SetConfig+0x110>
 80044a6:	2b60      	cmp	r3, #96	@ 0x60
 80044a8:	d054      	beq.n	8004554 <TIM_SlaveTimer_SetConfig+0xfc>
 80044aa:	2b60      	cmp	r3, #96	@ 0x60
 80044ac:	d85c      	bhi.n	8004568 <TIM_SlaveTimer_SetConfig+0x110>
 80044ae:	2b50      	cmp	r3, #80	@ 0x50
 80044b0:	d046      	beq.n	8004540 <TIM_SlaveTimer_SetConfig+0xe8>
 80044b2:	2b50      	cmp	r3, #80	@ 0x50
 80044b4:	d858      	bhi.n	8004568 <TIM_SlaveTimer_SetConfig+0x110>
 80044b6:	2b40      	cmp	r3, #64	@ 0x40
 80044b8:	d019      	beq.n	80044ee <TIM_SlaveTimer_SetConfig+0x96>
 80044ba:	2b40      	cmp	r3, #64	@ 0x40
 80044bc:	d854      	bhi.n	8004568 <TIM_SlaveTimer_SetConfig+0x110>
 80044be:	2b30      	cmp	r3, #48	@ 0x30
 80044c0:	d055      	beq.n	800456e <TIM_SlaveTimer_SetConfig+0x116>
 80044c2:	2b30      	cmp	r3, #48	@ 0x30
 80044c4:	d850      	bhi.n	8004568 <TIM_SlaveTimer_SetConfig+0x110>
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d051      	beq.n	800456e <TIM_SlaveTimer_SetConfig+0x116>
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d84c      	bhi.n	8004568 <TIM_SlaveTimer_SetConfig+0x110>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d04d      	beq.n	800456e <TIM_SlaveTimer_SetConfig+0x116>
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d04b      	beq.n	800456e <TIM_SlaveTimer_SetConfig+0x116>
 80044d6:	e047      	b.n	8004568 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80044e8:	f000 f8c1 	bl	800466e <TIM_ETR_SetConfig>
      break;
 80044ec:	e040      	b.n	8004570 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b05      	cmp	r3, #5
 80044f4:	d101      	bne.n	80044fa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e03b      	b.n	8004572 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a1a      	ldr	r2, [r3, #32]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004520:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	4313      	orrs	r3, r2
 800452c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	621a      	str	r2, [r3, #32]
      break;
 800453e:	e017      	b.n	8004570 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800454c:	461a      	mov	r2, r3
 800454e:	f000 f814 	bl	800457a <TIM_TI1_ConfigInputStage>
      break;
 8004552:	e00d      	b.n	8004570 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004560:	461a      	mov	r2, r3
 8004562:	f000 f839 	bl	80045d8 <TIM_TI2_ConfigInputStage>
      break;
 8004566:	e003      	b.n	8004570 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	75fb      	strb	r3, [r7, #23]
      break;
 800456c:	e000      	b.n	8004570 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800456e:	bf00      	nop
  }

  return status;
 8004570:	7dfb      	ldrb	r3, [r7, #23]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800457a:	b480      	push	{r7}
 800457c:	b087      	sub	sp, #28
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f023 0201 	bic.w	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 030a 	bic.w	r3, r3, #10
 80045b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	621a      	str	r2, [r3, #32]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f023 0210 	bic.w	r2, r3, #16
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	031b      	lsls	r3, r3, #12
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004614:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	621a      	str	r2, [r3, #32]
}
 800462c:	bf00      	nop
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800464e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	f043 0307 	orr.w	r3, r3, #7
 800465a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	609a      	str	r2, [r3, #8]
}
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800466e:	b480      	push	{r7}
 8004670:	b087      	sub	sp, #28
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004688:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	021a      	lsls	r2, r3, #8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	431a      	orrs	r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4313      	orrs	r3, r2
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	609a      	str	r2, [r3, #8]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b087      	sub	sp, #28
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	2201      	movs	r2, #1
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a1a      	ldr	r2, [r3, #32]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	43db      	mvns	r3, r3
 80046d0:	401a      	ands	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a1a      	ldr	r2, [r3, #32]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	fa01 f303 	lsl.w	r3, r1, r3
 80046e6:	431a      	orrs	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	621a      	str	r2, [r3, #32]
}
 80046ec:	bf00      	nop
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800470c:	2302      	movs	r3, #2
 800470e:	e05a      	b.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a21      	ldr	r2, [pc, #132]	@ (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d022      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475c:	d01d      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1d      	ldr	r2, [pc, #116]	@ (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d018      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1b      	ldr	r2, [pc, #108]	@ (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1a      	ldr	r2, [pc, #104]	@ (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00e      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a18      	ldr	r2, [pc, #96]	@ (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a17      	ldr	r2, [pc, #92]	@ (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d004      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a15      	ldr	r2, [pc, #84]	@ (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d10c      	bne.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00
 80047e4:	40010400 	.word	0x40010400
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40001800 	.word	0x40001800

080047f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004808:	2302      	movs	r3, #2
 800480a:	e03d      	b.n	8004888 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e042      	b.n	8004954 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fd fb84 	bl	8001ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2224      	movs	r2, #36	@ 0x24
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f82b 	bl	800495c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004914:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004924:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800495c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004960:	b0c0      	sub	sp, #256	@ 0x100
 8004962:	af00      	add	r7, sp, #0
 8004964:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004978:	68d9      	ldr	r1, [r3, #12]
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	ea40 0301 	orr.w	r3, r0, r1
 8004984:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	431a      	orrs	r2, r3
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	431a      	orrs	r2, r3
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049b4:	f021 010c 	bic.w	r1, r1, #12
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049c2:	430b      	orrs	r3, r1
 80049c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d6:	6999      	ldr	r1, [r3, #24]
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	ea40 0301 	orr.w	r3, r0, r1
 80049e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b8f      	ldr	r3, [pc, #572]	@ (8004c28 <UART_SetConfig+0x2cc>)
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d005      	beq.n	80049fc <UART_SetConfig+0xa0>
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	4b8d      	ldr	r3, [pc, #564]	@ (8004c2c <UART_SetConfig+0x2d0>)
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d104      	bne.n	8004a06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049fc:	f7fd fff8 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 8004a00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a04:	e003      	b.n	8004a0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a06:	f7fd ffdf 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8004a0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a18:	f040 810c 	bne.w	8004c34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a2e:	4622      	mov	r2, r4
 8004a30:	462b      	mov	r3, r5
 8004a32:	1891      	adds	r1, r2, r2
 8004a34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a36:	415b      	adcs	r3, r3
 8004a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a3e:	4621      	mov	r1, r4
 8004a40:	eb12 0801 	adds.w	r8, r2, r1
 8004a44:	4629      	mov	r1, r5
 8004a46:	eb43 0901 	adc.w	r9, r3, r1
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a5e:	4690      	mov	r8, r2
 8004a60:	4699      	mov	r9, r3
 8004a62:	4623      	mov	r3, r4
 8004a64:	eb18 0303 	adds.w	r3, r8, r3
 8004a68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	eb49 0303 	adc.w	r3, r9, r3
 8004a72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	18db      	adds	r3, r3, r3
 8004a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a90:	4613      	mov	r3, r2
 8004a92:	eb42 0303 	adc.w	r3, r2, r3
 8004a96:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004aa0:	f7fb fbb0 	bl	8000204 <__aeabi_uldivmod>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4b61      	ldr	r3, [pc, #388]	@ (8004c30 <UART_SetConfig+0x2d4>)
 8004aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	011c      	lsls	r4, r3, #4
 8004ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004abc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ac0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	1891      	adds	r1, r2, r2
 8004aca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004acc:	415b      	adcs	r3, r3
 8004ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ad0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	eb12 0a01 	adds.w	sl, r2, r1
 8004ada:	4649      	mov	r1, r9
 8004adc:	eb43 0b01 	adc.w	fp, r3, r1
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004af4:	4692      	mov	sl, r2
 8004af6:	469b      	mov	fp, r3
 8004af8:	4643      	mov	r3, r8
 8004afa:	eb1a 0303 	adds.w	r3, sl, r3
 8004afe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b02:	464b      	mov	r3, r9
 8004b04:	eb4b 0303 	adc.w	r3, fp, r3
 8004b08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b20:	460b      	mov	r3, r1
 8004b22:	18db      	adds	r3, r3, r3
 8004b24:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b26:	4613      	mov	r3, r2
 8004b28:	eb42 0303 	adc.w	r3, r2, r3
 8004b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b36:	f7fb fb65 	bl	8000204 <__aeabi_uldivmod>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4611      	mov	r1, r2
 8004b40:	4b3b      	ldr	r3, [pc, #236]	@ (8004c30 <UART_SetConfig+0x2d4>)
 8004b42:	fba3 2301 	umull	r2, r3, r3, r1
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	2264      	movs	r2, #100	@ 0x64
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	1acb      	subs	r3, r1, r3
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b56:	4b36      	ldr	r3, [pc, #216]	@ (8004c30 <UART_SetConfig+0x2d4>)
 8004b58:	fba3 2302 	umull	r2, r3, r3, r2
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b64:	441c      	add	r4, r3
 8004b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	1891      	adds	r1, r2, r2
 8004b7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b80:	415b      	adcs	r3, r3
 8004b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b88:	4641      	mov	r1, r8
 8004b8a:	1851      	adds	r1, r2, r1
 8004b8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b8e:	4649      	mov	r1, r9
 8004b90:	414b      	adcs	r3, r1
 8004b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	00cb      	lsls	r3, r1, #3
 8004ba4:	4651      	mov	r1, sl
 8004ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004baa:	4651      	mov	r1, sl
 8004bac:	00ca      	lsls	r2, r1, #3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bbc:	464b      	mov	r3, r9
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	eb42 0303 	adc.w	r3, r2, r3
 8004bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004bd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bdc:	460b      	mov	r3, r1
 8004bde:	18db      	adds	r3, r3, r3
 8004be0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004be2:	4613      	mov	r3, r2
 8004be4:	eb42 0303 	adc.w	r3, r2, r3
 8004be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004bf2:	f7fb fb07 	bl	8000204 <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004c30 <UART_SetConfig+0x2d4>)
 8004bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	2164      	movs	r1, #100	@ 0x64
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	3332      	adds	r3, #50	@ 0x32
 8004c0e:	4a08      	ldr	r2, [pc, #32]	@ (8004c30 <UART_SetConfig+0x2d4>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	f003 0207 	and.w	r2, r3, #7
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4422      	add	r2, r4
 8004c22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c24:	e106      	b.n	8004e34 <UART_SetConfig+0x4d8>
 8004c26:	bf00      	nop
 8004c28:	40011000 	.word	0x40011000
 8004c2c:	40011400 	.word	0x40011400
 8004c30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c46:	4642      	mov	r2, r8
 8004c48:	464b      	mov	r3, r9
 8004c4a:	1891      	adds	r1, r2, r2
 8004c4c:	6239      	str	r1, [r7, #32]
 8004c4e:	415b      	adcs	r3, r3
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c56:	4641      	mov	r1, r8
 8004c58:	1854      	adds	r4, r2, r1
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	eb43 0501 	adc.w	r5, r3, r1
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	00eb      	lsls	r3, r5, #3
 8004c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c6e:	00e2      	lsls	r2, r4, #3
 8004c70:	4614      	mov	r4, r2
 8004c72:	461d      	mov	r5, r3
 8004c74:	4643      	mov	r3, r8
 8004c76:	18e3      	adds	r3, r4, r3
 8004c78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	eb45 0303 	adc.w	r3, r5, r3
 8004c82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	008b      	lsls	r3, r1, #2
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cac:	4621      	mov	r1, r4
 8004cae:	008a      	lsls	r2, r1, #2
 8004cb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cb4:	f7fb faa6 	bl	8000204 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4b60      	ldr	r3, [pc, #384]	@ (8004e40 <UART_SetConfig+0x4e4>)
 8004cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	011c      	lsls	r4, r3, #4
 8004cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004cd8:	4642      	mov	r2, r8
 8004cda:	464b      	mov	r3, r9
 8004cdc:	1891      	adds	r1, r2, r2
 8004cde:	61b9      	str	r1, [r7, #24]
 8004ce0:	415b      	adcs	r3, r3
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ce8:	4641      	mov	r1, r8
 8004cea:	1851      	adds	r1, r2, r1
 8004cec:	6139      	str	r1, [r7, #16]
 8004cee:	4649      	mov	r1, r9
 8004cf0:	414b      	adcs	r3, r1
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d00:	4659      	mov	r1, fp
 8004d02:	00cb      	lsls	r3, r1, #3
 8004d04:	4651      	mov	r1, sl
 8004d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0a:	4651      	mov	r1, sl
 8004d0c:	00ca      	lsls	r2, r1, #3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	4619      	mov	r1, r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	4642      	mov	r2, r8
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	460a      	mov	r2, r1
 8004d20:	eb42 0303 	adc.w	r3, r2, r3
 8004d24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d40:	4649      	mov	r1, r9
 8004d42:	008b      	lsls	r3, r1, #2
 8004d44:	4641      	mov	r1, r8
 8004d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	008a      	lsls	r2, r1, #2
 8004d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d52:	f7fb fa57 	bl	8000204 <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4b38      	ldr	r3, [pc, #224]	@ (8004e40 <UART_SetConfig+0x4e4>)
 8004d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	2264      	movs	r2, #100	@ 0x64
 8004d66:	fb02 f303 	mul.w	r3, r2, r3
 8004d6a:	1acb      	subs	r3, r1, r3
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	3332      	adds	r3, #50	@ 0x32
 8004d70:	4a33      	ldr	r2, [pc, #204]	@ (8004e40 <UART_SetConfig+0x4e4>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d7c:	441c      	add	r4, r3
 8004d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d82:	2200      	movs	r2, #0
 8004d84:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d86:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	1891      	adds	r1, r2, r2
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	415b      	adcs	r3, r3
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	1851      	adds	r1, r2, r1
 8004da0:	6039      	str	r1, [r7, #0]
 8004da2:	4649      	mov	r1, r9
 8004da4:	414b      	adcs	r3, r1
 8004da6:	607b      	str	r3, [r7, #4]
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004db4:	4659      	mov	r1, fp
 8004db6:	00cb      	lsls	r3, r1, #3
 8004db8:	4651      	mov	r1, sl
 8004dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dbe:	4651      	mov	r1, sl
 8004dc0:	00ca      	lsls	r2, r1, #3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4642      	mov	r2, r8
 8004dca:	189b      	adds	r3, r3, r2
 8004dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dce:	464b      	mov	r3, r9
 8004dd0:	460a      	mov	r2, r1
 8004dd2:	eb42 0303 	adc.w	r3, r2, r3
 8004dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004de2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004df0:	4649      	mov	r1, r9
 8004df2:	008b      	lsls	r3, r1, #2
 8004df4:	4641      	mov	r1, r8
 8004df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dfa:	4641      	mov	r1, r8
 8004dfc:	008a      	lsls	r2, r1, #2
 8004dfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e02:	f7fb f9ff 	bl	8000204 <__aeabi_uldivmod>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e40 <UART_SetConfig+0x4e4>)
 8004e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	2164      	movs	r1, #100	@ 0x64
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	3332      	adds	r3, #50	@ 0x32
 8004e1e:	4a08      	ldr	r2, [pc, #32]	@ (8004e40 <UART_SetConfig+0x4e4>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	f003 020f 	and.w	r2, r3, #15
 8004e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4422      	add	r2, r4
 8004e32:	609a      	str	r2, [r3, #8]
}
 8004e34:	bf00      	nop
 8004e36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e40:	51eb851f 	.word	0x51eb851f

08004e44 <memset>:
 8004e44:	4402      	add	r2, r0
 8004e46:	4603      	mov	r3, r0
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d100      	bne.n	8004e4e <memset+0xa>
 8004e4c:	4770      	bx	lr
 8004e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e52:	e7f9      	b.n	8004e48 <memset+0x4>

08004e54 <__libc_init_array>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	4d0d      	ldr	r5, [pc, #52]	@ (8004e8c <__libc_init_array+0x38>)
 8004e58:	4c0d      	ldr	r4, [pc, #52]	@ (8004e90 <__libc_init_array+0x3c>)
 8004e5a:	1b64      	subs	r4, r4, r5
 8004e5c:	10a4      	asrs	r4, r4, #2
 8004e5e:	2600      	movs	r6, #0
 8004e60:	42a6      	cmp	r6, r4
 8004e62:	d109      	bne.n	8004e78 <__libc_init_array+0x24>
 8004e64:	4d0b      	ldr	r5, [pc, #44]	@ (8004e94 <__libc_init_array+0x40>)
 8004e66:	4c0c      	ldr	r4, [pc, #48]	@ (8004e98 <__libc_init_array+0x44>)
 8004e68:	f000 f818 	bl	8004e9c <_init>
 8004e6c:	1b64      	subs	r4, r4, r5
 8004e6e:	10a4      	asrs	r4, r4, #2
 8004e70:	2600      	movs	r6, #0
 8004e72:	42a6      	cmp	r6, r4
 8004e74:	d105      	bne.n	8004e82 <__libc_init_array+0x2e>
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7c:	4798      	blx	r3
 8004e7e:	3601      	adds	r6, #1
 8004e80:	e7ee      	b.n	8004e60 <__libc_init_array+0xc>
 8004e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e86:	4798      	blx	r3
 8004e88:	3601      	adds	r6, #1
 8004e8a:	e7f2      	b.n	8004e72 <__libc_init_array+0x1e>
 8004e8c:	08004ed4 	.word	0x08004ed4
 8004e90:	08004ed4 	.word	0x08004ed4
 8004e94:	08004ed4 	.word	0x08004ed4
 8004e98:	08004ed8 	.word	0x08004ed8

08004e9c <_init>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	bf00      	nop
 8004ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea2:	bc08      	pop	{r3}
 8004ea4:	469e      	mov	lr, r3
 8004ea6:	4770      	bx	lr

08004ea8 <_fini>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	bf00      	nop
 8004eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eae:	bc08      	pop	{r3}
 8004eb0:	469e      	mov	lr, r3
 8004eb2:	4770      	bx	lr
