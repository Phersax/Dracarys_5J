
robotic_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b20  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004ce4  08004ce4  00005ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cfc  08004cfc  00006034  2**0
                  CONTENTS
  4 .ARM          00000008  08004cfc  08004cfc  00005cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d04  08004d04  00006034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d04  08004d04  00005d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d08  08004d08  00005d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08004d0c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000034  08004d40  00006034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08004d40  000063a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2c0  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002397  00000000  00000000  00015324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000176c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6e  00000000  00000000  00018420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a0c  00000000  00000000  00018e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ff6  00000000  00000000  0003a89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd7ee  00000000  00000000  0004b890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011907e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ec  00000000  00000000  001190c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0011c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000034 	.word	0x20000034
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004ccc 	.word	0x08004ccc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000038 	.word	0x20000038
 8000200:	08004ccc 	.word	0x08004ccc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	4b55      	ldr	r3, [pc, #340]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a54      	ldr	r2, [pc, #336]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b52      	ldr	r3, [pc, #328]	@ (8000664 <MX_GPIO_Init+0x170>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	4b4e      	ldr	r3, [pc, #312]	@ (8000664 <MX_GPIO_Init+0x170>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a4d      	ldr	r2, [pc, #308]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b4b      	ldr	r3, [pc, #300]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4b47      	ldr	r3, [pc, #284]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a46      	ldr	r2, [pc, #280]	@ (8000664 <MX_GPIO_Init+0x170>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b44      	ldr	r3, [pc, #272]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b40      	ldr	r3, [pc, #256]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a3f      	ldr	r2, [pc, #252]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b3d      	ldr	r3, [pc, #244]	@ (8000664 <MX_GPIO_Init+0x170>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIRECTION4_Pin|DIRECTION3_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	21e0      	movs	r1, #224	@ 0xe0
 800057e:	483a      	ldr	r0, [pc, #232]	@ (8000668 <MX_GPIO_Init+0x174>)
 8000580:	f002 f844 	bl	800260c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION2_GPIO_Port, DIRECTION2_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2110      	movs	r1, #16
 8000588:	4838      	ldr	r0, [pc, #224]	@ (800066c <MX_GPIO_Init+0x178>)
 800058a:	f002 f83f 	bl	800260c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2120      	movs	r1, #32
 8000592:	4836      	ldr	r0, [pc, #216]	@ (800066c <MX_GPIO_Init+0x178>)
 8000594:	f002 f83a 	bl	800260c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION1_GPIO_Port, DIRECTION1_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2101      	movs	r1, #1
 800059c:	4834      	ldr	r0, [pc, #208]	@ (8000670 <MX_GPIO_Init+0x17c>)
 800059e:	f002 f835 	bl	800260c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISABLE_button_Pin;
 80005a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISABLE_button_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	482c      	ldr	r0, [pc, #176]	@ (800066c <MX_GPIO_Init+0x178>)
 80005ba:	f001 fe93 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005be:	2320      	movs	r3, #32
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4824      	ldr	r0, [pc, #144]	@ (8000668 <MX_GPIO_Init+0x174>)
 80005d6:	f001 fe85 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIRECTION4_Pin|DIRECTION3_Pin;
 80005da:	23c0      	movs	r3, #192	@ 0xc0
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	481d      	ldr	r0, [pc, #116]	@ (8000668 <MX_GPIO_Init+0x174>)
 80005f2:	f001 fe77 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRECTION2_Pin;
 80005f6:	2310      	movs	r3, #16
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION2_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4817      	ldr	r0, [pc, #92]	@ (800066c <MX_GPIO_Init+0x178>)
 800060e:	f001 fe69 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000612:	2320      	movs	r3, #32
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061a:	2301      	movs	r3, #1
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061e:	2302      	movs	r3, #2
 8000620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4810      	ldr	r0, [pc, #64]	@ (800066c <MX_GPIO_Init+0x178>)
 800062a:	f001 fe5b 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRECTION1_Pin;
 800062e:	2301      	movs	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000636:	2302      	movs	r3, #2
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION1_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	480a      	ldr	r0, [pc, #40]	@ (8000670 <MX_GPIO_Init+0x17c>)
 8000646:	f001 fe4d 	bl	80022e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	2028      	movs	r0, #40	@ 0x28
 8000650:	f001 fe11 	bl	8002276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000654:	2028      	movs	r0, #40	@ 0x28
 8000656:	f001 fe2a 	bl	80022ae <HAL_NVIC_EnableIRQ>

}
 800065a:	bf00      	nop
 800065c:	3728      	adds	r7, #40	@ 0x28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40020000 	.word	0x40020000
 800066c:	40020800 	.word	0x40020800
 8000670:	40020400 	.word	0x40020400

08000674 <TIM_Cmd>:
int acc_count; //debug
int dec_count; //debug

// int arr; //debug

void TIM_Cmd(TIM_TypeDef *TIMx, FunctionalState NewState) { //to disable the timers
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
	/* Check the parameters */
	assert_param(IS_TIM_ALL_PERIPH(TIMx));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 8000680:	78fb      	ldrb	r3, [r7, #3]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d006      	beq.n	8000694 <TIM_Cmd+0x20>
		/* Enable the TIM Counter */
		TIMx->CR1 |= TIM_CR1_CEN;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f043 0201 	orr.w	r2, r3, #1
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]
	} else {
		/* Disable the TIM Counter */
		TIMx->CR1 &= (uint16_t) (~((uint16_t) TIM_CR1_CEN));
	}
}
 8000692:	e006      	b.n	80006a2 <TIM_Cmd+0x2e>
		TIMx->CR1 &= (uint16_t) (~((uint16_t) TIM_CR1_CEN));
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800069c:	4013      	ands	r3, r2
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <trapezoidal_func>:

void trapezoidal_func(int k, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *hslave) {
 80006b0:	b480      	push	{r7}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]

	int cnt = __HAL_TIM_GET_COUNTER(hslave);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006c2:	617b      	str	r3, [r7, #20]

	if (arr_des_a[k] > arr_start[k]) { //arr has to be greater than the arr that starts the motor
 80006c4:	4a71      	ldr	r2, [pc, #452]	@ (800088c <trapezoidal_func+0x1dc>)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006cc:	4970      	ldr	r1, [pc, #448]	@ (8000890 <trapezoidal_func+0x1e0>)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dd2a      	ble.n	800072e <trapezoidal_func+0x7e>
		__HAL_TIM_SET_AUTORELOAD(htim, arr_start[k]);
 80006d8:	4a6d      	ldr	r2, [pc, #436]	@ (8000890 <trapezoidal_func+0x1e0>)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006e6:	4a6a      	ldr	r2, [pc, #424]	@ (8000890 <trapezoidal_func+0x1e0>)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ee:	461a      	mov	r2, r3
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	60da      	str	r2, [r3, #12]
		hslave->Instance->PSC = arr_start[k];
 80006f4:	4a66      	ldr	r2, [pc, #408]	@ (8000890 <trapezoidal_func+0x1e0>)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	0852      	lsrs	r2, r2, #1
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_GET_AUTORELOAD(htim)/2);

		hslave->Instance->EGR |= TIM_EGR_UG;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	695a      	ldr	r2, [r3, #20]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f042 0201 	orr.w	r2, r2, #1
 800071e:	615a      	str	r2, [r3, #20]
		hslave->Instance->CNT = count_rising_edge[k];
 8000720:	4a5c      	ldr	r2, [pc, #368]	@ (8000894 <trapezoidal_func+0x1e4>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	625a      	str	r2, [r3, #36]	@ 0x24

	}

	if (arr_des_a[k] < (arr_current[k] - ACCEL_RATE)
 800072e:	4a57      	ldr	r2, [pc, #348]	@ (800088c <trapezoidal_func+0x1dc>)
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000736:	4958      	ldr	r1, [pc, #352]	@ (8000898 <trapezoidal_func+0x1e8>)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800073e:	3b32      	subs	r3, #50	@ 0x32
 8000740:	429a      	cmp	r2, r3
 8000742:	da57      	bge.n	80007f4 <trapezoidal_func+0x144>
			&& cnt <= (int) (n_steps_a[k] * 1 / 2)) { //acceleration phase
 8000744:	4a55      	ldr	r2, [pc, #340]	@ (800089c <trapezoidal_func+0x1ec>)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074c:	0fda      	lsrs	r2, r3, #31
 800074e:	4413      	add	r3, r2
 8000750:	105b      	asrs	r3, r3, #1
 8000752:	461a      	mov	r2, r3
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	4293      	cmp	r3, r2
 8000758:	dc4c      	bgt.n	80007f4 <trapezoidal_func+0x144>

		arr_current[k] -= ACCEL_RATE;
 800075a:	4a4f      	ldr	r2, [pc, #316]	@ (8000898 <trapezoidal_func+0x1e8>)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000762:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8000766:	494c      	ldr	r1, [pc, #304]	@ (8000898 <trapezoidal_func+0x1e8>)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (arr_current[k] <= arr_max[k])
 800076e:	4a4a      	ldr	r2, [pc, #296]	@ (8000898 <trapezoidal_func+0x1e8>)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000776:	494a      	ldr	r1, [pc, #296]	@ (80008a0 <trapezoidal_func+0x1f0>)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800077e:	429a      	cmp	r2, r3
 8000780:	dc07      	bgt.n	8000792 <trapezoidal_func+0xe2>
			arr_current[k] = arr_max[k];
 8000782:	4a47      	ldr	r2, [pc, #284]	@ (80008a0 <trapezoidal_func+0x1f0>)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800078a:	4943      	ldr	r1, [pc, #268]	@ (8000898 <trapezoidal_func+0x1e8>)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		__HAL_TIM_SET_AUTORELOAD(htim, arr_current[k]);
 8000792:	4a41      	ldr	r2, [pc, #260]	@ (8000898 <trapezoidal_func+0x1e8>)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007a0:	4a3d      	ldr	r2, [pc, #244]	@ (8000898 <trapezoidal_func+0x1e8>)
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a8:	461a      	mov	r2, r3
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	60da      	str	r2, [r3, #12]
		hslave->Instance->PSC = arr_current[k];
 80007ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000898 <trapezoidal_func+0x1e8>)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	0852      	lsrs	r2, r2, #1
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_GET_AUTORELOAD(htim)/2);

		hslave->Instance->EGR |= TIM_EGR_UG;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	695a      	ldr	r2, [r3, #20]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f042 0201 	orr.w	r2, r2, #1
 80007d8:	615a      	str	r2, [r3, #20]
		hslave->Instance->CNT = count_rising_edge[k];
 80007da:	4a2e      	ldr	r2, [pc, #184]	@ (8000894 <trapezoidal_func+0x1e4>)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	625a      	str	r2, [r3, #36]	@ 0x24

		acc_count += 5; //debug
 80007e8:	4b2e      	ldr	r3, [pc, #184]	@ (80008a4 <trapezoidal_func+0x1f4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3305      	adds	r3, #5
 80007ee:	4a2d      	ldr	r2, [pc, #180]	@ (80008a4 <trapezoidal_func+0x1f4>)
 80007f0:	6013      	str	r3, [r2, #0]
 80007f2:	e0b4      	b.n	800095e <trapezoidal_func+0x2ae>

	}

	else {
		if (arr_des_a[k] >= (arr_current[k] - ACCEL_RATE)
 80007f4:	4a25      	ldr	r2, [pc, #148]	@ (800088c <trapezoidal_func+0x1dc>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007fc:	4926      	ldr	r1, [pc, #152]	@ (8000898 <trapezoidal_func+0x1e8>)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000804:	3b32      	subs	r3, #50	@ 0x32
 8000806:	429a      	cmp	r2, r3
 8000808:	db4e      	blt.n	80008a8 <trapezoidal_func+0x1f8>
				&& arr_current[k] > arr_des_a[k]
 800080a:	4a23      	ldr	r2, [pc, #140]	@ (8000898 <trapezoidal_func+0x1e8>)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000812:	491e      	ldr	r1, [pc, #120]	@ (800088c <trapezoidal_func+0x1dc>)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800081a:	429a      	cmp	r2, r3
 800081c:	dd44      	ble.n	80008a8 <trapezoidal_func+0x1f8>
				&& cnt <= (int) (n_steps_a[k] * 1 / 2)) { //constant phase
 800081e:	4a1f      	ldr	r2, [pc, #124]	@ (800089c <trapezoidal_func+0x1ec>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000826:	0fda      	lsrs	r2, r3, #31
 8000828:	4413      	add	r3, r2
 800082a:	105b      	asrs	r3, r3, #1
 800082c:	461a      	mov	r2, r3
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	4293      	cmp	r3, r2
 8000832:	dc39      	bgt.n	80008a8 <trapezoidal_func+0x1f8>

			__HAL_TIM_SET_AUTORELOAD(htim, arr_des_a[k]);
 8000834:	4a15      	ldr	r2, [pc, #84]	@ (800088c <trapezoidal_func+0x1dc>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000842:	4a12      	ldr	r2, [pc, #72]	@ (800088c <trapezoidal_func+0x1dc>)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084a:	461a      	mov	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	60da      	str	r2, [r3, #12]
			hslave->Instance->PSC = arr_des_a[k];
 8000850:	4a0e      	ldr	r2, [pc, #56]	@ (800088c <trapezoidal_func+0x1dc>)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	629a      	str	r2, [r3, #40]	@ 0x28
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	0852      	lsrs	r2, r2, #1
 800086a:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_GET_AUTORELOAD(htim)/2);

			hslave->Instance->EGR |= TIM_EGR_UG;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	695a      	ldr	r2, [r3, #20]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f042 0201 	orr.w	r2, r2, #1
 800087a:	615a      	str	r2, [r3, #20]
			hslave->Instance->CNT = count_rising_edge[k];
 800087c:	4a05      	ldr	r2, [pc, #20]	@ (8000894 <trapezoidal_func+0x1e4>)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	625a      	str	r2, [r3, #36]	@ 0x24
 800088a:	e068      	b.n	800095e <trapezoidal_func+0x2ae>
 800088c:	20000104 	.word	0x20000104
 8000890:	20000000 	.word	0x20000000
 8000894:	20000050 	.word	0x20000050
 8000898:	20000018 	.word	0x20000018
 800089c:	200000f8 	.word	0x200000f8
 80008a0:	2000000c 	.word	0x2000000c
 80008a4:	2000005c 	.word	0x2000005c

		}

		else {

			if (cnt >= (int) (n_steps_a[k] - acc_count)) { //deceleration phase
 80008a8:	4a30      	ldr	r2, [pc, #192]	@ (800096c <trapezoidal_func+0x2bc>)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000970 <trapezoidal_func+0x2c0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	db50      	blt.n	800095e <trapezoidal_func+0x2ae>
				arr_current[k] += ACCEL_RATE;
 80008bc:	4a2d      	ldr	r2, [pc, #180]	@ (8000974 <trapezoidal_func+0x2c4>)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80008c8:	492a      	ldr	r1, [pc, #168]	@ (8000974 <trapezoidal_func+0x2c4>)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (arr_current[k] >= (arr_start[k] + ACCEL_RATE))
 80008d0:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <trapezoidal_func+0x2c8>)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d8:	f103 0231 	add.w	r2, r3, #49	@ 0x31
 80008dc:	4925      	ldr	r1, [pc, #148]	@ (8000974 <trapezoidal_func+0x2c4>)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	da09      	bge.n	80008fc <trapezoidal_func+0x24c>
					arr_current[k] = arr_start[k] - ACCEL_RATE;
 80008e8:	4a23      	ldr	r2, [pc, #140]	@ (8000978 <trapezoidal_func+0x2c8>)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f0:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 80008f4:	491f      	ldr	r1, [pc, #124]	@ (8000974 <trapezoidal_func+0x2c4>)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				__HAL_TIM_SET_AUTORELOAD(htim, arr_current[k]);
 80008fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000974 <trapezoidal_func+0x2c4>)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	62da      	str	r2, [r3, #44]	@ 0x2c
 800090a:	4a1a      	ldr	r2, [pc, #104]	@ (8000974 <trapezoidal_func+0x2c4>)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000912:	461a      	mov	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	60da      	str	r2, [r3, #12]
				hslave->Instance->PSC = arr_current[k];
 8000918:	4a16      	ldr	r2, [pc, #88]	@ (8000974 <trapezoidal_func+0x2c4>)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
				__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1,
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	0852      	lsrs	r2, r2, #1
 8000932:	635a      	str	r2, [r3, #52]	@ 0x34
						__HAL_TIM_GET_AUTORELOAD(htim)/2);

				hslave->Instance->EGR |= TIM_EGR_UG;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	695a      	ldr	r2, [r3, #20]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f042 0201 	orr.w	r2, r2, #1
 8000942:	615a      	str	r2, [r3, #20]
				hslave->Instance->CNT = count_rising_edge[k];
 8000944:	4a0d      	ldr	r2, [pc, #52]	@ (800097c <trapezoidal_func+0x2cc>)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	625a      	str	r2, [r3, #36]	@ 0x24

				dec_count += 5; //debug
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <trapezoidal_func+0x2d0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3305      	adds	r3, #5
 8000958:	4a09      	ldr	r2, [pc, #36]	@ (8000980 <trapezoidal_func+0x2d0>)
 800095a:	6013      	str	r3, [r2, #0]

		}

	}

}
 800095c:	e7ff      	b.n	800095e <trapezoidal_func+0x2ae>
 800095e:	bf00      	nop
 8000960:	371c      	adds	r7, #28
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	200000f8 	.word	0x200000f8
 8000970:	2000005c 	.word	0x2000005c
 8000974:	20000018 	.word	0x20000018
 8000978:	20000000 	.word	0x20000000
 800097c:	20000050 	.word	0x20000050
 8000980:	20000060 	.word	0x20000060

08000984 <HAL_TIM_PeriodElapsedCallback>:

//slave callback for trapezoidal profile
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a44      	ldr	r2, [pc, #272]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d12a      	bne.n	80009ec <HAL_TIM_PeriodElapsedCallback+0x68>

		if (htim->Instance->CNT >= htim->Instance->ARR) {
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d322      	bcc.n	80009ec <HAL_TIM_PeriodElapsedCallback+0x68>
			HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 80009a6:	2100      	movs	r1, #0
 80009a8:	483f      	ldr	r0, [pc, #252]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009aa:	f002 fe79 	bl	80036a0 <HAL_TIM_PWM_Stop_IT>
			count_rising_edge[2] = 0;
 80009ae:	4b3f      	ldr	r3, [pc, #252]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x128>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
			//acc_count = 0;  //debug
			//dec_count = 0; //debug
			htim->Instance->EGR |= TIM_EGR_UG;  //reset
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	695a      	ldr	r2, [r3, #20]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f042 0201 	orr.w	r2, r2, #1
 80009c2:	615a      	str	r2, [r3, #20]
			htim8.Instance->EGR |= TIM_EGR_UG;
 80009c4:	4b38      	ldr	r3, [pc, #224]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	695a      	ldr	r2, [r3, #20]
 80009ca:	4b37      	ldr	r3, [pc, #220]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f042 0201 	orr.w	r2, r2, #1
 80009d2:	615a      	str	r2, [r3, #20]

			TIM_Cmd(htim->Instance, DISABLE); //disable the slave timer
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fe4a 	bl	8000674 <TIM_Cmd>
			TIM_Cmd(htim8.Instance, DISABLE); //disable the slave timer
 80009e0:	4b31      	ldr	r3, [pc, #196]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fe44 	bl	8000674 <TIM_Cmd>

		}

	}

	if (htim->Instance == TIM3) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d128      	bne.n	8000a48 <HAL_TIM_PeriodElapsedCallback+0xc4>
		if (htim->Instance->CNT >= htim->Instance->ARR) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d320      	bcc.n	8000a48 <HAL_TIM_PeriodElapsedCallback+0xc4>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000a06:	2100      	movs	r1, #0
 8000a08:	482a      	ldr	r0, [pc, #168]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000a0a:	f002 fe49 	bl	80036a0 <HAL_TIM_PWM_Stop_IT>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 8000a0e:	2104      	movs	r1, #4
 8000a10:	4828      	ldr	r0, [pc, #160]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000a12:	f002 fe45 	bl	80036a0 <HAL_TIM_PWM_Stop_IT>
			count_rising_edge[1] = 0;
 8000a16:	4b25      	ldr	r3, [pc, #148]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
			//acc_count = 0;  //debug
			//dec_count = 0; //debug
			htim->Instance->EGR |= TIM_EGR_UG;  //reset
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	695a      	ldr	r2, [r3, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 0201 	orr.w	r2, r2, #1
 8000a2a:	615a      	str	r2, [r3, #20]
			htim2.Instance->EGR |= TIM_EGR_UG;
 8000a2c:	4b21      	ldr	r3, [pc, #132]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	695a      	ldr	r2, [r3, #20]
 8000a32:	4b20      	ldr	r3, [pc, #128]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f042 0201 	orr.w	r2, r2, #1
 8000a3a:	615a      	str	r2, [r3, #20]

			TIM_Cmd(htim->Instance, DISABLE); //disable the slave timer
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fe16 	bl	8000674 <TIM_Cmd>

		}

	}

	if (htim->Instance == TIM4) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d124      	bne.n	8000a9c <HAL_TIM_PeriodElapsedCallback+0x118>

		if (htim->Instance->CNT >= htim->Instance->ARR) {
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d31c      	bcc.n	8000a9c <HAL_TIM_PeriodElapsedCallback+0x118>
			HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000a62:	2100      	movs	r1, #0
 8000a64:	4815      	ldr	r0, [pc, #84]	@ (8000abc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a66:	f002 fe1b 	bl	80036a0 <HAL_TIM_PWM_Stop_IT>
			count_rising_edge[0] = 0;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
			//acc_count = 0;  //debug
			//dec_count = 0; //debug
			htim->Instance->EGR |= TIM_EGR_UG;  //reset
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	695a      	ldr	r2, [r3, #20]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f042 0201 	orr.w	r2, r2, #1
 8000a7e:	615a      	str	r2, [r3, #20]
			htim1.Instance->EGR |= TIM_EGR_UG;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	695a      	ldr	r2, [r3, #20]
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f042 0201 	orr.w	r2, r2, #1
 8000a8e:	615a      	str	r2, [r3, #20]

			TIM_Cmd(htim->Instance, DISABLE); //disable the slave timer
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fdec 	bl	8000674 <TIM_Cmd>

		}

	}

}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40000c00 	.word	0x40000c00
 8000aa8:	20000284 	.word	0x20000284
 8000aac:	20000050 	.word	0x20000050
 8000ab0:	40000400 	.word	0x40000400
 8000ab4:	20000164 	.word	0x20000164
 8000ab8:	40000800 	.word	0x40000800
 8000abc:	2000011c 	.word	0x2000011c

08000ac0 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1e      	ldr	r2, [pc, #120]	@ (8000b48 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d10e      	bne.n	8000af0 <HAL_TIM_PWM_PulseFinishedCallback+0x30>

		count_rising_edge[0] += (htim->Instance->PSC+1);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ad8:	3301      	adds	r3, #1
 8000ada:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8000adc:	6812      	ldr	r2, [r2, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8000ae4:	601a      	str	r2, [r3, #0]
		//arr = -(__HAL_TIM_GET_AUTORELOAD(&htim1));  //debug graph
		trapezoidal_func(0, htim, &htim4); //0,1,2 for the tipology of the timer
 8000ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b50 <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	2000      	movs	r0, #0
 8000aec:	f7ff fde0 	bl	80006b0 <trapezoidal_func>

	}

	if (htim->Instance == TIM2) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000af8:	d10e      	bne.n	8000b18 <HAL_TIM_PWM_PulseFinishedCallback+0x58>

		count_rising_edge[1] += (htim->Instance->PSC+1);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b00:	3301      	adds	r3, #1
 8000b02:	4a12      	ldr	r2, [pc, #72]	@ (8000b4c <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8000b04:	6852      	ldr	r2, [r2, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8000b0c:	605a      	str	r2, [r3, #4]
		//arr = -(__HAL_TIM_GET_AUTORELOAD(&htim1));  //debug graph
		trapezoidal_func(1, htim, &htim3); //0,1,2 for the tipology of the timer
 8000b0e:	4a11      	ldr	r2, [pc, #68]	@ (8000b54 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff fdcc 	bl	80006b0 <trapezoidal_func>

	}

	if (htim->Instance == TIM8) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b58 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d10e      	bne.n	8000b40 <HAL_TIM_PWM_PulseFinishedCallback+0x80>

		count_rising_edge[2] += (htim->Instance->PSC+1);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8000b2c:	6892      	ldr	r2, [r2, #8]
 8000b2e:	4413      	add	r3, r2
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8000b34:	609a      	str	r2, [r3, #8]
		//arr = -(__HAL_TIM_GET_AUTORELOAD(&htim1));  //debug graph
		trapezoidal_func(2, htim, &htim5); //0,1,2 for the tipology of the timer
 8000b36:	4a09      	ldr	r2, [pc, #36]	@ (8000b5c <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f7ff fdb8 	bl	80006b0 <trapezoidal_func>

	}
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40010000 	.word	0x40010000
 8000b4c:	20000050 	.word	0x20000050
 8000b50:	200001f4 	.word	0x200001f4
 8000b54:	200001ac 	.word	0x200001ac
 8000b58:	40010400 	.word	0x40010400
 8000b5c:	2000023c 	.word	0x2000023c

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f001 fa15 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f8a7 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f7ff fcc1 	bl	80004f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b72:	f001 f973 	bl	8001e5c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000b76:	f000 fcf1 	bl	800155c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000b7a:	f000 fdb7 	bl	80016ec <MX_TIM5_Init>
  MX_TIM1_Init();
 8000b7e:	f000 fbc9 	bl	8001314 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b82:	f000 fc69 	bl	8001458 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000b86:	f000 fd4d 	bl	8001624 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000b8a:	f000 fe13 	bl	80017b4 <MX_TIM8_Init>
  MX_TIM10_Init();
 8000b8e:	f000 feb3 	bl	80018f8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000b92:	f000 feff 	bl	8001994 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 8000b96:	4835      	ldr	r0, [pc, #212]	@ (8000c6c <main+0x10c>)
 8000b98:	f002 fba2 	bl	80032e0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000b9c:	4834      	ldr	r0, [pc, #208]	@ (8000c70 <main+0x110>)
 8000b9e:	f002 fb9f 	bl	80032e0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8000ba2:	4834      	ldr	r0, [pc, #208]	@ (8000c74 <main+0x114>)
 8000ba4:	f002 fb9c 	bl	80032e0 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET); //ENABLE
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2120      	movs	r1, #32
 8000bac:	4832      	ldr	r0, [pc, #200]	@ (8000c78 <main+0x118>)
 8000bae:	f001 fd2d 	bl	800260c <HAL_GPIO_WritePin>
	/*
	 stepper_init(obj, resol, microstep, enable_port, direction_port, timer slave, timerpwm*/
	stepper_init(&stp1, &htim1, &htim4, 1.8, 4 * 4.27, DIRECTION1_GPIO_Port,
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	4b31      	ldr	r3, [pc, #196]	@ (8000c7c <main+0x11c>)
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2311      	movs	r3, #17
 8000bbc:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8000c80 <main+0x120>
 8000bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8000c6c <main+0x10c>)
 8000bc2:	4930      	ldr	r1, [pc, #192]	@ (8000c84 <main+0x124>)
 8000bc4:	4830      	ldr	r0, [pc, #192]	@ (8000c88 <main+0x128>)
 8000bc6:	f000 f95f 	bl	8000e88 <stepper_init>
	DIRECTION1_Pin);
	stepper_init(&stp2, &htim2, &htim3, 1.8, 4 * 6, DIRECTION2_GPIO_Port,
 8000bca:	2310      	movs	r3, #16
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	4b2a      	ldr	r3, [pc, #168]	@ (8000c78 <main+0x118>)
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2318      	movs	r3, #24
 8000bd4:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8000c80 <main+0x120>
 8000bd8:	4a25      	ldr	r2, [pc, #148]	@ (8000c70 <main+0x110>)
 8000bda:	492c      	ldr	r1, [pc, #176]	@ (8000c8c <main+0x12c>)
 8000bdc:	482c      	ldr	r0, [pc, #176]	@ (8000c90 <main+0x130>)
 8000bde:	f000 f953 	bl	8000e88 <stepper_init>
	DIRECTION2_Pin);
	stepper_init(&stp3, &htim2, &htim3, 1.8, 4 * 6, DIRECTION3_GPIO_Port,
 8000be2:	2380      	movs	r3, #128	@ 0x80
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c94 <main+0x134>)
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	2318      	movs	r3, #24
 8000bec:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8000c80 <main+0x120>
 8000bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c70 <main+0x110>)
 8000bf2:	4926      	ldr	r1, [pc, #152]	@ (8000c8c <main+0x12c>)
 8000bf4:	4828      	ldr	r0, [pc, #160]	@ (8000c98 <main+0x138>)
 8000bf6:	f000 f947 	bl	8000e88 <stepper_init>
	DIRECTION3_Pin);
	stepper_init(&stp4, &htim8, &htim5, 1.8, 8 * 4.9, DIRECTION4_GPIO_Port,
 8000bfa:	2340      	movs	r3, #64	@ 0x40
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	4b25      	ldr	r3, [pc, #148]	@ (8000c94 <main+0x134>)
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2327      	movs	r3, #39	@ 0x27
 8000c04:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8000c80 <main+0x120>
 8000c08:	4a1a      	ldr	r2, [pc, #104]	@ (8000c74 <main+0x114>)
 8000c0a:	4924      	ldr	r1, [pc, #144]	@ (8000c9c <main+0x13c>)
 8000c0c:	4824      	ldr	r0, [pc, #144]	@ (8000ca0 <main+0x140>)
 8000c0e:	f000 f93b 	bl	8000e88 <stepper_init>
	DIRECTION4_Pin);
	servo_init(&srv1, &htim10);
 8000c12:	4924      	ldr	r1, [pc, #144]	@ (8000ca4 <main+0x144>)
 8000c14:	4824      	ldr	r0, [pc, #144]	@ (8000ca8 <main+0x148>)
 8000c16:	f000 f8c5 	bl	8000da4 <servo_init>
	servo_init(&srv2, &htim11);
 8000c1a:	4924      	ldr	r1, [pc, #144]	@ (8000cac <main+0x14c>)
 8000c1c:	4824      	ldr	r0, [pc, #144]	@ (8000cb0 <main+0x150>)
 8000c1e:	f000 f8c1 	bl	8000da4 <servo_init>



	servo_move(&srv1, 0);
 8000c22:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8000cb4 <main+0x154>
 8000c26:	4820      	ldr	r0, [pc, #128]	@ (8000ca8 <main+0x148>)
 8000c28:	f000 f8da 	bl	8000de0 <servo_move>
	servo_move(&srv2, 0);
 8000c2c:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8000cb4 <main+0x154>
 8000c30:	481f      	ldr	r0, [pc, #124]	@ (8000cb0 <main+0x150>)
 8000c32:	f000 f8d5 	bl	8000de0 <servo_move>
	HAL_TIM_PWM_Start_IT(srv1.pwm_timer, TIM_CHANNEL_1); //START PWM)
 8000c36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <main+0x148>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f002 fc19 	bl	8003474 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(srv2.pwm_timer, TIM_CHANNEL_1); //START PWM)
 8000c42:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <main+0x150>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 fc13 	bl	8003474 <HAL_TIM_PWM_Start_IT>


	stepper_move(&stp4, CLOCKWISE, 100, 100); //SET REGISTERS FOR THE MOVEMENT
 8000c4e:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8000cb8 <main+0x158>
 8000c52:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8000cb8 <main+0x158>
 8000c56:	2101      	movs	r1, #1
 8000c58:	4811      	ldr	r0, [pc, #68]	@ (8000ca0 <main+0x140>)
 8000c5a:	f000 f94f 	bl	8000efc <stepper_move>
	HAL_Delay(6000);
 8000c5e:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000c62:	f001 fa09 	bl	8002078 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c66:	bf00      	nop
 8000c68:	e7fd      	b.n	8000c66 <main+0x106>
 8000c6a:	bf00      	nop
 8000c6c:	200001f4 	.word	0x200001f4
 8000c70:	200001ac 	.word	0x200001ac
 8000c74:	2000023c 	.word	0x2000023c
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	3fe66666 	.word	0x3fe66666
 8000c84:	2000011c 	.word	0x2000011c
 8000c88:	20000064 	.word	0x20000064
 8000c8c:	20000164 	.word	0x20000164
 8000c90:	20000084 	.word	0x20000084
 8000c94:	40020000 	.word	0x40020000
 8000c98:	200000a4 	.word	0x200000a4
 8000c9c:	20000284 	.word	0x20000284
 8000ca0:	200000c4 	.word	0x200000c4
 8000ca4:	200002cc 	.word	0x200002cc
 8000ca8:	200000e4 	.word	0x200000e4
 8000cac:	20000314 	.word	0x20000314
 8000cb0:	200000ec 	.word	0x200000ec
 8000cb4:	00000000 	.word	0x00000000
 8000cb8:	42c80000 	.word	0x42c80000

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b094      	sub	sp, #80	@ 0x50
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	2234      	movs	r2, #52	@ 0x34
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 ffd2 	bl	8004c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d90 <SystemClock_Config+0xd4>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce8:	4a29      	ldr	r2, [pc, #164]	@ (8000d90 <SystemClock_Config+0xd4>)
 8000cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf0:	4b27      	ldr	r3, [pc, #156]	@ (8000d90 <SystemClock_Config+0xd4>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	4b24      	ldr	r3, [pc, #144]	@ (8000d94 <SystemClock_Config+0xd8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d08:	4a22      	ldr	r2, [pc, #136]	@ (8000d94 <SystemClock_Config+0xd8>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b20      	ldr	r3, [pc, #128]	@ (8000d94 <SystemClock_Config+0xd8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d26:	2302      	movs	r3, #2
 8000d28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d30:	2304      	movs	r3, #4
 8000d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000d34:	2354      	movs	r3, #84	@ 0x54
 8000d36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d40:	2302      	movs	r3, #2
 8000d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f001 ffdb 	bl	8002d04 <HAL_RCC_OscConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d54:	f000 f820 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d58:	230f      	movs	r3, #15
 8000d5a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d6e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	2102      	movs	r1, #2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 fc7a 	bl	8002670 <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d82:	f000 f809 	bl	8000d98 <Error_Handler>
  }
}
 8000d86:	bf00      	nop
 8000d88:	3750      	adds	r7, #80	@ 0x50
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40007000 	.word	0x40007000

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <Error_Handler+0x8>

08000da4 <servo_init>:
 *  Created on: Mar 2, 2025
 *      Author: david
 */
#include <servo.h>

void servo_init(servo_obj *srv, TIM_HandleTypeDef *pwm_timer) {
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	srv->pwm_timer = pwm_timer;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	601a      	str	r2, [r3, #0]
	srv->unit = (CCR_MAX - CCR_MIN) / (2*ANGLE_MAX);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a09      	ldr	r2, [pc, #36]	@ (8000ddc <servo_init+0x38>)
 8000db8:	605a      	str	r2, [r3, #4]
	//pwm=50hz
	srv->pwm_timer->Instance->PSC=27;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	221b      	movs	r2, #27
 8000dc2:	629a      	str	r2, [r3, #40]	@ 0x28
	srv->pwm_timer->Instance->ARR=60000-1;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000dce:	62da      	str	r2, [r3, #44]	@ 0x2c

}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	42055555 	.word	0x42055555

08000de0 <servo_move>:
int ccr; //debug

void servo_move(servo_obj *srv, float position) {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	ed87 0a00 	vstr	s0, [r7]



	//saturation
	if (position > ANGLE_MAX)
 8000dec:	edd7 7a00 	vldr	s15, [r7]
 8000df0:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000e74 <servo_move+0x94>
 8000df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dfc:	dd01      	ble.n	8000e02 <servo_move+0x22>
	position = ANGLE_MAX;//max angle position available
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <servo_move+0x98>)
 8000e00:	603b      	str	r3, [r7, #0]
	if (position < -ANGLE_MAX)
 8000e02:	edd7 7a00 	vldr	s15, [r7]
 8000e06:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000e7c <servo_move+0x9c>
 8000e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e12:	d501      	bpl.n	8000e18 <servo_move+0x38>
		position = -ANGLE_MAX; //min angle position available
 8000e14:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <servo_move+0xa0>)
 8000e16:	603b      	str	r3, [r7, #0]

	//compute ccr value
	if (position != 0)
 8000e18:	edd7 7a00 	vldr	s15, [r7]
 8000e1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e24:	d010      	beq.n	8000e48 <servo_move+0x68>
		ccr = (int) ((CCR_MAX + CCR_MIN) / 2) + (int) (srv->unit * position);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e2c:	edd7 7a00 	vldr	s15, [r7]
 8000e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e38:	ee17 3a90 	vmov	r3, s15
 8000e3c:	f503 538c 	add.w	r3, r3, #4480	@ 0x1180
 8000e40:	3313      	adds	r3, #19
 8000e42:	4a10      	ldr	r2, [pc, #64]	@ (8000e84 <servo_move+0xa4>)
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e003      	b.n	8000e50 <servo_move+0x70>

	else {  //position==0
		ccr = (int) ((CCR_MAX + CCR_MIN) / 2);
 8000e48:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <servo_move+0xa4>)
 8000e4a:	f241 1293 	movw	r2, #4499	@ 0x1193
 8000e4e:	601a      	str	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(srv->pwm_timer, TIM_CHANNEL_1, ccr); //deg=0
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <servo_move+0xa4>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	635a      	str	r2, [r3, #52]	@ 0x34
	srv->pwm_timer->Instance->EGR = TIM_EGR_UG; //not relevant in this case
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2201      	movs	r2, #1
 8000e64:	615a      	str	r2, [r3, #20]



}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	42b40000 	.word	0x42b40000
 8000e78:	42b40000 	.word	0x42b40000
 8000e7c:	c2b40000 	.word	0xc2b40000
 8000e80:	c2b40000 	.word	0xc2b40000
 8000e84:	200000f4 	.word	0x200000f4

08000e88 <stepper_init>:

//definisco la struct stepper con i seguenti parametri

void stepper_init(stepper_obj *stp, TIM_HandleTypeDef *pwm_timer,
		TIM_HandleTypeDef *position_timer, float stepper_resolution,
		uint16_t microstep, GPIO_TypeDef *direction_port,
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6178      	str	r0, [r7, #20]
 8000e90:	6139      	str	r1, [r7, #16]
 8000e92:	60fa      	str	r2, [r7, #12]
 8000e94:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e98:	80fb      	strh	r3, [r7, #6]
		uint16_t direction_pin) {

 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	605a      	str	r2, [r3, #4]
	stp->position_timer = position_timer;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	601a      	str	r2, [r3, #0]
	stp->pwm_timer = pwm_timer;
	stp->direction_port = direction_port;
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	6a3a      	ldr	r2, [r7, #32]
 8000eaa:	609a      	str	r2, [r3, #8]
	stp->direction_pin = direction_pin;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000eb0:	819a      	strh	r2, [r3, #12]

	stp->stepper_resolution = stepper_resolution;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	611a      	str	r2, [r3, #16]
	stp->microstep = microstep;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	88fa      	ldrh	r2, [r7, #6]
 8000ebc:	831a      	strh	r2, [r3, #24]
	stp->step_per_rev = 360.0f / stepper_resolution; // 360°/resolution
 8000ebe:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000ef8 <stepper_init+0x70>
 8000ec2:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	edc3 7a05 	vstr	s15, [r3, #20]
	stp->step_scale = stp->step_per_rev * microstep;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	ed93 7a05 	vldr	s14, [r3, #20]
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	edc3 7a07 	vstr	s15, [r3, #28]
}

 8000eea:	bf00      	nop
 8000eec:	371c      	adds	r7, #28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	43b40000 	.word	0x43b40000

08000efc <stepper_move>:
void stepper_move(stepper_obj *stp, direction_str direction, float position,
		float freq) {

	n_steps = stp->step_scale * position / 360.0f; //[n_steps]

	//float freq_steps = stp->step_scale * freq / 360.0f; //[n_steps/s]
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	460b      	mov	r3, r1
 8000f06:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f0a:	edc7 0a00 	vstr	s1, [r7]
 8000f0e:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(stp->direction_port, stp->direction_pin, direction); //DIRECTION
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f16:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f1e:	eddf 6a71 	vldr	s13, [pc, #452]	@ 80010e4 <stepper_move+0x1e8>
 8000f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f2a:	ee17 3a90 	vmov	r3, s15
 8000f2e:	617b      	str	r3, [r7, #20]

	if (stp->pwm_timer->Instance != TIM2) {
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f36:	edd7 7a00 	vldr	s15, [r7]
 8000f3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f3e:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80010e4 <stepper_move+0x1e8>
 8000f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f46:	4b68      	ldr	r3, [pc, #416]	@ (80010e8 <stepper_move+0x1ec>)
 8000f48:	edc3 7a00 	vstr	s15, [r3]

		reset_timers(stp);
 8000f4c:	4b66      	ldr	r3, [pc, #408]	@ (80010e8 <stepper_move+0x1ec>)
 8000f4e:	edd3 7a00 	vldr	s15, [r3]
 8000f52:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80010ec <stepper_move+0x1f0>
 8000f56:	eec7 6a27 	vdiv.f32	s13, s14, s15

 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f62:	3301      	adds	r3, #1
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f74:	ee77 7ac7 	vsub.f32	s15, s15, s14
		reset_timers(stp);
 8000f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f7c:	ee17 2a90 	vmov	r2, s15
 8000f80:	4b5b      	ldr	r3, [pc, #364]	@ (80010f0 <stepper_move+0x1f4>)
 8000f82:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_AUTORELOAD(stp->position_timer,
				(n_steps * (stp->pwm_timer->Instance->PSC + 1)) - 1);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6898      	ldr	r0, [r3, #8]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	899b      	ldrh	r3, [r3, #12]
 8000f8c:	7afa      	ldrb	r2, [r7, #11]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f001 fb3c 	bl	800260c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_1,
				__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f9e:	d02b      	beq.n	8000ff8 <stepper_move+0xfc>

		HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_1); //START PWM
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f000 f8b1 	bl	8001108 <reset_timers>

	} else { //set parameters for the timer2 separately cause it has 2 channel
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fae:	3301      	adds	r3, #1
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	fb03 f202 	mul.w	r2, r3, r2
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3a01      	subs	r2, #1
 8000fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc8:	3301      	adds	r3, #1
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	fb03 f202 	mul.w	r2, r3, r2
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	3a01      	subs	r2, #1
 8000fd6:	60da      	str	r2, [r3, #12]
		if (flag_configured_timer2 != 1) { //this cause the second stepper must be equal to the first one
			reset_timers(stp);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	0852      	lsrs	r2, r2, #1
 8000fe8:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_AUTORELOAD(stp->position_timer,
					(n_steps * (stp->pwm_timer->Instance->PSC + 1)) - 1);
			__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_1,
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 fa3f 	bl	8003474 <HAL_TIM_PWM_Start_IT>
 8000ff6:	e043      	b.n	8001080 <stepper_move+0x184>
					__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);
			__HAL_TIM_SET_COMPARE(stp->pwm_timer, TIM_CHANNEL_2,
					__HAL_TIM_GET_AUTORELOAD(stp->pwm_timer)/2);
 8000ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80010f4 <stepper_move+0x1f8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d039      	beq.n	8001074 <stepper_move+0x178>

			HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_1); //START PWM
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f000 f881 	bl	8001108 <reset_timers>
			HAL_TIM_PWM_Start_IT(stp->pwm_timer, TIM_CHANNEL_2); //START PWM)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800100e:	3301      	adds	r3, #1
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	fb03 f202 	mul.w	r2, r3, r2
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3a01      	subs	r2, #1
 800101e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001028:	3301      	adds	r3, #1
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	fb03 f202 	mul.w	r2, r3, r2
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	3a01      	subs	r2, #1
 8001036:	60da      	str	r2, [r3, #12]
		}
		flag_configured_timer2 ^= 1;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	0852      	lsrs	r2, r2, #1
 8001048:	635a      	str	r2, [r3, #52]	@ 0x34

	}
}
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	0852      	lsrs	r2, r2, #1
 800105a:	639a      	str	r2, [r3, #56]	@ 0x38

void reset_timers(stepper_obj *stp) {
	__HAL_TIM_SET_COUNTER(stp->position_timer, 0);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fa06 	bl	8003474 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COUNTER(stp->pwm_timer, 0);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2104      	movs	r1, #4
 800106e:	4618      	mov	r0, r3
 8001070:	f002 fa00 	bl	8003474 <HAL_TIM_PWM_Start_IT>
	stp->pwm_timer->Instance->EGR = TIM_EGR_UG; //reset the trigger
	stp->position_timer->Instance->EGR = TIM_EGR_UG; //reset the trigger
 8001074:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <stepper_move+0x1f8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f083 0301 	eor.w	r3, r3, #1
 800107c:	4a1d      	ldr	r2, [pc, #116]	@ (80010f4 <stepper_move+0x1f8>)
 800107e:	6013      	str	r3, [r2, #0]

}

 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001088:	3301      	adds	r3, #1
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	fb02 f303 	mul.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]

 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a17      	ldr	r2, [pc, #92]	@ (80010f8 <stepper_move+0x1fc>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d103      	bne.n	80010a6 <stepper_move+0x1aa>
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <stepper_move+0x200>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	e00c      	b.n	80010c0 <stepper_move+0x1c4>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010b0:	d103      	bne.n	80010ba <stepper_move+0x1be>
 80010b2:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <stepper_move+0x200>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e002      	b.n	80010c0 <stepper_move+0x1c4>
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <stepper_move+0x200>)
 80010bc:	2202      	movs	r2, #2
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <stepper_move+0x200>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	490e      	ldr	r1, [pc, #56]	@ (8001100 <stepper_move+0x204>)
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80010cc:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <stepper_move+0x200>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a07      	ldr	r2, [pc, #28]	@ (80010f0 <stepper_move+0x1f4>)
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	490b      	ldr	r1, [pc, #44]	@ (8001104 <stepper_move+0x208>)
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	43b40000 	.word	0x43b40000
 80010e8:	20000114 	.word	0x20000114
 80010ec:	4ca037a0 	.word	0x4ca037a0
 80010f0:	20000024 	.word	0x20000024
 80010f4:	20000110 	.word	0x20000110
 80010f8:	40010000 	.word	0x40010000
 80010fc:	20000118 	.word	0x20000118
 8001100:	200000f8 	.word	0x200000f8
 8001104:	20000104 	.word	0x20000104

08001108 <reset_timers>:
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2201      	movs	r2, #1
 8001118:	615a      	str	r2, [r3, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2201      	movs	r2, #1
 8001122:	615a      	str	r2, [r3, #20]
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <HAL_MspInit+0x4c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	4a0f      	ldr	r2, [pc, #60]	@ (800117c <HAL_MspInit+0x4c>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001144:	6453      	str	r3, [r2, #68]	@ 0x44
 8001146:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <HAL_MspInit+0x4c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HAL_MspInit+0x4c>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	4a08      	ldr	r2, [pc, #32]	@ (800117c <HAL_MspInit+0x4c>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001160:	6413      	str	r3, [r2, #64]	@ 0x40
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_MspInit+0x4c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800116e:	2006      	movs	r0, #6
 8001170:	f001 f876 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800

08001180 <NMI_Handler>:
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <NMI_Handler+0x4>

08001188 <HardFault_Handler>:
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <MemManage_Handler+0x4>

08001198 <BusFault_Handler>:
/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:
/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a8 <SVC_Handler>:
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}

 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <DebugMon_Handler>:
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}

 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <PendSV_Handler>:
/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */
 80011d6:	f000 ff2f 	bl	8002038 <HAL_IncTick>

  /* USER CODE END SysTick_IRQn 1 */
}

 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <TIM1_BRK_TIM9_IRQHandler>:
/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
 80011e4:	4802      	ldr	r0, [pc, #8]	@ (80011f0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80011e6:	f002 fb19 	bl	800381c <HAL_TIM_IRQHandler>

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}

 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000011c 	.word	0x2000011c

080011f4 <TIM1_UP_TIM10_IRQHandler>:
/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  HAL_TIM_IRQHandler(&htim10);
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80011fa:	f002 fb0f 	bl	800381c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
 80011fe:	4803      	ldr	r0, [pc, #12]	@ (800120c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001200:	f002 fb0c 	bl	800381c <HAL_TIM_IRQHandler>

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}

 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	2000011c 	.word	0x2000011c
 800120c:	200002cc 	.word	0x200002cc

08001210 <TIM1_TRG_COM_TIM11_IRQHandler>:
/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  HAL_TIM_IRQHandler(&htim11);
 8001214:	4803      	ldr	r0, [pc, #12]	@ (8001224 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001216:	f002 fb01 	bl	800381c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
 800121a:	4803      	ldr	r0, [pc, #12]	@ (8001228 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800121c:	f002 fafe 	bl	800381c <HAL_TIM_IRQHandler>

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}

 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000011c 	.word	0x2000011c
 8001228:	20000314 	.word	0x20000314

0800122c <TIM1_CC_IRQHandler>:
/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 8001230:	4802      	ldr	r0, [pc, #8]	@ (800123c <TIM1_CC_IRQHandler+0x10>)
 8001232:	f002 faf3 	bl	800381c <HAL_TIM_IRQHandler>

  /* USER CODE END TIM1_CC_IRQn 1 */
}

 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000011c 	.word	0x2000011c

08001240 <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */
 8001244:	4802      	ldr	r0, [pc, #8]	@ (8001250 <TIM2_IRQHandler+0x10>)
 8001246:	f002 fae9 	bl	800381c <HAL_TIM_IRQHandler>

  /* USER CODE END TIM2_IRQn 1 */
}

 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000164 	.word	0x20000164

08001254 <TIM3_IRQHandler>:
/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */
 8001258:	4802      	ldr	r0, [pc, #8]	@ (8001264 <TIM3_IRQHandler+0x10>)
 800125a:	f002 fadf 	bl	800381c <HAL_TIM_IRQHandler>

  /* USER CODE END TIM3_IRQn 1 */
}

 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200001ac 	.word	0x200001ac

08001268 <TIM4_IRQHandler>:
/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
  /* USER CODE BEGIN TIM4_IRQn 1 */
 800126c:	4802      	ldr	r0, [pc, #8]	@ (8001278 <TIM4_IRQHandler+0x10>)
 800126e:	f002 fad5 	bl	800381c <HAL_TIM_IRQHandler>

  /* USER CODE END TIM4_IRQn 1 */
}

 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200001f4 	.word	0x200001f4

0800127c <EXTI15_10_IRQHandler>:
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DISABLE_button_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
 8001280:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001284:	f001 f9dc 	bl	8002640 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI15_10_IRQn 1 */
}

 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <TIM8_BRK_TIM12_IRQHandler>:
/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
  /* USER CODE BEGIN TIM5_IRQn 1 */
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001292:	f002 fac3 	bl	800381c <HAL_TIM_IRQHandler>

  /* USER CODE END TIM5_IRQn 1 */
}

 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000284 	.word	0x20000284

080012a0 <TIM8_UP_TIM13_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80012a6:	f002 fab9 	bl	800381c <HAL_TIM_IRQHandler>
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000284 	.word	0x20000284

080012b4 <TIM8_TRG_COM_TIM14_IRQHandler>:
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80012ba:	f002 faaf 	bl	800381c <HAL_TIM_IRQHandler>
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000284 	.word	0x20000284

080012c8 <TIM8_CC_IRQHandler>:
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <TIM8_CC_IRQHandler+0x10>)
 80012ce:	f002 faa5 	bl	800381c <HAL_TIM_IRQHandler>
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000284 	.word	0x20000284

080012dc <TIM5_IRQHandler>:
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <TIM5_IRQHandler+0x10>)
 80012e2:	f002 fa9b 	bl	800381c <HAL_TIM_IRQHandler>
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000023c 	.word	0x2000023c

080012f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <SystemInit+0x20>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012fa:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <SystemInit+0x20>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b096      	sub	sp, #88	@ 0x58
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
 8001342:	615a      	str	r2, [r3, #20]
 8001344:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2220      	movs	r2, #32
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f003 fc91 	bl	8004c74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001352:	4b3f      	ldr	r3, [pc, #252]	@ (8001450 <MX_TIM1_Init+0x13c>)
 8001354:	4a3f      	ldr	r2, [pc, #252]	@ (8001454 <MX_TIM1_Init+0x140>)
 8001356:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8001358:	4b3d      	ldr	r3, [pc, #244]	@ (8001450 <MX_TIM1_Init+0x13c>)
 800135a:	2204      	movs	r2, #4
 800135c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b3c      	ldr	r3, [pc, #240]	@ (8001450 <MX_TIM1_Init+0x13c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 44999;
 8001364:	4b3a      	ldr	r3, [pc, #232]	@ (8001450 <MX_TIM1_Init+0x13c>)
 8001366:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800136a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b38      	ldr	r3, [pc, #224]	@ (8001450 <MX_TIM1_Init+0x13c>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001372:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <MX_TIM1_Init+0x13c>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001378:	4b35      	ldr	r3, [pc, #212]	@ (8001450 <MX_TIM1_Init+0x13c>)
 800137a:	2280      	movs	r2, #128	@ 0x80
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800137e:	4834      	ldr	r0, [pc, #208]	@ (8001450 <MX_TIM1_Init+0x13c>)
 8001380:	f001 ff5e 	bl	8003240 <HAL_TIM_Base_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800138a:	f7ff fd05 	bl	8000d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001392:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001394:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001398:	4619      	mov	r1, r3
 800139a:	482d      	ldr	r0, [pc, #180]	@ (8001450 <MX_TIM1_Init+0x13c>)
 800139c:	f002 fbf0 	bl	8003b80 <HAL_TIM_ConfigClockSource>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013a6:	f7ff fcf7 	bl	8000d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013aa:	4829      	ldr	r0, [pc, #164]	@ (8001450 <MX_TIM1_Init+0x13c>)
 80013ac:	f002 f808 	bl	80033c0 <HAL_TIM_PWM_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013b6:	f7ff fcef 	bl	8000d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013ba:	2320      	movs	r3, #32
 80013bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80013be:	2380      	movs	r3, #128	@ 0x80
 80013c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013c6:	4619      	mov	r1, r3
 80013c8:	4821      	ldr	r0, [pc, #132]	@ (8001450 <MX_TIM1_Init+0x13c>)
 80013ca:	f003 f8ad 	bl	8004528 <HAL_TIMEx_MasterConfigSynchronization>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013d4:	f7ff fce0 	bl	8000d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d8:	2360      	movs	r3, #96	@ 0x60
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 80013dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013ea:	2304      	movs	r3, #4
 80013ec:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013fa:	2200      	movs	r2, #0
 80013fc:	4619      	mov	r1, r3
 80013fe:	4814      	ldr	r0, [pc, #80]	@ (8001450 <MX_TIM1_Init+0x13c>)
 8001400:	f002 fafc 	bl	80039fc <HAL_TIM_PWM_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800140a:	f7ff fcc5 	bl	8000d98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001422:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001426:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4619      	mov	r1, r3
 8001430:	4807      	ldr	r0, [pc, #28]	@ (8001450 <MX_TIM1_Init+0x13c>)
 8001432:	f003 f8f5 	bl	8004620 <HAL_TIMEx_ConfigBreakDeadTime>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800143c:	f7ff fcac 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001440:	4803      	ldr	r0, [pc, #12]	@ (8001450 <MX_TIM1_Init+0x13c>)
 8001442:	f000 fc1d 	bl	8001c80 <HAL_TIM_MspPostInit>

}
 8001446:	bf00      	nop
 8001448:	3758      	adds	r7, #88	@ 0x58
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000011c 	.word	0x2000011c
 8001454:	40010000 	.word	0x40010000

08001458 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	@ 0x38
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001488:	4b33      	ldr	r3, [pc, #204]	@ (8001558 <MX_TIM2_Init+0x100>)
 800148a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800148e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8001490:	4b31      	ldr	r3, [pc, #196]	@ (8001558 <MX_TIM2_Init+0x100>)
 8001492:	2204      	movs	r2, #4
 8001494:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b30      	ldr	r3, [pc, #192]	@ (8001558 <MX_TIM2_Init+0x100>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 41999;
 800149c:	4b2e      	ldr	r3, [pc, #184]	@ (8001558 <MX_TIM2_Init+0x100>)
 800149e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001558 <MX_TIM2_Init+0x100>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001558 <MX_TIM2_Init+0x100>)
 80014ac:	2280      	movs	r2, #128	@ 0x80
 80014ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014b0:	4829      	ldr	r0, [pc, #164]	@ (8001558 <MX_TIM2_Init+0x100>)
 80014b2:	f001 fec5 	bl	8003240 <HAL_TIM_Base_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014bc:	f7ff fc6c 	bl	8000d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ca:	4619      	mov	r1, r3
 80014cc:	4822      	ldr	r0, [pc, #136]	@ (8001558 <MX_TIM2_Init+0x100>)
 80014ce:	f002 fb57 	bl	8003b80 <HAL_TIM_ConfigClockSource>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014d8:	f7ff fc5e 	bl	8000d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014dc:	481e      	ldr	r0, [pc, #120]	@ (8001558 <MX_TIM2_Init+0x100>)
 80014de:	f001 ff6f 	bl	80033c0 <HAL_TIM_PWM_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014e8:	f7ff fc56 	bl	8000d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ec:	2320      	movs	r3, #32
 80014ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80014f0:	2380      	movs	r3, #128	@ 0x80
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f4:	f107 0320 	add.w	r3, r7, #32
 80014f8:	4619      	mov	r1, r3
 80014fa:	4817      	ldr	r0, [pc, #92]	@ (8001558 <MX_TIM2_Init+0x100>)
 80014fc:	f003 f814 	bl	8004528 <HAL_TIMEx_MasterConfigSynchronization>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001506:	f7ff fc47 	bl	8000d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150a:	2360      	movs	r3, #96	@ 0x60
 800150c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32768;
 800150e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001512:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001518:	2304      	movs	r3, #4
 800151a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	4619      	mov	r1, r3
 8001522:	480d      	ldr	r0, [pc, #52]	@ (8001558 <MX_TIM2_Init+0x100>)
 8001524:	f002 fa6a 	bl	80039fc <HAL_TIM_PWM_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800152e:	f7ff fc33 	bl	8000d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2204      	movs	r2, #4
 8001536:	4619      	mov	r1, r3
 8001538:	4807      	ldr	r0, [pc, #28]	@ (8001558 <MX_TIM2_Init+0x100>)
 800153a:	f002 fa5f 	bl	80039fc <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001544:	f7ff fc28 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001548:	4803      	ldr	r0, [pc, #12]	@ (8001558 <MX_TIM2_Init+0x100>)
 800154a:	f000 fb99 	bl	8001c80 <HAL_TIM_MspPostInit>

}
 800154e:	bf00      	nop
 8001550:	3738      	adds	r7, #56	@ 0x38
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000164 	.word	0x20000164

0800155c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	@ 0x30
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001588:	4b24      	ldr	r3, [pc, #144]	@ (800161c <MX_TIM3_Init+0xc0>)
 800158a:	4a25      	ldr	r2, [pc, #148]	@ (8001620 <MX_TIM3_Init+0xc4>)
 800158c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41999;
 800158e:	4b23      	ldr	r3, [pc, #140]	@ (800161c <MX_TIM3_Init+0xc0>)
 8001590:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001594:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b21      	ldr	r3, [pc, #132]	@ (800161c <MX_TIM3_Init+0xc0>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 800159c:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <MX_TIM3_Init+0xc0>)
 800159e:	22c7      	movs	r2, #199	@ 0xc7
 80015a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <MX_TIM3_Init+0xc0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <MX_TIM3_Init+0xc0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015ae:	481b      	ldr	r0, [pc, #108]	@ (800161c <MX_TIM3_Init+0xc0>)
 80015b0:	f001 fe46 	bl	8003240 <HAL_TIM_Base_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80015ba:	f7ff fbed 	bl	8000d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015c4:	f107 0320 	add.w	r3, r7, #32
 80015c8:	4619      	mov	r1, r3
 80015ca:	4814      	ldr	r0, [pc, #80]	@ (800161c <MX_TIM3_Init+0xc0>)
 80015cc:	f002 fad8 	bl	8003b80 <HAL_TIM_ConfigClockSource>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80015d6:	f7ff fbdf 	bl	8000d98 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80015da:	2306      	movs	r3, #6
 80015dc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80015de:	2310      	movs	r3, #16
 80015e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <MX_TIM3_Init+0xc0>)
 80015ea:	f002 fb90 	bl	8003d0e <HAL_TIM_SlaveConfigSynchro>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80015f4:	f7ff fbd0 	bl	8000d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	@ (800161c <MX_TIM3_Init+0xc0>)
 8001606:	f002 ff8f 	bl	8004528 <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001610:	f7ff fbc2 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3730      	adds	r7, #48	@ 0x30
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200001ac 	.word	0x200001ac
 8001620:	40000400 	.word	0x40000400

08001624 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	@ 0x30
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0320 	add.w	r3, r7, #32
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001650:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 8001652:	4a25      	ldr	r2, [pc, #148]	@ (80016e8 <MX_TIM4_Init+0xc4>)
 8001654:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 44999;
 8001656:	4b23      	ldr	r3, [pc, #140]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 8001658:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800165c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b21      	ldr	r3, [pc, #132]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8001664:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 8001666:	22c7      	movs	r2, #199	@ 0xc7
 8001668:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166a:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001670:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001676:	481b      	ldr	r0, [pc, #108]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 8001678:	f001 fde2 	bl	8003240 <HAL_TIM_Base_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001682:	f7ff fb89 	bl	8000d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800168a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800168c:	f107 0320 	add.w	r3, r7, #32
 8001690:	4619      	mov	r1, r3
 8001692:	4814      	ldr	r0, [pc, #80]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 8001694:	f002 fa74 	bl	8003b80 <HAL_TIM_ConfigClockSource>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800169e:	f7ff fb7b 	bl	8000d98 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80016a2:	2306      	movs	r3, #6
 80016a4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	4619      	mov	r1, r3
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 80016b2:	f002 fb2c 	bl	8003d0e <HAL_TIM_SlaveConfigSynchro>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80016bc:	f7ff fb6c 	bl	8000d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 80016ce:	f002 ff2b 	bl	8004528 <HAL_TIMEx_MasterConfigSynchronization>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 80016d8:	f7ff fb5e 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	3730      	adds	r7, #48	@ 0x30
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200001f4 	.word	0x200001f4
 80016e8:	40000800 	.word	0x40000800

080016ec <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	@ 0x30
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	f107 0320 	add.w	r3, r7, #32
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001718:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <MX_TIM5_Init+0xc0>)
 800171a:	4a25      	ldr	r2, [pc, #148]	@ (80017b0 <MX_TIM5_Init+0xc4>)
 800171c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 14999;
 800171e:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <MX_TIM5_Init+0xc0>)
 8001720:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001724:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001726:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <MX_TIM5_Init+0xc0>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 199;
 800172c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <MX_TIM5_Init+0xc0>)
 800172e:	22c7      	movs	r2, #199	@ 0xc7
 8001730:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001732:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <MX_TIM5_Init+0xc0>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001738:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <MX_TIM5_Init+0xc0>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800173e:	481b      	ldr	r0, [pc, #108]	@ (80017ac <MX_TIM5_Init+0xc0>)
 8001740:	f001 fd7e 	bl	8003240 <HAL_TIM_Base_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 800174a:	f7ff fb25 	bl	8000d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001752:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4619      	mov	r1, r3
 800175a:	4814      	ldr	r0, [pc, #80]	@ (80017ac <MX_TIM5_Init+0xc0>)
 800175c:	f002 fa10 	bl	8003b80 <HAL_TIM_ConfigClockSource>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001766:	f7ff fb17 	bl	8000d98 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800176a:	2306      	movs	r3, #6
 800176c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800176e:	2330      	movs	r3, #48	@ 0x30
 8001770:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	4619      	mov	r1, r3
 8001778:	480c      	ldr	r0, [pc, #48]	@ (80017ac <MX_TIM5_Init+0xc0>)
 800177a:	f002 fac8 	bl	8003d0e <HAL_TIM_SlaveConfigSynchro>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001784:	f7ff fb08 	bl	8000d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_TIM5_Init+0xc0>)
 8001796:	f002 fec7 	bl	8004528 <HAL_TIMEx_MasterConfigSynchronization>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 80017a0:	f7ff fafa 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	3730      	adds	r7, #48	@ 0x30
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	2000023c 	.word	0x2000023c
 80017b0:	40000c00 	.word	0x40000c00

080017b4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b096      	sub	sp, #88	@ 0x58
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]
 80017e2:	615a      	str	r2, [r3, #20]
 80017e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2220      	movs	r2, #32
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 fa41 	bl	8004c74 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017f2:	4b3f      	ldr	r3, [pc, #252]	@ (80018f0 <MX_TIM8_Init+0x13c>)
 80017f4:	4a3f      	ldr	r2, [pc, #252]	@ (80018f4 <MX_TIM8_Init+0x140>)
 80017f6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4;
 80017f8:	4b3d      	ldr	r3, [pc, #244]	@ (80018f0 <MX_TIM8_Init+0x13c>)
 80017fa:	2204      	movs	r2, #4
 80017fc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fe:	4b3c      	ldr	r3, [pc, #240]	@ (80018f0 <MX_TIM8_Init+0x13c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 14999;
 8001804:	4b3a      	ldr	r3, [pc, #232]	@ (80018f0 <MX_TIM8_Init+0x13c>)
 8001806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800180a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180c:	4b38      	ldr	r3, [pc, #224]	@ (80018f0 <MX_TIM8_Init+0x13c>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001812:	4b37      	ldr	r3, [pc, #220]	@ (80018f0 <MX_TIM8_Init+0x13c>)
 8001814:	2200      	movs	r2, #0
 8001816:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001818:	4b35      	ldr	r3, [pc, #212]	@ (80018f0 <MX_TIM8_Init+0x13c>)
 800181a:	2280      	movs	r2, #128	@ 0x80
 800181c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800181e:	4834      	ldr	r0, [pc, #208]	@ (80018f0 <MX_TIM8_Init+0x13c>)
 8001820:	f001 fd0e 	bl	8003240 <HAL_TIM_Base_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800182a:	f7ff fab5 	bl	8000d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001832:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001834:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001838:	4619      	mov	r1, r3
 800183a:	482d      	ldr	r0, [pc, #180]	@ (80018f0 <MX_TIM8_Init+0x13c>)
 800183c:	f002 f9a0 	bl	8003b80 <HAL_TIM_ConfigClockSource>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001846:	f7ff faa7 	bl	8000d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800184a:	4829      	ldr	r0, [pc, #164]	@ (80018f0 <MX_TIM8_Init+0x13c>)
 800184c:	f001 fdb8 	bl	80033c0 <HAL_TIM_PWM_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001856:	f7ff fa9f 	bl	8000d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800185a:	2320      	movs	r3, #32
 800185c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800185e:	2380      	movs	r3, #128	@ 0x80
 8001860:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001862:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001866:	4619      	mov	r1, r3
 8001868:	4821      	ldr	r0, [pc, #132]	@ (80018f0 <MX_TIM8_Init+0x13c>)
 800186a:	f002 fe5d 	bl	8004528 <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001874:	f7ff fa90 	bl	8000d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001878:	2360      	movs	r3, #96	@ 0x60
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32768;
 800187c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001880:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800188a:	2304      	movs	r3, #4
 800188c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	4814      	ldr	r0, [pc, #80]	@ (80018f0 <MX_TIM8_Init+0x13c>)
 80018a0:	f002 f8ac 	bl	80039fc <HAL_TIM_PWM_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80018aa:	f7ff fa75 	bl	8000d98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4807      	ldr	r0, [pc, #28]	@ (80018f0 <MX_TIM8_Init+0x13c>)
 80018d2:	f002 fea5 	bl	8004620 <HAL_TIMEx_ConfigBreakDeadTime>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 80018dc:	f7ff fa5c 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80018e0:	4803      	ldr	r0, [pc, #12]	@ (80018f0 <MX_TIM8_Init+0x13c>)
 80018e2:	f000 f9cd 	bl	8001c80 <HAL_TIM_MspPostInit>

}
 80018e6:	bf00      	nop
 80018e8:	3758      	adds	r7, #88	@ 0x58
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000284 	.word	0x20000284
 80018f4:	40010400 	.word	0x40010400

080018f8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
 800190c:	615a      	str	r2, [r3, #20]
 800190e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001910:	4b1e      	ldr	r3, [pc, #120]	@ (800198c <MX_TIM10_Init+0x94>)
 8001912:	4a1f      	ldr	r2, [pc, #124]	@ (8001990 <MX_TIM10_Init+0x98>)
 8001914:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001916:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <MX_TIM10_Init+0x94>)
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191c:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <MX_TIM10_Init+0x94>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001922:	4b1a      	ldr	r3, [pc, #104]	@ (800198c <MX_TIM10_Init+0x94>)
 8001924:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001928:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192a:	4b18      	ldr	r3, [pc, #96]	@ (800198c <MX_TIM10_Init+0x94>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001930:	4b16      	ldr	r3, [pc, #88]	@ (800198c <MX_TIM10_Init+0x94>)
 8001932:	2280      	movs	r2, #128	@ 0x80
 8001934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001936:	4815      	ldr	r0, [pc, #84]	@ (800198c <MX_TIM10_Init+0x94>)
 8001938:	f001 fc82 	bl	8003240 <HAL_TIM_Base_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001942:	f7ff fa29 	bl	8000d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001946:	4811      	ldr	r0, [pc, #68]	@ (800198c <MX_TIM10_Init+0x94>)
 8001948:	f001 fd3a 	bl	80033c0 <HAL_TIM_PWM_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001952:	f7ff fa21 	bl	8000d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001956:	2360      	movs	r3, #96	@ 0x60
 8001958:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 800195a:	2301      	movs	r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001962:	2304      	movs	r3, #4
 8001964:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2200      	movs	r2, #0
 800196a:	4619      	mov	r1, r3
 800196c:	4807      	ldr	r0, [pc, #28]	@ (800198c <MX_TIM10_Init+0x94>)
 800196e:	f002 f845 	bl	80039fc <HAL_TIM_PWM_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001978:	f7ff fa0e 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800197c:	4803      	ldr	r0, [pc, #12]	@ (800198c <MX_TIM10_Init+0x94>)
 800197e:	f000 f97f 	bl	8001c80 <HAL_TIM_MspPostInit>

}
 8001982:	bf00      	nop
 8001984:	3720      	adds	r7, #32
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200002cc 	.word	0x200002cc
 8001990:	40014400 	.word	0x40014400

08001994 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80019ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001a28 <MX_TIM11_Init+0x94>)
 80019ae:	4a1f      	ldr	r2, [pc, #124]	@ (8001a2c <MX_TIM11_Init+0x98>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80019b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <MX_TIM11_Init+0x94>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <MX_TIM11_Init+0x94>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80019be:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <MX_TIM11_Init+0x94>)
 80019c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019c4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c6:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <MX_TIM11_Init+0x94>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019cc:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <MX_TIM11_Init+0x94>)
 80019ce:	2280      	movs	r2, #128	@ 0x80
 80019d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80019d2:	4815      	ldr	r0, [pc, #84]	@ (8001a28 <MX_TIM11_Init+0x94>)
 80019d4:	f001 fc34 	bl	8003240 <HAL_TIM_Base_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80019de:	f7ff f9db 	bl	8000d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80019e2:	4811      	ldr	r0, [pc, #68]	@ (8001a28 <MX_TIM11_Init+0x94>)
 80019e4:	f001 fcec 	bl	80033c0 <HAL_TIM_PWM_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80019ee:	f7ff f9d3 	bl	8000d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f2:	2360      	movs	r3, #96	@ 0x60
 80019f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80019fe:	2304      	movs	r3, #4
 8001a00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	2200      	movs	r2, #0
 8001a06:	4619      	mov	r1, r3
 8001a08:	4807      	ldr	r0, [pc, #28]	@ (8001a28 <MX_TIM11_Init+0x94>)
 8001a0a:	f001 fff7 	bl	80039fc <HAL_TIM_PWM_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001a14:	f7ff f9c0 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001a18:	4803      	ldr	r0, [pc, #12]	@ (8001a28 <MX_TIM11_Init+0x94>)
 8001a1a:	f000 f931 	bl	8001c80 <HAL_TIM_MspPostInit>

}
 8001a1e:	bf00      	nop
 8001a20:	3720      	adds	r7, #32
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000314 	.word	0x20000314
 8001a2c:	40014800 	.word	0x40014800

08001a30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	@ 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a88      	ldr	r2, [pc, #544]	@ (8001c60 <HAL_TIM_Base_MspInit+0x230>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d12e      	bne.n	8001aa0 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a46:	4b87      	ldr	r3, [pc, #540]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a86      	ldr	r2, [pc, #536]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b84      	ldr	r3, [pc, #528]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2101      	movs	r1, #1
 8001a62:	2018      	movs	r0, #24
 8001a64:	f000 fc07 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a68:	2018      	movs	r0, #24
 8001a6a:	f000 fc20 	bl	80022ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2101      	movs	r1, #1
 8001a72:	2019      	movs	r0, #25
 8001a74:	f000 fbff 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a78:	2019      	movs	r0, #25
 8001a7a:	f000 fc18 	bl	80022ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2101      	movs	r1, #1
 8001a82:	201a      	movs	r0, #26
 8001a84:	f000 fbf7 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a88:	201a      	movs	r0, #26
 8001a8a:	f000 fc10 	bl	80022ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2101      	movs	r1, #1
 8001a92:	201b      	movs	r0, #27
 8001a94:	f000 fbef 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a98:	201b      	movs	r0, #27
 8001a9a:	f000 fc08 	bl	80022ae <HAL_NVIC_EnableIRQ>
  if(timHandle->Instance==TIM1)
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	e0da      	b.n	8001c56 <HAL_TIM_Base_MspInit+0x226>
  else if(tim_baseHandle->Instance==TIM2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aa8:	d116      	bne.n	8001ad8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
 8001aae:	4b6d      	ldr	r3, [pc, #436]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a6c      	ldr	r2, [pc, #432]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b6a      	ldr	r3, [pc, #424]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	623b      	str	r3, [r7, #32]
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2101      	movs	r1, #1
 8001aca:	201c      	movs	r0, #28
 8001acc:	f000 fbd3 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ad0:	201c      	movs	r0, #28
 8001ad2:	f000 fbec 	bl	80022ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	e0be      	b.n	8001c56 <HAL_TIM_Base_MspInit+0x226>
  else if(tim_baseHandle->Instance==TIM3)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a62      	ldr	r2, [pc, #392]	@ (8001c68 <HAL_TIM_Base_MspInit+0x238>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d116      	bne.n	8001b10 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	4a5e      	ldr	r2, [pc, #376]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af2:	4b5c      	ldr	r3, [pc, #368]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2101      	movs	r1, #1
 8001b02:	201d      	movs	r0, #29
 8001b04:	f000 fbb7 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b08:	201d      	movs	r0, #29
 8001b0a:	f000 fbd0 	bl	80022ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	e0a2      	b.n	8001c56 <HAL_TIM_Base_MspInit+0x226>
  else if(tim_baseHandle->Instance==TIM4)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a55      	ldr	r2, [pc, #340]	@ (8001c6c <HAL_TIM_Base_MspInit+0x23c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d116      	bne.n	8001b48 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	4b51      	ldr	r3, [pc, #324]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	4a50      	ldr	r2, [pc, #320]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2101      	movs	r1, #1
 8001b3a:	201e      	movs	r0, #30
 8001b3c:	f000 fb9b 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b40:	201e      	movs	r0, #30
 8001b42:	f000 fbb4 	bl	80022ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	e086      	b.n	8001c56 <HAL_TIM_Base_MspInit+0x226>
  else if(tim_baseHandle->Instance==TIM5)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a48      	ldr	r2, [pc, #288]	@ (8001c70 <HAL_TIM_Base_MspInit+0x240>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d116      	bne.n	8001b80 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	4b43      	ldr	r3, [pc, #268]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	4a42      	ldr	r2, [pc, #264]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b62:	4b40      	ldr	r3, [pc, #256]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2101      	movs	r1, #1
 8001b72:	2032      	movs	r0, #50	@ 0x32
 8001b74:	f000 fb7f 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b78:	2032      	movs	r0, #50	@ 0x32
 8001b7a:	f000 fb98 	bl	80022ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	e06a      	b.n	8001c56 <HAL_TIM_Base_MspInit+0x226>
  else if(tim_baseHandle->Instance==TIM8)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a3b      	ldr	r2, [pc, #236]	@ (8001c74 <HAL_TIM_Base_MspInit+0x244>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d12e      	bne.n	8001be8 <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	4b35      	ldr	r3, [pc, #212]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	4a34      	ldr	r2, [pc, #208]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b9a:	4b32      	ldr	r3, [pc, #200]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE END TIM8_MspInit 1 */
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	202b      	movs	r0, #43	@ 0x2b
 8001bac:	f000 fb63 	bl	8002276 <HAL_NVIC_SetPriority>
  }
 8001bb0:	202b      	movs	r0, #43	@ 0x2b
 8001bb2:	f000 fb7c 	bl	80022ae <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM10)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	202c      	movs	r0, #44	@ 0x2c
 8001bbc:	f000 fb5b 	bl	8002276 <HAL_NVIC_SetPriority>
  {
 8001bc0:	202c      	movs	r0, #44	@ 0x2c
 8001bc2:	f000 fb74 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 0 */
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	202d      	movs	r0, #45	@ 0x2d
 8001bcc:	f000 fb53 	bl	8002276 <HAL_NVIC_SetPriority>

 8001bd0:	202d      	movs	r0, #45	@ 0x2d
 8001bd2:	f000 fb6c 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM10_MspInit 0 */
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	202e      	movs	r0, #46	@ 0x2e
 8001bdc:	f000 fb4b 	bl	8002276 <HAL_NVIC_SetPriority>
    /* TIM10 clock enable */
 8001be0:	202e      	movs	r0, #46	@ 0x2e
 8001be2:	f000 fb64 	bl	80022ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	e036      	b.n	8001c56 <HAL_TIM_Base_MspInit+0x226>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a22      	ldr	r2, [pc, #136]	@ (8001c78 <HAL_TIM_Base_MspInit+0x248>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d116      	bne.n	8001c20 <HAL_TIM_Base_MspInit+0x1f0>
  {
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END TIM11_MspInit 0 */
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2101      	movs	r1, #1
 8001c12:	2019      	movs	r0, #25
 8001c14:	f000 fb2f 	bl	8002276 <HAL_NVIC_SetPriority>
    /* TIM11 clock enable */
 8001c18:	2019      	movs	r0, #25
 8001c1a:	f000 fb48 	bl	80022ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	e01a      	b.n	8001c56 <HAL_TIM_Base_MspInit+0x226>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a15      	ldr	r2, [pc, #84]	@ (8001c7c <HAL_TIM_Base_MspInit+0x24c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d115      	bne.n	8001c56 <HAL_TIM_Base_MspInit+0x226>
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	4a0c      	ldr	r2, [pc, #48]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <HAL_TIM_Base_MspInit+0x234>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c46:	2200      	movs	r2, #0
 8001c48:	2101      	movs	r1, #1
 8001c4a:	201a      	movs	r0, #26
 8001c4c:	f000 fb13 	bl	8002276 <HAL_NVIC_SetPriority>
  if(timHandle->Instance==TIM1)
 8001c50:	201a      	movs	r0, #26
 8001c52:	f000 fb2c 	bl	80022ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	@ 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40010000 	.word	0x40010000
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40000400 	.word	0x40000400
 8001c6c:	40000800 	.word	0x40000800
 8001c70:	40000c00 	.word	0x40000c00
 8001c74:	40010400 	.word	0x40010400
 8001c78:	40014400 	.word	0x40014400
 8001c7c:	40014800 	.word	0x40014800

08001c80 <HAL_TIM_MspPostInit>:
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08c      	sub	sp, #48	@ 0x30
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a5b      	ldr	r2, [pc, #364]	@ (8001e0c <HAL_TIM_MspPostInit+0x18c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d11f      	bne.n	8001ce2 <HAL_TIM_MspPostInit+0x62>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);

 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	4b5a      	ldr	r3, [pc, #360]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a59      	ldr	r2, [pc, #356]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b57      	ldr	r3, [pc, #348]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
 8001cbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cc2:	61fb      	str	r3, [r7, #28]
  else if(timHandle->Instance==TIM2)
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	623b      	str	r3, [r7, #32]
  {
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM2_MspPostInit 0 */
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62bb      	str	r3, [r7, #40]	@ 0x28

 8001cd0:	2301      	movs	r3, #1
 8001cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE END TIM2_MspPostInit 0 */
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	484e      	ldr	r0, [pc, #312]	@ (8001e14 <HAL_TIM_MspPostInit+0x194>)
 8001cdc:	f000 fb02 	bl	80022e4 <HAL_GPIO_Init>
  if(tim_baseHandle->Instance==TIM1)
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
 8001ce0:	e090      	b.n	8001e04 <HAL_TIM_MspPostInit+0x184>
    */
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cea:	d11e      	bne.n	8001d2a <HAL_TIM_MspPostInit+0xaa>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	4b47      	ldr	r3, [pc, #284]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	4a46      	ldr	r2, [pc, #280]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfc:	4b44      	ldr	r3, [pc, #272]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	697b      	ldr	r3, [r7, #20]
  }
 8001d08:	2303      	movs	r3, #3
 8001d0a:	61fb      	str	r3, [r7, #28]
  else if(timHandle->Instance==TIM8)
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	623b      	str	r3, [r7, #32]
  {
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM8_MspPostInit 0 */
 8001d14:	2300      	movs	r3, #0
 8001d16:	62bb      	str	r3, [r7, #40]	@ 0x28

 8001d18:	2301      	movs	r3, #1
 8001d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE END TIM8_MspPostInit 0 */
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4619      	mov	r1, r3
 8001d22:	483c      	ldr	r0, [pc, #240]	@ (8001e14 <HAL_TIM_MspPostInit+0x194>)
 8001d24:	f000 fade 	bl	80022e4 <HAL_GPIO_Init>
    /* Peripheral clock disable */
 8001d28:	e06c      	b.n	8001e04 <HAL_TIM_MspPostInit+0x184>
    GPIO_InitStruct.Pin = PWM4_Pin;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e18 <HAL_TIM_MspPostInit+0x198>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d11e      	bne.n	8001d72 <HAL_TIM_MspPostInit+0xf2>

 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	4b35      	ldr	r3, [pc, #212]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	4a34      	ldr	r2, [pc, #208]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d44:	4b32      	ldr	r3, [pc, #200]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
  }
 8001d50:	2340      	movs	r3, #64	@ 0x40
 8001d52:	61fb      	str	r3, [r7, #28]
  else if(timHandle->Instance==TIM10)
 8001d54:	2302      	movs	r3, #2
 8001d56:	623b      	str	r3, [r7, #32]
  {
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM10_MspPostInit 0 */
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	@ 0x28

 8001d60:	2303      	movs	r3, #3
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE END TIM10_MspPostInit 0 */
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	4619      	mov	r1, r3
 8001d6a:	482c      	ldr	r0, [pc, #176]	@ (8001e1c <HAL_TIM_MspPostInit+0x19c>)
 8001d6c:	f000 faba 	bl	80022e4 <HAL_GPIO_Init>
    /* Peripheral clock disable */
 8001d70:	e048      	b.n	8001e04 <HAL_TIM_MspPostInit+0x184>
    GPIO_InitStruct.Pin = SERVO_1_Pin;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a2a      	ldr	r2, [pc, #168]	@ (8001e20 <HAL_TIM_MspPostInit+0x1a0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d11f      	bne.n	8001dbc <HAL_TIM_MspPostInit+0x13c>

 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	4b23      	ldr	r3, [pc, #140]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	4a22      	ldr	r2, [pc, #136]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8c:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
  }
 8001d98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d9c:	61fb      	str	r3, [r7, #28]
  else if(timHandle->Instance==TIM11)
 8001d9e:	2302      	movs	r3, #2
 8001da0:	623b      	str	r3, [r7, #32]
  {
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM11_MspPostInit 0 */
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	@ 0x28

 8001daa:	2303      	movs	r3, #3
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE END TIM11_MspPostInit 0 */
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	4619      	mov	r1, r3
 8001db4:	481b      	ldr	r0, [pc, #108]	@ (8001e24 <HAL_TIM_MspPostInit+0x1a4>)
 8001db6:	f000 fa95 	bl	80022e4 <HAL_GPIO_Init>
    /* Peripheral clock disable */
 8001dba:	e023      	b.n	8001e04 <HAL_TIM_MspPostInit+0x184>
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a19      	ldr	r2, [pc, #100]	@ (8001e28 <HAL_TIM_MspPostInit+0x1a8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d11e      	bne.n	8001e04 <HAL_TIM_MspPostInit+0x184>

 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_TIM_MspPostInit+0x190>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  }
 8001de2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001de6:	61fb      	str	r3, [r7, #28]

 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
}
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24

 8001df0:	2300      	movs	r3, #0
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
 8001df4:	2303      	movs	r3, #3
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
{
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4809      	ldr	r0, [pc, #36]	@ (8001e24 <HAL_TIM_MspPostInit+0x1a4>)
 8001e00:	f000 fa70 	bl	80022e4 <HAL_GPIO_Init>
    /* Peripheral clock disable */
 8001e04:	bf00      	nop
 8001e06:	3730      	adds	r7, #48	@ 0x30
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40010400 	.word	0x40010400
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40014400 	.word	0x40014400
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40014800 	.word	0x40014800

08001e2c <HAL_GPIO_EXTI_Callback>:
{
  /* Disable the TIM Counter */
  TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
}
}

 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]

 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e3c:	d108      	bne.n	8001e50 <HAL_GPIO_EXTI_Callback+0x24>

 8001e3e:	2201      	movs	r2, #1
 8001e40:	2120      	movs	r1, #32
 8001e42:	4805      	ldr	r0, [pc, #20]	@ (8001e58 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001e44:	f000 fbe2 	bl	800260c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e48:	b672      	cpsid	i
}
 8001e4a:	bf00      	nop

//slave timer disable the pwm of the master timer
void  HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <HAL_GPIO_EXTI_Callback+0x20>
    if (htim->Instance == TIM5) {
    	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);

    	//TIM_Cmd(htim->Instance, DISABLE);
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40020800 	.word	0x40020800

08001e5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <MX_USART2_UART_Init+0x50>)
 8001e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e82:	220c      	movs	r2, #12
 8001e84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e86:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e94:	f002 fc2a 	bl	80046ec <HAL_UART_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e9e:	f7fe ff7b 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000035c 	.word	0x2000035c
 8001eac:	40004400 	.word	0x40004400

08001eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	@ 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	@ (8001f34 <HAL_UART_MspInit+0x84>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d12b      	bne.n	8001f2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <HAL_UART_MspInit+0x88>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	4a17      	ldr	r2, [pc, #92]	@ (8001f38 <HAL_UART_MspInit+0x88>)
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee2:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <HAL_UART_MspInit+0x88>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <HAL_UART_MspInit+0x88>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a10      	ldr	r2, [pc, #64]	@ (8001f38 <HAL_UART_MspInit+0x88>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <HAL_UART_MspInit+0x88>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f0a:	230c      	movs	r3, #12
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f1a:	2307      	movs	r3, #7
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	4619      	mov	r1, r3
 8001f24:	4805      	ldr	r0, [pc, #20]	@ (8001f3c <HAL_UART_MspInit+0x8c>)
 8001f26:	f000 f9dd 	bl	80022e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	@ 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40004400 	.word	0x40004400
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000

08001f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f44:	f7ff f9d4 	bl	80012f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f48:	480c      	ldr	r0, [pc, #48]	@ (8001f7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f4a:	490d      	ldr	r1, [pc, #52]	@ (8001f80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f50:	e002      	b.n	8001f58 <LoopCopyDataInit>

08001f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f56:	3304      	adds	r3, #4

08001f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f5c:	d3f9      	bcc.n	8001f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f60:	4c0a      	ldr	r4, [pc, #40]	@ (8001f8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f64:	e001      	b.n	8001f6a <LoopFillZerobss>

08001f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f68:	3204      	adds	r2, #4

08001f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f6c:	d3fb      	bcc.n	8001f66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f6e:	f002 fe89 	bl	8004c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f72:	f7fe fdf5 	bl	8000b60 <main>
  bx  lr    
 8001f76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f80:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001f84:	08004d0c 	.word	0x08004d0c
  ldr r2, =_sbss
 8001f88:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001f8c:	200003a8 	.word	0x200003a8

08001f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f98:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd4 <HAL_Init+0x40>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <HAL_Init+0x40>)
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <HAL_Init+0x40>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f94f 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f000 f808 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff f8b2 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_InitTick+0x54>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <HAL_InitTick+0x58>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f967 	bl	80022ca <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f000 f92f 	bl	8002276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	@ (8002034 <HAL_InitTick+0x5c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000028 	.word	0x20000028
 8002030:	20000030 	.word	0x20000030
 8002034:	2000002c 	.word	0x2000002c

08002038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <HAL_IncTick+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_IncTick+0x24>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	@ (800205c <HAL_IncTick+0x24>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000030 	.word	0x20000030
 800205c:	200003a4 	.word	0x200003a4

08002060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <HAL_GetTick+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	200003a4 	.word	0x200003a4

08002078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff ffee 	bl	8002060 <HAL_GetTick>
 8002084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d005      	beq.n	800209e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <HAL_Delay+0x44>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800209e:	bf00      	nop
 80020a0:	f7ff ffde 	bl	8002060 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8f7      	bhi.n	80020a0 <HAL_Delay+0x28>
  {
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000030 	.word	0x20000030

080020c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db0b      	blt.n	800214e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4907      	ldr	r1, [pc, #28]	@ (800215c <__NVIC_EnableIRQ+0x38>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2001      	movs	r0, #1
 8002146:	fa00 f202 	lsl.w	r2, r0, r2
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000e100 	.word	0xe000e100

08002160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	@ (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	@ (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf28      	it	cs
 80021d2:	2304      	movcs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3304      	adds	r3, #4
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d902      	bls.n	80021e4 <NVIC_EncodePriority+0x30>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3b03      	subs	r3, #3
 80021e2:	e000      	b.n	80021e6 <NVIC_EncodePriority+0x32>
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	401a      	ands	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43d9      	mvns	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	4313      	orrs	r3, r2
         );
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	@ 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800222c:	d301      	bcc.n	8002232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002232:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <SysTick_Config+0x40>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223a:	210f      	movs	r1, #15
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f7ff ff8e 	bl	8002160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <SysTick_Config+0x40>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	@ (800225c <SysTick_Config+0x40>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff29 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002288:	f7ff ff3e 	bl	8002108 <__NVIC_GetPriorityGrouping>
 800228c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	6978      	ldr	r0, [r7, #20]
 8002294:	f7ff ff8e 	bl	80021b4 <NVIC_EncodePriority>
 8002298:	4602      	mov	r2, r0
 800229a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff5d 	bl	8002160 <__NVIC_SetPriority>
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff31 	bl	8002124 <__NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffa2 	bl	800221c <SysTick_Config>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	e165      	b.n	80025cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002300:	2201      	movs	r2, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	f040 8154 	bne.w	80025c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d005      	beq.n	8002336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	2b02      	cmp	r3, #2
 8002334:	d130      	bne.n	8002398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 0201 	and.w	r2, r3, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d017      	beq.n	80023d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d123      	bne.n	8002428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	08da      	lsrs	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3208      	adds	r2, #8
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	69b9      	ldr	r1, [r7, #24]
 8002424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80ae 	beq.w	80025c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b5d      	ldr	r3, [pc, #372]	@ (80025e4 <HAL_GPIO_Init+0x300>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	4a5c      	ldr	r2, [pc, #368]	@ (80025e4 <HAL_GPIO_Init+0x300>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002478:	6453      	str	r3, [r2, #68]	@ 0x44
 800247a:	4b5a      	ldr	r3, [pc, #360]	@ (80025e4 <HAL_GPIO_Init+0x300>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002486:	4a58      	ldr	r2, [pc, #352]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	3302      	adds	r3, #2
 800248e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4f      	ldr	r2, [pc, #316]	@ (80025ec <HAL_GPIO_Init+0x308>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d025      	beq.n	80024fe <HAL_GPIO_Init+0x21a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4e      	ldr	r2, [pc, #312]	@ (80025f0 <HAL_GPIO_Init+0x30c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d01f      	beq.n	80024fa <HAL_GPIO_Init+0x216>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4d      	ldr	r2, [pc, #308]	@ (80025f4 <HAL_GPIO_Init+0x310>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d019      	beq.n	80024f6 <HAL_GPIO_Init+0x212>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a4c      	ldr	r2, [pc, #304]	@ (80025f8 <HAL_GPIO_Init+0x314>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d013      	beq.n	80024f2 <HAL_GPIO_Init+0x20e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a4b      	ldr	r2, [pc, #300]	@ (80025fc <HAL_GPIO_Init+0x318>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00d      	beq.n	80024ee <HAL_GPIO_Init+0x20a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002600 <HAL_GPIO_Init+0x31c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d007      	beq.n	80024ea <HAL_GPIO_Init+0x206>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a49      	ldr	r2, [pc, #292]	@ (8002604 <HAL_GPIO_Init+0x320>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d101      	bne.n	80024e6 <HAL_GPIO_Init+0x202>
 80024e2:	2306      	movs	r3, #6
 80024e4:	e00c      	b.n	8002500 <HAL_GPIO_Init+0x21c>
 80024e6:	2307      	movs	r3, #7
 80024e8:	e00a      	b.n	8002500 <HAL_GPIO_Init+0x21c>
 80024ea:	2305      	movs	r3, #5
 80024ec:	e008      	b.n	8002500 <HAL_GPIO_Init+0x21c>
 80024ee:	2304      	movs	r3, #4
 80024f0:	e006      	b.n	8002500 <HAL_GPIO_Init+0x21c>
 80024f2:	2303      	movs	r3, #3
 80024f4:	e004      	b.n	8002500 <HAL_GPIO_Init+0x21c>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e002      	b.n	8002500 <HAL_GPIO_Init+0x21c>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_GPIO_Init+0x21c>
 80024fe:	2300      	movs	r3, #0
 8002500:	69fa      	ldr	r2, [r7, #28]
 8002502:	f002 0203 	and.w	r2, r2, #3
 8002506:	0092      	lsls	r2, r2, #2
 8002508:	4093      	lsls	r3, r2
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002510:	4935      	ldr	r1, [pc, #212]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	089b      	lsrs	r3, r3, #2
 8002516:	3302      	adds	r3, #2
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251e:	4b3a      	ldr	r3, [pc, #232]	@ (8002608 <HAL_GPIO_Init+0x324>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002542:	4a31      	ldr	r2, [pc, #196]	@ (8002608 <HAL_GPIO_Init+0x324>)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002548:	4b2f      	ldr	r3, [pc, #188]	@ (8002608 <HAL_GPIO_Init+0x324>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800256c:	4a26      	ldr	r2, [pc, #152]	@ (8002608 <HAL_GPIO_Init+0x324>)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002572:	4b25      	ldr	r3, [pc, #148]	@ (8002608 <HAL_GPIO_Init+0x324>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002596:	4a1c      	ldr	r2, [pc, #112]	@ (8002608 <HAL_GPIO_Init+0x324>)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800259c:	4b1a      	ldr	r3, [pc, #104]	@ (8002608 <HAL_GPIO_Init+0x324>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c0:	4a11      	ldr	r2, [pc, #68]	@ (8002608 <HAL_GPIO_Init+0x324>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3301      	adds	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b0f      	cmp	r3, #15
 80025d0:	f67f ae96 	bls.w	8002300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	3724      	adds	r7, #36	@ 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40013800 	.word	0x40013800
 80025ec:	40020000 	.word	0x40020000
 80025f0:	40020400 	.word	0x40020400
 80025f4:	40020800 	.word	0x40020800
 80025f8:	40020c00 	.word	0x40020c00
 80025fc:	40021000 	.word	0x40021000
 8002600:	40021400 	.word	0x40021400
 8002604:	40021800 	.word	0x40021800
 8002608:	40013c00 	.word	0x40013c00

0800260c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
 8002618:	4613      	mov	r3, r2
 800261a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800261c:	787b      	ldrb	r3, [r7, #1]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002628:	e003      	b.n	8002632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	041a      	lsls	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	619a      	str	r2, [r3, #24]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800264a:	4b08      	ldr	r3, [pc, #32]	@ (800266c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002656:	4a05      	ldr	r2, [pc, #20]	@ (800266c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fbe4 	bl	8001e2c <HAL_GPIO_EXTI_Callback>
  }
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40013c00 	.word	0x40013c00

08002670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0cc      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b68      	ldr	r3, [pc, #416]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d90c      	bls.n	80026ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b65      	ldr	r3, [pc, #404]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b63      	ldr	r3, [pc, #396]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0b8      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c4:	4b59      	ldr	r3, [pc, #356]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a58      	ldr	r2, [pc, #352]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026dc:	4b53      	ldr	r3, [pc, #332]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	4a52      	ldr	r2, [pc, #328]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e8:	4b50      	ldr	r3, [pc, #320]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	494d      	ldr	r1, [pc, #308]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d044      	beq.n	8002790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b47      	ldr	r3, [pc, #284]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d119      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e07f      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d003      	beq.n	800272e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272a:	2b03      	cmp	r3, #3
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272e:	4b3f      	ldr	r3, [pc, #252]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e06f      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273e:	4b3b      	ldr	r3, [pc, #236]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e067      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274e:	4b37      	ldr	r3, [pc, #220]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f023 0203 	bic.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4934      	ldr	r1, [pc, #208]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	4313      	orrs	r3, r2
 800275e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002760:	f7ff fc7e 	bl	8002060 <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	e00a      	b.n	800277e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7ff fc7a 	bl	8002060 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e04f      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 020c 	and.w	r2, r3, #12
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d1eb      	bne.n	8002768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002790:	4b25      	ldr	r3, [pc, #148]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d20c      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b22      	ldr	r3, [pc, #136]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e032      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4b19      	ldr	r3, [pc, #100]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4916      	ldr	r1, [pc, #88]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e2:	4b12      	ldr	r3, [pc, #72]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	490e      	ldr	r1, [pc, #56]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027f6:	f000 f855 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	490a      	ldr	r1, [pc, #40]	@ (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	5ccb      	ldrb	r3, [r1, r3]
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	4a09      	ldr	r2, [pc, #36]	@ (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002812:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fbde 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023c00 	.word	0x40023c00
 800282c:	40023800 	.word	0x40023800
 8002830:	08004ce4 	.word	0x08004ce4
 8002834:	20000028 	.word	0x20000028
 8002838:	2000002c 	.word	0x2000002c

0800283c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002840:	4b03      	ldr	r3, [pc, #12]	@ (8002850 <HAL_RCC_GetHCLKFreq+0x14>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000028 	.word	0x20000028

08002854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002858:	f7ff fff0 	bl	800283c <HAL_RCC_GetHCLKFreq>
 800285c:	4602      	mov	r2, r0
 800285e:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	0a9b      	lsrs	r3, r3, #10
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	4903      	ldr	r1, [pc, #12]	@ (8002878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40023800 	.word	0x40023800
 8002878:	08004cf4 	.word	0x08004cf4

0800287c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002880:	f7ff ffdc 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b05      	ldr	r3, [pc, #20]	@ (800289c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0b5b      	lsrs	r3, r3, #13
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4903      	ldr	r1, [pc, #12]	@ (80028a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	08004cf4 	.word	0x08004cf4

080028a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a8:	b0ae      	sub	sp, #184	@ 0xb8
 80028aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ca:	4bcb      	ldr	r3, [pc, #812]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	f200 8206 	bhi.w	8002ce4 <HAL_RCC_GetSysClockFreq+0x440>
 80028d8:	a201      	add	r2, pc, #4	@ (adr r2, 80028e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	08002915 	.word	0x08002915
 80028e4:	08002ce5 	.word	0x08002ce5
 80028e8:	08002ce5 	.word	0x08002ce5
 80028ec:	08002ce5 	.word	0x08002ce5
 80028f0:	0800291d 	.word	0x0800291d
 80028f4:	08002ce5 	.word	0x08002ce5
 80028f8:	08002ce5 	.word	0x08002ce5
 80028fc:	08002ce5 	.word	0x08002ce5
 8002900:	08002925 	.word	0x08002925
 8002904:	08002ce5 	.word	0x08002ce5
 8002908:	08002ce5 	.word	0x08002ce5
 800290c:	08002ce5 	.word	0x08002ce5
 8002910:	08002b15 	.word	0x08002b15
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4bb9      	ldr	r3, [pc, #740]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x358>)
 8002916:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800291a:	e1e7      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800291c:	4bb8      	ldr	r3, [pc, #736]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0x35c>)
 800291e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002922:	e1e3      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002924:	4bb4      	ldr	r3, [pc, #720]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800292c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002930:	4bb1      	ldr	r3, [pc, #708]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d071      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293c:	4bae      	ldr	r3, [pc, #696]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x354>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	099b      	lsrs	r3, r3, #6
 8002942:	2200      	movs	r2, #0
 8002944:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002948:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800294c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002954:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002958:	2300      	movs	r3, #0
 800295a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800295e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002962:	4622      	mov	r2, r4
 8002964:	462b      	mov	r3, r5
 8002966:	f04f 0000 	mov.w	r0, #0
 800296a:	f04f 0100 	mov.w	r1, #0
 800296e:	0159      	lsls	r1, r3, #5
 8002970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002974:	0150      	lsls	r0, r2, #5
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4621      	mov	r1, r4
 800297c:	1a51      	subs	r1, r2, r1
 800297e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002980:	4629      	mov	r1, r5
 8002982:	eb63 0301 	sbc.w	r3, r3, r1
 8002986:	647b      	str	r3, [r7, #68]	@ 0x44
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002994:	4649      	mov	r1, r9
 8002996:	018b      	lsls	r3, r1, #6
 8002998:	4641      	mov	r1, r8
 800299a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800299e:	4641      	mov	r1, r8
 80029a0:	018a      	lsls	r2, r1, #6
 80029a2:	4641      	mov	r1, r8
 80029a4:	1a51      	subs	r1, r2, r1
 80029a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029a8:	4649      	mov	r1, r9
 80029aa:	eb63 0301 	sbc.w	r3, r3, r1
 80029ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80029bc:	4649      	mov	r1, r9
 80029be:	00cb      	lsls	r3, r1, #3
 80029c0:	4641      	mov	r1, r8
 80029c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029c6:	4641      	mov	r1, r8
 80029c8:	00ca      	lsls	r2, r1, #3
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	4603      	mov	r3, r0
 80029d0:	4622      	mov	r2, r4
 80029d2:	189b      	adds	r3, r3, r2
 80029d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80029d6:	462b      	mov	r3, r5
 80029d8:	460a      	mov	r2, r1
 80029da:	eb42 0303 	adc.w	r3, r2, r3
 80029de:	637b      	str	r3, [r7, #52]	@ 0x34
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029ec:	4629      	mov	r1, r5
 80029ee:	024b      	lsls	r3, r1, #9
 80029f0:	4621      	mov	r1, r4
 80029f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029f6:	4621      	mov	r1, r4
 80029f8:	024a      	lsls	r2, r1, #9
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a10:	f7fd fbf8 	bl	8000204 <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a1e:	e067      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a20:	4b75      	ldr	r3, [pc, #468]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a2c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002a30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a3e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002a42:	4622      	mov	r2, r4
 8002a44:	462b      	mov	r3, r5
 8002a46:	f04f 0000 	mov.w	r0, #0
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	0159      	lsls	r1, r3, #5
 8002a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a54:	0150      	lsls	r0, r2, #5
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	1a51      	subs	r1, r2, r1
 8002a5e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002a60:	4629      	mov	r1, r5
 8002a62:	eb63 0301 	sbc.w	r3, r3, r1
 8002a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002a74:	4649      	mov	r1, r9
 8002a76:	018b      	lsls	r3, r1, #6
 8002a78:	4641      	mov	r1, r8
 8002a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a7e:	4641      	mov	r1, r8
 8002a80:	018a      	lsls	r2, r1, #6
 8002a82:	4641      	mov	r1, r8
 8002a84:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a88:	4649      	mov	r1, r9
 8002a8a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a9a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aa2:	4692      	mov	sl, r2
 8002aa4:	469b      	mov	fp, r3
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	eb1a 0303 	adds.w	r3, sl, r3
 8002aac:	623b      	str	r3, [r7, #32]
 8002aae:	462b      	mov	r3, r5
 8002ab0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ac2:	4629      	mov	r1, r5
 8002ac4:	028b      	lsls	r3, r1, #10
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002acc:	4621      	mov	r1, r4
 8002ace:	028a      	lsls	r2, r1, #10
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ad8:	2200      	movs	r2, #0
 8002ada:	673b      	str	r3, [r7, #112]	@ 0x70
 8002adc:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ade:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002ae2:	f7fd fb8f 	bl	8000204 <__aeabi_uldivmod>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4613      	mov	r3, r2
 8002aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002af0:	4b41      	ldr	r3, [pc, #260]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	3301      	adds	r3, #1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002b02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b12:	e0eb      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b14:	4b38      	ldr	r3, [pc, #224]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b20:	4b35      	ldr	r3, [pc, #212]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d06b      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2c:	4b32      	ldr	r3, [pc, #200]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	2200      	movs	r2, #0
 8002b34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b40:	2300      	movs	r3, #0
 8002b42:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b44:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002b48:	4622      	mov	r2, r4
 8002b4a:	462b      	mov	r3, r5
 8002b4c:	f04f 0000 	mov.w	r0, #0
 8002b50:	f04f 0100 	mov.w	r1, #0
 8002b54:	0159      	lsls	r1, r3, #5
 8002b56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b5a:	0150      	lsls	r0, r2, #5
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4621      	mov	r1, r4
 8002b62:	1a51      	subs	r1, r2, r1
 8002b64:	61b9      	str	r1, [r7, #24]
 8002b66:	4629      	mov	r1, r5
 8002b68:	eb63 0301 	sbc.w	r3, r3, r1
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002b7a:	4659      	mov	r1, fp
 8002b7c:	018b      	lsls	r3, r1, #6
 8002b7e:	4651      	mov	r1, sl
 8002b80:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b84:	4651      	mov	r1, sl
 8002b86:	018a      	lsls	r2, r1, #6
 8002b88:	4651      	mov	r1, sl
 8002b8a:	ebb2 0801 	subs.w	r8, r2, r1
 8002b8e:	4659      	mov	r1, fp
 8002b90:	eb63 0901 	sbc.w	r9, r3, r1
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ba0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ba4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ba8:	4690      	mov	r8, r2
 8002baa:	4699      	mov	r9, r3
 8002bac:	4623      	mov	r3, r4
 8002bae:	eb18 0303 	adds.w	r3, r8, r3
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	462b      	mov	r3, r5
 8002bb6:	eb49 0303 	adc.w	r3, r9, r3
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002bc8:	4629      	mov	r1, r5
 8002bca:	024b      	lsls	r3, r1, #9
 8002bcc:	4621      	mov	r1, r4
 8002bce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	024a      	lsls	r2, r1, #9
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bde:	2200      	movs	r2, #0
 8002be0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002be2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002be4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002be8:	f7fd fb0c 	bl	8000204 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bf6:	e065      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x420>
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	00f42400 	.word	0x00f42400
 8002c00:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c04:	4b3d      	ldr	r3, [pc, #244]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x458>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	099b      	lsrs	r3, r3, #6
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	4611      	mov	r1, r2
 8002c10:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c14:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c16:	2300      	movs	r3, #0
 8002c18:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c1a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002c1e:	4642      	mov	r2, r8
 8002c20:	464b      	mov	r3, r9
 8002c22:	f04f 0000 	mov.w	r0, #0
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	0159      	lsls	r1, r3, #5
 8002c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c30:	0150      	lsls	r0, r2, #5
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4641      	mov	r1, r8
 8002c38:	1a51      	subs	r1, r2, r1
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002c50:	4659      	mov	r1, fp
 8002c52:	018b      	lsls	r3, r1, #6
 8002c54:	4651      	mov	r1, sl
 8002c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c5a:	4651      	mov	r1, sl
 8002c5c:	018a      	lsls	r2, r1, #6
 8002c5e:	4651      	mov	r1, sl
 8002c60:	1a54      	subs	r4, r2, r1
 8002c62:	4659      	mov	r1, fp
 8002c64:	eb63 0501 	sbc.w	r5, r3, r1
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	00eb      	lsls	r3, r5, #3
 8002c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c76:	00e2      	lsls	r2, r4, #3
 8002c78:	4614      	mov	r4, r2
 8002c7a:	461d      	mov	r5, r3
 8002c7c:	4643      	mov	r3, r8
 8002c7e:	18e3      	adds	r3, r4, r3
 8002c80:	603b      	str	r3, [r7, #0]
 8002c82:	464b      	mov	r3, r9
 8002c84:	eb45 0303 	adc.w	r3, r5, r3
 8002c88:	607b      	str	r3, [r7, #4]
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c96:	4629      	mov	r1, r5
 8002c98:	028b      	lsls	r3, r1, #10
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	028a      	lsls	r2, r1, #10
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cac:	2200      	movs	r2, #0
 8002cae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cb0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002cb2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002cb6:	f7fd faa5 	bl	8000204 <__aeabi_uldivmod>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x458>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	0f1b      	lsrs	r3, r3, #28
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002cd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ce2:	e003      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	37b8      	adds	r7, #184	@ 0xb8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	00f42400 	.word	0x00f42400

08002d04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e28d      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8083 	beq.w	8002e2a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d24:	4b94      	ldr	r3, [pc, #592]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d019      	beq.n	8002d64 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d30:	4b91      	ldr	r3, [pc, #580]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d3c:	4b8e      	ldr	r3, [pc, #568]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d48:	d00c      	beq.n	8002d64 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4a:	4b8b      	ldr	r3, [pc, #556]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d112      	bne.n	8002d7c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d56:	4b88      	ldr	r3, [pc, #544]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d62:	d10b      	bne.n	8002d7c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d64:	4b84      	ldr	r3, [pc, #528]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d05b      	beq.n	8002e28 <HAL_RCC_OscConfig+0x124>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d157      	bne.n	8002e28 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e25a      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d84:	d106      	bne.n	8002d94 <HAL_RCC_OscConfig+0x90>
 8002d86:	4b7c      	ldr	r3, [pc, #496]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a7b      	ldr	r2, [pc, #492]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e01d      	b.n	8002dd0 <HAL_RCC_OscConfig+0xcc>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0xb4>
 8002d9e:	4b76      	ldr	r3, [pc, #472]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a75      	ldr	r2, [pc, #468]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b73      	ldr	r3, [pc, #460]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a72      	ldr	r2, [pc, #456]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCC_OscConfig+0xcc>
 8002db8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a6e      	ldr	r2, [pc, #440]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b6c      	ldr	r3, [pc, #432]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a6b      	ldr	r2, [pc, #428]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7ff f942 	bl	8002060 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de0:	f7ff f93e 	bl	8002060 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	@ 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e21f      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df2:	4b61      	ldr	r3, [pc, #388]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0xdc>
 8002dfe:	e014      	b.n	8002e2a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7ff f92e 	bl	8002060 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e08:	f7ff f92a 	bl	8002060 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	@ 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e20b      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1a:	4b57      	ldr	r3, [pc, #348]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x104>
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d06f      	beq.n	8002f16 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e36:	4b50      	ldr	r3, [pc, #320]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d017      	beq.n	8002e72 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e42:	4b4d      	ldr	r3, [pc, #308]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d105      	bne.n	8002e5a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5a:	4b47      	ldr	r3, [pc, #284]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d11c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e66:	4b44      	ldr	r3, [pc, #272]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d116      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e72:	4b41      	ldr	r3, [pc, #260]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_RCC_OscConfig+0x186>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e1d3      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4937      	ldr	r1, [pc, #220]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	e03a      	b.n	8002f16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea8:	4b34      	ldr	r3, [pc, #208]	@ (8002f7c <HAL_RCC_OscConfig+0x278>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7ff f8d7 	bl	8002060 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb6:	f7ff f8d3 	bl	8002060 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e1b4      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b28      	ldr	r3, [pc, #160]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4925      	ldr	r1, [pc, #148]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
 8002ee8:	e015      	b.n	8002f16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eea:	4b24      	ldr	r3, [pc, #144]	@ (8002f7c <HAL_RCC_OscConfig+0x278>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7ff f8b6 	bl	8002060 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7ff f8b2 	bl	8002060 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e193      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d036      	beq.n	8002f90 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2a:	4b15      	ldr	r3, [pc, #84]	@ (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7ff f896 	bl	8002060 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7ff f892 	bl	8002060 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e173      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x234>
 8002f56:	e01b      	b.n	8002f90 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5e:	f7ff f87f 	bl	8002060 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	e00e      	b.n	8002f84 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f66:	f7ff f87b 	bl	8002060 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d907      	bls.n	8002f84 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e15c      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	42470000 	.word	0x42470000
 8002f80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f84:	4b8a      	ldr	r3, [pc, #552]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 8002f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ea      	bne.n	8002f66 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8097 	beq.w	80030cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa2:	4b83      	ldr	r3, [pc, #524]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10f      	bne.n	8002fce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	4b7f      	ldr	r3, [pc, #508]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	4a7e      	ldr	r2, [pc, #504]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 8002fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fbe:	4b7c      	ldr	r3, [pc, #496]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fce:	4b79      	ldr	r3, [pc, #484]	@ (80031b4 <HAL_RCC_OscConfig+0x4b0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d118      	bne.n	800300c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fda:	4b76      	ldr	r3, [pc, #472]	@ (80031b4 <HAL_RCC_OscConfig+0x4b0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a75      	ldr	r2, [pc, #468]	@ (80031b4 <HAL_RCC_OscConfig+0x4b0>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe6:	f7ff f83b 	bl	8002060 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fee:	f7ff f837 	bl	8002060 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e118      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003000:	4b6c      	ldr	r3, [pc, #432]	@ (80031b4 <HAL_RCC_OscConfig+0x4b0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d106      	bne.n	8003022 <HAL_RCC_OscConfig+0x31e>
 8003014:	4b66      	ldr	r3, [pc, #408]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003018:	4a65      	ldr	r2, [pc, #404]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003020:	e01c      	b.n	800305c <HAL_RCC_OscConfig+0x358>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x340>
 800302a:	4b61      	ldr	r3, [pc, #388]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302e:	4a60      	ldr	r2, [pc, #384]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	6713      	str	r3, [r2, #112]	@ 0x70
 8003036:	4b5e      	ldr	r3, [pc, #376]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303a:	4a5d      	ldr	r2, [pc, #372]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6713      	str	r3, [r2, #112]	@ 0x70
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0x358>
 8003044:	4b5a      	ldr	r3, [pc, #360]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003048:	4a59      	ldr	r2, [pc, #356]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003050:	4b57      	ldr	r3, [pc, #348]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003054:	4a56      	ldr	r2, [pc, #344]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 8003056:	f023 0304 	bic.w	r3, r3, #4
 800305a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d015      	beq.n	8003090 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7fe fffc 	bl	8002060 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306a:	e00a      	b.n	8003082 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fe fff8 	bl	8002060 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e0d7      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003082:	4b4b      	ldr	r3, [pc, #300]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ee      	beq.n	800306c <HAL_RCC_OscConfig+0x368>
 800308e:	e014      	b.n	80030ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fe ffe6 	bl	8002060 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003098:	f7fe ffe2 	bl	8002060 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e0c1      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ae:	4b40      	ldr	r3, [pc, #256]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1ee      	bne.n	8003098 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c0:	4b3b      	ldr	r3, [pc, #236]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	4a3a      	ldr	r2, [pc, #232]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 80030c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80ad 	beq.w	8003230 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030d6:	4b36      	ldr	r3, [pc, #216]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d060      	beq.n	80031a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d145      	bne.n	8003176 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ea:	4b33      	ldr	r3, [pc, #204]	@ (80031b8 <HAL_RCC_OscConfig+0x4b4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe ffb6 	bl	8002060 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe ffb2 	bl	8002060 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e093      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	4b29      	ldr	r3, [pc, #164]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	019b      	lsls	r3, r3, #6
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	3b01      	subs	r3, #1
 8003130:	041b      	lsls	r3, r3, #16
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	071b      	lsls	r3, r3, #28
 8003142:	491b      	ldr	r1, [pc, #108]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003148:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <HAL_RCC_OscConfig+0x4b4>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314e:	f7fe ff87 	bl	8002060 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003156:	f7fe ff83 	bl	8002060 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e064      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003168:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x452>
 8003174:	e05c      	b.n	8003230 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <HAL_RCC_OscConfig+0x4b4>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fe ff70 	bl	8002060 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003184:	f7fe ff6c 	bl	8002060 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e04d      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x480>
 80031a2:	e045      	b.n	8003230 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e040      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40007000 	.word	0x40007000
 80031b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031bc:	4b1f      	ldr	r3, [pc, #124]	@ (800323c <HAL_RCC_OscConfig+0x538>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d030      	beq.n	800322c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d129      	bne.n	800322c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d122      	bne.n	800322c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031ec:	4013      	ands	r3, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d119      	bne.n	800322c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	3b01      	subs	r3, #1
 8003206:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d10f      	bne.n	800322c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d107      	bne.n	800322c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003226:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800

08003240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e041      	b.n	80032d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fe fbe2 	bl	8001a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f000 fda6 	bl	8003dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d001      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e04e      	b.n	8003396 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a23      	ldr	r2, [pc, #140]	@ (80033a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d022      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x80>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003322:	d01d      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x80>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1f      	ldr	r2, [pc, #124]	@ (80033a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d018      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x80>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1e      	ldr	r2, [pc, #120]	@ (80033ac <HAL_TIM_Base_Start_IT+0xcc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d013      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x80>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1c      	ldr	r2, [pc, #112]	@ (80033b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00e      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x80>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1b      	ldr	r2, [pc, #108]	@ (80033b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d009      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x80>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a19      	ldr	r2, [pc, #100]	@ (80033b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d004      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x80>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a18      	ldr	r2, [pc, #96]	@ (80033bc <HAL_TIM_Base_Start_IT+0xdc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d111      	bne.n	8003384 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b06      	cmp	r3, #6
 8003370:	d010      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003382:	e007      	b.n	8003394 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40000c00 	.word	0x40000c00
 80033b4:	40010400 	.word	0x40010400
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40001800 	.word	0x40001800

080033c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e041      	b.n	8003456 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f839 	bl	800345e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	4619      	mov	r1, r3
 80033fe:	4610      	mov	r0, r2
 8003400:	f000 fce6 	bl	8003dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <HAL_TIM_PWM_Start_IT+0x28>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	bf14      	ite	ne
 8003494:	2301      	movne	r3, #1
 8003496:	2300      	moveq	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	e022      	b.n	80034e2 <HAL_TIM_PWM_Start_IT+0x6e>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d109      	bne.n	80034b6 <HAL_TIM_PWM_Start_IT+0x42>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	bf14      	ite	ne
 80034ae:	2301      	movne	r3, #1
 80034b0:	2300      	moveq	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	e015      	b.n	80034e2 <HAL_TIM_PWM_Start_IT+0x6e>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d109      	bne.n	80034d0 <HAL_TIM_PWM_Start_IT+0x5c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	bf14      	ite	ne
 80034c8:	2301      	movne	r3, #1
 80034ca:	2300      	moveq	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	e008      	b.n	80034e2 <HAL_TIM_PWM_Start_IT+0x6e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	bf14      	ite	ne
 80034dc:	2301      	movne	r3, #1
 80034de:	2300      	moveq	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0c7      	b.n	800367a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_PWM_Start_IT+0x86>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034f8:	e013      	b.n	8003522 <HAL_TIM_PWM_Start_IT+0xae>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start_IT+0x96>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003508:	e00b      	b.n	8003522 <HAL_TIM_PWM_Start_IT+0xae>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start_IT+0xa6>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003518:	e003      	b.n	8003522 <HAL_TIM_PWM_Start_IT+0xae>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b0c      	cmp	r3, #12
 8003526:	d841      	bhi.n	80035ac <HAL_TIM_PWM_Start_IT+0x138>
 8003528:	a201      	add	r2, pc, #4	@ (adr r2, 8003530 <HAL_TIM_PWM_Start_IT+0xbc>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003565 	.word	0x08003565
 8003534:	080035ad 	.word	0x080035ad
 8003538:	080035ad 	.word	0x080035ad
 800353c:	080035ad 	.word	0x080035ad
 8003540:	08003577 	.word	0x08003577
 8003544:	080035ad 	.word	0x080035ad
 8003548:	080035ad 	.word	0x080035ad
 800354c:	080035ad 	.word	0x080035ad
 8003550:	08003589 	.word	0x08003589
 8003554:	080035ad 	.word	0x080035ad
 8003558:	080035ad 	.word	0x080035ad
 800355c:	080035ad 	.word	0x080035ad
 8003560:	0800359b 	.word	0x0800359b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0202 	orr.w	r2, r2, #2
 8003572:	60da      	str	r2, [r3, #12]
      break;
 8003574:	e01d      	b.n	80035b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0204 	orr.w	r2, r2, #4
 8003584:	60da      	str	r2, [r3, #12]
      break;
 8003586:	e014      	b.n	80035b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0208 	orr.w	r2, r2, #8
 8003596:	60da      	str	r2, [r3, #12]
      break;
 8003598:	e00b      	b.n	80035b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0210 	orr.w	r2, r2, #16
 80035a8:	60da      	str	r2, [r3, #12]
      break;
 80035aa:	e002      	b.n	80035b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
      break;
 80035b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d15f      	bne.n	8003678 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2201      	movs	r2, #1
 80035be:	6839      	ldr	r1, [r7, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 ff8c 	bl	80044de <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003684 <HAL_TIM_PWM_Start_IT+0x210>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_TIM_PWM_Start_IT+0x166>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003688 <HAL_TIM_PWM_Start_IT+0x214>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <HAL_TIM_PWM_Start_IT+0x16a>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <HAL_TIM_PWM_Start_IT+0x16c>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d007      	beq.n	80035f4 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a22      	ldr	r2, [pc, #136]	@ (8003684 <HAL_TIM_PWM_Start_IT+0x210>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d022      	beq.n	8003644 <HAL_TIM_PWM_Start_IT+0x1d0>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003606:	d01d      	beq.n	8003644 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1f      	ldr	r2, [pc, #124]	@ (800368c <HAL_TIM_PWM_Start_IT+0x218>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d018      	beq.n	8003644 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1e      	ldr	r2, [pc, #120]	@ (8003690 <HAL_TIM_PWM_Start_IT+0x21c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d013      	beq.n	8003644 <HAL_TIM_PWM_Start_IT+0x1d0>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1c      	ldr	r2, [pc, #112]	@ (8003694 <HAL_TIM_PWM_Start_IT+0x220>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00e      	beq.n	8003644 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a17      	ldr	r2, [pc, #92]	@ (8003688 <HAL_TIM_PWM_Start_IT+0x214>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d009      	beq.n	8003644 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a18      	ldr	r2, [pc, #96]	@ (8003698 <HAL_TIM_PWM_Start_IT+0x224>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_TIM_PWM_Start_IT+0x1d0>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a17      	ldr	r2, [pc, #92]	@ (800369c <HAL_TIM_PWM_Start_IT+0x228>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d111      	bne.n	8003668 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b06      	cmp	r3, #6
 8003654:	d010      	beq.n	8003678 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003666:	e007      	b.n	8003678 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003678:	7bfb      	ldrb	r3, [r7, #15]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40010000 	.word	0x40010000
 8003688:	40010400 	.word	0x40010400
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800
 8003694:	40000c00 	.word	0x40000c00
 8003698:	40014000 	.word	0x40014000
 800369c:	40001800 	.word	0x40001800

080036a0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	d841      	bhi.n	8003738 <HAL_TIM_PWM_Stop_IT+0x98>
 80036b4:	a201      	add	r2, pc, #4	@ (adr r2, 80036bc <HAL_TIM_PWM_Stop_IT+0x1c>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036f1 	.word	0x080036f1
 80036c0:	08003739 	.word	0x08003739
 80036c4:	08003739 	.word	0x08003739
 80036c8:	08003739 	.word	0x08003739
 80036cc:	08003703 	.word	0x08003703
 80036d0:	08003739 	.word	0x08003739
 80036d4:	08003739 	.word	0x08003739
 80036d8:	08003739 	.word	0x08003739
 80036dc:	08003715 	.word	0x08003715
 80036e0:	08003739 	.word	0x08003739
 80036e4:	08003739 	.word	0x08003739
 80036e8:	08003739 	.word	0x08003739
 80036ec:	08003727 	.word	0x08003727
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0202 	bic.w	r2, r2, #2
 80036fe:	60da      	str	r2, [r3, #12]
      break;
 8003700:	e01d      	b.n	800373e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0204 	bic.w	r2, r2, #4
 8003710:	60da      	str	r2, [r3, #12]
      break;
 8003712:	e014      	b.n	800373e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0208 	bic.w	r2, r2, #8
 8003722:	60da      	str	r2, [r3, #12]
      break;
 8003724:	e00b      	b.n	800373e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0210 	bic.w	r2, r2, #16
 8003734:	60da      	str	r2, [r3, #12]
      break;
 8003736:	e002      	b.n	800373e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      break;
 800373c:	bf00      	nop
  }

  if (status == HAL_OK)
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d161      	bne.n	8003808 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2200      	movs	r2, #0
 800374a:	6839      	ldr	r1, [r7, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fec6 	bl	80044de <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2f      	ldr	r2, [pc, #188]	@ (8003814 <HAL_TIM_PWM_Stop_IT+0x174>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d004      	beq.n	8003766 <HAL_TIM_PWM_Stop_IT+0xc6>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2d      	ldr	r2, [pc, #180]	@ (8003818 <HAL_TIM_PWM_Stop_IT+0x178>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_TIM_PWM_Stop_IT+0xca>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <HAL_TIM_PWM_Stop_IT+0xcc>
 800376a:	2300      	movs	r3, #0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d017      	beq.n	80037a0 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6a1a      	ldr	r2, [r3, #32]
 8003776:	f241 1311 	movw	r3, #4369	@ 0x1111
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10f      	bne.n	80037a0 <HAL_TIM_PWM_Stop_IT+0x100>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6a1a      	ldr	r2, [r3, #32]
 8003786:	f240 4344 	movw	r3, #1092	@ 0x444
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_PWM_Stop_IT+0x100>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800379e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6a1a      	ldr	r2, [r3, #32]
 80037a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10f      	bne.n	80037d0 <HAL_TIM_PWM_Stop_IT+0x130>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a1a      	ldr	r2, [r3, #32]
 80037b6:	f240 4344 	movw	r3, #1092	@ 0x444
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d107      	bne.n	80037d0 <HAL_TIM_PWM_Stop_IT+0x130>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d104      	bne.n	80037e0 <HAL_TIM_PWM_Stop_IT+0x140>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037de:	e013      	b.n	8003808 <HAL_TIM_PWM_Stop_IT+0x168>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d104      	bne.n	80037f0 <HAL_TIM_PWM_Stop_IT+0x150>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037ee:	e00b      	b.n	8003808 <HAL_TIM_PWM_Stop_IT+0x168>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d104      	bne.n	8003800 <HAL_TIM_PWM_Stop_IT+0x160>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037fe:	e003      	b.n	8003808 <HAL_TIM_PWM_Stop_IT+0x168>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003808:	7bfb      	ldrb	r3, [r7, #15]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40010000 	.word	0x40010000
 8003818:	40010400 	.word	0x40010400

0800381c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d020      	beq.n	8003880 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01b      	beq.n	8003880 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0202 	mvn.w	r2, #2
 8003850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa9d 	bl	8003da6 <HAL_TIM_IC_CaptureCallback>
 800386c:	e005      	b.n	800387a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa8f 	bl	8003d92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7fd f923 	bl	8000ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d020      	beq.n	80038cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01b      	beq.n	80038cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0204 	mvn.w	r2, #4
 800389c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa77 	bl	8003da6 <HAL_TIM_IC_CaptureCallback>
 80038b8:	e005      	b.n	80038c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fa69 	bl	8003d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7fd f8fd 	bl	8000ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d020      	beq.n	8003918 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01b      	beq.n	8003918 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0208 	mvn.w	r2, #8
 80038e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2204      	movs	r2, #4
 80038ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fa51 	bl	8003da6 <HAL_TIM_IC_CaptureCallback>
 8003904:	e005      	b.n	8003912 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fa43 	bl	8003d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7fd f8d7 	bl	8000ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d020      	beq.n	8003964 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01b      	beq.n	8003964 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0210 	mvn.w	r2, #16
 8003934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2208      	movs	r2, #8
 800393a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fa2b 	bl	8003da6 <HAL_TIM_IC_CaptureCallback>
 8003950:	e005      	b.n	800395e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fa1d 	bl	8003d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7fd f8b1 	bl	8000ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00c      	beq.n	8003988 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0201 	mvn.w	r2, #1
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fc fffe 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00c      	beq.n	80039ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fe96 	bl	80046d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00c      	beq.n	80039d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f9f5 	bl	8003dba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00c      	beq.n	80039f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f06f 0220 	mvn.w	r2, #32
 80039ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fe68 	bl	80046c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e0ae      	b.n	8003b78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b0c      	cmp	r3, #12
 8003a26:	f200 809f 	bhi.w	8003b68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003a65 	.word	0x08003a65
 8003a34:	08003b69 	.word	0x08003b69
 8003a38:	08003b69 	.word	0x08003b69
 8003a3c:	08003b69 	.word	0x08003b69
 8003a40:	08003aa5 	.word	0x08003aa5
 8003a44:	08003b69 	.word	0x08003b69
 8003a48:	08003b69 	.word	0x08003b69
 8003a4c:	08003b69 	.word	0x08003b69
 8003a50:	08003ae7 	.word	0x08003ae7
 8003a54:	08003b69 	.word	0x08003b69
 8003a58:	08003b69 	.word	0x08003b69
 8003a5c:	08003b69 	.word	0x08003b69
 8003a60:	08003b27 	.word	0x08003b27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fa5c 	bl	8003f28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0208 	orr.w	r2, r2, #8
 8003a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0204 	bic.w	r2, r2, #4
 8003a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6999      	ldr	r1, [r3, #24]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	619a      	str	r2, [r3, #24]
      break;
 8003aa2:	e064      	b.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 faac 	bl	8004008 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6999      	ldr	r1, [r3, #24]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	021a      	lsls	r2, r3, #8
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	619a      	str	r2, [r3, #24]
      break;
 8003ae4:	e043      	b.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fb01 	bl	80040f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0208 	orr.w	r2, r2, #8
 8003b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0204 	bic.w	r2, r2, #4
 8003b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69d9      	ldr	r1, [r3, #28]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	61da      	str	r2, [r3, #28]
      break;
 8003b24:	e023      	b.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fb55 	bl	80041dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69d9      	ldr	r1, [r3, #28]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	021a      	lsls	r2, r3, #8
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	61da      	str	r2, [r3, #28]
      break;
 8003b66:	e002      	b.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIM_ConfigClockSource+0x1c>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e0b4      	b.n	8003d06 <HAL_TIM_ConfigClockSource+0x186>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bd4:	d03e      	beq.n	8003c54 <HAL_TIM_ConfigClockSource+0xd4>
 8003bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bda:	f200 8087 	bhi.w	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be2:	f000 8086 	beq.w	8003cf2 <HAL_TIM_ConfigClockSource+0x172>
 8003be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bea:	d87f      	bhi.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b70      	cmp	r3, #112	@ 0x70
 8003bee:	d01a      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0xa6>
 8003bf0:	2b70      	cmp	r3, #112	@ 0x70
 8003bf2:	d87b      	bhi.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b60      	cmp	r3, #96	@ 0x60
 8003bf6:	d050      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x11a>
 8003bf8:	2b60      	cmp	r3, #96	@ 0x60
 8003bfa:	d877      	bhi.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b50      	cmp	r3, #80	@ 0x50
 8003bfe:	d03c      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0xfa>
 8003c00:	2b50      	cmp	r3, #80	@ 0x50
 8003c02:	d873      	bhi.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003c04:	2b40      	cmp	r3, #64	@ 0x40
 8003c06:	d058      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x13a>
 8003c08:	2b40      	cmp	r3, #64	@ 0x40
 8003c0a:	d86f      	bhi.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003c0c:	2b30      	cmp	r3, #48	@ 0x30
 8003c0e:	d064      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0x15a>
 8003c10:	2b30      	cmp	r3, #48	@ 0x30
 8003c12:	d86b      	bhi.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d060      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0x15a>
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d867      	bhi.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d05c      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0x15a>
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d05a      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0x15a>
 8003c24:	e062      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c36:	f000 fc32 	bl	800449e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	609a      	str	r2, [r3, #8]
      break;
 8003c52:	e04f      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c64:	f000 fc1b 	bl	800449e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c76:	609a      	str	r2, [r3, #8]
      break;
 8003c78:	e03c      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c86:	461a      	mov	r2, r3
 8003c88:	f000 fb8f 	bl	80043aa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2150      	movs	r1, #80	@ 0x50
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fbe8 	bl	8004468 <TIM_ITRx_SetConfig>
      break;
 8003c98:	e02c      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f000 fbae 	bl	8004408 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2160      	movs	r1, #96	@ 0x60
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fbd8 	bl	8004468 <TIM_ITRx_SetConfig>
      break;
 8003cb8:	e01c      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f000 fb6f 	bl	80043aa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2140      	movs	r1, #64	@ 0x40
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fbc8 	bl	8004468 <TIM_ITRx_SetConfig>
      break;
 8003cd8:	e00c      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f000 fbbf 	bl	8004468 <TIM_ITRx_SetConfig>
      break;
 8003cea:	e003      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf0:	e000      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e031      	b.n	8003d8a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003d36:	6839      	ldr	r1, [r7, #0]
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 faa5 	bl	8004288 <TIM_SlaveTimer_SetConfig>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d009      	beq.n	8003d58 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e018      	b.n	8003d8a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d66:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d76:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a46      	ldr	r2, [pc, #280]	@ (8003efc <TIM_Base_SetConfig+0x12c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d013      	beq.n	8003e10 <TIM_Base_SetConfig+0x40>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dee:	d00f      	beq.n	8003e10 <TIM_Base_SetConfig+0x40>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a43      	ldr	r2, [pc, #268]	@ (8003f00 <TIM_Base_SetConfig+0x130>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00b      	beq.n	8003e10 <TIM_Base_SetConfig+0x40>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a42      	ldr	r2, [pc, #264]	@ (8003f04 <TIM_Base_SetConfig+0x134>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d007      	beq.n	8003e10 <TIM_Base_SetConfig+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a41      	ldr	r2, [pc, #260]	@ (8003f08 <TIM_Base_SetConfig+0x138>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d003      	beq.n	8003e10 <TIM_Base_SetConfig+0x40>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a40      	ldr	r2, [pc, #256]	@ (8003f0c <TIM_Base_SetConfig+0x13c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d108      	bne.n	8003e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a35      	ldr	r2, [pc, #212]	@ (8003efc <TIM_Base_SetConfig+0x12c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d02b      	beq.n	8003e82 <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e30:	d027      	beq.n	8003e82 <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a32      	ldr	r2, [pc, #200]	@ (8003f00 <TIM_Base_SetConfig+0x130>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d023      	beq.n	8003e82 <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a31      	ldr	r2, [pc, #196]	@ (8003f04 <TIM_Base_SetConfig+0x134>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01f      	beq.n	8003e82 <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a30      	ldr	r2, [pc, #192]	@ (8003f08 <TIM_Base_SetConfig+0x138>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d01b      	beq.n	8003e82 <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2f      	ldr	r2, [pc, #188]	@ (8003f0c <TIM_Base_SetConfig+0x13c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d017      	beq.n	8003e82 <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a2e      	ldr	r2, [pc, #184]	@ (8003f10 <TIM_Base_SetConfig+0x140>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d013      	beq.n	8003e82 <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f14 <TIM_Base_SetConfig+0x144>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00f      	beq.n	8003e82 <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2c      	ldr	r2, [pc, #176]	@ (8003f18 <TIM_Base_SetConfig+0x148>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00b      	beq.n	8003e82 <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f1c <TIM_Base_SetConfig+0x14c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d007      	beq.n	8003e82 <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a2a      	ldr	r2, [pc, #168]	@ (8003f20 <TIM_Base_SetConfig+0x150>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d003      	beq.n	8003e82 <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a29      	ldr	r2, [pc, #164]	@ (8003f24 <TIM_Base_SetConfig+0x154>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d108      	bne.n	8003e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a10      	ldr	r2, [pc, #64]	@ (8003efc <TIM_Base_SetConfig+0x12c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_Base_SetConfig+0xf8>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a12      	ldr	r2, [pc, #72]	@ (8003f0c <TIM_Base_SetConfig+0x13c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d103      	bne.n	8003ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d105      	bne.n	8003eee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f023 0201 	bic.w	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	611a      	str	r2, [r3, #16]
  }
}
 8003eee:	bf00      	nop
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800
 8003f08:	40000c00 	.word	0x40000c00
 8003f0c:	40010400 	.word	0x40010400
 8003f10:	40014000 	.word	0x40014000
 8003f14:	40014400 	.word	0x40014400
 8003f18:	40014800 	.word	0x40014800
 8003f1c:	40001800 	.word	0x40001800
 8003f20:	40001c00 	.word	0x40001c00
 8003f24:	40002000 	.word	0x40002000

08003f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f023 0201 	bic.w	r2, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0303 	bic.w	r3, r3, #3
 8003f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f023 0302 	bic.w	r3, r3, #2
 8003f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a20      	ldr	r2, [pc, #128]	@ (8004000 <TIM_OC1_SetConfig+0xd8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_OC1_SetConfig+0x64>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a1f      	ldr	r2, [pc, #124]	@ (8004004 <TIM_OC1_SetConfig+0xdc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d10c      	bne.n	8003fa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f023 0308 	bic.w	r3, r3, #8
 8003f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f023 0304 	bic.w	r3, r3, #4
 8003fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a15      	ldr	r2, [pc, #84]	@ (8004000 <TIM_OC1_SetConfig+0xd8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_OC1_SetConfig+0x8e>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a14      	ldr	r2, [pc, #80]	@ (8004004 <TIM_OC1_SetConfig+0xdc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d111      	bne.n	8003fda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	621a      	str	r2, [r3, #32]
}
 8003ff4:	bf00      	nop
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40010000 	.word	0x40010000
 8004004:	40010400 	.word	0x40010400

08004008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f023 0210 	bic.w	r2, r3, #16
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800403e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f023 0320 	bic.w	r3, r3, #32
 8004052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a22      	ldr	r2, [pc, #136]	@ (80040ec <TIM_OC2_SetConfig+0xe4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d003      	beq.n	8004070 <TIM_OC2_SetConfig+0x68>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a21      	ldr	r2, [pc, #132]	@ (80040f0 <TIM_OC2_SetConfig+0xe8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d10d      	bne.n	800408c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800408a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a17      	ldr	r2, [pc, #92]	@ (80040ec <TIM_OC2_SetConfig+0xe4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_OC2_SetConfig+0x94>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a16      	ldr	r2, [pc, #88]	@ (80040f0 <TIM_OC2_SetConfig+0xe8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d113      	bne.n	80040c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	621a      	str	r2, [r3, #32]
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40010400 	.word	0x40010400

080040f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800413c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a21      	ldr	r2, [pc, #132]	@ (80041d4 <TIM_OC3_SetConfig+0xe0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d003      	beq.n	800415a <TIM_OC3_SetConfig+0x66>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a20      	ldr	r2, [pc, #128]	@ (80041d8 <TIM_OC3_SetConfig+0xe4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10d      	bne.n	8004176 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a16      	ldr	r2, [pc, #88]	@ (80041d4 <TIM_OC3_SetConfig+0xe0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_OC3_SetConfig+0x92>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a15      	ldr	r2, [pc, #84]	@ (80041d8 <TIM_OC3_SetConfig+0xe4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d113      	bne.n	80041ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800418c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	621a      	str	r2, [r3, #32]
}
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40010400 	.word	0x40010400

080041dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800420a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	031b      	lsls	r3, r3, #12
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a12      	ldr	r2, [pc, #72]	@ (8004280 <TIM_OC4_SetConfig+0xa4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_OC4_SetConfig+0x68>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a11      	ldr	r2, [pc, #68]	@ (8004284 <TIM_OC4_SetConfig+0xa8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d109      	bne.n	8004258 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800424a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	019b      	lsls	r3, r3, #6
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	621a      	str	r2, [r3, #32]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40010000 	.word	0x40010000
 8004284:	40010400 	.word	0x40010400

08004288 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f023 0307 	bic.w	r3, r3, #7
 80042b6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b70      	cmp	r3, #112	@ 0x70
 80042d0:	d01a      	beq.n	8004308 <TIM_SlaveTimer_SetConfig+0x80>
 80042d2:	2b70      	cmp	r3, #112	@ 0x70
 80042d4:	d860      	bhi.n	8004398 <TIM_SlaveTimer_SetConfig+0x110>
 80042d6:	2b60      	cmp	r3, #96	@ 0x60
 80042d8:	d054      	beq.n	8004384 <TIM_SlaveTimer_SetConfig+0xfc>
 80042da:	2b60      	cmp	r3, #96	@ 0x60
 80042dc:	d85c      	bhi.n	8004398 <TIM_SlaveTimer_SetConfig+0x110>
 80042de:	2b50      	cmp	r3, #80	@ 0x50
 80042e0:	d046      	beq.n	8004370 <TIM_SlaveTimer_SetConfig+0xe8>
 80042e2:	2b50      	cmp	r3, #80	@ 0x50
 80042e4:	d858      	bhi.n	8004398 <TIM_SlaveTimer_SetConfig+0x110>
 80042e6:	2b40      	cmp	r3, #64	@ 0x40
 80042e8:	d019      	beq.n	800431e <TIM_SlaveTimer_SetConfig+0x96>
 80042ea:	2b40      	cmp	r3, #64	@ 0x40
 80042ec:	d854      	bhi.n	8004398 <TIM_SlaveTimer_SetConfig+0x110>
 80042ee:	2b30      	cmp	r3, #48	@ 0x30
 80042f0:	d055      	beq.n	800439e <TIM_SlaveTimer_SetConfig+0x116>
 80042f2:	2b30      	cmp	r3, #48	@ 0x30
 80042f4:	d850      	bhi.n	8004398 <TIM_SlaveTimer_SetConfig+0x110>
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d051      	beq.n	800439e <TIM_SlaveTimer_SetConfig+0x116>
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	d84c      	bhi.n	8004398 <TIM_SlaveTimer_SetConfig+0x110>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d04d      	beq.n	800439e <TIM_SlaveTimer_SetConfig+0x116>
 8004302:	2b10      	cmp	r3, #16
 8004304:	d04b      	beq.n	800439e <TIM_SlaveTimer_SetConfig+0x116>
 8004306:	e047      	b.n	8004398 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004318:	f000 f8c1 	bl	800449e <TIM_ETR_SetConfig>
      break;
 800431c:	e040      	b.n	80043a0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b05      	cmp	r3, #5
 8004324:	d101      	bne.n	800432a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e03b      	b.n	80043a2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6a1a      	ldr	r2, [r3, #32]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004350:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	4313      	orrs	r3, r2
 800435c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	621a      	str	r2, [r3, #32]
      break;
 800436e:	e017      	b.n	80043a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800437c:	461a      	mov	r2, r3
 800437e:	f000 f814 	bl	80043aa <TIM_TI1_ConfigInputStage>
      break;
 8004382:	e00d      	b.n	80043a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004390:	461a      	mov	r2, r3
 8004392:	f000 f839 	bl	8004408 <TIM_TI2_ConfigInputStage>
      break;
 8004396:	e003      	b.n	80043a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	75fb      	strb	r3, [r7, #23]
      break;
 800439c:	e000      	b.n	80043a0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800439e:	bf00      	nop
  }

  return status;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b087      	sub	sp, #28
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f023 0201 	bic.w	r2, r3, #1
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f023 030a 	bic.w	r3, r3, #10
 80043e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	621a      	str	r2, [r3, #32]
}
 80043fc:	bf00      	nop
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f023 0210 	bic.w	r2, r3, #16
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	031b      	lsls	r3, r3, #12
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004444:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	621a      	str	r2, [r3, #32]
}
 800445c:	bf00      	nop
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	f043 0307 	orr.w	r3, r3, #7
 800448a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	609a      	str	r2, [r3, #8]
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800449e:	b480      	push	{r7}
 80044a0:	b087      	sub	sp, #28
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	021a      	lsls	r2, r3, #8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	609a      	str	r2, [r3, #8]
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044de:	b480      	push	{r7}
 80044e0:	b087      	sub	sp, #28
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f003 031f 	and.w	r3, r3, #31
 80044f0:	2201      	movs	r2, #1
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	43db      	mvns	r3, r3
 8004500:	401a      	ands	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	fa01 f303 	lsl.w	r3, r1, r3
 8004516:	431a      	orrs	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	621a      	str	r2, [r3, #32]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800453c:	2302      	movs	r3, #2
 800453e:	e05a      	b.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a21      	ldr	r2, [pc, #132]	@ (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d022      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800458c:	d01d      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1d      	ldr	r2, [pc, #116]	@ (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d018      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1b      	ldr	r2, [pc, #108]	@ (800460c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a18      	ldr	r2, [pc, #96]	@ (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d009      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a17      	ldr	r2, [pc, #92]	@ (8004618 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a15      	ldr	r2, [pc, #84]	@ (800461c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d10c      	bne.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40010000 	.word	0x40010000
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800
 8004610:	40000c00 	.word	0x40000c00
 8004614:	40010400 	.word	0x40010400
 8004618:	40014000 	.word	0x40014000
 800461c:	40001800 	.word	0x40001800

08004620 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004638:	2302      	movs	r3, #2
 800463a:	e03d      	b.n	80046b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e042      	b.n	8004784 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fd fbcc 	bl	8001eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	@ 0x24
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800472e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f82b 	bl	800478c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800478c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004790:	b0c0      	sub	sp, #256	@ 0x100
 8004792:	af00      	add	r7, sp, #0
 8004794:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a8:	68d9      	ldr	r1, [r3, #12]
 80047aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	ea40 0301 	orr.w	r3, r0, r1
 80047b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047e4:	f021 010c 	bic.w	r1, r1, #12
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047f2:	430b      	orrs	r3, r1
 80047f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004806:	6999      	ldr	r1, [r3, #24]
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	ea40 0301 	orr.w	r3, r0, r1
 8004812:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4b8f      	ldr	r3, [pc, #572]	@ (8004a58 <UART_SetConfig+0x2cc>)
 800481c:	429a      	cmp	r2, r3
 800481e:	d005      	beq.n	800482c <UART_SetConfig+0xa0>
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b8d      	ldr	r3, [pc, #564]	@ (8004a5c <UART_SetConfig+0x2d0>)
 8004828:	429a      	cmp	r2, r3
 800482a:	d104      	bne.n	8004836 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800482c:	f7fe f826 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 8004830:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004834:	e003      	b.n	800483e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004836:	f7fe f80d 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 800483a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004848:	f040 810c 	bne.w	8004a64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800484c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004850:	2200      	movs	r2, #0
 8004852:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004856:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800485a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800485e:	4622      	mov	r2, r4
 8004860:	462b      	mov	r3, r5
 8004862:	1891      	adds	r1, r2, r2
 8004864:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004866:	415b      	adcs	r3, r3
 8004868:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800486a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800486e:	4621      	mov	r1, r4
 8004870:	eb12 0801 	adds.w	r8, r2, r1
 8004874:	4629      	mov	r1, r5
 8004876:	eb43 0901 	adc.w	r9, r3, r1
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800488a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800488e:	4690      	mov	r8, r2
 8004890:	4699      	mov	r9, r3
 8004892:	4623      	mov	r3, r4
 8004894:	eb18 0303 	adds.w	r3, r8, r3
 8004898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800489c:	462b      	mov	r3, r5
 800489e:	eb49 0303 	adc.w	r3, r9, r3
 80048a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048ba:	460b      	mov	r3, r1
 80048bc:	18db      	adds	r3, r3, r3
 80048be:	653b      	str	r3, [r7, #80]	@ 0x50
 80048c0:	4613      	mov	r3, r2
 80048c2:	eb42 0303 	adc.w	r3, r2, r3
 80048c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80048c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048d0:	f7fb fc98 	bl	8000204 <__aeabi_uldivmod>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4b61      	ldr	r3, [pc, #388]	@ (8004a60 <UART_SetConfig+0x2d4>)
 80048da:	fba3 2302 	umull	r2, r3, r3, r2
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	011c      	lsls	r4, r3, #4
 80048e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	1891      	adds	r1, r2, r2
 80048fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048fc:	415b      	adcs	r3, r3
 80048fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004900:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004904:	4641      	mov	r1, r8
 8004906:	eb12 0a01 	adds.w	sl, r2, r1
 800490a:	4649      	mov	r1, r9
 800490c:	eb43 0b01 	adc.w	fp, r3, r1
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800491c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004924:	4692      	mov	sl, r2
 8004926:	469b      	mov	fp, r3
 8004928:	4643      	mov	r3, r8
 800492a:	eb1a 0303 	adds.w	r3, sl, r3
 800492e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004932:	464b      	mov	r3, r9
 8004934:	eb4b 0303 	adc.w	r3, fp, r3
 8004938:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004948:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800494c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004950:	460b      	mov	r3, r1
 8004952:	18db      	adds	r3, r3, r3
 8004954:	643b      	str	r3, [r7, #64]	@ 0x40
 8004956:	4613      	mov	r3, r2
 8004958:	eb42 0303 	adc.w	r3, r2, r3
 800495c:	647b      	str	r3, [r7, #68]	@ 0x44
 800495e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004962:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004966:	f7fb fc4d 	bl	8000204 <__aeabi_uldivmod>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	4611      	mov	r1, r2
 8004970:	4b3b      	ldr	r3, [pc, #236]	@ (8004a60 <UART_SetConfig+0x2d4>)
 8004972:	fba3 2301 	umull	r2, r3, r3, r1
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2264      	movs	r2, #100	@ 0x64
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	1acb      	subs	r3, r1, r3
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004986:	4b36      	ldr	r3, [pc, #216]	@ (8004a60 <UART_SetConfig+0x2d4>)
 8004988:	fba3 2302 	umull	r2, r3, r3, r2
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004994:	441c      	add	r4, r3
 8004996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800499a:	2200      	movs	r2, #0
 800499c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049a8:	4642      	mov	r2, r8
 80049aa:	464b      	mov	r3, r9
 80049ac:	1891      	adds	r1, r2, r2
 80049ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049b0:	415b      	adcs	r3, r3
 80049b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049b8:	4641      	mov	r1, r8
 80049ba:	1851      	adds	r1, r2, r1
 80049bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80049be:	4649      	mov	r1, r9
 80049c0:	414b      	adcs	r3, r1
 80049c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049d0:	4659      	mov	r1, fp
 80049d2:	00cb      	lsls	r3, r1, #3
 80049d4:	4651      	mov	r1, sl
 80049d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049da:	4651      	mov	r1, sl
 80049dc:	00ca      	lsls	r2, r1, #3
 80049de:	4610      	mov	r0, r2
 80049e0:	4619      	mov	r1, r3
 80049e2:	4603      	mov	r3, r0
 80049e4:	4642      	mov	r2, r8
 80049e6:	189b      	adds	r3, r3, r2
 80049e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049ec:	464b      	mov	r3, r9
 80049ee:	460a      	mov	r2, r1
 80049f0:	eb42 0303 	adc.w	r3, r2, r3
 80049f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	18db      	adds	r3, r3, r3
 8004a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a12:	4613      	mov	r3, r2
 8004a14:	eb42 0303 	adc.w	r3, r2, r3
 8004a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a22:	f7fb fbef 	bl	8000204 <__aeabi_uldivmod>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a60 <UART_SetConfig+0x2d4>)
 8004a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a30:	095b      	lsrs	r3, r3, #5
 8004a32:	2164      	movs	r1, #100	@ 0x64
 8004a34:	fb01 f303 	mul.w	r3, r1, r3
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	3332      	adds	r3, #50	@ 0x32
 8004a3e:	4a08      	ldr	r2, [pc, #32]	@ (8004a60 <UART_SetConfig+0x2d4>)
 8004a40:	fba2 2303 	umull	r2, r3, r2, r3
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	f003 0207 	and.w	r2, r3, #7
 8004a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4422      	add	r2, r4
 8004a52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a54:	e106      	b.n	8004c64 <UART_SetConfig+0x4d8>
 8004a56:	bf00      	nop
 8004a58:	40011000 	.word	0x40011000
 8004a5c:	40011400 	.word	0x40011400
 8004a60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a76:	4642      	mov	r2, r8
 8004a78:	464b      	mov	r3, r9
 8004a7a:	1891      	adds	r1, r2, r2
 8004a7c:	6239      	str	r1, [r7, #32]
 8004a7e:	415b      	adcs	r3, r3
 8004a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a86:	4641      	mov	r1, r8
 8004a88:	1854      	adds	r4, r2, r1
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	eb43 0501 	adc.w	r5, r3, r1
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	00eb      	lsls	r3, r5, #3
 8004a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a9e:	00e2      	lsls	r2, r4, #3
 8004aa0:	4614      	mov	r4, r2
 8004aa2:	461d      	mov	r5, r3
 8004aa4:	4643      	mov	r3, r8
 8004aa6:	18e3      	adds	r3, r4, r3
 8004aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004aac:	464b      	mov	r3, r9
 8004aae:	eb45 0303 	adc.w	r3, r5, r3
 8004ab2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ac2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	008b      	lsls	r3, r1, #2
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004adc:	4621      	mov	r1, r4
 8004ade:	008a      	lsls	r2, r1, #2
 8004ae0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ae4:	f7fb fb8e 	bl	8000204 <__aeabi_uldivmod>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4b60      	ldr	r3, [pc, #384]	@ (8004c70 <UART_SetConfig+0x4e4>)
 8004aee:	fba3 2302 	umull	r2, r3, r3, r2
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	011c      	lsls	r4, r3, #4
 8004af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	1891      	adds	r1, r2, r2
 8004b0e:	61b9      	str	r1, [r7, #24]
 8004b10:	415b      	adcs	r3, r3
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b18:	4641      	mov	r1, r8
 8004b1a:	1851      	adds	r1, r2, r1
 8004b1c:	6139      	str	r1, [r7, #16]
 8004b1e:	4649      	mov	r1, r9
 8004b20:	414b      	adcs	r3, r1
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b30:	4659      	mov	r1, fp
 8004b32:	00cb      	lsls	r3, r1, #3
 8004b34:	4651      	mov	r1, sl
 8004b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b3a:	4651      	mov	r1, sl
 8004b3c:	00ca      	lsls	r2, r1, #3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	4603      	mov	r3, r0
 8004b44:	4642      	mov	r2, r8
 8004b46:	189b      	adds	r3, r3, r2
 8004b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b4c:	464b      	mov	r3, r9
 8004b4e:	460a      	mov	r2, r1
 8004b50:	eb42 0303 	adc.w	r3, r2, r3
 8004b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b70:	4649      	mov	r1, r9
 8004b72:	008b      	lsls	r3, r1, #2
 8004b74:	4641      	mov	r1, r8
 8004b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	008a      	lsls	r2, r1, #2
 8004b7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b82:	f7fb fb3f 	bl	8000204 <__aeabi_uldivmod>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	4b38      	ldr	r3, [pc, #224]	@ (8004c70 <UART_SetConfig+0x4e4>)
 8004b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	2264      	movs	r2, #100	@ 0x64
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	1acb      	subs	r3, r1, r3
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	3332      	adds	r3, #50	@ 0x32
 8004ba0:	4a33      	ldr	r2, [pc, #204]	@ (8004c70 <UART_SetConfig+0x4e4>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bac:	441c      	add	r4, r3
 8004bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	1891      	adds	r1, r2, r2
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	415b      	adcs	r3, r3
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bcc:	4641      	mov	r1, r8
 8004bce:	1851      	adds	r1, r2, r1
 8004bd0:	6039      	str	r1, [r7, #0]
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	414b      	adcs	r3, r1
 8004bd6:	607b      	str	r3, [r7, #4]
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004be4:	4659      	mov	r1, fp
 8004be6:	00cb      	lsls	r3, r1, #3
 8004be8:	4651      	mov	r1, sl
 8004bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bee:	4651      	mov	r1, sl
 8004bf0:	00ca      	lsls	r2, r1, #3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	189b      	adds	r3, r3, r2
 8004bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bfe:	464b      	mov	r3, r9
 8004c00:	460a      	mov	r2, r1
 8004c02:	eb42 0303 	adc.w	r3, r2, r3
 8004c06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c12:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c20:	4649      	mov	r1, r9
 8004c22:	008b      	lsls	r3, r1, #2
 8004c24:	4641      	mov	r1, r8
 8004c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c2a:	4641      	mov	r1, r8
 8004c2c:	008a      	lsls	r2, r1, #2
 8004c2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c32:	f7fb fae7 	bl	8000204 <__aeabi_uldivmod>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c70 <UART_SetConfig+0x4e4>)
 8004c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	2164      	movs	r1, #100	@ 0x64
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	3332      	adds	r3, #50	@ 0x32
 8004c4e:	4a08      	ldr	r2, [pc, #32]	@ (8004c70 <UART_SetConfig+0x4e4>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	f003 020f 	and.w	r2, r3, #15
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4422      	add	r2, r4
 8004c62:	609a      	str	r2, [r3, #8]
}
 8004c64:	bf00      	nop
 8004c66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c70:	51eb851f 	.word	0x51eb851f

08004c74 <memset>:
 8004c74:	4402      	add	r2, r0
 8004c76:	4603      	mov	r3, r0
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d100      	bne.n	8004c7e <memset+0xa>
 8004c7c:	4770      	bx	lr
 8004c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c82:	e7f9      	b.n	8004c78 <memset+0x4>

08004c84 <__libc_init_array>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	4d0d      	ldr	r5, [pc, #52]	@ (8004cbc <__libc_init_array+0x38>)
 8004c88:	4c0d      	ldr	r4, [pc, #52]	@ (8004cc0 <__libc_init_array+0x3c>)
 8004c8a:	1b64      	subs	r4, r4, r5
 8004c8c:	10a4      	asrs	r4, r4, #2
 8004c8e:	2600      	movs	r6, #0
 8004c90:	42a6      	cmp	r6, r4
 8004c92:	d109      	bne.n	8004ca8 <__libc_init_array+0x24>
 8004c94:	4d0b      	ldr	r5, [pc, #44]	@ (8004cc4 <__libc_init_array+0x40>)
 8004c96:	4c0c      	ldr	r4, [pc, #48]	@ (8004cc8 <__libc_init_array+0x44>)
 8004c98:	f000 f818 	bl	8004ccc <_init>
 8004c9c:	1b64      	subs	r4, r4, r5
 8004c9e:	10a4      	asrs	r4, r4, #2
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	42a6      	cmp	r6, r4
 8004ca4:	d105      	bne.n	8004cb2 <__libc_init_array+0x2e>
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cac:	4798      	blx	r3
 8004cae:	3601      	adds	r6, #1
 8004cb0:	e7ee      	b.n	8004c90 <__libc_init_array+0xc>
 8004cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb6:	4798      	blx	r3
 8004cb8:	3601      	adds	r6, #1
 8004cba:	e7f2      	b.n	8004ca2 <__libc_init_array+0x1e>
 8004cbc:	08004d04 	.word	0x08004d04
 8004cc0:	08004d04 	.word	0x08004d04
 8004cc4:	08004d04 	.word	0x08004d04
 8004cc8:	08004d08 	.word	0x08004d08

08004ccc <_init>:
 8004ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cce:	bf00      	nop
 8004cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd2:	bc08      	pop	{r3}
 8004cd4:	469e      	mov	lr, r3
 8004cd6:	4770      	bx	lr

08004cd8 <_fini>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	bf00      	nop
 8004cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cde:	bc08      	pop	{r3}
 8004ce0:	469e      	mov	lr, r3
 8004ce2:	4770      	bx	lr
