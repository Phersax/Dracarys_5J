
servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000317c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003340  08003340  00004340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003358  08003358  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003358  08003358  00004358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003360  08003360  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003360  08003360  00004360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003364  08003364  00004364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003368  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003374  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003374  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d495  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f1c  00000000  00000000  000124d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  000143f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000996  00000000  00000000  00015038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002153f  00000000  00000000  000159ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f73e  00000000  00000000  00036f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd0c0  00000000  00000000  0004664b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011370b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032fc  00000000  00000000  00113750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00116a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003328 	.word	0x08003328

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003328 	.word	0x08003328

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	4b2d      	ldr	r3, [pc, #180]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a2c      	ldr	r2, [pc, #176]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b2a      	ldr	r3, [pc, #168]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	4b26      	ldr	r3, [pc, #152]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a25      	ldr	r2, [pc, #148]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b23      	ldr	r3, [pc, #140]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4b1f      	ldr	r3, [pc, #124]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a1e      	ldr	r2, [pc, #120]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b1c      	ldr	r3, [pc, #112]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a17      	ldr	r2, [pc, #92]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2120      	movs	r1, #32
 800057e:	4812      	ldr	r0, [pc, #72]	@ (80005c8 <MX_GPIO_Init+0xd4>)
 8000580:	f000 fdca 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800058a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	480c      	ldr	r0, [pc, #48]	@ (80005cc <MX_GPIO_Init+0xd8>)
 800059c:	f000 fc28 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005a0:	2320      	movs	r3, #32
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <MX_GPIO_Init+0xd4>)
 80005b8:	f000 fc1a 	bl	8000df0 <HAL_GPIO_Init>

}
 80005bc:	bf00      	nop
 80005be:	3728      	adds	r7, #40	@ 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020000 	.word	0x40020000
 80005cc:	40020800 	.word	0x40020800

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fa87 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f827 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f7ff ff89 	bl	80004f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f9e5 	bl	80009b0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80005e6:	f000 f909 	bl	80007fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */



	int position = 6000; //ccr value
 80005ea:	f241 7370 	movw	r3, #6000	@ 0x1770
 80005ee:	607b      	str	r3, [r7, #4]
	//ccr=4500 = 0°, 3000=-45°, 6000=45°


	if (position < 3000)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80005f6:	4293      	cmp	r3, r2
 80005f8:	dc03      	bgt.n	8000602 <main+0x32>
		position = 3000;//ccr min for 50hz pwm
 80005fa:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	e007      	b.n	8000612 <main+0x42>
	else if (position > 5999)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f241 726f 	movw	r2, #5999	@ 0x176f
 8000608:	4293      	cmp	r3, r2
 800060a:	dd02      	ble.n	8000612 <main+0x42>
		position = 5999;//ccr max for 50 hz pwm
 800060c:	f241 736f 	movw	r3, #5999	@ 0x176f
 8000610:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, position);
 8000612:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <main+0x58>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 800061a:	2100      	movs	r1, #0
 800061c:	4802      	ldr	r0, [pc, #8]	@ (8000628 <main+0x58>)
 800061e:	f001 fc25 	bl	8001e6c <HAL_TIM_PWM_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000622:	bf00      	nop
 8000624:	e7fd      	b.n	8000622 <main+0x52>
 8000626:	bf00      	nop
 8000628:	20000028 	.word	0x20000028

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2234      	movs	r2, #52	@ 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fe48 	bl	80032d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b2a      	ldr	r3, [pc, #168]	@ (8000700 <SystemClock_Config+0xd4>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a29      	ldr	r2, [pc, #164]	@ (8000700 <SystemClock_Config+0xd4>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b27      	ldr	r3, [pc, #156]	@ (8000700 <SystemClock_Config+0xd4>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4b24      	ldr	r3, [pc, #144]	@ (8000704 <SystemClock_Config+0xd8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000678:	4a22      	ldr	r2, [pc, #136]	@ (8000704 <SystemClock_Config+0xd8>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <SystemClock_Config+0xd8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a0:	2310      	movs	r3, #16
 80006a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f890 	bl	80017e0 <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006c6:	f000 f81f 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2102      	movs	r1, #2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fd30 	bl	800114c <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006f2:	f000 f809 	bl	8000708 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <Error_Handler+0x8>

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <HAL_MspInit+0x4c>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000722:	4a0f      	ldr	r2, [pc, #60]	@ (8000760 <HAL_MspInit+0x4c>)
 8000724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000728:	6453      	str	r3, [r2, #68]	@ 0x44
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <HAL_MspInit+0x4c>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <HAL_MspInit+0x4c>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073e:	4a08      	ldr	r2, [pc, #32]	@ (8000760 <HAL_MspInit+0x4c>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000744:	6413      	str	r3, [r2, #64]	@ 0x40
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <HAL_MspInit+0x4c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000752:	2007      	movs	r0, #7
 8000754:	f000 fb0a 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <NMI_Handler+0x4>

0800076c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <HardFault_Handler+0x4>

08000774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <MemManage_Handler+0x4>

0800077c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <UsageFault_Handler+0x4>

0800078c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ba:	f000 f9e7 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80007c8:	4802      	ldr	r0, [pc, #8]	@ (80007d4 <TIM4_IRQHandler+0x10>)
 80007ca:	f001 fc65 	bl	8002098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000028 	.word	0x20000028

080007d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <SystemInit+0x20>)
 80007de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007e2:	4a05      	ldr	r2, [pc, #20]	@ (80007f8 <SystemInit+0x20>)
 80007e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	@ 0x38
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	f107 0320 	add.w	r3, r7, #32
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
 8000828:	615a      	str	r2, [r3, #20]
 800082a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800082c:	4b2d      	ldr	r3, [pc, #180]	@ (80008e4 <MX_TIM4_Init+0xe8>)
 800082e:	4a2e      	ldr	r2, [pc, #184]	@ (80008e8 <MX_TIM4_Init+0xec>)
 8000830:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8000832:	4b2c      	ldr	r3, [pc, #176]	@ (80008e4 <MX_TIM4_Init+0xe8>)
 8000834:	221c      	movs	r2, #28
 8000836:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b2a      	ldr	r3, [pc, #168]	@ (80008e4 <MX_TIM4_Init+0xe8>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800083e:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <MX_TIM4_Init+0xe8>)
 8000840:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000844:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000846:	4b27      	ldr	r3, [pc, #156]	@ (80008e4 <MX_TIM4_Init+0xe8>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800084c:	4b25      	ldr	r3, [pc, #148]	@ (80008e4 <MX_TIM4_Init+0xe8>)
 800084e:	2280      	movs	r2, #128	@ 0x80
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000852:	4824      	ldr	r0, [pc, #144]	@ (80008e4 <MX_TIM4_Init+0xe8>)
 8000854:	f001 fa62 	bl	8001d1c <HAL_TIM_Base_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800085e:	f7ff ff53 	bl	8000708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000868:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800086c:	4619      	mov	r1, r3
 800086e:	481d      	ldr	r0, [pc, #116]	@ (80008e4 <MX_TIM4_Init+0xe8>)
 8000870:	f001 fdc4 	bl	80023fc <HAL_TIM_ConfigClockSource>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800087a:	f7ff ff45 	bl	8000708 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800087e:	4819      	ldr	r0, [pc, #100]	@ (80008e4 <MX_TIM4_Init+0xe8>)
 8000880:	f001 fa9b 	bl	8001dba <HAL_TIM_PWM_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800088a:	f7ff ff3d 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	4619      	mov	r1, r3
 800089c:	4811      	ldr	r0, [pc, #68]	@ (80008e4 <MX_TIM4_Init+0xe8>)
 800089e:	f002 f9c3 	bl	8002c28 <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80008a8:	f7ff ff2e 	bl	8000708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ac:	2360      	movs	r3, #96	@ 0x60
 80008ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5999;
 80008b0:	f241 736f 	movw	r3, #5999	@ 0x176f
 80008b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	4619      	mov	r1, r3
 80008c4:	4807      	ldr	r0, [pc, #28]	@ (80008e4 <MX_TIM4_Init+0xe8>)
 80008c6:	f001 fcd7 	bl	8002278 <HAL_TIM_PWM_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80008d0:	f7ff ff1a 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <MX_TIM4_Init+0xe8>)
 80008d6:	f000 f831 	bl	800093c <HAL_TIM_MspPostInit>

}
 80008da:	bf00      	nop
 80008dc:	3738      	adds	r7, #56	@ 0x38
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000028 	.word	0x20000028
 80008e8:	40000800 	.word	0x40000800

080008ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <HAL_TIM_Base_MspInit+0x48>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d115      	bne.n	800092a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <HAL_TIM_Base_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <HAL_TIM_Base_MspInit+0x4c>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6413      	str	r3, [r2, #64]	@ 0x40
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <HAL_TIM_Base_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	201e      	movs	r0, #30
 8000920:	f000 fa2f 	bl	8000d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000924:	201e      	movs	r0, #30
 8000926:	f000 fa48 	bl	8000dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40000800 	.word	0x40000800
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a12      	ldr	r2, [pc, #72]	@ (80009a4 <HAL_TIM_MspPostInit+0x68>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d11d      	bne.n	800099a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <HAL_TIM_MspPostInit+0x6c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a10      	ldr	r2, [pc, #64]	@ (80009a8 <HAL_TIM_MspPostInit+0x6c>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <HAL_TIM_MspPostInit+0x6c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800097a:	2340      	movs	r3, #64	@ 0x40
 800097c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800098a:	2302      	movs	r3, #2
 800098c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <HAL_TIM_MspPostInit+0x70>)
 8000996:	f000 fa2b 	bl	8000df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40000800 	.word	0x40000800
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400

080009b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	@ (8000a00 <MX_USART2_UART_Init+0x50>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009e8:	f002 f9ae 	bl	8002d48 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009f2:	f7ff fe89 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000070 	.word	0x20000070
 8000a00:	40004400 	.word	0x40004400

08000a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	@ 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a19      	ldr	r2, [pc, #100]	@ (8000a88 <HAL_UART_MspInit+0x84>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12b      	bne.n	8000a7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <HAL_UART_MspInit+0x88>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	4a17      	ldr	r2, [pc, #92]	@ (8000a8c <HAL_UART_MspInit+0x88>)
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a36:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <HAL_UART_MspInit+0x88>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <HAL_UART_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a10      	ldr	r2, [pc, #64]	@ (8000a8c <HAL_UART_MspInit+0x88>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <HAL_UART_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a5e:	230c      	movs	r3, #12
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6e:	2307      	movs	r3, #7
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <HAL_UART_MspInit+0x8c>)
 8000a7a:	f000 f9b9 	bl	8000df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	@ 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000acc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a98:	f7ff fe9e 	bl	80007d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	@ (8000ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f002 fc0d 	bl	80032e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fd83 	bl	80005d0 <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ad8:	08003368 	.word	0x08003368
  ldr r2, =_sbss
 8000adc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae0:	200000bc 	.word	0x200000bc

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <HAL_Init+0x40>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <HAL_Init+0x40>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	@ (8000b28 <HAL_Init+0x40>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f92b 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fdfa 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f943 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 f90b 	bl	8000d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	@ (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	200000b8 	.word	0x200000b8

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200000b8 	.word	0x200000b8

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4907      	ldr	r1, [pc, #28]	@ (8000c68 <__NVIC_EnableIRQ+0x38>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	@ (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	@ (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	@ 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	@ 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f7ff ff8e 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff29 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff3e 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff8e 	bl	8000cc0 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5d 	bl	8000c6c <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff31 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffa2 	bl	8000d28 <SysTick_Config>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	@ 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	e165      	b.n	80010d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f040 8154 	bne.w	80010d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d005      	beq.n	8000e42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d130      	bne.n	8000ea4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	091b      	lsrs	r3, r3, #4
 8000e8e:	f003 0201 	and.w	r2, r3, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d017      	beq.n	8000ee0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d123      	bne.n	8000f34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	08da      	lsrs	r2, r3, #3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3208      	adds	r2, #8
 8000ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	220f      	movs	r2, #15
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	69b9      	ldr	r1, [r7, #24]
 8000f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0203 	and.w	r2, r3, #3
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80ae 	beq.w	80010d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b5d      	ldr	r3, [pc, #372]	@ (80010f0 <HAL_GPIO_Init+0x300>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	4a5c      	ldr	r2, [pc, #368]	@ (80010f0 <HAL_GPIO_Init+0x300>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f86:	4b5a      	ldr	r3, [pc, #360]	@ (80010f0 <HAL_GPIO_Init+0x300>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f92:	4a58      	ldr	r2, [pc, #352]	@ (80010f4 <HAL_GPIO_Init+0x304>)
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4f      	ldr	r2, [pc, #316]	@ (80010f8 <HAL_GPIO_Init+0x308>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d025      	beq.n	800100a <HAL_GPIO_Init+0x21a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4e      	ldr	r2, [pc, #312]	@ (80010fc <HAL_GPIO_Init+0x30c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d01f      	beq.n	8001006 <HAL_GPIO_Init+0x216>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4d      	ldr	r2, [pc, #308]	@ (8001100 <HAL_GPIO_Init+0x310>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x212>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4c      	ldr	r2, [pc, #304]	@ (8001104 <HAL_GPIO_Init+0x314>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x20e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8001108 <HAL_GPIO_Init+0x318>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x20a>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4a      	ldr	r2, [pc, #296]	@ (800110c <HAL_GPIO_Init+0x31c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x206>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a49      	ldr	r2, [pc, #292]	@ (8001110 <HAL_GPIO_Init+0x320>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x202>
 8000fee:	2306      	movs	r3, #6
 8000ff0:	e00c      	b.n	800100c <HAL_GPIO_Init+0x21c>
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	e00a      	b.n	800100c <HAL_GPIO_Init+0x21c>
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	e008      	b.n	800100c <HAL_GPIO_Init+0x21c>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x21c>
 8000ffe:	2303      	movs	r3, #3
 8001000:	e004      	b.n	800100c <HAL_GPIO_Init+0x21c>
 8001002:	2302      	movs	r3, #2
 8001004:	e002      	b.n	800100c <HAL_GPIO_Init+0x21c>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <HAL_GPIO_Init+0x21c>
 800100a:	2300      	movs	r3, #0
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	f002 0203 	and.w	r2, r2, #3
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	4093      	lsls	r3, r2
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800101c:	4935      	ldr	r1, [pc, #212]	@ (80010f4 <HAL_GPIO_Init+0x304>)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102a:	4b3a      	ldr	r3, [pc, #232]	@ (8001114 <HAL_GPIO_Init+0x324>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800104e:	4a31      	ldr	r2, [pc, #196]	@ (8001114 <HAL_GPIO_Init+0x324>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001054:	4b2f      	ldr	r3, [pc, #188]	@ (8001114 <HAL_GPIO_Init+0x324>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001078:	4a26      	ldr	r2, [pc, #152]	@ (8001114 <HAL_GPIO_Init+0x324>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800107e:	4b25      	ldr	r3, [pc, #148]	@ (8001114 <HAL_GPIO_Init+0x324>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001114 <HAL_GPIO_Init+0x324>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <HAL_GPIO_Init+0x324>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010cc:	4a11      	ldr	r2, [pc, #68]	@ (8001114 <HAL_GPIO_Init+0x324>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3301      	adds	r3, #1
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	f67f ae96 	bls.w	8000e0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3724      	adds	r7, #36	@ 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40013800 	.word	0x40013800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020400 	.word	0x40020400
 8001100:	40020800 	.word	0x40020800
 8001104:	40020c00 	.word	0x40020c00
 8001108:	40021000 	.word	0x40021000
 800110c:	40021400 	.word	0x40021400
 8001110:	40021800 	.word	0x40021800
 8001114:	40013c00 	.word	0x40013c00

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001134:	e003      	b.n	800113e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	041a      	lsls	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	619a      	str	r2, [r3, #24]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e0cc      	b.n	80012fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001160:	4b68      	ldr	r3, [pc, #416]	@ (8001304 <HAL_RCC_ClockConfig+0x1b8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d90c      	bls.n	8001188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800116e:	4b65      	ldr	r3, [pc, #404]	@ (8001304 <HAL_RCC_ClockConfig+0x1b8>)
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001176:	4b63      	ldr	r3, [pc, #396]	@ (8001304 <HAL_RCC_ClockConfig+0x1b8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	d001      	beq.n	8001188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e0b8      	b.n	80012fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d020      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a0:	4b59      	ldr	r3, [pc, #356]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	4a58      	ldr	r2, [pc, #352]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011b8:	4b53      	ldr	r3, [pc, #332]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	4a52      	ldr	r2, [pc, #328]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c4:	4b50      	ldr	r3, [pc, #320]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	494d      	ldr	r1, [pc, #308]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d044      	beq.n	800126c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d107      	bne.n	80011fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	4b47      	ldr	r3, [pc, #284]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d119      	bne.n	800122a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e07f      	b.n	80012fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d003      	beq.n	800120a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001206:	2b03      	cmp	r3, #3
 8001208:	d107      	bne.n	800121a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800120a:	4b3f      	ldr	r3, [pc, #252]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d109      	bne.n	800122a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e06f      	b.n	80012fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121a:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e067      	b.n	80012fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800122a:	4b37      	ldr	r3, [pc, #220]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f023 0203 	bic.w	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4934      	ldr	r1, [pc, #208]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 8001238:	4313      	orrs	r3, r2
 800123a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800123c:	f7ff fcba 	bl	8000bb4 <HAL_GetTick>
 8001240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001242:	e00a      	b.n	800125a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001244:	f7ff fcb6 	bl	8000bb4 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001252:	4293      	cmp	r3, r2
 8001254:	d901      	bls.n	800125a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e04f      	b.n	80012fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125a:	4b2b      	ldr	r3, [pc, #172]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 020c 	and.w	r2, r3, #12
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	429a      	cmp	r2, r3
 800126a:	d1eb      	bne.n	8001244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800126c:	4b25      	ldr	r3, [pc, #148]	@ (8001304 <HAL_RCC_ClockConfig+0x1b8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d20c      	bcs.n	8001294 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127a:	4b22      	ldr	r3, [pc, #136]	@ (8001304 <HAL_RCC_ClockConfig+0x1b8>)
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <HAL_RCC_ClockConfig+0x1b8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d001      	beq.n	8001294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e032      	b.n	80012fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	4916      	ldr	r1, [pc, #88]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d009      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012be:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	490e      	ldr	r1, [pc, #56]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012d2:	f000 f855 	bl	8001380 <HAL_RCC_GetSysClockFreq>
 80012d6:	4602      	mov	r2, r0
 80012d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	490a      	ldr	r1, [pc, #40]	@ (800130c <HAL_RCC_ClockConfig+0x1c0>)
 80012e4:	5ccb      	ldrb	r3, [r1, r3]
 80012e6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ea:	4a09      	ldr	r2, [pc, #36]	@ (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <HAL_RCC_ClockConfig+0x1c8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fc1a 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023c00 	.word	0x40023c00
 8001308:	40023800 	.word	0x40023800
 800130c:	08003340 	.word	0x08003340
 8001310:	20000000 	.word	0x20000000
 8001314:	20000004 	.word	0x20000004

08001318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800131c:	4b03      	ldr	r3, [pc, #12]	@ (800132c <HAL_RCC_GetHCLKFreq+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000000 	.word	0x20000000

08001330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001334:	f7ff fff0 	bl	8001318 <HAL_RCC_GetHCLKFreq>
 8001338:	4602      	mov	r2, r0
 800133a:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	0a9b      	lsrs	r3, r3, #10
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	4903      	ldr	r1, [pc, #12]	@ (8001354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001346:	5ccb      	ldrb	r3, [r1, r3]
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800134c:	4618      	mov	r0, r3
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40023800 	.word	0x40023800
 8001354:	08003350 	.word	0x08003350

08001358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800135c:	f7ff ffdc 	bl	8001318 <HAL_RCC_GetHCLKFreq>
 8001360:	4602      	mov	r2, r0
 8001362:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	0b5b      	lsrs	r3, r3, #13
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	4903      	ldr	r1, [pc, #12]	@ (800137c <HAL_RCC_GetPCLK2Freq+0x24>)
 800136e:	5ccb      	ldrb	r3, [r1, r3]
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001374:	4618      	mov	r0, r3
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	08003350 	.word	0x08003350

08001380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001384:	b0ae      	sub	sp, #184	@ 0xb8
 8001386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a6:	4bcb      	ldr	r3, [pc, #812]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b0c      	cmp	r3, #12
 80013b0:	f200 8206 	bhi.w	80017c0 <HAL_RCC_GetSysClockFreq+0x440>
 80013b4:	a201      	add	r2, pc, #4	@ (adr r2, 80013bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80013b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ba:	bf00      	nop
 80013bc:	080013f1 	.word	0x080013f1
 80013c0:	080017c1 	.word	0x080017c1
 80013c4:	080017c1 	.word	0x080017c1
 80013c8:	080017c1 	.word	0x080017c1
 80013cc:	080013f9 	.word	0x080013f9
 80013d0:	080017c1 	.word	0x080017c1
 80013d4:	080017c1 	.word	0x080017c1
 80013d8:	080017c1 	.word	0x080017c1
 80013dc:	08001401 	.word	0x08001401
 80013e0:	080017c1 	.word	0x080017c1
 80013e4:	080017c1 	.word	0x080017c1
 80013e8:	080017c1 	.word	0x080017c1
 80013ec:	080015f1 	.word	0x080015f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013f0:	4bb9      	ldr	r3, [pc, #740]	@ (80016d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80013f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013f6:	e1e7      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013f8:	4bb8      	ldr	r3, [pc, #736]	@ (80016dc <HAL_RCC_GetSysClockFreq+0x35c>)
 80013fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013fe:	e1e3      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001400:	4bb4      	ldr	r3, [pc, #720]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001408:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800140c:	4bb1      	ldr	r3, [pc, #708]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d071      	beq.n	80014fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001418:	4bae      	ldr	r3, [pc, #696]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	099b      	lsrs	r3, r3, #6
 800141e:	2200      	movs	r2, #0
 8001420:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001424:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001428:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800142c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001430:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800143a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800143e:	4622      	mov	r2, r4
 8001440:	462b      	mov	r3, r5
 8001442:	f04f 0000 	mov.w	r0, #0
 8001446:	f04f 0100 	mov.w	r1, #0
 800144a:	0159      	lsls	r1, r3, #5
 800144c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001450:	0150      	lsls	r0, r2, #5
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4621      	mov	r1, r4
 8001458:	1a51      	subs	r1, r2, r1
 800145a:	6439      	str	r1, [r7, #64]	@ 0x40
 800145c:	4629      	mov	r1, r5
 800145e:	eb63 0301 	sbc.w	r3, r3, r1
 8001462:	647b      	str	r3, [r7, #68]	@ 0x44
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001470:	4649      	mov	r1, r9
 8001472:	018b      	lsls	r3, r1, #6
 8001474:	4641      	mov	r1, r8
 8001476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800147a:	4641      	mov	r1, r8
 800147c:	018a      	lsls	r2, r1, #6
 800147e:	4641      	mov	r1, r8
 8001480:	1a51      	subs	r1, r2, r1
 8001482:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001484:	4649      	mov	r1, r9
 8001486:	eb63 0301 	sbc.w	r3, r3, r1
 800148a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001498:	4649      	mov	r1, r9
 800149a:	00cb      	lsls	r3, r1, #3
 800149c:	4641      	mov	r1, r8
 800149e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014a2:	4641      	mov	r1, r8
 80014a4:	00ca      	lsls	r2, r1, #3
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	4622      	mov	r2, r4
 80014ae:	189b      	adds	r3, r3, r2
 80014b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80014b2:	462b      	mov	r3, r5
 80014b4:	460a      	mov	r2, r1
 80014b6:	eb42 0303 	adc.w	r3, r2, r3
 80014ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014c8:	4629      	mov	r1, r5
 80014ca:	024b      	lsls	r3, r1, #9
 80014cc:	4621      	mov	r1, r4
 80014ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014d2:	4621      	mov	r1, r4
 80014d4:	024a      	lsls	r2, r1, #9
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014de:	2200      	movs	r2, #0
 80014e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80014ec:	f7fe fe8a 	bl	8000204 <__aeabi_uldivmod>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4613      	mov	r3, r2
 80014f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014fa:	e067      	b.n	80015cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fc:	4b75      	ldr	r3, [pc, #468]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	099b      	lsrs	r3, r3, #6
 8001502:	2200      	movs	r2, #0
 8001504:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001508:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800150c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001514:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001516:	2300      	movs	r3, #0
 8001518:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800151a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800151e:	4622      	mov	r2, r4
 8001520:	462b      	mov	r3, r5
 8001522:	f04f 0000 	mov.w	r0, #0
 8001526:	f04f 0100 	mov.w	r1, #0
 800152a:	0159      	lsls	r1, r3, #5
 800152c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001530:	0150      	lsls	r0, r2, #5
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4621      	mov	r1, r4
 8001538:	1a51      	subs	r1, r2, r1
 800153a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800153c:	4629      	mov	r1, r5
 800153e:	eb63 0301 	sbc.w	r3, r3, r1
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001550:	4649      	mov	r1, r9
 8001552:	018b      	lsls	r3, r1, #6
 8001554:	4641      	mov	r1, r8
 8001556:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800155a:	4641      	mov	r1, r8
 800155c:	018a      	lsls	r2, r1, #6
 800155e:	4641      	mov	r1, r8
 8001560:	ebb2 0a01 	subs.w	sl, r2, r1
 8001564:	4649      	mov	r1, r9
 8001566:	eb63 0b01 	sbc.w	fp, r3, r1
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001576:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800157a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800157e:	4692      	mov	sl, r2
 8001580:	469b      	mov	fp, r3
 8001582:	4623      	mov	r3, r4
 8001584:	eb1a 0303 	adds.w	r3, sl, r3
 8001588:	623b      	str	r3, [r7, #32]
 800158a:	462b      	mov	r3, r5
 800158c:	eb4b 0303 	adc.w	r3, fp, r3
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800159e:	4629      	mov	r1, r5
 80015a0:	028b      	lsls	r3, r1, #10
 80015a2:	4621      	mov	r1, r4
 80015a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015a8:	4621      	mov	r1, r4
 80015aa:	028a      	lsls	r2, r1, #10
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015b4:	2200      	movs	r2, #0
 80015b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80015b8:	677a      	str	r2, [r7, #116]	@ 0x74
 80015ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015be:	f7fe fe21 	bl	8000204 <__aeabi_uldivmod>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4613      	mov	r3, r2
 80015c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015cc:	4b41      	ldr	r3, [pc, #260]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	0c1b      	lsrs	r3, r3, #16
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	3301      	adds	r3, #1
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80015de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015ee:	e0eb      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015f0:	4b38      	ldr	r3, [pc, #224]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015fc:	4b35      	ldr	r3, [pc, #212]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d06b      	beq.n	80016e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001608:	4b32      	ldr	r3, [pc, #200]	@ (80016d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	2200      	movs	r2, #0
 8001610:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001612:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800161a:	663b      	str	r3, [r7, #96]	@ 0x60
 800161c:	2300      	movs	r3, #0
 800161e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001620:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001624:	4622      	mov	r2, r4
 8001626:	462b      	mov	r3, r5
 8001628:	f04f 0000 	mov.w	r0, #0
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	0159      	lsls	r1, r3, #5
 8001632:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001636:	0150      	lsls	r0, r2, #5
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4621      	mov	r1, r4
 800163e:	1a51      	subs	r1, r2, r1
 8001640:	61b9      	str	r1, [r7, #24]
 8001642:	4629      	mov	r1, r5
 8001644:	eb63 0301 	sbc.w	r3, r3, r1
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001656:	4659      	mov	r1, fp
 8001658:	018b      	lsls	r3, r1, #6
 800165a:	4651      	mov	r1, sl
 800165c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001660:	4651      	mov	r1, sl
 8001662:	018a      	lsls	r2, r1, #6
 8001664:	4651      	mov	r1, sl
 8001666:	ebb2 0801 	subs.w	r8, r2, r1
 800166a:	4659      	mov	r1, fp
 800166c:	eb63 0901 	sbc.w	r9, r3, r1
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800167c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001680:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001684:	4690      	mov	r8, r2
 8001686:	4699      	mov	r9, r3
 8001688:	4623      	mov	r3, r4
 800168a:	eb18 0303 	adds.w	r3, r8, r3
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	462b      	mov	r3, r5
 8001692:	eb49 0303 	adc.w	r3, r9, r3
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016a4:	4629      	mov	r1, r5
 80016a6:	024b      	lsls	r3, r1, #9
 80016a8:	4621      	mov	r1, r4
 80016aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016ae:	4621      	mov	r1, r4
 80016b0:	024a      	lsls	r2, r1, #9
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016ba:	2200      	movs	r2, #0
 80016bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80016c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016c4:	f7fe fd9e 	bl	8000204 <__aeabi_uldivmod>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4613      	mov	r3, r2
 80016ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016d2:	e065      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x420>
 80016d4:	40023800 	.word	0x40023800
 80016d8:	00f42400 	.word	0x00f42400
 80016dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e0:	4b3d      	ldr	r3, [pc, #244]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	099b      	lsrs	r3, r3, #6
 80016e6:	2200      	movs	r2, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	4611      	mov	r1, r2
 80016ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80016f2:	2300      	movs	r3, #0
 80016f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80016f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80016fa:	4642      	mov	r2, r8
 80016fc:	464b      	mov	r3, r9
 80016fe:	f04f 0000 	mov.w	r0, #0
 8001702:	f04f 0100 	mov.w	r1, #0
 8001706:	0159      	lsls	r1, r3, #5
 8001708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800170c:	0150      	lsls	r0, r2, #5
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4641      	mov	r1, r8
 8001714:	1a51      	subs	r1, r2, r1
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	4649      	mov	r1, r9
 800171a:	eb63 0301 	sbc.w	r3, r3, r1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800172c:	4659      	mov	r1, fp
 800172e:	018b      	lsls	r3, r1, #6
 8001730:	4651      	mov	r1, sl
 8001732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001736:	4651      	mov	r1, sl
 8001738:	018a      	lsls	r2, r1, #6
 800173a:	4651      	mov	r1, sl
 800173c:	1a54      	subs	r4, r2, r1
 800173e:	4659      	mov	r1, fp
 8001740:	eb63 0501 	sbc.w	r5, r3, r1
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	00eb      	lsls	r3, r5, #3
 800174e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001752:	00e2      	lsls	r2, r4, #3
 8001754:	4614      	mov	r4, r2
 8001756:	461d      	mov	r5, r3
 8001758:	4643      	mov	r3, r8
 800175a:	18e3      	adds	r3, r4, r3
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	464b      	mov	r3, r9
 8001760:	eb45 0303 	adc.w	r3, r5, r3
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001772:	4629      	mov	r1, r5
 8001774:	028b      	lsls	r3, r1, #10
 8001776:	4621      	mov	r1, r4
 8001778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800177c:	4621      	mov	r1, r4
 800177e:	028a      	lsls	r2, r1, #10
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001788:	2200      	movs	r2, #0
 800178a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800178c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800178e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001792:	f7fe fd37 	bl	8000204 <__aeabi_uldivmod>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4613      	mov	r3, r2
 800179c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017a0:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	0f1b      	lsrs	r3, r3, #28
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80017ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017be:	e003      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x45c>)
 80017c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	37b8      	adds	r7, #184	@ 0xb8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	00f42400 	.word	0x00f42400

080017e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e28d      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8083 	beq.w	8001906 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001800:	4b94      	ldr	r3, [pc, #592]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b04      	cmp	r3, #4
 800180a:	d019      	beq.n	8001840 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800180c:	4b91      	ldr	r3, [pc, #580]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
        || \
 8001814:	2b08      	cmp	r3, #8
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001818:	4b8e      	ldr	r3, [pc, #568]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001820:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001824:	d00c      	beq.n	8001840 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001826:	4b8b      	ldr	r3, [pc, #556]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d112      	bne.n	8001858 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001832:	4b88      	ldr	r3, [pc, #544]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800183a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800183e:	d10b      	bne.n	8001858 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	4b84      	ldr	r3, [pc, #528]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d05b      	beq.n	8001904 <HAL_RCC_OscConfig+0x124>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d157      	bne.n	8001904 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e25a      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001860:	d106      	bne.n	8001870 <HAL_RCC_OscConfig+0x90>
 8001862:	4b7c      	ldr	r3, [pc, #496]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a7b      	ldr	r2, [pc, #492]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e01d      	b.n	80018ac <HAL_RCC_OscConfig+0xcc>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0xb4>
 800187a:	4b76      	ldr	r3, [pc, #472]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a75      	ldr	r2, [pc, #468]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b73      	ldr	r3, [pc, #460]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a72      	ldr	r2, [pc, #456]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 800188c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e00b      	b.n	80018ac <HAL_RCC_OscConfig+0xcc>
 8001894:	4b6f      	ldr	r3, [pc, #444]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a6e      	ldr	r2, [pc, #440]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 800189a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a6b      	ldr	r2, [pc, #428]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 80018a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d013      	beq.n	80018dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff f97e 	bl	8000bb4 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff f97a 	bl	8000bb4 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	@ 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e21f      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	4b61      	ldr	r3, [pc, #388]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0xdc>
 80018da:	e014      	b.n	8001906 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff f96a 	bl	8000bb4 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff f966 	bl	8000bb4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	@ 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e20b      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	4b57      	ldr	r3, [pc, #348]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x104>
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d06f      	beq.n	80019f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001912:	4b50      	ldr	r3, [pc, #320]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b00      	cmp	r3, #0
 800191c:	d017      	beq.n	800194e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800191e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 030c 	and.w	r3, r3, #12
        || \
 8001926:	2b08      	cmp	r3, #8
 8001928:	d105      	bne.n	8001936 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800192a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001936:	4b47      	ldr	r3, [pc, #284]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d11c      	bne.n	800197c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001942:	4b44      	ldr	r3, [pc, #272]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	4b41      	ldr	r3, [pc, #260]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x186>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e1d3      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b3b      	ldr	r3, [pc, #236]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4937      	ldr	r1, [pc, #220]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	e03a      	b.n	80019f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001984:	4b34      	ldr	r3, [pc, #208]	@ (8001a58 <HAL_RCC_OscConfig+0x278>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff f913 	bl	8000bb4 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff f90f 	bl	8000bb4 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e1b4      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4925      	ldr	r1, [pc, #148]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e015      	b.n	80019f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <HAL_RCC_OscConfig+0x278>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff f8f2 	bl	8000bb4 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff f8ee 	bl	8000bb4 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e193      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d036      	beq.n	8001a6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d016      	beq.n	8001a34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_RCC_OscConfig+0x27c>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f7ff f8d2 	bl	8000bb4 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff f8ce 	bl	8000bb4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e173      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x234>
 8001a32:	e01b      	b.n	8001a6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_RCC_OscConfig+0x27c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3a:	f7ff f8bb 	bl	8000bb4 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a40:	e00e      	b.n	8001a60 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a42:	f7ff f8b7 	bl	8000bb4 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d907      	bls.n	8001a60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e15c      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
 8001a54:	40023800 	.word	0x40023800
 8001a58:	42470000 	.word	0x42470000
 8001a5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	4b8a      	ldr	r3, [pc, #552]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ea      	bne.n	8001a42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8097 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7e:	4b83      	ldr	r3, [pc, #524]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10f      	bne.n	8001aaa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	4a7e      	ldr	r2, [pc, #504]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aaa:	4b79      	ldr	r3, [pc, #484]	@ (8001c90 <HAL_RCC_OscConfig+0x4b0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d118      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab6:	4b76      	ldr	r3, [pc, #472]	@ (8001c90 <HAL_RCC_OscConfig+0x4b0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a75      	ldr	r2, [pc, #468]	@ (8001c90 <HAL_RCC_OscConfig+0x4b0>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f877 	bl	8000bb4 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aca:	f7ff f873 	bl	8000bb4 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e118      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	4b6c      	ldr	r3, [pc, #432]	@ (8001c90 <HAL_RCC_OscConfig+0x4b0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x31e>
 8001af0:	4b66      	ldr	r3, [pc, #408]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af4:	4a65      	ldr	r2, [pc, #404]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001afc:	e01c      	b.n	8001b38 <HAL_RCC_OscConfig+0x358>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x340>
 8001b06:	4b61      	ldr	r3, [pc, #388]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0a:	4a60      	ldr	r2, [pc, #384]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b12:	4b5e      	ldr	r3, [pc, #376]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b16:	4a5d      	ldr	r2, [pc, #372]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0x358>
 8001b20:	4b5a      	ldr	r3, [pc, #360]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b24:	4a59      	ldr	r2, [pc, #356]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b2c:	4b57      	ldr	r3, [pc, #348]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b30:	4a56      	ldr	r2, [pc, #344]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b32:	f023 0304 	bic.w	r3, r3, #4
 8001b36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d015      	beq.n	8001b6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff f838 	bl	8000bb4 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b48:	f7ff f834 	bl	8000bb4 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e0d7      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0ee      	beq.n	8001b48 <HAL_RCC_OscConfig+0x368>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f822 	bl	8000bb4 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7ff f81e 	bl	8000bb4 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e0c1      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8a:	4b40      	ldr	r3, [pc, #256]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ee      	bne.n	8001b74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	4a3a      	ldr	r2, [pc, #232]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80ad 	beq.w	8001d0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bb2:	4b36      	ldr	r3, [pc, #216]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d060      	beq.n	8001c80 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d145      	bne.n	8001c52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4b33      	ldr	r3, [pc, #204]	@ (8001c94 <HAL_RCC_OscConfig+0x4b4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7fe fff2 	bl	8000bb4 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7fe ffee 	bl	8000bb4 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e093      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be6:	4b29      	ldr	r3, [pc, #164]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69da      	ldr	r2, [r3, #28]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c00:	019b      	lsls	r3, r3, #6
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	041b      	lsls	r3, r3, #16
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c14:	061b      	lsls	r3, r3, #24
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1c:	071b      	lsls	r3, r3, #28
 8001c1e:	491b      	ldr	r1, [pc, #108]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c24:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <HAL_RCC_OscConfig+0x4b4>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2a:	f7fe ffc3 	bl	8000bb4 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c32:	f7fe ffbf 	bl	8000bb4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e064      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x452>
 8001c50:	e05c      	b.n	8001d0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <HAL_RCC_OscConfig+0x4b4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7fe ffac 	bl	8000bb4 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c60:	f7fe ffa8 	bl	8000bb4 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e04d      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x480>
 8001c7e:	e045      	b.n	8001d0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e040      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40007000 	.word	0x40007000
 8001c94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c98:	4b1f      	ldr	r3, [pc, #124]	@ (8001d18 <HAL_RCC_OscConfig+0x538>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d030      	beq.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d129      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d122      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cc8:	4013      	ands	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d119      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cde:	085b      	lsrs	r3, r3, #1
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d10f      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e041      	b.n	8001db2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7fe fdd2 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3304      	adds	r3, #4
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f000 fc48 	bl	80025f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e041      	b.n	8001e50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d106      	bne.n	8001de6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f839 	bl	8001e58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3304      	adds	r3, #4
 8001df6:	4619      	mov	r1, r3
 8001df8:	4610      	mov	r0, r2
 8001dfa:	f000 fbf9 	bl	80025f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d109      	bne.n	8001e94 <HAL_TIM_PWM_Start_IT+0x28>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	e022      	b.n	8001eda <HAL_TIM_PWM_Start_IT+0x6e>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d109      	bne.n	8001eae <HAL_TIM_PWM_Start_IT+0x42>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	bf14      	ite	ne
 8001ea6:	2301      	movne	r3, #1
 8001ea8:	2300      	moveq	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	e015      	b.n	8001eda <HAL_TIM_PWM_Start_IT+0x6e>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d109      	bne.n	8001ec8 <HAL_TIM_PWM_Start_IT+0x5c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	bf14      	ite	ne
 8001ec0:	2301      	movne	r3, #1
 8001ec2:	2300      	moveq	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e008      	b.n	8001eda <HAL_TIM_PWM_Start_IT+0x6e>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	bf14      	ite	ne
 8001ed4:	2301      	movne	r3, #1
 8001ed6:	2300      	moveq	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0c7      	b.n	8002072 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d104      	bne.n	8001ef2 <HAL_TIM_PWM_Start_IT+0x86>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ef0:	e013      	b.n	8001f1a <HAL_TIM_PWM_Start_IT+0xae>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d104      	bne.n	8001f02 <HAL_TIM_PWM_Start_IT+0x96>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f00:	e00b      	b.n	8001f1a <HAL_TIM_PWM_Start_IT+0xae>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d104      	bne.n	8001f12 <HAL_TIM_PWM_Start_IT+0xa6>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f10:	e003      	b.n	8001f1a <HAL_TIM_PWM_Start_IT+0xae>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2202      	movs	r2, #2
 8001f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	d841      	bhi.n	8001fa4 <HAL_TIM_PWM_Start_IT+0x138>
 8001f20:	a201      	add	r2, pc, #4	@ (adr r2, 8001f28 <HAL_TIM_PWM_Start_IT+0xbc>)
 8001f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f26:	bf00      	nop
 8001f28:	08001f5d 	.word	0x08001f5d
 8001f2c:	08001fa5 	.word	0x08001fa5
 8001f30:	08001fa5 	.word	0x08001fa5
 8001f34:	08001fa5 	.word	0x08001fa5
 8001f38:	08001f6f 	.word	0x08001f6f
 8001f3c:	08001fa5 	.word	0x08001fa5
 8001f40:	08001fa5 	.word	0x08001fa5
 8001f44:	08001fa5 	.word	0x08001fa5
 8001f48:	08001f81 	.word	0x08001f81
 8001f4c:	08001fa5 	.word	0x08001fa5
 8001f50:	08001fa5 	.word	0x08001fa5
 8001f54:	08001fa5 	.word	0x08001fa5
 8001f58:	08001f93 	.word	0x08001f93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0202 	orr.w	r2, r2, #2
 8001f6a:	60da      	str	r2, [r3, #12]
      break;
 8001f6c:	e01d      	b.n	8001faa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0204 	orr.w	r2, r2, #4
 8001f7c:	60da      	str	r2, [r3, #12]
      break;
 8001f7e:	e014      	b.n	8001faa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0208 	orr.w	r2, r2, #8
 8001f8e:	60da      	str	r2, [r3, #12]
      break;
 8001f90:	e00b      	b.n	8001faa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0210 	orr.w	r2, r2, #16
 8001fa0:	60da      	str	r2, [r3, #12]
      break;
 8001fa2:	e002      	b.n	8001faa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa8:	bf00      	nop
  }

  if (status == HAL_OK)
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d15f      	bne.n	8002070 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	6839      	ldr	r1, [r7, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fe0f 	bl	8002bdc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800207c <HAL_TIM_PWM_Start_IT+0x210>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d004      	beq.n	8001fd2 <HAL_TIM_PWM_Start_IT+0x166>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8002080 <HAL_TIM_PWM_Start_IT+0x214>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_TIM_PWM_Start_IT+0x16a>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_TIM_PWM_Start_IT+0x16c>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a22      	ldr	r2, [pc, #136]	@ (800207c <HAL_TIM_PWM_Start_IT+0x210>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d022      	beq.n	800203c <HAL_TIM_PWM_Start_IT+0x1d0>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ffe:	d01d      	beq.n	800203c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1f      	ldr	r2, [pc, #124]	@ (8002084 <HAL_TIM_PWM_Start_IT+0x218>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d018      	beq.n	800203c <HAL_TIM_PWM_Start_IT+0x1d0>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1e      	ldr	r2, [pc, #120]	@ (8002088 <HAL_TIM_PWM_Start_IT+0x21c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d013      	beq.n	800203c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a1c      	ldr	r2, [pc, #112]	@ (800208c <HAL_TIM_PWM_Start_IT+0x220>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00e      	beq.n	800203c <HAL_TIM_PWM_Start_IT+0x1d0>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a17      	ldr	r2, [pc, #92]	@ (8002080 <HAL_TIM_PWM_Start_IT+0x214>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d009      	beq.n	800203c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a18      	ldr	r2, [pc, #96]	@ (8002090 <HAL_TIM_PWM_Start_IT+0x224>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d004      	beq.n	800203c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a17      	ldr	r2, [pc, #92]	@ (8002094 <HAL_TIM_PWM_Start_IT+0x228>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d111      	bne.n	8002060 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2b06      	cmp	r3, #6
 800204c:	d010      	beq.n	8002070 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0201 	orr.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800205e:	e007      	b.n	8002070 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40010000 	.word	0x40010000
 8002080:	40010400 	.word	0x40010400
 8002084:	40000400 	.word	0x40000400
 8002088:	40000800 	.word	0x40000800
 800208c:	40000c00 	.word	0x40000c00
 8002090:	40014000 	.word	0x40014000
 8002094:	40001800 	.word	0x40001800

08002098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d020      	beq.n	80020fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01b      	beq.n	80020fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0202 	mvn.w	r2, #2
 80020cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fa65 	bl	80025b2 <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fa57 	bl	800259e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fa68 	bl	80025c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d020      	beq.n	8002148 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01b      	beq.n	8002148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0204 	mvn.w	r2, #4
 8002118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fa3f 	bl	80025b2 <HAL_TIM_IC_CaptureCallback>
 8002134:	e005      	b.n	8002142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fa31 	bl	800259e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fa42 	bl	80025c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d020      	beq.n	8002194 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01b      	beq.n	8002194 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0208 	mvn.w	r2, #8
 8002164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2204      	movs	r2, #4
 800216a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 fa19 	bl	80025b2 <HAL_TIM_IC_CaptureCallback>
 8002180:	e005      	b.n	800218e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fa0b 	bl	800259e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fa1c 	bl	80025c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	d020      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01b      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0210 	mvn.w	r2, #16
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2208      	movs	r2, #8
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f9f3 	bl	80025b2 <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f9e5 	bl	800259e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f9f6 	bl	80025c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00c      	beq.n	8002204 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d007      	beq.n	8002204 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0201 	mvn.w	r2, #1
 80021fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f9c3 	bl	800258a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00c      	beq.n	8002228 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fd86 	bl	8002d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00c      	beq.n	800224c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f9c7 	bl	80025da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00c      	beq.n	8002270 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0220 	mvn.w	r2, #32
 8002268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fd58 	bl	8002d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002292:	2302      	movs	r3, #2
 8002294:	e0ae      	b.n	80023f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0c      	cmp	r3, #12
 80022a2:	f200 809f 	bhi.w	80023e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022a6:	a201      	add	r2, pc, #4	@ (adr r2, 80022ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ac:	080022e1 	.word	0x080022e1
 80022b0:	080023e5 	.word	0x080023e5
 80022b4:	080023e5 	.word	0x080023e5
 80022b8:	080023e5 	.word	0x080023e5
 80022bc:	08002321 	.word	0x08002321
 80022c0:	080023e5 	.word	0x080023e5
 80022c4:	080023e5 	.word	0x080023e5
 80022c8:	080023e5 	.word	0x080023e5
 80022cc:	08002363 	.word	0x08002363
 80022d0:	080023e5 	.word	0x080023e5
 80022d4:	080023e5 	.word	0x080023e5
 80022d8:	080023e5 	.word	0x080023e5
 80022dc:	080023a3 	.word	0x080023a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fa2e 	bl	8002748 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0208 	orr.w	r2, r2, #8
 80022fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0204 	bic.w	r2, r2, #4
 800230a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6999      	ldr	r1, [r3, #24]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	619a      	str	r2, [r3, #24]
      break;
 800231e:	e064      	b.n	80023ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fa7e 	bl	8002828 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800233a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800234a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6999      	ldr	r1, [r3, #24]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	021a      	lsls	r2, r3, #8
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	619a      	str	r2, [r3, #24]
      break;
 8002360:	e043      	b.n	80023ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68b9      	ldr	r1, [r7, #8]
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fad3 	bl	8002914 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0208 	orr.w	r2, r2, #8
 800237c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0204 	bic.w	r2, r2, #4
 800238c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69d9      	ldr	r1, [r3, #28]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	61da      	str	r2, [r3, #28]
      break;
 80023a0:	e023      	b.n	80023ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fb27 	bl	80029fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69da      	ldr	r2, [r3, #28]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69d9      	ldr	r1, [r3, #28]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	021a      	lsls	r2, r3, #8
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	61da      	str	r2, [r3, #28]
      break;
 80023e2:	e002      	b.n	80023ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	75fb      	strb	r3, [r7, #23]
      break;
 80023e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_TIM_ConfigClockSource+0x1c>
 8002414:	2302      	movs	r3, #2
 8002416:	e0b4      	b.n	8002582 <HAL_TIM_ConfigClockSource+0x186>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800243e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002450:	d03e      	beq.n	80024d0 <HAL_TIM_ConfigClockSource+0xd4>
 8002452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002456:	f200 8087 	bhi.w	8002568 <HAL_TIM_ConfigClockSource+0x16c>
 800245a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800245e:	f000 8086 	beq.w	800256e <HAL_TIM_ConfigClockSource+0x172>
 8002462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002466:	d87f      	bhi.n	8002568 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b70      	cmp	r3, #112	@ 0x70
 800246a:	d01a      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0xa6>
 800246c:	2b70      	cmp	r3, #112	@ 0x70
 800246e:	d87b      	bhi.n	8002568 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b60      	cmp	r3, #96	@ 0x60
 8002472:	d050      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x11a>
 8002474:	2b60      	cmp	r3, #96	@ 0x60
 8002476:	d877      	bhi.n	8002568 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b50      	cmp	r3, #80	@ 0x50
 800247a:	d03c      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0xfa>
 800247c:	2b50      	cmp	r3, #80	@ 0x50
 800247e:	d873      	bhi.n	8002568 <HAL_TIM_ConfigClockSource+0x16c>
 8002480:	2b40      	cmp	r3, #64	@ 0x40
 8002482:	d058      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x13a>
 8002484:	2b40      	cmp	r3, #64	@ 0x40
 8002486:	d86f      	bhi.n	8002568 <HAL_TIM_ConfigClockSource+0x16c>
 8002488:	2b30      	cmp	r3, #48	@ 0x30
 800248a:	d064      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0x15a>
 800248c:	2b30      	cmp	r3, #48	@ 0x30
 800248e:	d86b      	bhi.n	8002568 <HAL_TIM_ConfigClockSource+0x16c>
 8002490:	2b20      	cmp	r3, #32
 8002492:	d060      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0x15a>
 8002494:	2b20      	cmp	r3, #32
 8002496:	d867      	bhi.n	8002568 <HAL_TIM_ConfigClockSource+0x16c>
 8002498:	2b00      	cmp	r3, #0
 800249a:	d05c      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0x15a>
 800249c:	2b10      	cmp	r3, #16
 800249e:	d05a      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0x15a>
 80024a0:	e062      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024b2:	f000 fb73 	bl	8002b9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	609a      	str	r2, [r3, #8]
      break;
 80024ce:	e04f      	b.n	8002570 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024e0:	f000 fb5c 	bl	8002b9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024f2:	609a      	str	r2, [r3, #8]
      break;
 80024f4:	e03c      	b.n	8002570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002502:	461a      	mov	r2, r3
 8002504:	f000 fad0 	bl	8002aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2150      	movs	r1, #80	@ 0x50
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fb29 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 8002514:	e02c      	b.n	8002570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002522:	461a      	mov	r2, r3
 8002524:	f000 faef 	bl	8002b06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2160      	movs	r1, #96	@ 0x60
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fb19 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 8002534:	e01c      	b.n	8002570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002542:	461a      	mov	r2, r3
 8002544:	f000 fab0 	bl	8002aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2140      	movs	r1, #64	@ 0x40
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fb09 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 8002554:	e00c      	b.n	8002570 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4619      	mov	r1, r3
 8002560:	4610      	mov	r0, r2
 8002562:	f000 fb00 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 8002566:	e003      	b.n	8002570 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
      break;
 800256c:	e000      	b.n	8002570 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800256e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a46      	ldr	r2, [pc, #280]	@ (800271c <TIM_Base_SetConfig+0x12c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d013      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260e:	d00f      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a43      	ldr	r2, [pc, #268]	@ (8002720 <TIM_Base_SetConfig+0x130>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00b      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a42      	ldr	r2, [pc, #264]	@ (8002724 <TIM_Base_SetConfig+0x134>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d007      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a41      	ldr	r2, [pc, #260]	@ (8002728 <TIM_Base_SetConfig+0x138>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d003      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a40      	ldr	r2, [pc, #256]	@ (800272c <TIM_Base_SetConfig+0x13c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d108      	bne.n	8002642 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a35      	ldr	r2, [pc, #212]	@ (800271c <TIM_Base_SetConfig+0x12c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d02b      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002650:	d027      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a32      	ldr	r2, [pc, #200]	@ (8002720 <TIM_Base_SetConfig+0x130>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d023      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a31      	ldr	r2, [pc, #196]	@ (8002724 <TIM_Base_SetConfig+0x134>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01f      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a30      	ldr	r2, [pc, #192]	@ (8002728 <TIM_Base_SetConfig+0x138>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01b      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a2f      	ldr	r2, [pc, #188]	@ (800272c <TIM_Base_SetConfig+0x13c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d017      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a2e      	ldr	r2, [pc, #184]	@ (8002730 <TIM_Base_SetConfig+0x140>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a2d      	ldr	r2, [pc, #180]	@ (8002734 <TIM_Base_SetConfig+0x144>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00f      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a2c      	ldr	r2, [pc, #176]	@ (8002738 <TIM_Base_SetConfig+0x148>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00b      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a2b      	ldr	r2, [pc, #172]	@ (800273c <TIM_Base_SetConfig+0x14c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a2a      	ldr	r2, [pc, #168]	@ (8002740 <TIM_Base_SetConfig+0x150>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d003      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a29      	ldr	r2, [pc, #164]	@ (8002744 <TIM_Base_SetConfig+0x154>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d108      	bne.n	80026b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a10      	ldr	r2, [pc, #64]	@ (800271c <TIM_Base_SetConfig+0x12c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d003      	beq.n	80026e8 <TIM_Base_SetConfig+0xf8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a12      	ldr	r2, [pc, #72]	@ (800272c <TIM_Base_SetConfig+0x13c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d103      	bne.n	80026f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d105      	bne.n	800270e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f023 0201 	bic.w	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	611a      	str	r2, [r3, #16]
  }
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40010000 	.word	0x40010000
 8002720:	40000400 	.word	0x40000400
 8002724:	40000800 	.word	0x40000800
 8002728:	40000c00 	.word	0x40000c00
 800272c:	40010400 	.word	0x40010400
 8002730:	40014000 	.word	0x40014000
 8002734:	40014400 	.word	0x40014400
 8002738:	40014800 	.word	0x40014800
 800273c:	40001800 	.word	0x40001800
 8002740:	40001c00 	.word	0x40001c00
 8002744:	40002000 	.word	0x40002000

08002748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f023 0201 	bic.w	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f023 0302 	bic.w	r3, r3, #2
 8002790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a20      	ldr	r2, [pc, #128]	@ (8002820 <TIM_OC1_SetConfig+0xd8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d003      	beq.n	80027ac <TIM_OC1_SetConfig+0x64>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002824 <TIM_OC1_SetConfig+0xdc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d10c      	bne.n	80027c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f023 0308 	bic.w	r3, r3, #8
 80027b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f023 0304 	bic.w	r3, r3, #4
 80027c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a15      	ldr	r2, [pc, #84]	@ (8002820 <TIM_OC1_SetConfig+0xd8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d003      	beq.n	80027d6 <TIM_OC1_SetConfig+0x8e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a14      	ldr	r2, [pc, #80]	@ (8002824 <TIM_OC1_SetConfig+0xdc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d111      	bne.n	80027fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80027e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	621a      	str	r2, [r3, #32]
}
 8002814:	bf00      	nop
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	40010000 	.word	0x40010000
 8002824:	40010400 	.word	0x40010400

08002828 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f023 0210 	bic.w	r2, r3, #16
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800285e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f023 0320 	bic.w	r3, r3, #32
 8002872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a22      	ldr	r2, [pc, #136]	@ (800290c <TIM_OC2_SetConfig+0xe4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d003      	beq.n	8002890 <TIM_OC2_SetConfig+0x68>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a21      	ldr	r2, [pc, #132]	@ (8002910 <TIM_OC2_SetConfig+0xe8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d10d      	bne.n	80028ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a17      	ldr	r2, [pc, #92]	@ (800290c <TIM_OC2_SetConfig+0xe4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d003      	beq.n	80028bc <TIM_OC2_SetConfig+0x94>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a16      	ldr	r2, [pc, #88]	@ (8002910 <TIM_OC2_SetConfig+0xe8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d113      	bne.n	80028e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	621a      	str	r2, [r3, #32]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40010000 	.word	0x40010000
 8002910:	40010400 	.word	0x40010400

08002914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0303 	bic.w	r3, r3, #3
 800294a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800295c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a21      	ldr	r2, [pc, #132]	@ (80029f4 <TIM_OC3_SetConfig+0xe0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d003      	beq.n	800297a <TIM_OC3_SetConfig+0x66>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a20      	ldr	r2, [pc, #128]	@ (80029f8 <TIM_OC3_SetConfig+0xe4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10d      	bne.n	8002996 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002980:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a16      	ldr	r2, [pc, #88]	@ (80029f4 <TIM_OC3_SetConfig+0xe0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d003      	beq.n	80029a6 <TIM_OC3_SetConfig+0x92>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a15      	ldr	r2, [pc, #84]	@ (80029f8 <TIM_OC3_SetConfig+0xe4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d113      	bne.n	80029ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	621a      	str	r2, [r3, #32]
}
 80029e8:	bf00      	nop
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	40010000 	.word	0x40010000
 80029f8:	40010400 	.word	0x40010400

080029fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	031b      	lsls	r3, r3, #12
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a12      	ldr	r2, [pc, #72]	@ (8002aa0 <TIM_OC4_SetConfig+0xa4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d003      	beq.n	8002a64 <TIM_OC4_SetConfig+0x68>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a11      	ldr	r2, [pc, #68]	@ (8002aa4 <TIM_OC4_SetConfig+0xa8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d109      	bne.n	8002a78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	019b      	lsls	r3, r3, #6
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	621a      	str	r2, [r3, #32]
}
 8002a92:	bf00      	nop
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40010400 	.word	0x40010400

08002aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f023 0201 	bic.w	r2, r3, #1
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f023 030a 	bic.w	r3, r3, #10
 8002ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	621a      	str	r2, [r3, #32]
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b087      	sub	sp, #28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f023 0210 	bic.w	r2, r3, #16
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	031b      	lsls	r3, r3, #12
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f043 0307 	orr.w	r3, r3, #7
 8002b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	609a      	str	r2, [r3, #8]
}
 8002bd0:	bf00      	nop
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	2201      	movs	r2, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a1a      	ldr	r2, [r3, #32]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	401a      	ands	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a1a      	ldr	r2, [r3, #32]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	431a      	orrs	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	621a      	str	r2, [r3, #32]
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e05a      	b.n	8002cf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a21      	ldr	r2, [pc, #132]	@ (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d022      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c8c:	d01d      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d018      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002d0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00e      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a18      	ldr	r2, [pc, #96]	@ (8002d14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a17      	ldr	r2, [pc, #92]	@ (8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a15      	ldr	r2, [pc, #84]	@ (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40000400 	.word	0x40000400
 8002d0c:	40000800 	.word	0x40000800
 8002d10:	40000c00 	.word	0x40000c00
 8002d14:	40010400 	.word	0x40010400
 8002d18:	40014000 	.word	0x40014000
 8002d1c:	40001800 	.word	0x40001800

08002d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e042      	b.n	8002de0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fd fe48 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2224      	movs	r2, #36	@ 0x24
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f82b 	bl	8002de8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dec:	b0c0      	sub	sp, #256	@ 0x100
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e04:	68d9      	ldr	r1, [r3, #12]
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	ea40 0301 	orr.w	r3, r0, r1
 8002e10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e40:	f021 010c 	bic.w	r1, r1, #12
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e62:	6999      	ldr	r1, [r3, #24]
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	ea40 0301 	orr.w	r3, r0, r1
 8002e6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4b8f      	ldr	r3, [pc, #572]	@ (80030b4 <UART_SetConfig+0x2cc>)
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d005      	beq.n	8002e88 <UART_SetConfig+0xa0>
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b8d      	ldr	r3, [pc, #564]	@ (80030b8 <UART_SetConfig+0x2d0>)
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d104      	bne.n	8002e92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e88:	f7fe fa66 	bl	8001358 <HAL_RCC_GetPCLK2Freq>
 8002e8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e90:	e003      	b.n	8002e9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e92:	f7fe fa4d 	bl	8001330 <HAL_RCC_GetPCLK1Freq>
 8002e96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ea4:	f040 810c 	bne.w	80030c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eac:	2200      	movs	r2, #0
 8002eae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002eb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002eb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002eba:	4622      	mov	r2, r4
 8002ebc:	462b      	mov	r3, r5
 8002ebe:	1891      	adds	r1, r2, r2
 8002ec0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ec2:	415b      	adcs	r3, r3
 8002ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ec6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002eca:	4621      	mov	r1, r4
 8002ecc:	eb12 0801 	adds.w	r8, r2, r1
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	eb43 0901 	adc.w	r9, r3, r1
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eea:	4690      	mov	r8, r2
 8002eec:	4699      	mov	r9, r3
 8002eee:	4623      	mov	r3, r4
 8002ef0:	eb18 0303 	adds.w	r3, r8, r3
 8002ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ef8:	462b      	mov	r3, r5
 8002efa:	eb49 0303 	adc.w	r3, r9, r3
 8002efe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f16:	460b      	mov	r3, r1
 8002f18:	18db      	adds	r3, r3, r3
 8002f1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	eb42 0303 	adc.w	r3, r2, r3
 8002f22:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f2c:	f7fd f96a 	bl	8000204 <__aeabi_uldivmod>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4b61      	ldr	r3, [pc, #388]	@ (80030bc <UART_SetConfig+0x2d4>)
 8002f36:	fba3 2302 	umull	r2, r3, r3, r2
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	011c      	lsls	r4, r3, #4
 8002f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f42:	2200      	movs	r2, #0
 8002f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f50:	4642      	mov	r2, r8
 8002f52:	464b      	mov	r3, r9
 8002f54:	1891      	adds	r1, r2, r2
 8002f56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f58:	415b      	adcs	r3, r3
 8002f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f60:	4641      	mov	r1, r8
 8002f62:	eb12 0a01 	adds.w	sl, r2, r1
 8002f66:	4649      	mov	r1, r9
 8002f68:	eb43 0b01 	adc.w	fp, r3, r1
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f80:	4692      	mov	sl, r2
 8002f82:	469b      	mov	fp, r3
 8002f84:	4643      	mov	r3, r8
 8002f86:	eb1a 0303 	adds.w	r3, sl, r3
 8002f8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f8e:	464b      	mov	r3, r9
 8002f90:	eb4b 0303 	adc.w	r3, fp, r3
 8002f94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fa4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fac:	460b      	mov	r3, r1
 8002fae:	18db      	adds	r3, r3, r3
 8002fb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	eb42 0303 	adc.w	r3, r2, r3
 8002fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fc2:	f7fd f91f 	bl	8000204 <__aeabi_uldivmod>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80030bc <UART_SetConfig+0x2d4>)
 8002fce:	fba3 2301 	umull	r2, r3, r3, r1
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2264      	movs	r2, #100	@ 0x64
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	1acb      	subs	r3, r1, r3
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002fe2:	4b36      	ldr	r3, [pc, #216]	@ (80030bc <UART_SetConfig+0x2d4>)
 8002fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ff0:	441c      	add	r4, r3
 8002ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ffc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003000:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003004:	4642      	mov	r2, r8
 8003006:	464b      	mov	r3, r9
 8003008:	1891      	adds	r1, r2, r2
 800300a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800300c:	415b      	adcs	r3, r3
 800300e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003010:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003014:	4641      	mov	r1, r8
 8003016:	1851      	adds	r1, r2, r1
 8003018:	6339      	str	r1, [r7, #48]	@ 0x30
 800301a:	4649      	mov	r1, r9
 800301c:	414b      	adcs	r3, r1
 800301e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800302c:	4659      	mov	r1, fp
 800302e:	00cb      	lsls	r3, r1, #3
 8003030:	4651      	mov	r1, sl
 8003032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003036:	4651      	mov	r1, sl
 8003038:	00ca      	lsls	r2, r1, #3
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	4603      	mov	r3, r0
 8003040:	4642      	mov	r2, r8
 8003042:	189b      	adds	r3, r3, r2
 8003044:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003048:	464b      	mov	r3, r9
 800304a:	460a      	mov	r2, r1
 800304c:	eb42 0303 	adc.w	r3, r2, r3
 8003050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003060:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003064:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003068:	460b      	mov	r3, r1
 800306a:	18db      	adds	r3, r3, r3
 800306c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800306e:	4613      	mov	r3, r2
 8003070:	eb42 0303 	adc.w	r3, r2, r3
 8003074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003076:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800307a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800307e:	f7fd f8c1 	bl	8000204 <__aeabi_uldivmod>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4b0d      	ldr	r3, [pc, #52]	@ (80030bc <UART_SetConfig+0x2d4>)
 8003088:	fba3 1302 	umull	r1, r3, r3, r2
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	2164      	movs	r1, #100	@ 0x64
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	3332      	adds	r3, #50	@ 0x32
 800309a:	4a08      	ldr	r2, [pc, #32]	@ (80030bc <UART_SetConfig+0x2d4>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	f003 0207 	and.w	r2, r3, #7
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4422      	add	r2, r4
 80030ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030b0:	e106      	b.n	80032c0 <UART_SetConfig+0x4d8>
 80030b2:	bf00      	nop
 80030b4:	40011000 	.word	0x40011000
 80030b8:	40011400 	.word	0x40011400
 80030bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030c4:	2200      	movs	r2, #0
 80030c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030d2:	4642      	mov	r2, r8
 80030d4:	464b      	mov	r3, r9
 80030d6:	1891      	adds	r1, r2, r2
 80030d8:	6239      	str	r1, [r7, #32]
 80030da:	415b      	adcs	r3, r3
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030e2:	4641      	mov	r1, r8
 80030e4:	1854      	adds	r4, r2, r1
 80030e6:	4649      	mov	r1, r9
 80030e8:	eb43 0501 	adc.w	r5, r3, r1
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	00eb      	lsls	r3, r5, #3
 80030f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fa:	00e2      	lsls	r2, r4, #3
 80030fc:	4614      	mov	r4, r2
 80030fe:	461d      	mov	r5, r3
 8003100:	4643      	mov	r3, r8
 8003102:	18e3      	adds	r3, r4, r3
 8003104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003108:	464b      	mov	r3, r9
 800310a:	eb45 0303 	adc.w	r3, r5, r3
 800310e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800311e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800312e:	4629      	mov	r1, r5
 8003130:	008b      	lsls	r3, r1, #2
 8003132:	4621      	mov	r1, r4
 8003134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003138:	4621      	mov	r1, r4
 800313a:	008a      	lsls	r2, r1, #2
 800313c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003140:	f7fd f860 	bl	8000204 <__aeabi_uldivmod>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4b60      	ldr	r3, [pc, #384]	@ (80032cc <UART_SetConfig+0x4e4>)
 800314a:	fba3 2302 	umull	r2, r3, r3, r2
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	011c      	lsls	r4, r3, #4
 8003152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003156:	2200      	movs	r2, #0
 8003158:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800315c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003160:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003164:	4642      	mov	r2, r8
 8003166:	464b      	mov	r3, r9
 8003168:	1891      	adds	r1, r2, r2
 800316a:	61b9      	str	r1, [r7, #24]
 800316c:	415b      	adcs	r3, r3
 800316e:	61fb      	str	r3, [r7, #28]
 8003170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003174:	4641      	mov	r1, r8
 8003176:	1851      	adds	r1, r2, r1
 8003178:	6139      	str	r1, [r7, #16]
 800317a:	4649      	mov	r1, r9
 800317c:	414b      	adcs	r3, r1
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800318c:	4659      	mov	r1, fp
 800318e:	00cb      	lsls	r3, r1, #3
 8003190:	4651      	mov	r1, sl
 8003192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003196:	4651      	mov	r1, sl
 8003198:	00ca      	lsls	r2, r1, #3
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	4642      	mov	r2, r8
 80031a2:	189b      	adds	r3, r3, r2
 80031a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031a8:	464b      	mov	r3, r9
 80031aa:	460a      	mov	r2, r1
 80031ac:	eb42 0303 	adc.w	r3, r2, r3
 80031b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031cc:	4649      	mov	r1, r9
 80031ce:	008b      	lsls	r3, r1, #2
 80031d0:	4641      	mov	r1, r8
 80031d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031d6:	4641      	mov	r1, r8
 80031d8:	008a      	lsls	r2, r1, #2
 80031da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031de:	f7fd f811 	bl	8000204 <__aeabi_uldivmod>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4611      	mov	r1, r2
 80031e8:	4b38      	ldr	r3, [pc, #224]	@ (80032cc <UART_SetConfig+0x4e4>)
 80031ea:	fba3 2301 	umull	r2, r3, r3, r1
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	2264      	movs	r2, #100	@ 0x64
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	1acb      	subs	r3, r1, r3
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	3332      	adds	r3, #50	@ 0x32
 80031fc:	4a33      	ldr	r2, [pc, #204]	@ (80032cc <UART_SetConfig+0x4e4>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003208:	441c      	add	r4, r3
 800320a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800320e:	2200      	movs	r2, #0
 8003210:	673b      	str	r3, [r7, #112]	@ 0x70
 8003212:	677a      	str	r2, [r7, #116]	@ 0x74
 8003214:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003218:	4642      	mov	r2, r8
 800321a:	464b      	mov	r3, r9
 800321c:	1891      	adds	r1, r2, r2
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	415b      	adcs	r3, r3
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003228:	4641      	mov	r1, r8
 800322a:	1851      	adds	r1, r2, r1
 800322c:	6039      	str	r1, [r7, #0]
 800322e:	4649      	mov	r1, r9
 8003230:	414b      	adcs	r3, r1
 8003232:	607b      	str	r3, [r7, #4]
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003240:	4659      	mov	r1, fp
 8003242:	00cb      	lsls	r3, r1, #3
 8003244:	4651      	mov	r1, sl
 8003246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800324a:	4651      	mov	r1, sl
 800324c:	00ca      	lsls	r2, r1, #3
 800324e:	4610      	mov	r0, r2
 8003250:	4619      	mov	r1, r3
 8003252:	4603      	mov	r3, r0
 8003254:	4642      	mov	r2, r8
 8003256:	189b      	adds	r3, r3, r2
 8003258:	66bb      	str	r3, [r7, #104]	@ 0x68
 800325a:	464b      	mov	r3, r9
 800325c:	460a      	mov	r2, r1
 800325e:	eb42 0303 	adc.w	r3, r2, r3
 8003262:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	663b      	str	r3, [r7, #96]	@ 0x60
 800326e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800327c:	4649      	mov	r1, r9
 800327e:	008b      	lsls	r3, r1, #2
 8003280:	4641      	mov	r1, r8
 8003282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003286:	4641      	mov	r1, r8
 8003288:	008a      	lsls	r2, r1, #2
 800328a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800328e:	f7fc ffb9 	bl	8000204 <__aeabi_uldivmod>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <UART_SetConfig+0x4e4>)
 8003298:	fba3 1302 	umull	r1, r3, r3, r2
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	2164      	movs	r1, #100	@ 0x64
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	3332      	adds	r3, #50	@ 0x32
 80032aa:	4a08      	ldr	r2, [pc, #32]	@ (80032cc <UART_SetConfig+0x4e4>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	f003 020f 	and.w	r2, r3, #15
 80032b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4422      	add	r2, r4
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	bf00      	nop
 80032c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032c6:	46bd      	mov	sp, r7
 80032c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032cc:	51eb851f 	.word	0x51eb851f

080032d0 <memset>:
 80032d0:	4402      	add	r2, r0
 80032d2:	4603      	mov	r3, r0
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d100      	bne.n	80032da <memset+0xa>
 80032d8:	4770      	bx	lr
 80032da:	f803 1b01 	strb.w	r1, [r3], #1
 80032de:	e7f9      	b.n	80032d4 <memset+0x4>

080032e0 <__libc_init_array>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	4d0d      	ldr	r5, [pc, #52]	@ (8003318 <__libc_init_array+0x38>)
 80032e4:	4c0d      	ldr	r4, [pc, #52]	@ (800331c <__libc_init_array+0x3c>)
 80032e6:	1b64      	subs	r4, r4, r5
 80032e8:	10a4      	asrs	r4, r4, #2
 80032ea:	2600      	movs	r6, #0
 80032ec:	42a6      	cmp	r6, r4
 80032ee:	d109      	bne.n	8003304 <__libc_init_array+0x24>
 80032f0:	4d0b      	ldr	r5, [pc, #44]	@ (8003320 <__libc_init_array+0x40>)
 80032f2:	4c0c      	ldr	r4, [pc, #48]	@ (8003324 <__libc_init_array+0x44>)
 80032f4:	f000 f818 	bl	8003328 <_init>
 80032f8:	1b64      	subs	r4, r4, r5
 80032fa:	10a4      	asrs	r4, r4, #2
 80032fc:	2600      	movs	r6, #0
 80032fe:	42a6      	cmp	r6, r4
 8003300:	d105      	bne.n	800330e <__libc_init_array+0x2e>
 8003302:	bd70      	pop	{r4, r5, r6, pc}
 8003304:	f855 3b04 	ldr.w	r3, [r5], #4
 8003308:	4798      	blx	r3
 800330a:	3601      	adds	r6, #1
 800330c:	e7ee      	b.n	80032ec <__libc_init_array+0xc>
 800330e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003312:	4798      	blx	r3
 8003314:	3601      	adds	r6, #1
 8003316:	e7f2      	b.n	80032fe <__libc_init_array+0x1e>
 8003318:	08003360 	.word	0x08003360
 800331c:	08003360 	.word	0x08003360
 8003320:	08003360 	.word	0x08003360
 8003324:	08003364 	.word	0x08003364

08003328 <_init>:
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332a:	bf00      	nop
 800332c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332e:	bc08      	pop	{r3}
 8003330:	469e      	mov	lr, r3
 8003332:	4770      	bx	lr

08003334 <_fini>:
 8003334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003336:	bf00      	nop
 8003338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333a:	bc08      	pop	{r3}
 800333c:	469e      	mov	lr, r3
 800333e:	4770      	bx	lr
